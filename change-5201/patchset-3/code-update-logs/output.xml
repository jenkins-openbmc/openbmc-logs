<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170714 18:45:20.769" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 18:45:21.619" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 18:45:21.619" starttime="20170714 18:45:21.619"></status>
</kw>
<msg timestamp="20170714 18:45:21.619" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 18:45:21.619" starttime="20170714 18:45:21.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:21.620" starttime="20170714 18:45:21.620"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:21.620" starttime="20170714 18:45:21.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:21.621" starttime="20170714 18:45:21.621"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 18:45:21.622" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 18:45:21.622" starttime="20170714 18:45:21.622"></status>
</kw>
<msg timestamp="20170714 18:45:21.622" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 18:45:21.622" starttime="20170714 18:45:21.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:21.624" starttime="20170714 18:45:21.624"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:21.624" starttime="20170714 18:45:21.623"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:21.625" starttime="20170714 18:45:21.623"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 18:45:21.625" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 18:45:23.320" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 18:45:23.320" starttime="20170714 18:45:21.625"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:23.320" starttime="20170714 18:45:21.617"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 18:45:23.321" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170714 18:45:23.398" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 18:45:23.399" level="INFO">${output} = 1493346005</msg>
<msg timestamp="20170714 18:45:23.399" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 18:45:23.399" starttime="20170714 18:45:23.321"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170714 18:45:23.399" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170714 18:45:23.400" starttime="20170714 18:45:23.399"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170714 18:45:23.400" level="INFO">${btime} = 1493346005</msg>
<status status="PASS" endtime="20170714 18:45:23.400" starttime="20170714 18:45:23.400"></status>
</kw>
<msg timestamp="20170714 18:45:23.400" level="INFO">${cur_btime} = 1493346005</msg>
<status status="PASS" endtime="20170714 18:45:23.401" starttime="20170714 18:45:21.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170714 18:45:23.402" level="INFO">${BOOT_TIME} = 1493346005</msg>
<status status="PASS" endtime="20170714 18:45:23.402" starttime="20170714 18:45:23.402"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:23.402" starttime="20170714 18:45:23.401"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:23.402" starttime="20170714 18:45:21.616"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:23.403" starttime="20170714 18:45:23.403"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:23.404" starttime="20170714 18:45:23.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:23.404" starttime="20170714 18:45:23.404"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:23.405" starttime="20170714 18:45:21.616"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 18:45:23.407" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 18:45:23.407" starttime="20170714 18:45:23.407"></status>
</kw>
<msg timestamp="20170714 18:45:23.407" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 18:45:23.407" starttime="20170714 18:45:23.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:23.409" starttime="20170714 18:45:23.408"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:23.409" starttime="20170714 18:45:23.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:23.409" starttime="20170714 18:45:23.409"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 18:45:23.410" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 18:45:23.410" starttime="20170714 18:45:23.410"></status>
</kw>
<msg timestamp="20170714 18:45:23.411" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 18:45:23.411" starttime="20170714 18:45:23.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:23.412" starttime="20170714 18:45:23.412"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:23.412" starttime="20170714 18:45:23.412"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:23.412" starttime="20170714 18:45:23.411"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 18:45:23.413" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 18:45:25.122" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 18:45:25.122" starttime="20170714 18:45:23.413"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:25.122" starttime="20170714 18:45:23.405"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170714 18:45:25.123" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170714 18:45:25.201" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 18:45:25.201" level="INFO">${output} = </msg>
<msg timestamp="20170714 18:45:25.201" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/98da6a547f8141998b98e23f5894fd04.</msg>
<msg timestamp="20170714 18:45:25.201" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170714 18:45:25.201" starttime="20170714 18:45:25.123"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:25.202" starttime="20170714 18:45:25.201"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:25.202" starttime="20170714 18:45:23.405"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170714 18:45:25.204" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170714 18:45:25.204" starttime="20170714 18:45:25.204"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:45:25.205" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170714 18:45:25.205" starttime="20170714 18:45:25.205"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:45:25.208" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:45:25.209" starttime="20170714 18:45:25.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:45:25.210" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:45:25.210" starttime="20170714 18:45:25.209"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:45:25.210" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:45:25.210" starttime="20170714 18:45:25.210"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:45:25.211" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:45:25.211" starttime="20170714 18:45:25.211"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:45:25.419" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:45:25.419" starttime="20170714 18:45:25.212"></status>
</kw>
<msg timestamp="20170714 18:45:25.419" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:45:25.419" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:45:25.419" starttime="20170714 18:45:25.211"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:45:25.420" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:45:25.420" starttime="20170714 18:45:25.419"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:45:25.420" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:45:25.421" starttime="20170714 18:45:25.420"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:25.421" starttime="20170714 18:45:25.207"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:25.421" starttime="20170714 18:45:25.207"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:25.421" starttime="20170714 18:45:25.206"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:45:25.421" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170714 18:45:25.421" starttime="20170714 18:45:25.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:45:25.422" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:45:25.422" starttime="20170714 18:45:25.422"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:25.423" starttime="20170714 18:45:25.422"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 18:45:25.424" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Ty...</msg>
<status status="PASS" endtime="20170714 18:45:25.424" starttime="20170714 18:45:25.424"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 18:45:25.425" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170714 18:45:25.426" starttime="20170714 18:45:25.425"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:25.426" starttime="20170714 18:45:25.424"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:25.426" starttime="20170714 18:45:25.423"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:45:25.636" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170714 18:45:25.636" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:45:25.636" starttime="20170714 18:45:25.426"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 18:45:25.637" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 18:45:25.637" starttime="20170714 18:45:25.637"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 18:45:25.638" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 18:45:25.638" starttime="20170714 18:45:25.638"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:25.638" starttime="20170714 18:45:25.637"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:25.638" starttime="20170714 18:45:25.636"></status>
</kw>
<msg timestamp="20170714 18:45:25.639" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:45:25.639" starttime="20170714 18:45:25.206"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:45:25.640" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:45:25.640" starttime="20170714 18:45:25.639"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170714 18:45:25.641" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 18:45:25.641" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 18:45:25.641" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170714 18:45:25.641" starttime="20170714 18:45:25.640"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:25.641" starttime="20170714 18:45:25.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:25.642" starttime="20170714 18:45:25.641"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:45:25.646" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:45:25.647" starttime="20170714 18:45:25.646"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:45:25.647" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:45:25.648" starttime="20170714 18:45:25.647"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:45:25.648" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:45:25.648" starttime="20170714 18:45:25.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:45:25.649" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:45:25.649" starttime="20170714 18:45:25.648"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:45:26.161" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:45:26.162" starttime="20170714 18:45:25.650"></status>
</kw>
<msg timestamp="20170714 18:45:26.162" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:45:26.162" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:45:26.162" starttime="20170714 18:45:25.649"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:45:26.162" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:45:26.163" starttime="20170714 18:45:26.162"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:45:26.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:45:26.163" starttime="20170714 18:45:26.163"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:26.163" starttime="20170714 18:45:25.645"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:26.163" starttime="20170714 18:45:25.645"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:26.164" starttime="20170714 18:45:25.644"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:45:26.164" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170714 18:45:26.164" starttime="20170714 18:45:26.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:26.165" starttime="20170714 18:45:26.164"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:45:26.319" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170714 18:45:26.320" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:45:26.320" starttime="20170714 18:45:26.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:26.320" starttime="20170714 18:45:26.320"></status>
</kw>
<msg timestamp="20170714 18:45:26.320" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:45:26.321" starttime="20170714 18:45:25.644"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:45:26.321" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:45:26.321" starttime="20170714 18:45:26.321"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 18:45:26.322" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 18:45:26.322" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 18:45:26.322" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170714 18:45:26.322" starttime="20170714 18:45:26.322"></status>
</kw>
<msg timestamp="20170714 18:45:26.322" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170714 18:45:26.322" starttime="20170714 18:45:25.643"></status>
</kw>
<msg timestamp="20170714 18:45:26.323" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170714 18:45:26.323" starttime="20170714 18:45:25.643"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:26.323" starttime="20170714 18:45:26.323"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:26.323" starttime="20170714 18:45:25.642"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:26.323" starttime="20170714 18:45:25.642"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:26.323" starttime="20170714 18:45:25.203"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:26.324" starttime="20170714 18:45:25.202"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:26.324" starttime="20170714 18:45:25.202"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170714 18:45:26.325" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170714 18:45:26.325" starttime="20170714 18:45:26.324"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:45:26.326" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170714 18:45:26.326" starttime="20170714 18:45:26.326"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:45:26.329" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:45:26.329" starttime="20170714 18:45:26.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:45:26.330" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:45:26.330" starttime="20170714 18:45:26.330"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:45:26.331" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:45:26.331" starttime="20170714 18:45:26.330"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:45:26.331" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:45:26.331" starttime="20170714 18:45:26.331"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:45:26.735" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:45:26.735" starttime="20170714 18:45:26.332"></status>
</kw>
<msg timestamp="20170714 18:45:26.735" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:45:26.735" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:45:26.735" starttime="20170714 18:45:26.332"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:45:26.736" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:45:26.736" starttime="20170714 18:45:26.736"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:45:26.737" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:45:26.737" starttime="20170714 18:45:26.736"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:26.737" starttime="20170714 18:45:26.328"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:26.737" starttime="20170714 18:45:26.327"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:26.737" starttime="20170714 18:45:26.327"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:45:26.738" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170714 18:45:26.738" starttime="20170714 18:45:26.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:45:26.738" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:45:26.738" starttime="20170714 18:45:26.738"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:26.739" starttime="20170714 18:45:26.739"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 18:45:26.741" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170714 18:45:26.741" starttime="20170714 18:45:26.740"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 18:45:26.742" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170714 18:45:26.742" starttime="20170714 18:45:26.741"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:26.742" starttime="20170714 18:45:26.741"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:26.742" starttime="20170714 18:45:26.739"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:45:27.011" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170714 18:45:27.011" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:45:27.011" starttime="20170714 18:45:26.743"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 18:45:27.013" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 18:45:27.013" starttime="20170714 18:45:27.012"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 18:45:27.014" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 18:45:27.014" starttime="20170714 18:45:27.014"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:27.014" starttime="20170714 18:45:27.013"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:27.014" starttime="20170714 18:45:27.012"></status>
</kw>
<msg timestamp="20170714 18:45:27.015" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:45:27.015" starttime="20170714 18:45:26.326"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:45:27.016" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:45:27.016" starttime="20170714 18:45:27.015"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170714 18:45:27.016" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 18:45:27.016" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 18:45:27.016" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170714 18:45:27.016" starttime="20170714 18:45:27.016"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:27.017" starttime="20170714 18:45:26.325"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:45:27.021" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:45:27.021" starttime="20170714 18:45:27.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:45:27.022" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:45:27.022" starttime="20170714 18:45:27.021"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:45:27.023" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:45:27.023" starttime="20170714 18:45:27.022"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:45:27.023" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:45:27.023" starttime="20170714 18:45:27.023"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:45:27.226" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:45:27.226" starttime="20170714 18:45:27.024"></status>
</kw>
<msg timestamp="20170714 18:45:27.226" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:45:27.226" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:45:27.226" starttime="20170714 18:45:27.024"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:45:27.227" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:45:27.227" starttime="20170714 18:45:27.226"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:45:27.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:45:27.227" starttime="20170714 18:45:27.227"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:27.228" starttime="20170714 18:45:27.020"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:27.228" starttime="20170714 18:45:27.019"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:27.228" starttime="20170714 18:45:27.018"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:45:27.228" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170714 18:45:27.228" starttime="20170714 18:45:27.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:27.229" starttime="20170714 18:45:27.229"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:45:27.311" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170714 18:45:27.311" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:45:27.311" starttime="20170714 18:45:27.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:27.312" starttime="20170714 18:45:27.312"></status>
</kw>
<msg timestamp="20170714 18:45:27.312" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:45:27.312" starttime="20170714 18:45:27.017"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:45:27.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:45:27.313" starttime="20170714 18:45:27.313"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 18:45:27.314" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 18:45:27.314" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 18:45:27.314" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170714 18:45:27.314" starttime="20170714 18:45:27.313"></status>
</kw>
<msg timestamp="20170714 18:45:27.314" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170714 18:45:27.314" starttime="20170714 18:45:27.017"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:27.315" starttime="20170714 18:45:27.314"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:27.315" starttime="20170714 18:45:26.324"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:45:27.316" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170714 18:45:27.316" starttime="20170714 18:45:27.316"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:45:27.319" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:45:27.319" starttime="20170714 18:45:27.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:45:27.320" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:45:27.320" starttime="20170714 18:45:27.320"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:45:27.321" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:45:27.321" starttime="20170714 18:45:27.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:45:27.321" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:45:27.321" starttime="20170714 18:45:27.321"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:45:27.515" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:45:27.515" starttime="20170714 18:45:27.322"></status>
</kw>
<msg timestamp="20170714 18:45:27.515" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:45:27.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:45:27.515" starttime="20170714 18:45:27.322"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:45:27.516" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:45:27.516" starttime="20170714 18:45:27.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:45:27.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:45:27.517" starttime="20170714 18:45:27.517"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:27.517" starttime="20170714 18:45:27.318"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:27.517" starttime="20170714 18:45:27.317"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:27.517" starttime="20170714 18:45:27.317"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:45:27.518" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170714 18:45:27.518" starttime="20170714 18:45:27.518"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:45:27.519" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:45:27.519" starttime="20170714 18:45:27.518"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:27.519" starttime="20170714 18:45:27.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:27.520" starttime="20170714 18:45:27.520"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:45:28.257" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170714 18:45:28.258" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:45:28.258" starttime="20170714 18:45:27.520"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:28.258" starttime="20170714 18:45:28.258"></status>
</kw>
<msg timestamp="20170714 18:45:28.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:45:28.259" starttime="20170714 18:45:27.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:45:28.259" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:45:28.259" starttime="20170714 18:45:28.259"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170714 18:45:38.260" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170714 18:45:38.260" starttime="20170714 18:45:28.259"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:38.261" starttime="20170714 18:45:27.315"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170714 18:45:38.266" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170714 18:45:38.266" starttime="20170714 18:45:38.266"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170714 18:45:38.274" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170714 18:45:41.278" level="INFO">${RC} = 0</msg>
<msg timestamp="20170714 18:45:41.278" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=5.14 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.542 ms
64 bytes from 9.41.166.169...</msg>
<status status="PASS" endtime="20170714 18:45:41.279" starttime="20170714 18:45:38.266"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170714 18:45:41.286" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=5.14 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.542 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.546 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=4.50 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.542/2.684/5.149/2.152 ms</msg>
<status status="PASS" endtime="20170714 18:45:41.287" starttime="20170714 18:45:41.282"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:41.287" starttime="20170714 18:45:41.287"></status>
</kw>
<status status="PASS" endtime="20170714 18:45:41.287" starttime="20170714 18:45:38.263"></status>
</kw>
<msg timestamp="20170714 18:45:41.288" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170714 18:45:41.288" starttime="20170714 18:45:38.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170714 18:45:41.290" starttime="20170714 18:45:41.289"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:45:41.295" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:45:41.299" starttime="20170714 18:45:41.294"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:45:41.299" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:45:41.299" starttime="20170714 18:45:41.299"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:45:41.300" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:45:41.300" starttime="20170714 18:45:41.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:45:41.301" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:45:41.301" starttime="20170714 18:45:41.300"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:45:41.589" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="FAIL" endtime="20170714 18:45:41.589" starttime="20170714 18:45:41.302"></status>
</kw>
<msg timestamp="20170714 18:45:41.590" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170714 18:45:41.590" level="INFO">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="PASS" endtime="20170714 18:45:41.590" starttime="20170714 18:45:41.301"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:45:41.590" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170714 18:45:41.591" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170714 18:45:41.591" starttime="20170714 18:45:41.590"></status>
</kw>
<status status="FAIL" endtime="20170714 18:45:41.591" starttime="20170714 18:45:41.293"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:46:01.593" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:46:01.593" starttime="20170714 18:46:01.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:46:01.594" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:46:01.594" starttime="20170714 18:46:01.594"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:46:01.595" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:46:01.595" starttime="20170714 18:46:01.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:46:01.595" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:46:01.595" starttime="20170714 18:46:01.595"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:46:19.633" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff87a79c10&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170714 18:46:22.837" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff87a79e10&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170714 18:46:26.038" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff848c0b10&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170714 18:46:28.637" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff848c9350&gt;: Failed to establish a new connection: [Errno 113] No route to host',))</msg>
<status status="FAIL" endtime="20170714 18:46:28.637" starttime="20170714 18:46:01.596"></status>
</kw>
<msg timestamp="20170714 18:46:28.638" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170714 18:46:28.638" level="INFO">${resp} = ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff84...</msg>
<status status="PASS" endtime="20170714 18:46:28.638" starttime="20170714 18:46:01.596"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:46:28.639" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170714 18:46:28.639" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff848c9350&gt;: Failed to establish a new connection: [Errno 113] No route to host',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170714 18:46:28.639" starttime="20170714 18:46:28.638"></status>
</kw>
<status status="FAIL" endtime="20170714 18:46:28.639" starttime="20170714 18:46:01.591"></status>
</kw>
<msg timestamp="20170714 18:46:28.640" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff848c9350&gt;: Failed to establish a new connection: [Errno 113] No route to host',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170714 18:46:28.640" starttime="20170714 18:45:41.292"></status>
</kw>
<status status="FAIL" endtime="20170714 18:46:28.640" starttime="20170714 18:45:41.292"></status>
</kw>
<msg timestamp="20170714 18:46:28.640" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170714 18:46:28.640" starttime="20170714 18:45:41.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170714 18:46:28.641" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170714 18:46:28.641" starttime="20170714 18:46:28.641"></status>
</kw>
<status status="FAIL" endtime="20170714 18:46:28.642" starttime="20170714 18:46:28.641"></status>
</kw>
<status status="FAIL" endtime="20170714 18:46:28.642" starttime="20170714 18:45:38.262"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170714 18:46:38.644" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170714 18:46:38.644" starttime="20170714 18:46:38.644"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170714 18:46:38.648" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170714 18:46:44.666" level="INFO">${RC} = 1</msg>
<msg timestamp="20170714 18:46:44.667" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
From 9.41.165.94 icmp_seq=1 Destination Host Unreachable
From 9.41.165.94 icmp_seq=2 Destination Host Unreachable
From 9.41.165.94 icmp_seq=3 Des...</msg>
<status status="PASS" endtime="20170714 18:46:44.667" starttime="20170714 18:46:38.645"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170714 18:46:44.671" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
From 9.41.165.94 icmp_seq=1 Destination Host Unreachable
From 9.41.165.94 icmp_seq=2 Destination Host Unreachable
From 9.41.165.94 icmp_seq=3 Destination Host Unreachable
From 9.41.165.94 icmp_seq=4 Destination Host Unreachable

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, +4 errors, 100% packet loss, time 3016ms
pipe 3</msg>
<status status="PASS" endtime="20170714 18:46:44.671" starttime="20170714 18:46:44.670"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170714 18:46:44.672" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170714 18:46:44.672" starttime="20170714 18:46:44.671"></status>
</kw>
<status status="FAIL" endtime="20170714 18:46:44.672" starttime="20170714 18:46:38.643"></status>
</kw>
<msg timestamp="20170714 18:46:44.673" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170714 18:46:44.673" starttime="20170714 18:46:38.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170714 18:46:44.674" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170714 18:46:44.674" starttime="20170714 18:46:44.674"></status>
</kw>
<status status="FAIL" endtime="20170714 18:46:44.674" starttime="20170714 18:46:44.673"></status>
</kw>
<status status="FAIL" endtime="20170714 18:46:44.674" starttime="20170714 18:46:38.642"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170714 18:46:54.677" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170714 18:46:54.677" starttime="20170714 18:46:54.677"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170714 18:46:54.681" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170714 18:46:57.688" level="INFO">${RC} = 0</msg>
<msg timestamp="20170714 18:46:57.688" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=2.62 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=12.4 ms
64 bytes from 9.41.166.169:...</msg>
<status status="PASS" endtime="20170714 18:46:57.688" starttime="20170714 18:46:54.678"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170714 18:46:57.692" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=2.62 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=12.4 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.537 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=1.38 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.537/4.250/12.455/4.795 ms</msg>
<status status="PASS" endtime="20170714 18:46:57.692" starttime="20170714 18:46:57.691"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:46:57.693" starttime="20170714 18:46:57.693"></status>
</kw>
<status status="PASS" endtime="20170714 18:46:57.693" starttime="20170714 18:46:54.676"></status>
</kw>
<msg timestamp="20170714 18:46:57.693" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170714 18:46:57.694" starttime="20170714 18:46:54.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170714 18:46:57.695" starttime="20170714 18:46:57.694"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:46:57.698" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:46:57.700" starttime="20170714 18:46:57.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:46:57.700" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:46:57.700" starttime="20170714 18:46:57.700"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:46:57.701" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:46:57.701" starttime="20170714 18:46:57.701"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:46:57.702" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:46:57.702" starttime="20170714 18:46:57.701"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:47:17.711" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170714 18:47:17.711" starttime="20170714 18:46:57.702"></status>
</kw>
<msg timestamp="20170714 18:47:17.712" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170714 18:47:17.712" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170714 18:47:17.712" starttime="20170714 18:46:57.702"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:47:17.713" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170714 18:47:17.713" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170714 18:47:17.713" starttime="20170714 18:47:17.712"></status>
</kw>
<status status="FAIL" endtime="20170714 18:47:17.713" starttime="20170714 18:46:57.697"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:47:37.715" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:47:37.716" starttime="20170714 18:47:37.715"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:47:37.717" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:47:37.717" starttime="20170714 18:47:37.717"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:47:37.718" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:47:37.718" starttime="20170714 18:47:37.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:47:37.718" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:47:37.718" starttime="20170714 18:47:37.718"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:47:50.733" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:47:50.733" starttime="20170714 18:47:37.719"></status>
</kw>
<msg timestamp="20170714 18:47:50.733" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:47:50.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:50.733" starttime="20170714 18:47:37.719"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:47:50.734" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:50.734" starttime="20170714 18:47:50.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:47:50.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:50.735" starttime="20170714 18:47:50.735"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:50.735" starttime="20170714 18:47:37.714"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:50.735" starttime="20170714 18:46:57.696"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:50.735" starttime="20170714 18:46:57.695"></status>
</kw>
<msg timestamp="20170714 18:47:50.735" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170714 18:47:50.735" starttime="20170714 18:46:57.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:50.736" starttime="20170714 18:47:50.736"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 18:47:50.738" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 18:47:50.738" starttime="20170714 18:47:50.737"></status>
</kw>
<msg timestamp="20170714 18:47:50.738" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 18:47:50.738" starttime="20170714 18:47:50.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:50.739" starttime="20170714 18:47:50.739"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:50.739" starttime="20170714 18:47:50.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:50.740" starttime="20170714 18:47:50.740"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 18:47:50.741" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 18:47:50.741" starttime="20170714 18:47:50.741"></status>
</kw>
<msg timestamp="20170714 18:47:50.741" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 18:47:50.741" starttime="20170714 18:47:50.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:50.744" starttime="20170714 18:47:50.743"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:50.744" starttime="20170714 18:47:50.742"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:50.744" starttime="20170714 18:47:50.742"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 18:47:50.744" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 18:47:52.690" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 18:47:52.690" starttime="20170714 18:47:50.744"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:52.690" starttime="20170714 18:47:50.736"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 18:47:52.691" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170714 18:47:52.761" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 18:47:52.761" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170714 18:47:52.761" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 18:47:52.761" starttime="20170714 18:47:52.691"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170714 18:47:52.762" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170714 18:47:52.762" starttime="20170714 18:47:52.762"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:52.762" starttime="20170714 18:46:54.675"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:52.762" starttime="20170714 18:45:38.262"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:52.763" starttime="20170714 18:45:38.261"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 18:47:52.765" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 18:47:52.765" starttime="20170714 18:47:52.765"></status>
</kw>
<msg timestamp="20170714 18:47:52.766" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 18:47:52.766" starttime="20170714 18:47:52.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:52.768" starttime="20170714 18:47:52.766"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:52.768" starttime="20170714 18:47:52.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:52.770" starttime="20170714 18:47:52.769"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 18:47:52.772" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 18:47:52.772" starttime="20170714 18:47:52.772"></status>
</kw>
<msg timestamp="20170714 18:47:52.772" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 18:47:52.772" starttime="20170714 18:47:52.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:52.774" starttime="20170714 18:47:52.774"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:52.774" starttime="20170714 18:47:52.773"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:52.774" starttime="20170714 18:47:52.772"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 18:47:52.775" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 18:47:54.453" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 18:47:54.453" starttime="20170714 18:47:52.774"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:54.453" starttime="20170714 18:47:52.764"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 18:47:54.454" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170714 18:47:54.531" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 18:47:54.531" level="INFO">${output} = 1493346000</msg>
<msg timestamp="20170714 18:47:54.531" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 18:47:54.531" starttime="20170714 18:47:54.454"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170714 18:47:54.532" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170714 18:47:54.532" starttime="20170714 18:47:54.532"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170714 18:47:54.533" level="INFO">${btime} = 1493346000</msg>
<status status="PASS" endtime="20170714 18:47:54.533" starttime="20170714 18:47:54.533"></status>
</kw>
<msg timestamp="20170714 18:47:54.533" level="INFO">${cur_btime} = 1493346000</msg>
<status status="PASS" endtime="20170714 18:47:54.533" starttime="20170714 18:47:52.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:54.534" starttime="20170714 18:47:54.533"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:54.534" starttime="20170714 18:47:52.763"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:54.535" starttime="20170714 18:47:54.535"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:54.536" starttime="20170714 18:47:54.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:54.536" starttime="20170714 18:47:54.536"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:54.536" starttime="20170714 18:47:52.763"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:47:54.540" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:47:54.541" starttime="20170714 18:47:54.539"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:47:54.541" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:47:54.541" starttime="20170714 18:47:54.541"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:47:54.542" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:47:54.542" starttime="20170714 18:47:54.542"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:47:54.543" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:47:54.543" starttime="20170714 18:47:54.542"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:47:54.720" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:47:54.720" starttime="20170714 18:47:54.544"></status>
</kw>
<msg timestamp="20170714 18:47:54.720" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:47:54.720" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:54.720" starttime="20170714 18:47:54.543"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:47:54.721" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:54.721" starttime="20170714 18:47:54.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:47:54.721" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:54.721" starttime="20170714 18:47:54.721"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:54.722" starttime="20170714 18:47:54.539"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:54.722" starttime="20170714 18:47:54.538"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:54.722" starttime="20170714 18:47:54.538"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:47:54.722" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170714 18:47:54.722" starttime="20170714 18:47:54.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:54.723" starttime="20170714 18:47:54.723"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:47:54.789" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170714 18:47:54.789" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:54.789" starttime="20170714 18:47:54.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:54.790" starttime="20170714 18:47:54.790"></status>
</kw>
<msg timestamp="20170714 18:47:54.790" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:54.790" starttime="20170714 18:47:54.537"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:47:54.791" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170714 18:47:54.791" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170714 18:47:54.791" starttime="20170714 18:47:54.791"></status>
</kw>
<status status="FAIL" endtime="20170714 18:47:54.791" starttime="20170714 18:47:54.537"></status>
</kw>
<msg timestamp="20170714 18:47:54.792" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 18:47:54.792" starttime="20170714 18:47:54.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170714 18:47:54.793" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170714 18:47:54.793" starttime="20170714 18:47:54.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:47:54.799" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:47:54.799" starttime="20170714 18:47:54.798"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:47:54.800" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:47:54.800" starttime="20170714 18:47:54.800"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:47:54.801" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:47:54.801" starttime="20170714 18:47:54.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:47:54.801" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:47:54.801" starttime="20170714 18:47:54.801"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:47:54.998" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:47:54.998" starttime="20170714 18:47:54.802"></status>
</kw>
<msg timestamp="20170714 18:47:54.998" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:47:54.998" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:54.998" starttime="20170714 18:47:54.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:47:54.999" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:54.999" starttime="20170714 18:47:54.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:47:55.000" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.000" starttime="20170714 18:47:54.999"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.000" starttime="20170714 18:47:54.798"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.000" starttime="20170714 18:47:54.797"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.000" starttime="20170714 18:47:54.797"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:47:55.001" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170714 18:47:55.001" starttime="20170714 18:47:55.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:55.002" starttime="20170714 18:47:55.001"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:47:55.086" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170714 18:47:55.086" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.086" starttime="20170714 18:47:55.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:55.087" starttime="20170714 18:47:55.087"></status>
</kw>
<msg timestamp="20170714 18:47:55.087" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.087" starttime="20170714 18:47:54.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:47:55.088" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.088" starttime="20170714 18:47:55.088"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 18:47:55.089" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 18:47:55.089" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 18:47:55.089" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170714 18:47:55.089" starttime="20170714 18:47:55.088"></status>
</kw>
<msg timestamp="20170714 18:47:55.089" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170714 18:47:55.089" starttime="20170714 18:47:54.795"></status>
</kw>
<msg timestamp="20170714 18:47:55.090" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170714 18:47:55.090" starttime="20170714 18:47:54.795"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:55.090" starttime="20170714 18:47:55.090"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.090" starttime="20170714 18:47:54.795"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.090" starttime="20170714 18:47:54.794"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.090" starttime="20170714 18:47:54.793"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.091" starttime="20170714 18:47:54.792"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.091" starttime="20170714 18:47:54.792"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.091" starttime="20170714 18:45:21.616"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.091" starttime="20170714 18:45:21.615"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170714 18:47:55.099" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170714 18:47:55.099" starttime="20170714 18:47:55.098"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170714 18:47:55.099" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170714 18:47:55.099" starttime="20170714 18:47:55.099"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:47:55.101" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170714 18:47:55.101" starttime="20170714 18:47:55.100"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:47:55.104" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:47:55.104" starttime="20170714 18:47:55.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:47:55.105" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:47:55.105" starttime="20170714 18:47:55.105"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:47:55.105" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:47:55.106" starttime="20170714 18:47:55.105"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:47:55.106" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:47:55.106" starttime="20170714 18:47:55.106"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:47:55.292" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:47:55.292" starttime="20170714 18:47:55.107"></status>
</kw>
<msg timestamp="20170714 18:47:55.292" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:47:55.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.292" starttime="20170714 18:47:55.107"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:47:55.293" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.293" starttime="20170714 18:47:55.293"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:47:55.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.294" starttime="20170714 18:47:55.293"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.294" starttime="20170714 18:47:55.103"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.294" starttime="20170714 18:47:55.102"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.294" starttime="20170714 18:47:55.102"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:47:55.295" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170714 18:47:55.295" starttime="20170714 18:47:55.294"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:47:55.295" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:47:55.295" starttime="20170714 18:47:55.295"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:55.296" starttime="20170714 18:47:55.296"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 18:47:55.298" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170714 18:47:55.298" starttime="20170714 18:47:55.297"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 18:47:55.299" level="INFO">URI:https://9.41.166.169/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170714 18:47:55.299" starttime="20170714 18:47:55.298"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.299" starttime="20170714 18:47:55.298"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.299" starttime="20170714 18:47:55.296"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:47:55.553" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170714 18:47:55.553" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.553" starttime="20170714 18:47:55.299"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 18:47:55.554" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 18:47:55.554" starttime="20170714 18:47:55.554"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 18:47:55.555" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 18:47:55.555" starttime="20170714 18:47:55.555"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.556" starttime="20170714 18:47:55.554"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.556" starttime="20170714 18:47:55.553"></status>
</kw>
<msg timestamp="20170714 18:47:55.556" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.556" starttime="20170714 18:47:55.101"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:47:55.558" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.558" starttime="20170714 18:47:55.558"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170714 18:47:55.559" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 18:47:55.559" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 18:47:55.559" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170714 18:47:55.559" starttime="20170714 18:47:55.559"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.559" starttime="20170714 18:47:55.100"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:47:55.563" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:47:55.563" starttime="20170714 18:47:55.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:47:55.564" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:47:55.564" starttime="20170714 18:47:55.564"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:47:55.565" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:47:55.565" starttime="20170714 18:47:55.564"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:47:55.566" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:47:55.566" starttime="20170714 18:47:55.565"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:47:55.745" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:47:55.745" starttime="20170714 18:47:55.567"></status>
</kw>
<msg timestamp="20170714 18:47:55.745" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:47:55.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.745" starttime="20170714 18:47:55.566"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:47:55.746" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.746" starttime="20170714 18:47:55.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:47:55.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.746" starttime="20170714 18:47:55.746"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.746" starttime="20170714 18:47:55.562"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.747" starttime="20170714 18:47:55.562"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.747" starttime="20170714 18:47:55.561"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:47:55.747" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170714 18:47:55.747" starttime="20170714 18:47:55.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:55.748" starttime="20170714 18:47:55.748"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:47:55.870" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170714 18:47:55.870" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.870" starttime="20170714 18:47:55.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:55.871" starttime="20170714 18:47:55.871"></status>
</kw>
<msg timestamp="20170714 18:47:55.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.871" starttime="20170714 18:47:55.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:47:55.872" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:55.872" starttime="20170714 18:47:55.872"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 18:47:55.873" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 18:47:55.873" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 18:47:55.873" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20170714 18:47:55.873" starttime="20170714 18:47:55.872"></status>
</kw>
<msg timestamp="20170714 18:47:55.873" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170714 18:47:55.873" starttime="20170714 18:47:55.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:55.874" starttime="20170714 18:47:55.873"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.874" starttime="20170714 18:47:55.098"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:55.874" starttime="20170714 18:47:55.091"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<doc>Copy BMC tar image to BMC.</doc>
<arguments>
<arg>/home/fspcibld/witherspoon-20170714183246.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:55.889" starttime="20170714 18:47:55.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:56.557" starttime="20170714 18:47:55.890"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:56.557" starttime="20170714 18:47:55.890"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:56.557" starttime="20170714 18:47:55.882"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 18:47:56.559" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 18:47:56.559" starttime="20170714 18:47:56.559"></status>
</kw>
<msg timestamp="20170714 18:47:56.559" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 18:47:56.559" starttime="20170714 18:47:56.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:56.561" starttime="20170714 18:47:56.560"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:56.561" starttime="20170714 18:47:56.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:56.561" starttime="20170714 18:47:56.561"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 18:47:56.562" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 18:47:56.563" starttime="20170714 18:47:56.562"></status>
</kw>
<msg timestamp="20170714 18:47:56.563" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 18:47:56.563" starttime="20170714 18:47:56.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:56.565" starttime="20170714 18:47:56.564"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:56.565" starttime="20170714 18:47:56.564"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:56.565" starttime="20170714 18:47:56.563"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 18:47:56.565" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 18:47:58.212" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 18:47:58.212" starttime="20170714 18:47:56.565"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:58.212" starttime="20170714 18:47:56.558"></status>
</kw>
<kw name="Loop SCP Retry" library="code_update_utils">
<doc>Try transferring the file 4 times.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${index} = 0">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable /tmp/flashimg">
<assign>
<var>${targ_file_path}=</var>
</assign>
<msg timestamp="20170714 18:47:58.232" level="FAIL">No keyword with name 'Set Variable /tmp/flashimg' found.</msg>
<status status="FAIL" endtime="20170714 18:47:58.232" starttime="20170714 18:47:58.232"></status>
</kw>
<status status="FAIL" endtime="20170714 18:47:58.233" starttime="20170714 18:47:58.213"></status>
</kw>
<status status="FAIL" endtime="20170714 18:47:58.233" starttime="20170714 18:47:58.213"></status>
</kw>
<status status="FAIL" endtime="20170714 18:47:58.233" starttime="20170714 18:47:58.213"></status>
</kw>
<status status="FAIL" endtime="20170714 18:47:58.233" starttime="20170714 18:47:58.213"></status>
</kw>
<status status="FAIL" endtime="20170714 18:47:58.233" starttime="20170714 18:47:55.881"></status>
</kw>
<msg timestamp="20170714 18:47:58.235" level="FAIL">No keyword with name 'Set Variable /tmp/flashimg' found.</msg>
<status status="FAIL" endtime="20170714 18:47:58.235" starttime="20170714 18:47:55.874"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:47:58.246" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:47:58.247" starttime="20170714 18:47:58.246"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:47:58.247" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:47:58.247" starttime="20170714 18:47:58.247"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:47:58.248" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:47:58.248" starttime="20170714 18:47:58.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:47:58.249" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:47:58.249" starttime="20170714 18:47:58.248"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:47:58.426" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:47:58.426" starttime="20170714 18:47:58.249"></status>
</kw>
<msg timestamp="20170714 18:47:58.426" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:47:58.426" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:58.426" starttime="20170714 18:47:58.249"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:47:58.427" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:58.427" starttime="20170714 18:47:58.427"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:47:58.428" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:58.428" starttime="20170714 18:47:58.428"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:58.428" starttime="20170714 18:47:58.245"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:58.428" starttime="20170714 18:47:58.245"></status>
</kw>
<status status="PASS" endtime="20170714 18:47:58.428" starttime="20170714 18:47:58.244"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:47:58.429" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170714 18:47:58.429" starttime="20170714 18:47:58.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:58.430" starttime="20170714 18:47:58.429"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:47:58.510" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170714 18:47:58.510" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:58.510" starttime="20170714 18:47:58.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:47:58.511" starttime="20170714 18:47:58.510"></status>
</kw>
<msg timestamp="20170714 18:47:58.511" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:47:58.511" starttime="20170714 18:47:58.244"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:47:58.511" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:47:58.512" starttime="20170714 18:47:58.511"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 18:47:58.512" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 18:47:58.512" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 18:47:58.512" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170714 18:47:58.512" starttime="20170714 18:47:58.512"></status>
</kw>
<msg timestamp="20170714 18:47:58.513" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170714 18:47:58.513" starttime="20170714 18:47:58.243"></status>
</kw>
<msg timestamp="20170714 18:47:58.513" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170714 18:47:58.513" starttime="20170714 18:47:58.243"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170714 18:47:58.514" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170714 18:47:58.514" starttime="20170714 18:47:58.514"></status>
</kw>
<msg timestamp="20170714 18:47:58.514" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 18:47:58.514" starttime="20170714 18:47:58.513"></status>
</kw>
<msg timestamp="20170714 18:47:58.514" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 18:47:58.515" starttime="20170714 18:47:58.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170714 18:47:58.526" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170714 18:47:58.526" starttime="20170714 18:47:58.525"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170714 18:47:58.531" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170714 18:48:01.535" level="INFO">${RC} = 0</msg>
<msg timestamp="20170714 18:48:01.535" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.759 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.623 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" endtime="20170714 18:48:01.535" starttime="20170714 18:47:58.526"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170714 18:48:01.539" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.759 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.623 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.595 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.637 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.595/0.653/0.759/0.067 ms</msg>
<status status="PASS" endtime="20170714 18:48:01.539" starttime="20170714 18:48:01.538"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:01.540" starttime="20170714 18:48:01.540"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.541" starttime="20170714 18:47:58.525"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170714 18:48:01.561" level="INFO">${cur_time} = 2017-07-14 18:48:01:560826</msg>
<status status="PASS" endtime="20170714 18:48:01.561" starttime="20170714 18:48:01.561"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170714 18:48:01.562" level="INFO">${cur_time} = 20170714184801560826</msg>
<status status="PASS" endtime="20170714 18:48:01.562" starttime="20170714 18:48:01.561"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.562" starttime="20170714 18:48:01.560"></status>
</kw>
<msg timestamp="20170714 18:48:01.566" level="INFO">${FFDC_TIME} = 20170714184801560826</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170714 18:48:01.568" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170714 18:48:01.568" starttime="20170714 18:48:01.567"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170714 18:48:01.569" level="INFO">${suite_name} = 20170714184801560826_UpdateBmc</msg>
<status status="PASS" endtime="20170714 18:48:01.569" starttime="20170714 18:48:01.568"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170714 18:48:01.569" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170714 18:48:01.569" starttime="20170714 18:48:01.569"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170714 18:48:01.570" level="INFO">${test_name} = 20170714184801560826_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170714 18:48:01.570" starttime="20170714 18:48:01.569"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.570" starttime="20170714 18:48:01.567"></status>
</kw>
<msg timestamp="20170714 18:48:01.574" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170714 18:48:01.581" level="INFO">${FFDC_PREFIX} = 20170714184801560826_</msg>
<msg timestamp="20170714 18:48:01.601" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170714 18:48:01.602" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:01.602" starttime="20170714 18:48:01.601"></status>
</kw>
<msg timestamp="20170714 18:48:01.607" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:01.617" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:01.617" starttime="20170714 18:48:01.617"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.617" starttime="20170714 18:48:01.616"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:01.619" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:01.619" starttime="20170714 18:48:01.618"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.619" starttime="20170714 18:48:01.618"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:01.620" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:01.620" starttime="20170714 18:48:01.620"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.620" starttime="20170714 18:48:01.619"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:01.621" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:01.621" starttime="20170714 18:48:01.621"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.621" starttime="20170714 18:48:01.620"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:01.623" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:01.623" starttime="20170714 18:48:01.622"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.623" starttime="20170714 18:48:01.622"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:01.624" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:01.624" starttime="20170714 18:48:01.624"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.625" starttime="20170714 18:48:01.623"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:01.626" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:01.626" starttime="20170714 18:48:01.625"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.626" starttime="20170714 18:48:01.625"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:01.627" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:01.627" starttime="20170714 18:48:01.627"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.627" starttime="20170714 18:48:01.626"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:01.628" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:01.629" starttime="20170714 18:48:01.628"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.629" starttime="20170714 18:48:01.628"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:01.630" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:01.630" starttime="20170714 18:48:01.630"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.630" starttime="20170714 18:48:01.629"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:01.631" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:01.632" starttime="20170714 18:48:01.631"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.632" starttime="20170714 18:48:01.631"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:01.633" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:01.633" starttime="20170714 18:48:01.632"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.633" starttime="20170714 18:48:01.632"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:01.634" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:01.634" starttime="20170714 18:48:01.634"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.634" starttime="20170714 18:48:01.633"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 18:48:01.637" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 18:48:01.637" starttime="20170714 18:48:01.637"></status>
</kw>
<msg timestamp="20170714 18:48:01.637" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 18:48:01.637" starttime="20170714 18:48:01.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:01.639" starttime="20170714 18:48:01.638"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.639" starttime="20170714 18:48:01.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:01.639" starttime="20170714 18:48:01.639"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 18:48:01.640" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 18:48:01.641" starttime="20170714 18:48:01.640"></status>
</kw>
<msg timestamp="20170714 18:48:01.641" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 18:48:01.641" starttime="20170714 18:48:01.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:01.643" starttime="20170714 18:48:01.643"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.643" starttime="20170714 18:48:01.642"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:01.644" starttime="20170714 18:48:01.641"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 18:48:01.644" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 18:48:03.323" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 18:48:03.323" starttime="20170714 18:48:01.644"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.323" starttime="20170714 18:48:01.635"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 18:48:03.324" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170714 18:48:03.402" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 18:48:03.402" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170714 18:48:03.402" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 18:48:03.402" starttime="20170714 18:48:03.324"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170714 18:48:03.403" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170714 18:48:03.403" starttime="20170714 18:48:03.403"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170714 18:48:03.403" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170714 18:48:03.404" starttime="20170714 18:48:03.403"></status>
</kw>
<msg timestamp="20170714 18:48:03.404" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170714 18:48:03.404" starttime="20170714 18:48:01.635"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:03.405" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:03.405" starttime="20170714 18:48:03.405"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.405" starttime="20170714 18:48:03.404"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.405" starttime="20170714 18:48:01.629"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:03.407" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:03.407" starttime="20170714 18:48:03.406"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.407" starttime="20170714 18:48:03.406"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170714 18:48:03.407" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170714 18:48:03.407" starttime="20170714 18:48:03.407"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:03.409" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:03.409" starttime="20170714 18:48:03.409"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.409" starttime="20170714 18:48:03.408"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:03.411" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:03.411" starttime="20170714 18:48:03.410"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.411" starttime="20170714 18:48:03.409"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.411" starttime="20170714 18:48:03.408"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:03.412" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:03.412" starttime="20170714 18:48:03.412"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.412" starttime="20170714 18:48:03.411"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:03.413" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:03.413" starttime="20170714 18:48:03.413"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.414" starttime="20170714 18:48:03.412"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.414" starttime="20170714 18:48:03.411"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:03.415" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:03.415" starttime="20170714 18:48:03.415"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.415" starttime="20170714 18:48:03.414"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:03.416" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:03.416" starttime="20170714 18:48:03.416"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.416" starttime="20170714 18:48:03.415"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.416" starttime="20170714 18:48:03.414"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.416" starttime="20170714 18:48:03.408"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:03.418" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:03.418" starttime="20170714 18:48:03.417"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.418" starttime="20170714 18:48:03.417"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.418" starttime="20170714 18:48:01.616"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170714 18:48:03.424" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170714 18:48:03.424" starttime="20170714 18:48:03.424"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170714 18:48:03.425" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170714 18:48:03.425" starttime="20170714 18:48:03.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:03.427" starttime="20170714 18:48:03.426"></status>
</kw>
<msg timestamp="20170714 18:48:03.427" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170714 18:48:03.427" starttime="20170714 18:48:03.426"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:03.429" starttime="20170714 18:48:03.429"></status>
</kw>
<msg timestamp="20170714 18:48:03.429" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:48:03.429" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 18:48:03.429" starttime="20170714 18:48:03.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:03.430" starttime="20170714 18:48:03.430"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 18:48:03.446" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 18:48:03.446" starttime="20170714 18:48:03.446"></status>
</kw>
<msg timestamp="20170714 18:48:03.446" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 18:48:03.446" starttime="20170714 18:48:03.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:03.448" starttime="20170714 18:48:03.448"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.448" starttime="20170714 18:48:03.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:03.449" starttime="20170714 18:48:03.449"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 18:48:03.451" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 18:48:03.451" starttime="20170714 18:48:03.450"></status>
</kw>
<msg timestamp="20170714 18:48:03.451" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 18:48:03.451" starttime="20170714 18:48:03.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:03.454" starttime="20170714 18:48:03.453"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.454" starttime="20170714 18:48:03.453"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:03.454" starttime="20170714 18:48:03.452"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 18:48:03.455" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 18:48:05.102" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 18:48:05.103" starttime="20170714 18:48:03.454"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:05.103" starttime="20170714 18:48:03.445"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170714 18:48:05.104" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170714 18:48:05.104" starttime="20170714 18:48:05.104"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170714 18:48:05.105" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170714 18:48:05.105" starttime="20170714 18:48:05.105"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170714 18:48:05.111" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170714 18:48:05.111" starttime="20170714 18:48:05.106"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:05.114" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:05.114" starttime="20170714 18:48:05.114"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:05.114" starttime="20170714 18:48:05.113"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:05.116" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:05.116" starttime="20170714 18:48:05.115"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:05.116" starttime="20170714 18:48:05.115"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:05.117" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:05.117" starttime="20170714 18:48:05.117"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:05.117" starttime="20170714 18:48:05.116"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:05.118" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:05.118" starttime="20170714 18:48:05.118"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:05.118" starttime="20170714 18:48:05.117"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:05.119" starttime="20170714 18:48:05.113"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:05.119" starttime="20170714 18:48:05.112"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 18:48:05.119" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170714 18:48:06.445" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 18:48:06.445" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170714 18:48:06.445" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 18:48:06.445" starttime="20170714 18:48:05.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.452" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.452" starttime="20170714 18:48:06.452"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.452" starttime="20170714 18:48:06.451"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.452" starttime="20170714 18:48:06.446"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.453" starttime="20170714 18:48:05.111"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.453" starttime="20170714 18:48:05.111"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.453" starttime="20170714 18:48:05.111"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.453" starttime="20170714 18:48:05.104"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.453" starttime="20170714 18:48:05.104"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170714 18:48:06.454" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170714 18:48:06.454" starttime="20170714 18:48:06.454"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.455" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170714 18:48:06.455" starttime="20170714 18:48:06.454"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.458" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.458" starttime="20170714 18:48:06.458"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.458" starttime="20170714 18:48:06.457"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.460" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.460" starttime="20170714 18:48:06.459"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.460" starttime="20170714 18:48:06.458"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.462" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.462" starttime="20170714 18:48:06.461"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.462" starttime="20170714 18:48:06.461"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.463" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.463" starttime="20170714 18:48:06.463"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.463" starttime="20170714 18:48:06.462"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.463" starttime="20170714 18:48:06.457"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.463" starttime="20170714 18:48:06.456"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 18:48:06.464" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170714 18:48:06.548" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170714 18:48:06.549" level="INFO">${stdout} = </msg>
<msg timestamp="20170714 18:48:06.549" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170714 18:48:06.549" starttime="20170714 18:48:06.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.555" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.556" starttime="20170714 18:48:06.555"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.556" starttime="20170714 18:48:06.554"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.556" starttime="20170714 18:48:06.549"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.556" starttime="20170714 18:48:06.455"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.556" starttime="20170714 18:48:06.455"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.559" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.559" starttime="20170714 18:48:06.559"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.559" starttime="20170714 18:48:06.558"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.561" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.561" starttime="20170714 18:48:06.561"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.561" starttime="20170714 18:48:06.559"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.563" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.563" starttime="20170714 18:48:06.562"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.563" starttime="20170714 18:48:06.561"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.564" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.564" starttime="20170714 18:48:06.564"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.564" starttime="20170714 18:48:06.563"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.564" starttime="20170714 18:48:06.557"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.564" starttime="20170714 18:48:06.557"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 18:48:06.565" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170714 18:48:06.660" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 18:48:06.660" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-9"
VERSION_ID="v1.99.8-9-gb794578"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Re...</msg>
<msg timestamp="20170714 18:48:06.660" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 18:48:06.660" starttime="20170714 18:48:06.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.669" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.669" starttime="20170714 18:48:06.668"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.669" starttime="20170714 18:48:06.667"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.669" starttime="20170714 18:48:06.660"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.669" starttime="20170714 18:48:06.556"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.669" starttime="20170714 18:48:06.556"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.669" starttime="20170714 18:48:06.455"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.670" starttime="20170714 18:48:06.453"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.670" starttime="20170714 18:48:06.453"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170714 18:48:06.671" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170714 18:48:06.671" starttime="20170714 18:48:06.670"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.671" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170714 18:48:06.672" starttime="20170714 18:48:06.671"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.675" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.675" starttime="20170714 18:48:06.674"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.675" starttime="20170714 18:48:06.674"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.676" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.676" starttime="20170714 18:48:06.676"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.676" starttime="20170714 18:48:06.675"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.677" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.678" starttime="20170714 18:48:06.677"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.678" starttime="20170714 18:48:06.676"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.679" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.679" starttime="20170714 18:48:06.679"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.679" starttime="20170714 18:48:06.678"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.679" starttime="20170714 18:48:06.673"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.679" starttime="20170714 18:48:06.673"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 18:48:06.680" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170714 18:48:06.748" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 18:48:06.748" level="INFO">${stdout} =  02:22:01 up 2 min,  load average: 3.23, 1.46, 0.54</msg>
<msg timestamp="20170714 18:48:06.748" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 18:48:06.749" starttime="20170714 18:48:06.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.755" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.755" starttime="20170714 18:48:06.755"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.755" starttime="20170714 18:48:06.754"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.755" starttime="20170714 18:48:06.749"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.756" starttime="20170714 18:48:06.672"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.756" starttime="20170714 18:48:06.672"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.759" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.759" starttime="20170714 18:48:06.759"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.759" starttime="20170714 18:48:06.758"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.760" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.760" starttime="20170714 18:48:06.760"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.761" starttime="20170714 18:48:06.759"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.762" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.762" starttime="20170714 18:48:06.761"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.762" starttime="20170714 18:48:06.761"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.763" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.763" starttime="20170714 18:48:06.763"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.763" starttime="20170714 18:48:06.762"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.763" starttime="20170714 18:48:06.757"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.763" starttime="20170714 18:48:06.757"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 18:48:06.764" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170714 18:48:06.859" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 18:48:06.859" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     37.4...</msg>
<msg timestamp="20170714 18:48:06.859" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 18:48:06.859" starttime="20170714 18:48:06.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.865" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.865" starttime="20170714 18:48:06.865"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.865" starttime="20170714 18:48:06.864"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.865" starttime="20170714 18:48:06.859"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.866" starttime="20170714 18:48:06.756"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.866" starttime="20170714 18:48:06.756"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.869" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.869" starttime="20170714 18:48:06.869"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.869" starttime="20170714 18:48:06.868"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.871" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.871" starttime="20170714 18:48:06.870"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.871" starttime="20170714 18:48:06.869"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.872" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.872" starttime="20170714 18:48:06.872"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.872" starttime="20170714 18:48:06.871"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.874" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.874" starttime="20170714 18:48:06.873"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.874" starttime="20170714 18:48:06.873"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.874" starttime="20170714 18:48:06.867"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.874" starttime="20170714 18:48:06.867"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 18:48:06.875" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170714 18:48:06.925" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 18:48:06.926" level="INFO">${stdout} = Linux witherspoon 4.10.17-b2cd8101eec3c200940405f12582473617a520f7 #1 Fri Jul 14 17:45:14 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170714 18:48:06.926" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 18:48:06.926" starttime="20170714 18:48:06.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.935" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:06.935" starttime="20170714 18:48:06.935"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.936" starttime="20170714 18:48:06.934"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.936" starttime="20170714 18:48:06.926"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.936" starttime="20170714 18:48:06.866"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.936" starttime="20170714 18:48:06.866"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.936" starttime="20170714 18:48:06.672"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.936" starttime="20170714 18:48:06.670"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.936" starttime="20170714 18:48:06.670"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.936" starttime="20170714 18:48:05.104"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.936" starttime="20170714 18:48:03.444"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.936" starttime="20170714 18:48:03.430"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.936" starttime="20170714 18:48:03.427"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.936" starttime="20170714 18:48:03.427"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:06.938" starttime="20170714 18:48:06.938"></status>
</kw>
<msg timestamp="20170714 18:48:06.938" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:48:06.939" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 18:48:06.939" starttime="20170714 18:48:06.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:06.939" starttime="20170714 18:48:06.939"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 18:48:06.956" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 18:48:06.956" starttime="20170714 18:48:06.955"></status>
</kw>
<msg timestamp="20170714 18:48:06.956" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 18:48:06.956" starttime="20170714 18:48:06.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:06.957" starttime="20170714 18:48:06.957"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.957" starttime="20170714 18:48:06.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:06.958" starttime="20170714 18:48:06.957"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 18:48:06.959" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 18:48:06.959" starttime="20170714 18:48:06.959"></status>
</kw>
<msg timestamp="20170714 18:48:06.959" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 18:48:06.959" starttime="20170714 18:48:06.958"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:06.961" starttime="20170714 18:48:06.960"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.961" starttime="20170714 18:48:06.960"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:06.961" starttime="20170714 18:48:06.959"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 18:48:06.961" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 18:48:08.676" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 18:48:08.677" starttime="20170714 18:48:06.961"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:08.677" starttime="20170714 18:48:06.954"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170714 18:48:08.678" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170714 18:48:08.678" starttime="20170714 18:48:08.677"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170714 18:48:08.679" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170714 18:48:08.679" starttime="20170714 18:48:08.679"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 18:48:08.680" level="INFO">${logpath} = /home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_elog.txt</msg>
<status status="PASS" endtime="20170714 18:48:08.680" starttime="20170714 18:48:08.680"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:48:08.683" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:48:08.683" starttime="20170714 18:48:08.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:48:08.684" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:48:08.684" starttime="20170714 18:48:08.684"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:48:08.685" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:48:08.685" starttime="20170714 18:48:08.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:48:08.685" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:48:08.685" starttime="20170714 18:48:08.685"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:48:08.890" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:48:08.890" starttime="20170714 18:48:08.686"></status>
</kw>
<msg timestamp="20170714 18:48:08.890" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:48:08.890" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:08.890" starttime="20170714 18:48:08.686"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:48:08.891" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:48:08.891" starttime="20170714 18:48:08.890"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:48:08.891" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:48:08.891" starttime="20170714 18:48:08.891"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:08.892" starttime="20170714 18:48:08.682"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:08.892" starttime="20170714 18:48:08.682"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:08.892" starttime="20170714 18:48:08.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:48:08.893" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170714 18:48:08.893" starttime="20170714 18:48:08.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:08.893" starttime="20170714 18:48:08.893"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:48:08.945" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170714 18:48:08.945" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:08.945" starttime="20170714 18:48:08.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:08.946" starttime="20170714 18:48:08.945"></status>
</kw>
<msg timestamp="20170714 18:48:08.946" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:08.946" starttime="20170714 18:48:08.680"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:48:08.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170714 18:48:08.947" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170714 18:48:08.947" starttime="20170714 18:48:08.947"></status>
</kw>
<msg timestamp="20170714 18:48:08.947" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 18:48:08.947" starttime="20170714 18:48:08.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170714 18:48:08.949" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170714 18:48:08.949" starttime="20170714 18:48:08.949"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:08.949" starttime="20170714 18:48:08.948"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:08.949" starttime="20170714 18:48:08.679"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 18:48:08.950" level="INFO">${logpath} = /home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170714 18:48:08.950" starttime="20170714 18:48:08.950"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:48:08.953" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:48:08.953" starttime="20170714 18:48:08.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:48:08.954" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:48:08.954" starttime="20170714 18:48:08.953"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:48:08.954" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:48:08.954" starttime="20170714 18:48:08.954"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:48:08.955" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:48:08.955" starttime="20170714 18:48:08.955"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:48:09.133" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:48:09.133" starttime="20170714 18:48:08.956"></status>
</kw>
<msg timestamp="20170714 18:48:09.133" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:48:09.133" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:09.133" starttime="20170714 18:48:08.955"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:48:09.134" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:48:09.134" starttime="20170714 18:48:09.133"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:48:09.135" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:48:09.135" starttime="20170714 18:48:09.134"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:09.135" starttime="20170714 18:48:08.952"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:09.135" starttime="20170714 18:48:08.952"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:09.135" starttime="20170714 18:48:08.951"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:48:09.136" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170714 18:48:09.136" starttime="20170714 18:48:09.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:09.136" starttime="20170714 18:48:09.136"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:48:09.350" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170714 18:48:09.350" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:09.351" starttime="20170714 18:48:09.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:09.351" starttime="20170714 18:48:09.351"></status>
</kw>
<msg timestamp="20170714 18:48:09.351" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:09.351" starttime="20170714 18:48:08.950"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:48:09.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:48:09.353" starttime="20170714 18:48:09.352"></status>
</kw>
<msg timestamp="20170714 18:48:09.353" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170714 18:48:09.353" starttime="20170714 18:48:09.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:09.353" starttime="20170714 18:48:09.353"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170714 18:48:09.354" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 18:48:09.354" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170714 18:48:09.354" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170714 18:48:09.355" starttime="20170714 18:48:09.354"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:09.356" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:09.356" starttime="20170714 18:48:09.355"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:09.356" starttime="20170714 18:48:09.355"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:09.356" starttime="20170714 18:48:08.949"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 18:48:09.357" level="INFO">${logpath} = /home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170714 18:48:09.357" starttime="20170714 18:48:09.357"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:48:09.360" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:48:09.360" starttime="20170714 18:48:09.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:48:09.361" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:48:09.361" starttime="20170714 18:48:09.361"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:48:09.362" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:48:09.362" starttime="20170714 18:48:09.361"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:48:09.362" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:48:09.362" starttime="20170714 18:48:09.362"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:48:09.550" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:48:09.550" starttime="20170714 18:48:09.363"></status>
</kw>
<msg timestamp="20170714 18:48:09.550" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:48:09.550" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:09.551" starttime="20170714 18:48:09.363"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:48:09.551" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:48:09.551" starttime="20170714 18:48:09.551"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:48:09.552" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:48:09.552" starttime="20170714 18:48:09.552"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:09.552" starttime="20170714 18:48:09.359"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:09.552" starttime="20170714 18:48:09.359"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:09.552" starttime="20170714 18:48:09.358"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:48:09.553" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170714 18:48:09.553" starttime="20170714 18:48:09.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:09.554" starttime="20170714 18:48:09.553"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:48:09.747" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170714 18:48:09.747" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:09.747" starttime="20170714 18:48:09.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:09.748" starttime="20170714 18:48:09.748"></status>
</kw>
<msg timestamp="20170714 18:48:09.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:09.748" starttime="20170714 18:48:09.357"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:48:09.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:48:09.750" starttime="20170714 18:48:09.749"></status>
</kw>
<msg timestamp="20170714 18:48:09.750" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170714 18:48:09.750" starttime="20170714 18:48:09.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:09.750" starttime="20170714 18:48:09.750"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170714 18:48:09.751" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 18:48:09.751" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170714 18:48:09.751" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170714 18:48:09.751" starttime="20170714 18:48:09.751"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:09.753" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:09.753" starttime="20170714 18:48:09.752"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:09.753" starttime="20170714 18:48:09.752"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:09.753" starttime="20170714 18:48:09.356"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 18:48:09.754" level="INFO">${logpath} = /home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_led.txt</msg>
<status status="PASS" endtime="20170714 18:48:09.754" starttime="20170714 18:48:09.753"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:48:09.757" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:48:09.757" starttime="20170714 18:48:09.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:48:09.758" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:48:09.758" starttime="20170714 18:48:09.757"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:48:09.758" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:48:09.758" starttime="20170714 18:48:09.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:48:09.759" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:48:09.759" starttime="20170714 18:48:09.759"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:48:09.960" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:48:09.960" starttime="20170714 18:48:09.760"></status>
</kw>
<msg timestamp="20170714 18:48:09.960" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:48:09.960" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:09.960" starttime="20170714 18:48:09.760"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:48:09.961" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:48:09.961" starttime="20170714 18:48:09.961"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:48:09.962" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:48:09.962" starttime="20170714 18:48:09.961"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:09.962" starttime="20170714 18:48:09.756"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:09.962" starttime="20170714 18:48:09.755"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:09.962" starttime="20170714 18:48:09.755"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:48:09.963" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170714 18:48:09.963" starttime="20170714 18:48:09.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:09.963" starttime="20170714 18:48:09.963"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:48:10.008" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170714 18:48:10.008" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:10.008" starttime="20170714 18:48:09.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:10.009" starttime="20170714 18:48:10.009"></status>
</kw>
<msg timestamp="20170714 18:48:10.009" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:10.009" starttime="20170714 18:48:09.754"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:48:10.011" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170714 18:48:10.011" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170714 18:48:10.011" starttime="20170714 18:48:10.010"></status>
</kw>
<msg timestamp="20170714 18:48:10.011" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 18:48:10.011" starttime="20170714 18:48:10.010"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170714 18:48:10.012" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170714 18:48:10.012" starttime="20170714 18:48:10.012"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.012" starttime="20170714 18:48:10.011"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.013" starttime="20170714 18:48:09.753"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 18:48:10.013" level="INFO">${logpath} = /home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170714 18:48:10.013" starttime="20170714 18:48:10.013"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:48:10.016" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:48:10.017" starttime="20170714 18:48:10.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:48:10.017" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:48:10.017" starttime="20170714 18:48:10.017"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:48:10.018" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:48:10.018" starttime="20170714 18:48:10.017"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:48:10.019" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:48:10.019" starttime="20170714 18:48:10.018"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:48:10.195" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:48:10.195" starttime="20170714 18:48:10.020"></status>
</kw>
<msg timestamp="20170714 18:48:10.195" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:48:10.195" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:10.195" starttime="20170714 18:48:10.019"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:48:10.196" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:48:10.196" starttime="20170714 18:48:10.195"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:48:10.196" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:48:10.197" starttime="20170714 18:48:10.196"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.197" starttime="20170714 18:48:10.015"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.197" starttime="20170714 18:48:10.015"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.197" starttime="20170714 18:48:10.014"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:48:10.197" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170714 18:48:10.198" starttime="20170714 18:48:10.197"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:10.198" starttime="20170714 18:48:10.198"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:48:10.242" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170714 18:48:10.242" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:10.242" starttime="20170714 18:48:10.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:10.243" starttime="20170714 18:48:10.243"></status>
</kw>
<msg timestamp="20170714 18:48:10.243" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:10.243" starttime="20170714 18:48:10.014"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:48:10.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170714 18:48:10.245" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170714 18:48:10.245" starttime="20170714 18:48:10.244"></status>
</kw>
<msg timestamp="20170714 18:48:10.245" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 18:48:10.245" starttime="20170714 18:48:10.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170714 18:48:10.246" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170714 18:48:10.246" starttime="20170714 18:48:10.246"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.246" starttime="20170714 18:48:10.245"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.246" starttime="20170714 18:48:10.013"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.246" starttime="20170714 18:48:08.679"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.246" starttime="20170714 18:48:08.678"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.246" starttime="20170714 18:48:08.678"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.246" starttime="20170714 18:48:08.678"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.246" starttime="20170714 18:48:06.954"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.246" starttime="20170714 18:48:06.939"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.247" starttime="20170714 18:48:06.937"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.247" starttime="20170714 18:48:06.937"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:10.249" starttime="20170714 18:48:10.248"></status>
</kw>
<msg timestamp="20170714 18:48:10.249" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:48:10.249" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 18:48:10.249" starttime="20170714 18:48:10.248"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:10.249" starttime="20170714 18:48:10.249"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 18:48:10.265" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 18:48:10.265" starttime="20170714 18:48:10.265"></status>
</kw>
<msg timestamp="20170714 18:48:10.265" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 18:48:10.265" starttime="20170714 18:48:10.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:10.266" starttime="20170714 18:48:10.266"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.267" starttime="20170714 18:48:10.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:10.267" starttime="20170714 18:48:10.267"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 18:48:10.268" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 18:48:10.268" starttime="20170714 18:48:10.268"></status>
</kw>
<msg timestamp="20170714 18:48:10.269" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 18:48:10.269" starttime="20170714 18:48:10.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:10.271" starttime="20170714 18:48:10.270"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.271" starttime="20170714 18:48:10.270"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:10.271" starttime="20170714 18:48:10.269"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 18:48:10.271" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 18:48:11.949" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 18:48:11.949" starttime="20170714 18:48:10.271"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:11.950" starttime="20170714 18:48:10.264"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170714 18:48:11.950" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170714 18:48:11.999" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170714 18:48:11.999" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170714 18:48:11.999" starttime="20170714 18:48:11.950"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170714 18:48:12.000" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170714 18:48:12.000" starttime="20170714 18:48:12.000"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:12.002" starttime="20170714 18:48:12.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:12.670" starttime="20170714 18:48:12.003"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:12.670" starttime="20170714 18:48:12.002"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:12.670" starttime="20170714 18:48:12.000"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170714 18:48:12.670" starttime="20170714 18:48:12.670"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:12.670" starttime="20170714 18:48:10.263"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:12.670" starttime="20170714 18:48:10.250"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:12.670" starttime="20170714 18:48:10.247"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:12.671" starttime="20170714 18:48:10.247"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:12.673" starttime="20170714 18:48:12.672"></status>
</kw>
<msg timestamp="20170714 18:48:12.673" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:48:12.673" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 18:48:12.673" starttime="20170714 18:48:12.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:12.673" starttime="20170714 18:48:12.673"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 18:48:12.690" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 18:48:12.690" starttime="20170714 18:48:12.689"></status>
</kw>
<msg timestamp="20170714 18:48:12.690" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 18:48:12.690" starttime="20170714 18:48:12.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:12.691" starttime="20170714 18:48:12.691"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:12.691" starttime="20170714 18:48:12.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:12.692" starttime="20170714 18:48:12.692"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 18:48:12.693" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 18:48:12.693" starttime="20170714 18:48:12.693"></status>
</kw>
<msg timestamp="20170714 18:48:12.693" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 18:48:12.693" starttime="20170714 18:48:12.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:12.695" starttime="20170714 18:48:12.695"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:12.695" starttime="20170714 18:48:12.694"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:12.695" starttime="20170714 18:48:12.694"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 18:48:12.696" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 18:48:14.342" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 18:48:14.342" starttime="20170714 18:48:12.696"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.342" starttime="20170714 18:48:12.688"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170714 18:48:14.343" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170714 18:48:14.343" starttime="20170714 18:48:14.343"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170714 18:48:14.345" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170714 18:48:14.345" starttime="20170714 18:48:14.344"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 18:48:14.346" level="INFO">${logpath} = /home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170714 18:48:14.346" starttime="20170714 18:48:14.345"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:14.348" starttime="20170714 18:48:14.347"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 18:48:14.349" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170714 18:48:14.668" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 18:48:14.669" level="INFO">${stdout} = Mem: 178788K used, 253488K free, 38420K shrd, 10876K buff, 74348K cached
CPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 2.98 1.44 0.55 1/160 1202
  PID  PPID USER  ...</msg>
<msg timestamp="20170714 18:48:14.669" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 18:48:14.669" starttime="20170714 18:48:14.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:14.676" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:14.676" starttime="20170714 18:48:14.675"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.676" starttime="20170714 18:48:14.674"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.676" starttime="20170714 18:48:14.669"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.676" starttime="20170714 18:48:14.346"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.676" starttime="20170714 18:48:14.345"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 18:48:14.677" level="INFO">${logpath} = /home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170714 18:48:14.677" starttime="20170714 18:48:14.677"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:14.679" starttime="20170714 18:48:14.678"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 18:48:14.680" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170714 18:48:14.765" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 18:48:14.765" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-b2cd8101eec3c200940405f12582473617a520f7 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Fri Jul 14 17:45:14 UTC 20...</msg>
<msg timestamp="20170714 18:48:14.765" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 18:48:14.766" starttime="20170714 18:48:14.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:14.772" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:14.772" starttime="20170714 18:48:14.772"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.773" starttime="20170714 18:48:14.771"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.773" starttime="20170714 18:48:14.766"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.773" starttime="20170714 18:48:14.677"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.773" starttime="20170714 18:48:14.676"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 18:48:14.774" level="INFO">${logpath} = /home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170714 18:48:14.774" starttime="20170714 18:48:14.773"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:14.775" starttime="20170714 18:48:14.775"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 18:48:14.776" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170714 18:48:14.862" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 18:48:14.862" level="INFO">${stdout} = MemTotal:         432276 kB
MemFree:          253456 kB
MemAvailable:     297584 kB
Buffers:           10876 kB
Cached:            74352 kB
SwapCached:            0 kB
Active:           111000 kB
Inac...</msg>
<msg timestamp="20170714 18:48:14.862" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 18:48:14.862" starttime="20170714 18:48:14.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:14.869" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:14.869" starttime="20170714 18:48:14.869"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.869" starttime="20170714 18:48:14.868"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.869" starttime="20170714 18:48:14.863"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.869" starttime="20170714 18:48:14.774"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.869" starttime="20170714 18:48:14.773"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 18:48:14.870" level="INFO">${logpath} = /home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170714 18:48:14.870" starttime="20170714 18:48:14.870"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:14.872" starttime="20170714 18:48:14.871"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 18:48:14.872" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170714 18:48:14.957" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 18:48:14.958" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170714 18:48:14.958" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 18:48:14.958" starttime="20170714 18:48:14.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:14.965" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:14.965" starttime="20170714 18:48:14.964"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.965" starttime="20170714 18:48:14.963"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.965" starttime="20170714 18:48:14.958"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.965" starttime="20170714 18:48:14.870"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:14.965" starttime="20170714 18:48:14.870"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 18:48:14.966" level="INFO">${logpath} = /home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170714 18:48:14.966" starttime="20170714 18:48:14.965"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:14.967" starttime="20170714 18:48:14.967"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 18:48:14.968" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170714 18:48:16.042" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 18:48:16.043" level="INFO">${stdout} = -- Logs begin at Fri 2017-04-28 02:20:16 UTC, end at Fri 2017-04-28 02:22:07 UTC. --
Apr 28 02:20:16 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 28 02:20:16 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170714 18:48:16.043" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 18:48:16.043" starttime="20170714 18:48:14.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 18:48:16.054" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/20170714184801560826_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:16.054" starttime="20170714 18:48:16.053"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.054" starttime="20170714 18:48:16.051"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.054" starttime="20170714 18:48:16.044"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.054" starttime="20170714 18:48:14.966"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.054" starttime="20170714 18:48:14.965"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.054" starttime="20170714 18:48:14.345"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.054" starttime="20170714 18:48:14.344"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.054" starttime="20170714 18:48:14.343"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.054" starttime="20170714 18:48:14.343"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.054" starttime="20170714 18:48:12.688"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.055" starttime="20170714 18:48:12.674"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.055" starttime="20170714 18:48:12.671"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.055" starttime="20170714 18:48:12.671"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:16.057" starttime="20170714 18:48:16.056"></status>
</kw>
<msg timestamp="20170714 18:48:16.057" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:48:16.057" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 18:48:16.057" starttime="20170714 18:48:16.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:16.057" starttime="20170714 18:48:16.057"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 18:48:16.077" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 18:48:16.078" starttime="20170714 18:48:16.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 18:48:16.079" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 18:48:16.079" starttime="20170714 18:48:16.078"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 18:48:16.080" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 18:48:16.080" starttime="20170714 18:48:16.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 18:48:16.081" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 18:48:16.081" starttime="20170714 18:48:16.080"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 18:48:16.289" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 18:48:16.289" starttime="20170714 18:48:16.082"></status>
</kw>
<msg timestamp="20170714 18:48:16.289" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:48:16.290" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:16.290" starttime="20170714 18:48:16.081"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 18:48:16.290" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:48:16.290" starttime="20170714 18:48:16.290"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:48:16.291" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 18:48:16.291" starttime="20170714 18:48:16.291"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.291" starttime="20170714 18:48:16.076"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.291" starttime="20170714 18:48:16.075"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.291" starttime="20170714 18:48:16.074"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 18:48:16.292" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170714 18:48:16.292" starttime="20170714 18:48:16.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:16.293" starttime="20170714 18:48:16.292"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 18:48:16.347" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170714 18:48:16.347" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:16.347" starttime="20170714 18:48:16.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:16.347" starttime="20170714 18:48:16.347"></status>
</kw>
<msg timestamp="20170714 18:48:16.348" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 18:48:16.348" starttime="20170714 18:48:16.073"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 18:48:16.349" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170714 18:48:16.349" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170714 18:48:16.349" starttime="20170714 18:48:16.349"></status>
</kw>
<msg timestamp="20170714 18:48:16.349" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 18:48:16.350" starttime="20170714 18:48:16.348"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170714 18:48:16.350" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170714 18:48:16.350" starttime="20170714 18:48:16.350"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.350" starttime="20170714 18:48:16.073"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.350" starttime="20170714 18:48:16.058"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.351" starttime="20170714 18:48:16.055"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.351" starttime="20170714 18:48:16.055"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:16.353" starttime="20170714 18:48:16.353"></status>
</kw>
<msg timestamp="20170714 18:48:16.353" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 18:48:16.354" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 18:48:16.354" starttime="20170714 18:48:16.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:16.354" starttime="20170714 18:48:16.354"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170714 18:48:16.370" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170714 18:48:16.370" starttime="20170714 18:48:16.369"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.370" starttime="20170714 18:48:16.369"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.370" starttime="20170714 18:48:16.355"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.370" starttime="20170714 18:48:16.351"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.370" starttime="20170714 18:48:16.351"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.370" starttime="20170714 18:48:03.427"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.370" starttime="20170714 18:48:03.424"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.370" starttime="20170714 18:48:03.424"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.370" starttime="20170714 18:48:03.424"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170714 18:48:16.645" starttime="20170714 18:48:16.370"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.645" starttime="20170714 18:48:03.423"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.645" starttime="20170714 18:47:58.515"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.646" starttime="20170714 18:47:58.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:16.647" starttime="20170714 18:48:16.646"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170714 18:48:16.648" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170714 18:48:16.648" starttime="20170714 18:48:16.648"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170714 18:48:16.649" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170714184801560826_UpdateBmc/20170714184801560826_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170714 18:48:16.649" starttime="20170714 18:48:16.648"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:16.650" starttime="20170714 18:48:16.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:16.650" starttime="20170714 18:48:16.650"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170714 18:48:16.651" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170714 18:48:16.651" starttime="20170714 18:48:16.650"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170714 18:48:16.652" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170714 18:48:16.652" starttime="20170714 18:48:16.652"></status>
</kw>
<msg timestamp="20170714 18:48:16.652" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170714 18:48:16.652" starttime="20170714 18:48:16.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:16.653" starttime="20170714 18:48:16.652"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170714 18:48:16.653" starttime="20170714 18:48:16.653"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170714 18:48:16.655" level="INFO">${cur_time} = 2017-07-14 18:48:16:654966</msg>
<status status="PASS" endtime="20170714 18:48:16.655" starttime="20170714 18:48:16.655"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170714 18:48:16.656" level="INFO">${cur_time} = 20170714184816654966</msg>
<status status="PASS" endtime="20170714 18:48:16.656" starttime="20170714 18:48:16.655"></status>
</kw>
<msg timestamp="20170714 18:48:16.656" level="INFO">${cur_time} = 20170714184816654966</msg>
<status status="PASS" endtime="20170714 18:48:16.656" starttime="20170714 18:48:16.654"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170714 18:48:16.658" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 18:48:16.658" starttime="20170714 18:48:16.657"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.658" starttime="20170714 18:48:16.647"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.658" starttime="20170714 18:47:58.242"></status>
</kw>
<status status="PASS" endtime="20170714 18:48:16.658" starttime="20170714 18:47:58.235"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170714 18:48:16.659" critical="yes" starttime="20170714 18:45:21.613">No keyword with name 'Set Variable /tmp/flashimg' found.</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170714 18:48:16.660" starttime="20170714 18:45:20.771"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170714 18:46:19.633" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff87a79c10&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170714 18:46:22.837" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff87a79e10&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170714 18:46:26.038" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff848c0b10&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
</errors>
</robot>
