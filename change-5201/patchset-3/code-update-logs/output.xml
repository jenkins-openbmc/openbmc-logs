<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170714 12:03:18.442" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:03:19.481" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:03:19.481" starttime="20170714 12:03:19.481"></status>
</kw>
<msg timestamp="20170714 12:03:19.481" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:03:19.481" starttime="20170714 12:03:19.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:19.482" starttime="20170714 12:03:19.482"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:19.483" starttime="20170714 12:03:19.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:19.483" starttime="20170714 12:03:19.483"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:03:19.484" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:03:19.485" starttime="20170714 12:03:19.484"></status>
</kw>
<msg timestamp="20170714 12:03:19.485" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:03:19.485" starttime="20170714 12:03:19.484"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:19.487" starttime="20170714 12:03:19.486"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:19.487" starttime="20170714 12:03:19.486"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:19.487" starttime="20170714 12:03:19.485"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:03:19.487" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:03:21.299" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:03:21.299" starttime="20170714 12:03:19.487"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:21.299" starttime="20170714 12:03:19.479"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:03:21.300" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170714 12:03:21.397" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:03:21.398" level="INFO">${output} = 1492709349</msg>
<msg timestamp="20170714 12:03:21.398" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:03:21.398" starttime="20170714 12:03:21.300"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170714 12:03:21.398" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170714 12:03:21.399" starttime="20170714 12:03:21.398"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170714 12:03:21.399" level="INFO">${btime} = 1492709349</msg>
<status status="PASS" endtime="20170714 12:03:21.399" starttime="20170714 12:03:21.399"></status>
</kw>
<msg timestamp="20170714 12:03:21.399" level="INFO">${cur_btime} = 1492709349</msg>
<status status="PASS" endtime="20170714 12:03:21.399" starttime="20170714 12:03:19.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170714 12:03:21.401" level="INFO">${BOOT_TIME} = 1492709349</msg>
<status status="PASS" endtime="20170714 12:03:21.401" starttime="20170714 12:03:21.401"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:21.402" starttime="20170714 12:03:21.400"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:21.402" starttime="20170714 12:03:19.478"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:21.402" starttime="20170714 12:03:21.402"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:21.403" starttime="20170714 12:03:21.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:21.404" starttime="20170714 12:03:21.403"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:21.404" starttime="20170714 12:03:19.478"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:03:21.406" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:03:21.406" starttime="20170714 12:03:21.406"></status>
</kw>
<msg timestamp="20170714 12:03:21.406" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:03:21.406" starttime="20170714 12:03:21.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:21.408" starttime="20170714 12:03:21.407"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:21.408" starttime="20170714 12:03:21.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:21.408" starttime="20170714 12:03:21.408"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:03:21.409" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:03:21.410" starttime="20170714 12:03:21.409"></status>
</kw>
<msg timestamp="20170714 12:03:21.410" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:03:21.410" starttime="20170714 12:03:21.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:21.411" starttime="20170714 12:03:21.411"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:21.412" starttime="20170714 12:03:21.411"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:21.412" starttime="20170714 12:03:21.410"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:03:21.412" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:03:23.054" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:03:23.054" starttime="20170714 12:03:21.412"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:23.054" starttime="20170714 12:03:21.404"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170714 12:03:23.055" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170714 12:03:23.131" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:03:23.131" level="INFO">${output} = </msg>
<msg timestamp="20170714 12:03:23.131" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/98da6a547f8141998b98e23f5894fd04.</msg>
<msg timestamp="20170714 12:03:23.131" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170714 12:03:23.131" starttime="20170714 12:03:23.054"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:23.132" starttime="20170714 12:03:23.132"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:23.132" starttime="20170714 12:03:21.404"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170714 12:03:23.135" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170714 12:03:23.135" starttime="20170714 12:03:23.134"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:03:23.136" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170714 12:03:23.136" starttime="20170714 12:03:23.136"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:03:23.139" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:03:23.139" starttime="20170714 12:03:23.139"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:03:23.140" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:03:23.140" starttime="20170714 12:03:23.140"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:03:23.141" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:03:23.141" starttime="20170714 12:03:23.141"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:03:23.142" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:03:23.142" starttime="20170714 12:03:23.141"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:03:23.374" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:03:23.375" starttime="20170714 12:03:23.142"></status>
</kw>
<msg timestamp="20170714 12:03:23.375" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:03:23.375" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:23.375" starttime="20170714 12:03:23.142"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:03:23.376" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:23.376" starttime="20170714 12:03:23.375"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:23.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:23.376" starttime="20170714 12:03:23.376"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:23.377" starttime="20170714 12:03:23.138"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:23.377" starttime="20170714 12:03:23.138"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:23.377" starttime="20170714 12:03:23.137"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:03:23.377" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170714 12:03:23.377" starttime="20170714 12:03:23.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:03:23.378" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:03:23.378" starttime="20170714 12:03:23.378"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:23.379" starttime="20170714 12:03:23.378"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 12:03:23.380" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Ty...</msg>
<status status="PASS" endtime="20170714 12:03:23.380" starttime="20170714 12:03:23.379"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 12:03:23.381" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170714 12:03:23.382" starttime="20170714 12:03:23.381"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:23.382" starttime="20170714 12:03:23.380"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:23.382" starttime="20170714 12:03:23.379"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:03:23.739" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170714 12:03:23.739" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:23.739" starttime="20170714 12:03:23.382"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 12:03:23.741" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 12:03:23.741" starttime="20170714 12:03:23.740"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 12:03:23.742" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 12:03:23.742" starttime="20170714 12:03:23.741"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:23.742" starttime="20170714 12:03:23.741"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:23.742" starttime="20170714 12:03:23.739"></status>
</kw>
<msg timestamp="20170714 12:03:23.742" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:23.742" starttime="20170714 12:03:23.136"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:23.743" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:23.743" starttime="20170714 12:03:23.743"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170714 12:03:23.744" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:03:23.744" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:03:23.744" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170714 12:03:23.744" starttime="20170714 12:03:23.743"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:23.744" starttime="20170714 12:03:23.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:23.745" starttime="20170714 12:03:23.744"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:03:23.749" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:03:23.750" starttime="20170714 12:03:23.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:03:23.751" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:03:23.751" starttime="20170714 12:03:23.750"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:03:23.751" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:03:23.751" starttime="20170714 12:03:23.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:03:23.752" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:03:23.752" starttime="20170714 12:03:23.752"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:03:24.421" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:03:24.421" starttime="20170714 12:03:23.753"></status>
</kw>
<msg timestamp="20170714 12:03:24.421" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:03:24.421" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:24.421" starttime="20170714 12:03:23.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:03:24.422" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:24.422" starttime="20170714 12:03:24.422"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:24.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:24.423" starttime="20170714 12:03:24.422"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:24.423" starttime="20170714 12:03:23.748"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:24.423" starttime="20170714 12:03:23.748"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:24.423" starttime="20170714 12:03:23.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:03:24.424" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170714 12:03:24.424" starttime="20170714 12:03:24.423"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:24.424" starttime="20170714 12:03:24.424"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:03:24.597" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170714 12:03:24.597" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:24.598" starttime="20170714 12:03:24.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:24.598" starttime="20170714 12:03:24.598"></status>
</kw>
<msg timestamp="20170714 12:03:24.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:24.598" starttime="20170714 12:03:23.747"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:24.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:24.599" starttime="20170714 12:03:24.599"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:03:24.600" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:03:24.600" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:03:24.600" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170714 12:03:24.600" starttime="20170714 12:03:24.599"></status>
</kw>
<msg timestamp="20170714 12:03:24.600" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170714 12:03:24.600" starttime="20170714 12:03:23.746"></status>
</kw>
<msg timestamp="20170714 12:03:24.600" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170714 12:03:24.600" starttime="20170714 12:03:23.746"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:24.601" starttime="20170714 12:03:24.601"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:24.601" starttime="20170714 12:03:23.745"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:24.601" starttime="20170714 12:03:23.745"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:24.601" starttime="20170714 12:03:23.134"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:24.601" starttime="20170714 12:03:23.133"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:24.602" starttime="20170714 12:03:23.133"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170714 12:03:24.603" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170714 12:03:24.603" starttime="20170714 12:03:24.602"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:03:24.604" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170714 12:03:24.604" starttime="20170714 12:03:24.603"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:03:24.607" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:03:24.607" starttime="20170714 12:03:24.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:03:24.608" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:03:24.608" starttime="20170714 12:03:24.608"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:03:24.609" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:03:24.609" starttime="20170714 12:03:24.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:03:24.609" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:03:24.609" starttime="20170714 12:03:24.609"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:03:24.877" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:03:24.877" starttime="20170714 12:03:24.610"></status>
</kw>
<msg timestamp="20170714 12:03:24.877" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:03:24.877" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:24.878" starttime="20170714 12:03:24.610"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:03:24.878" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:24.878" starttime="20170714 12:03:24.878"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:24.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:24.879" starttime="20170714 12:03:24.878"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:24.879" starttime="20170714 12:03:24.606"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:24.879" starttime="20170714 12:03:24.605"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:24.879" starttime="20170714 12:03:24.605"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:03:24.880" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170714 12:03:24.880" starttime="20170714 12:03:24.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:03:24.880" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:03:24.881" starttime="20170714 12:03:24.880"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:24.881" starttime="20170714 12:03:24.881"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 12:03:24.883" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170714 12:03:24.883" starttime="20170714 12:03:24.882"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 12:03:24.884" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170714 12:03:24.884" starttime="20170714 12:03:24.883"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:24.884" starttime="20170714 12:03:24.883"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:24.884" starttime="20170714 12:03:24.881"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:03:25.065" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170714 12:03:25.066" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:25.066" starttime="20170714 12:03:24.884"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 12:03:25.067" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 12:03:25.067" starttime="20170714 12:03:25.067"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 12:03:25.068" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 12:03:25.068" starttime="20170714 12:03:25.068"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:25.068" starttime="20170714 12:03:25.067"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:25.069" starttime="20170714 12:03:25.066"></status>
</kw>
<msg timestamp="20170714 12:03:25.069" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:25.069" starttime="20170714 12:03:24.604"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:25.069" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:25.069" starttime="20170714 12:03:25.069"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170714 12:03:25.070" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:03:25.070" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:03:25.070" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170714 12:03:25.070" starttime="20170714 12:03:25.070"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:25.070" starttime="20170714 12:03:24.603"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:03:25.074" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:03:25.075" starttime="20170714 12:03:25.074"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:03:25.075" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:03:25.075" starttime="20170714 12:03:25.075"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:03:25.076" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:03:25.076" starttime="20170714 12:03:25.076"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:03:25.077" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:03:25.077" starttime="20170714 12:03:25.076"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:03:25.260" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:03:25.260" starttime="20170714 12:03:25.078"></status>
</kw>
<msg timestamp="20170714 12:03:25.260" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:03:25.260" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:25.260" starttime="20170714 12:03:25.077"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:03:25.261" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:25.261" starttime="20170714 12:03:25.260"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:25.262" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:25.262" starttime="20170714 12:03:25.261"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:25.262" starttime="20170714 12:03:25.073"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:25.262" starttime="20170714 12:03:25.073"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:25.262" starttime="20170714 12:03:25.072"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:03:25.263" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170714 12:03:25.263" starttime="20170714 12:03:25.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:25.263" starttime="20170714 12:03:25.263"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:03:25.368" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170714 12:03:25.368" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:25.368" starttime="20170714 12:03:25.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:25.369" starttime="20170714 12:03:25.368"></status>
</kw>
<msg timestamp="20170714 12:03:25.369" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:25.369" starttime="20170714 12:03:25.071"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:25.370" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:25.370" starttime="20170714 12:03:25.369"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:03:25.370" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:03:25.370" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:03:25.370" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170714 12:03:25.370" starttime="20170714 12:03:25.370"></status>
</kw>
<msg timestamp="20170714 12:03:25.371" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170714 12:03:25.371" starttime="20170714 12:03:25.071"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:25.371" starttime="20170714 12:03:25.371"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:25.371" starttime="20170714 12:03:24.602"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:03:25.372" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170714 12:03:25.373" starttime="20170714 12:03:25.372"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:03:25.376" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:03:25.376" starttime="20170714 12:03:25.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:03:25.377" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:03:25.377" starttime="20170714 12:03:25.376"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:03:25.377" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:03:25.377" starttime="20170714 12:03:25.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:03:25.378" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:03:25.378" starttime="20170714 12:03:25.378"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:03:25.580" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:03:25.580" starttime="20170714 12:03:25.379"></status>
</kw>
<msg timestamp="20170714 12:03:25.580" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:03:25.580" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:25.580" starttime="20170714 12:03:25.378"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:03:25.581" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:25.581" starttime="20170714 12:03:25.581"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:25.582" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:25.582" starttime="20170714 12:03:25.581"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:25.582" starttime="20170714 12:03:25.375"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:25.582" starttime="20170714 12:03:25.374"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:25.582" starttime="20170714 12:03:25.373"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:03:25.583" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170714 12:03:25.583" starttime="20170714 12:03:25.582"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:03:25.583" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:03:25.583" starttime="20170714 12:03:25.583"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:25.584" starttime="20170714 12:03:25.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:25.585" starttime="20170714 12:03:25.584"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:03:25.958" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170714 12:03:25.958" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:25.959" starttime="20170714 12:03:25.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:25.959" starttime="20170714 12:03:25.959"></status>
</kw>
<msg timestamp="20170714 12:03:25.959" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:25.960" starttime="20170714 12:03:25.373"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:25.960" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:25.960" starttime="20170714 12:03:25.960"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170714 12:03:35.961" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170714 12:03:35.961" starttime="20170714 12:03:25.961"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:35.962" starttime="20170714 12:03:25.372"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170714 12:03:35.968" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170714 12:03:35.968" starttime="20170714 12:03:35.968"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170714 12:03:35.984" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170714 12:03:38.979" level="INFO">${RC} = 0</msg>
<msg timestamp="20170714 12:03:38.979" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.843 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=1.25 ms
64 bytes from 9.41.166.169...</msg>
<status status="PASS" endtime="20170714 12:03:38.979" starttime="20170714 12:03:35.969"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170714 12:03:38.983" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.843 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=1.25 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.625 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.618 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.618/0.835/1.256/0.260 ms</msg>
<status status="PASS" endtime="20170714 12:03:38.983" starttime="20170714 12:03:38.982"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:38.984" starttime="20170714 12:03:38.984"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:38.984" starttime="20170714 12:03:35.965"></status>
</kw>
<msg timestamp="20170714 12:03:38.985" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170714 12:03:38.985" starttime="20170714 12:03:35.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:38.986" starttime="20170714 12:03:38.985"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:03:38.989" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:03:38.990" starttime="20170714 12:03:38.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:03:38.991" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:03:38.991" starttime="20170714 12:03:38.990"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:03:38.991" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:03:38.991" starttime="20170714 12:03:38.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:03:38.992" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:03:38.992" starttime="20170714 12:03:38.992"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:03:39.220" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:03:39.220" starttime="20170714 12:03:38.993"></status>
</kw>
<msg timestamp="20170714 12:03:39.220" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:03:39.220" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:39.220" starttime="20170714 12:03:38.992"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:03:39.221" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:39.221" starttime="20170714 12:03:39.220"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:39.221" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:39.222" starttime="20170714 12:03:39.221"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:39.222" starttime="20170714 12:03:38.988"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:39.222" starttime="20170714 12:03:38.987"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:39.222" starttime="20170714 12:03:38.987"></status>
</kw>
<msg timestamp="20170714 12:03:39.222" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170714 12:03:39.222" starttime="20170714 12:03:38.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:39.223" starttime="20170714 12:03:39.222"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:03:39.224" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:03:39.225" starttime="20170714 12:03:39.224"></status>
</kw>
<msg timestamp="20170714 12:03:39.225" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:03:39.225" starttime="20170714 12:03:39.223"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:39.226" starttime="20170714 12:03:39.226"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:39.226" starttime="20170714 12:03:39.225"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:39.227" starttime="20170714 12:03:39.226"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:03:39.228" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:03:39.228" starttime="20170714 12:03:39.227"></status>
</kw>
<msg timestamp="20170714 12:03:39.228" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:03:39.228" starttime="20170714 12:03:39.227"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:39.230" starttime="20170714 12:03:39.230"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:39.230" starttime="20170714 12:03:39.229"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:39.230" starttime="20170714 12:03:39.228"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:03:39.231" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:03:41.009" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:03:41.009" starttime="20170714 12:03:39.230"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:41.010" starttime="20170714 12:03:39.223"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:03:41.010" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170714 12:03:41.067" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:03:41.067" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170714 12:03:41.067" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:03:41.067" starttime="20170714 12:03:41.010"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170714 12:03:41.068" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170714 12:03:41.068" starttime="20170714 12:03:41.067"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:41.068" starttime="20170714 12:03:35.964"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:41.068" starttime="20170714 12:03:35.964"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:41.068" starttime="20170714 12:03:35.962"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:03:41.071" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:03:41.071" starttime="20170714 12:03:41.070"></status>
</kw>
<msg timestamp="20170714 12:03:41.071" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:03:41.071" starttime="20170714 12:03:41.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:41.072" starttime="20170714 12:03:41.072"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:41.072" starttime="20170714 12:03:41.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:41.073" starttime="20170714 12:03:41.073"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:03:41.074" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:03:41.074" starttime="20170714 12:03:41.074"></status>
</kw>
<msg timestamp="20170714 12:03:41.074" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:03:41.074" starttime="20170714 12:03:41.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:41.076" starttime="20170714 12:03:41.076"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:41.076" starttime="20170714 12:03:41.075"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:41.076" starttime="20170714 12:03:41.075"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:03:41.077" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:03:42.818" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:03:42.818" starttime="20170714 12:03:41.077"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:42.819" starttime="20170714 12:03:41.069"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:03:42.819" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170714 12:03:42.900" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:03:42.900" level="INFO">${output} = 1492709349</msg>
<msg timestamp="20170714 12:03:42.900" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:03:42.900" starttime="20170714 12:03:42.819"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170714 12:03:42.901" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170714 12:03:42.901" starttime="20170714 12:03:42.900"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170714 12:03:42.901" level="INFO">${btime} = 1492709349</msg>
<status status="PASS" endtime="20170714 12:03:42.901" starttime="20170714 12:03:42.901"></status>
</kw>
<msg timestamp="20170714 12:03:42.902" level="INFO">${cur_btime} = 1492709349</msg>
<status status="PASS" endtime="20170714 12:03:42.902" starttime="20170714 12:03:41.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:42.903" starttime="20170714 12:03:42.902"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:42.903" starttime="20170714 12:03:41.069"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:42.903" starttime="20170714 12:03:42.903"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:42.904" starttime="20170714 12:03:42.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:42.905" starttime="20170714 12:03:42.905"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:42.905" starttime="20170714 12:03:41.068"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:03:42.909" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:03:42.910" starttime="20170714 12:03:42.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:03:42.911" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:03:42.911" starttime="20170714 12:03:42.910"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:03:42.911" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:03:42.911" starttime="20170714 12:03:42.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:03:42.912" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:03:42.912" starttime="20170714 12:03:42.912"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:03:43.091" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:03:43.091" starttime="20170714 12:03:42.913"></status>
</kw>
<msg timestamp="20170714 12:03:43.091" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:03:43.091" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:43.091" starttime="20170714 12:03:42.912"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:03:43.092" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:43.092" starttime="20170714 12:03:43.092"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:43.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:43.093" starttime="20170714 12:03:43.092"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.093" starttime="20170714 12:03:42.908"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.093" starttime="20170714 12:03:42.908"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.093" starttime="20170714 12:03:42.907"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:03:43.094" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170714 12:03:43.094" starttime="20170714 12:03:43.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:43.095" starttime="20170714 12:03:43.094"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:03:43.137" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170714 12:03:43.137" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:43.137" starttime="20170714 12:03:43.095"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:43.138" starttime="20170714 12:03:43.138"></status>
</kw>
<msg timestamp="20170714 12:03:43.138" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:43.138" starttime="20170714 12:03:42.906"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:43.139" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170714 12:03:43.139" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170714 12:03:43.139" starttime="20170714 12:03:43.139"></status>
</kw>
<status status="FAIL" endtime="20170714 12:03:43.139" starttime="20170714 12:03:42.906"></status>
</kw>
<msg timestamp="20170714 12:03:43.139" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 12:03:43.139" starttime="20170714 12:03:42.906"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170714 12:03:43.141" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170714 12:03:43.141" starttime="20170714 12:03:43.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:03:43.147" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:03:43.147" starttime="20170714 12:03:43.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:03:43.148" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:03:43.148" starttime="20170714 12:03:43.147"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:03:43.148" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:03:43.148" starttime="20170714 12:03:43.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:03:43.149" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:03:43.149" starttime="20170714 12:03:43.149"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:03:43.469" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:03:43.469" starttime="20170714 12:03:43.150"></status>
</kw>
<msg timestamp="20170714 12:03:43.469" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:03:43.470" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:43.470" starttime="20170714 12:03:43.150"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:03:43.470" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:43.470" starttime="20170714 12:03:43.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:43.471" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:43.471" starttime="20170714 12:03:43.471"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.471" starttime="20170714 12:03:43.146"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.471" starttime="20170714 12:03:43.145"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.471" starttime="20170714 12:03:43.144"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:03:43.472" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170714 12:03:43.472" starttime="20170714 12:03:43.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:43.473" starttime="20170714 12:03:43.472"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:03:43.553" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170714 12:03:43.553" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:43.553" starttime="20170714 12:03:43.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:43.554" starttime="20170714 12:03:43.553"></status>
</kw>
<msg timestamp="20170714 12:03:43.554" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:43.554" starttime="20170714 12:03:43.144"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:43.555" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:43.555" starttime="20170714 12:03:43.555"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:03:43.556" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:03:43.556" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:03:43.556" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170714 12:03:43.556" starttime="20170714 12:03:43.555"></status>
</kw>
<msg timestamp="20170714 12:03:43.556" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170714 12:03:43.556" starttime="20170714 12:03:43.143"></status>
</kw>
<msg timestamp="20170714 12:03:43.557" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170714 12:03:43.557" starttime="20170714 12:03:43.143"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:43.558" starttime="20170714 12:03:43.558"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.558" starttime="20170714 12:03:43.142"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.558" starttime="20170714 12:03:43.142"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.558" starttime="20170714 12:03:43.141"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.558" starttime="20170714 12:03:43.140"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.558" starttime="20170714 12:03:43.140"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.559" starttime="20170714 12:03:19.478"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.559" starttime="20170714 12:03:19.477"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170714 12:03:43.568" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170714 12:03:43.568" starttime="20170714 12:03:43.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170714 12:03:43.569" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170714 12:03:43.569" starttime="20170714 12:03:43.568"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:03:43.570" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170714 12:03:43.570" starttime="20170714 12:03:43.569"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:03:43.573" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:03:43.573" starttime="20170714 12:03:43.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:03:43.574" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:03:43.574" starttime="20170714 12:03:43.574"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:03:43.575" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:03:43.575" starttime="20170714 12:03:43.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:03:43.575" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:03:43.575" starttime="20170714 12:03:43.575"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:03:43.753" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:03:43.753" starttime="20170714 12:03:43.576"></status>
</kw>
<msg timestamp="20170714 12:03:43.753" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:03:43.753" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:43.753" starttime="20170714 12:03:43.576"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:03:43.754" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:43.754" starttime="20170714 12:03:43.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:43.755" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:43.755" starttime="20170714 12:03:43.754"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.755" starttime="20170714 12:03:43.572"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.755" starttime="20170714 12:03:43.572"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.755" starttime="20170714 12:03:43.571"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:03:43.756" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170714 12:03:43.756" starttime="20170714 12:03:43.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:03:43.756" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:03:43.756" starttime="20170714 12:03:43.756"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:43.757" starttime="20170714 12:03:43.756"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 12:03:43.758" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170714 12:03:43.758" starttime="20170714 12:03:43.758"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 12:03:43.759" level="INFO">URI:https://9.41.166.169/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170714 12:03:43.759" starttime="20170714 12:03:43.759"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.760" starttime="20170714 12:03:43.759"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:43.760" starttime="20170714 12:03:43.757"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:03:44.013" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170714 12:03:44.013" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:44.013" starttime="20170714 12:03:43.761"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 12:03:44.015" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 12:03:44.015" starttime="20170714 12:03:44.014"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 12:03:44.016" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 12:03:44.016" starttime="20170714 12:03:44.016"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:44.016" starttime="20170714 12:03:44.015"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:44.017" starttime="20170714 12:03:44.014"></status>
</kw>
<msg timestamp="20170714 12:03:44.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:44.017" starttime="20170714 12:03:43.570"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:44.018" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:44.018" starttime="20170714 12:03:44.017"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170714 12:03:44.018" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:03:44.018" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:03:44.019" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170714 12:03:44.019" starttime="20170714 12:03:44.018"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:44.019" starttime="20170714 12:03:43.569"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:03:44.022" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:03:44.023" starttime="20170714 12:03:44.022"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:03:44.023" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:03:44.023" starttime="20170714 12:03:44.023"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:03:44.024" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:03:44.024" starttime="20170714 12:03:44.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:03:44.024" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:03:44.025" starttime="20170714 12:03:44.024"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:03:44.200" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:03:44.200" starttime="20170714 12:03:44.025"></status>
</kw>
<msg timestamp="20170714 12:03:44.200" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:03:44.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:44.200" starttime="20170714 12:03:44.025"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:03:44.201" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:44.201" starttime="20170714 12:03:44.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:44.202" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:44.202" starttime="20170714 12:03:44.201"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:44.202" starttime="20170714 12:03:44.021"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:44.202" starttime="20170714 12:03:44.021"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:44.202" starttime="20170714 12:03:44.020"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:03:44.203" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170714 12:03:44.203" starttime="20170714 12:03:44.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:44.203" starttime="20170714 12:03:44.203"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:03:44.304" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170714 12:03:44.305" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:44.305" starttime="20170714 12:03:44.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:44.305" starttime="20170714 12:03:44.305"></status>
</kw>
<msg timestamp="20170714 12:03:44.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:03:44.306" starttime="20170714 12:03:44.020"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:03:44.306" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:03:44.306" starttime="20170714 12:03:44.306"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:03:44.307" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:03:44.307" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:03:44.307" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'p...</msg>
<status status="PASS" endtime="20170714 12:03:44.307" starttime="20170714 12:03:44.307"></status>
</kw>
<msg timestamp="20170714 12:03:44.307" level="INFO">${data} = {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application...</msg>
<status status="PASS" endtime="20170714 12:03:44.307" starttime="20170714 12:03:44.019"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:44.308" starttime="20170714 12:03:44.308"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:44.308" starttime="20170714 12:03:43.567"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:44.308" starttime="20170714 12:03:43.559"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<arguments>
<arg>/home/fspcibld/witherspoon-20170714115116.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:44.327" starttime="20170714 12:03:44.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:03:45.078" starttime="20170714 12:03:44.329"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:45.078" starttime="20170714 12:03:44.328"></status>
</kw>
<status status="PASS" endtime="20170714 12:03:45.079" starttime="20170714 12:03:44.317"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:00.993" starttime="20170714 12:03:45.079"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:00.994" starttime="20170714 12:03:44.317"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:00.994" starttime="20170714 12:03:44.309"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Activate BMC Flash Image</arg>
</arguments>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20170714 12:04:01.005" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20170714 12:04:01.005" starttime="20170714 12:04:01.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:04:01.006" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20170714 12:04:01.006" starttime="20170714 12:04:01.005"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:04:01.009" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:04:01.010" starttime="20170714 12:04:01.009"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:04:01.010" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:04:01.010" starttime="20170714 12:04:01.010"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:04:01.011" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:04:01.011" starttime="20170714 12:04:01.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:04:01.012" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:04:01.012" starttime="20170714 12:04:01.011"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:04:01.337" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:04:01.337" starttime="20170714 12:04:01.012"></status>
</kw>
<msg timestamp="20170714 12:04:01.338" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:04:01.338" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:01.338" starttime="20170714 12:04:01.012"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:04:01.338" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:01.338" starttime="20170714 12:04:01.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:01.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:01.339" starttime="20170714 12:04:01.339"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:01.339" starttime="20170714 12:04:01.008"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:01.339" starttime="20170714 12:04:01.007"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:01.340" starttime="20170714 12:04:01.007"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:04:01.340" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20170714 12:04:01.340" starttime="20170714 12:04:01.340"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:04:01.341" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:04:01.341" starttime="20170714 12:04:01.340"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:01.341" starttime="20170714 12:04:01.341"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:01.342" starttime="20170714 12:04:01.342"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:04:05.451" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170714 12:04:05.452" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:05.452" starttime="20170714 12:04:01.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:05.453" starttime="20170714 12:04:05.452"></status>
</kw>
<msg timestamp="20170714 12:04:05.453" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:05.453" starttime="20170714 12:04:01.006"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:05.453" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:05.454" starttime="20170714 12:04:05.453"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:04:05.458" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:04:05.459" starttime="20170714 12:04:05.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:04:05.459" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:04:05.460" starttime="20170714 12:04:05.459"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:04:05.460" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:04:05.461" starttime="20170714 12:04:05.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:04:05.462" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:04:05.462" starttime="20170714 12:04:05.461"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:04:05.653" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:04:05.653" starttime="20170714 12:04:05.463"></status>
</kw>
<msg timestamp="20170714 12:04:05.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:04:05.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:05.653" starttime="20170714 12:04:05.462"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:04:05.654" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:05.654" starttime="20170714 12:04:05.653"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:05.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:05.655" starttime="20170714 12:04:05.654"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:05.655" starttime="20170714 12:04:05.457"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:05.655" starttime="20170714 12:04:05.456"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:05.655" starttime="20170714 12:04:05.455"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:04:05.655" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170714 12:04:05.656" starttime="20170714 12:04:05.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:05.656" starttime="20170714 12:04:05.656"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:04:05.787" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170714 12:04:05.787" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:05.787" starttime="20170714 12:04:05.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:05.788" starttime="20170714 12:04:05.788"></status>
</kw>
<msg timestamp="20170714 12:04:05.789" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:05.789" starttime="20170714 12:04:05.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:05.789" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:05.789" starttime="20170714 12:04:05.789"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:04:05.790" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Deferred for mounted filesystem. reboot BMC to apply.", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:04:05.790" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:04:05.790" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Deferred for mounted filesystem. reboot BMC to apply.', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u...</msg>
<status status="PASS" endtime="20170714 12:04:05.790" starttime="20170714 12:04:05.790"></status>
</kw>
<msg timestamp="20170714 12:04:05.790" level="INFO">${data} = {u'status': u'Deferred for mounted filesystem. reboot BMC to apply.', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'/tmp/flashimg', u'preserve_network_se...</msg>
<status status="PASS" endtime="20170714 12:04:05.790" starttime="20170714 12:04:05.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:05.791" starttime="20170714 12:04:05.791"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:05.792" starttime="20170714 12:04:05.792"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:05.792" starttime="20170714 12:04:01.004"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:05.792" starttime="20170714 12:04:00.995"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ OBMC Reboot (off)</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>OBMC Reboot (off)</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170714 12:04:05.799" level="INFO">${boot_stack} = OBMC Reboot (off)</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:04:05.854" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:04:05.854" starttime="20170714 12:04:05.854"></status>
</kw>
<msg timestamp="20170714 12:04:05.854" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:04:05.854" starttime="20170714 12:04:05.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:05.856" starttime="20170714 12:04:05.855"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:05.856" starttime="20170714 12:04:05.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:05.856" starttime="20170714 12:04:05.856"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:04:05.858" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:04:05.858" starttime="20170714 12:04:05.857"></status>
</kw>
<msg timestamp="20170714 12:04:05.858" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:04:05.858" starttime="20170714 12:04:05.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:05.860" starttime="20170714 12:04:05.859"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:05.860" starttime="20170714 12:04:05.859"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:05.860" starttime="20170714 12:04:05.858"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:04:05.861" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:04:07.755" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:04:07.755" starttime="20170714 12:04:05.860"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:07.755" starttime="20170714 12:04:05.852"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:04:07.756" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170714 12:04:07.833" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:04:07.833" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170714 12:04:07.833" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:04:07.833" starttime="20170714 12:04:07.756"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170714 12:04:07.833" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170714 12:04:07.834" starttime="20170714 12:04:07.833"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170714 12:04:07.834" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170714 12:04:07.834" starttime="20170714 12:04:07.834"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:07.834" starttime="20170714 12:04:05.851"></status>
</kw>
<msg timestamp="20170714 12:04:07.835" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170714 12:04:08.198" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170714 12:04:08.212" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170714 12:04:08.212" starttime="20170714 12:04:08.212"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:04:08.214" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170714 12:04:08.214" starttime="20170714 12:04:08.213"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:04:08.217" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:04:08.217" starttime="20170714 12:04:08.216"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:04:08.218" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:04:08.218" starttime="20170714 12:04:08.218"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:04:08.219" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:04:08.219" starttime="20170714 12:04:08.218"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:04:08.219" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:04:08.219" starttime="20170714 12:04:08.219"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:04:08.410" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:04:08.410" starttime="20170714 12:04:08.221"></status>
</kw>
<msg timestamp="20170714 12:04:08.410" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:04:08.410" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:08.410" starttime="20170714 12:04:08.220"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:04:08.411" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:08.411" starttime="20170714 12:04:08.410"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:08.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:08.412" starttime="20170714 12:04:08.411"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:08.412" starttime="20170714 12:04:08.216"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:08.412" starttime="20170714 12:04:08.215"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:08.412" starttime="20170714 12:04:08.215"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:04:08.413" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170714 12:04:08.413" starttime="20170714 12:04:08.412"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:04:08.413" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:04:08.413" starttime="20170714 12:04:08.413"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:08.414" starttime="20170714 12:04:08.414"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 12:04:08.416" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170714 12:04:08.416" starttime="20170714 12:04:08.415"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 12:04:08.417" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170714 12:04:08.417" starttime="20170714 12:04:08.416"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:08.417" starttime="20170714 12:04:08.416"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:08.417" starttime="20170714 12:04:08.414"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:04:08.700" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170714 12:04:08.701" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:08.701" starttime="20170714 12:04:08.417"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 12:04:08.703" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 12:04:08.703" starttime="20170714 12:04:08.702"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 12:04:08.704" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 12:04:08.704" starttime="20170714 12:04:08.704"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:08.704" starttime="20170714 12:04:08.703"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:08.705" starttime="20170714 12:04:08.701"></status>
</kw>
<msg timestamp="20170714 12:04:08.705" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:08.705" starttime="20170714 12:04:08.214"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:08.706" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:08.706" starttime="20170714 12:04:08.705"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170714 12:04:08.707" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:04:08.707" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:04:08.707" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170714 12:04:08.707" starttime="20170714 12:04:08.706"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:08.707" starttime="20170714 12:04:08.213"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:04:08.712" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:04:08.713" starttime="20170714 12:04:08.711"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:04:08.714" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:04:08.714" starttime="20170714 12:04:08.713"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:04:08.716" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:04:08.716" starttime="20170714 12:04:08.714"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:04:08.717" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:04:08.717" starttime="20170714 12:04:08.716"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:04:08.917" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:04:08.917" starttime="20170714 12:04:08.718"></status>
</kw>
<msg timestamp="20170714 12:04:08.917" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:04:08.917" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:08.917" starttime="20170714 12:04:08.717"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:04:08.918" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:08.918" starttime="20170714 12:04:08.918"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:08.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:08.919" starttime="20170714 12:04:08.918"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:08.919" starttime="20170714 12:04:08.711"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:08.919" starttime="20170714 12:04:08.710"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:08.919" starttime="20170714 12:04:08.709"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:04:08.920" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170714 12:04:08.920" starttime="20170714 12:04:08.920"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:08.921" starttime="20170714 12:04:08.921"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:04:09.017" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170714 12:04:09.017" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:09.017" starttime="20170714 12:04:08.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:09.018" starttime="20170714 12:04:09.017"></status>
</kw>
<msg timestamp="20170714 12:04:09.018" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:09.018" starttime="20170714 12:04:08.708"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:09.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:09.019" starttime="20170714 12:04:09.018"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:04:09.019" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:04:09.019" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:04:09.019" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170714 12:04:09.019" starttime="20170714 12:04:09.019"></status>
</kw>
<msg timestamp="20170714 12:04:09.020" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170714 12:04:09.020" starttime="20170714 12:04:08.707"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170714 12:04:09.020" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:09.020" starttime="20170714 12:04:09.020"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:09.020" starttime="20170714 12:04:08.211"></status>
</kw>
<msg timestamp="20170714 12:04:09.082" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170714 12:04:09.100" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170714 12:04:09.108" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170714 12:04:09.108" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:04:09.111" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:04:09.111" starttime="20170714 12:04:09.110"></status>
</kw>
<msg timestamp="20170714 12:04:09.111" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:04:09.111" starttime="20170714 12:04:09.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:09.112" starttime="20170714 12:04:09.112"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:09.112" starttime="20170714 12:04:09.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:09.113" starttime="20170714 12:04:09.113"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:04:09.114" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:04:09.114" starttime="20170714 12:04:09.114"></status>
</kw>
<msg timestamp="20170714 12:04:09.114" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:04:09.114" starttime="20170714 12:04:09.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:09.116" starttime="20170714 12:04:09.116"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:09.116" starttime="20170714 12:04:09.115"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:09.116" starttime="20170714 12:04:09.115"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:04:09.117" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:04:10.896" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:04:10.896" starttime="20170714 12:04:09.117"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:10.896" starttime="20170714 12:04:09.109"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:04:10.935" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:04:10.937" starttime="20170714 12:04:10.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:04:10.937" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:04:10.937" starttime="20170714 12:04:10.937"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:04:10.938" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:04:10.938" starttime="20170714 12:04:10.938"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:04:10.939" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:04:10.939" starttime="20170714 12:04:10.938"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:04:11.138" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:04:11.139" starttime="20170714 12:04:10.939"></status>
</kw>
<msg timestamp="20170714 12:04:11.139" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:04:11.139" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.139" starttime="20170714 12:04:10.939"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:04:11.139" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.139" starttime="20170714 12:04:11.139"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:11.140" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.140" starttime="20170714 12:04:11.140"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:11.140" starttime="20170714 12:04:10.934"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:11.140" starttime="20170714 12:04:10.934"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:11.141" starttime="20170714 12:04:10.933"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:04:11.141" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170714 12:04:11.141" starttime="20170714 12:04:11.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:11.142" starttime="20170714 12:04:11.142"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:04:11.229" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170714 12:04:11.229" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.229" starttime="20170714 12:04:11.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:11.230" starttime="20170714 12:04:11.229"></status>
</kw>
<msg timestamp="20170714 12:04:11.230" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.230" starttime="20170714 12:04:10.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:11.231" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.231" starttime="20170714 12:04:11.230"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:04:11.232" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:04:11.232" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:04:11.232" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170714 12:04:11.232" starttime="20170714 12:04:11.232"></status>
</kw>
<msg timestamp="20170714 12:04:11.233" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170714 12:04:11.233" starttime="20170714 12:04:10.930"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:11.233" starttime="20170714 12:04:10.928"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:04:11.239" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:04:11.240" starttime="20170714 12:04:11.239"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:04:11.241" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:04:11.241" starttime="20170714 12:04:11.240"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:04:11.242" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:04:11.242" starttime="20170714 12:04:11.241"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:04:11.243" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:04:11.243" starttime="20170714 12:04:11.242"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:04:11.439" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:04:11.439" starttime="20170714 12:04:11.244"></status>
</kw>
<msg timestamp="20170714 12:04:11.439" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:04:11.439" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.439" starttime="20170714 12:04:11.243"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:04:11.440" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.440" starttime="20170714 12:04:11.439"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:11.440" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.440" starttime="20170714 12:04:11.440"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:11.441" starttime="20170714 12:04:11.238"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:11.441" starttime="20170714 12:04:11.237"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:11.441" starttime="20170714 12:04:11.237"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:04:11.441" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170714 12:04:11.441" starttime="20170714 12:04:11.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:11.442" starttime="20170714 12:04:11.442"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:04:11.505" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170714 12:04:11.505" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.505" starttime="20170714 12:04:11.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:11.506" starttime="20170714 12:04:11.506"></status>
</kw>
<msg timestamp="20170714 12:04:11.506" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.506" starttime="20170714 12:04:11.236"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:11.507" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.507" starttime="20170714 12:04:11.506"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:04:11.507" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:04:11.508" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:04:11.508" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170714 12:04:11.508" starttime="20170714 12:04:11.507"></status>
</kw>
<msg timestamp="20170714 12:04:11.508" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170714 12:04:11.508" starttime="20170714 12:04:11.235"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:11.508" starttime="20170714 12:04:11.234"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:04:11.512" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:04:11.513" starttime="20170714 12:04:11.512"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:04:11.514" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:04:11.514" starttime="20170714 12:04:11.513"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:04:11.515" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:04:11.515" starttime="20170714 12:04:11.514"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:04:11.516" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:04:11.516" starttime="20170714 12:04:11.515"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:04:11.717" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:04:11.717" starttime="20170714 12:04:11.517"></status>
</kw>
<msg timestamp="20170714 12:04:11.717" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:04:11.717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.717" starttime="20170714 12:04:11.516"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:04:11.718" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.718" starttime="20170714 12:04:11.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:11.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.719" starttime="20170714 12:04:11.719"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:11.720" starttime="20170714 12:04:11.511"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:11.720" starttime="20170714 12:04:11.511"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:11.720" starttime="20170714 12:04:11.510"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:04:11.721" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170714 12:04:11.721" starttime="20170714 12:04:11.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:11.722" starttime="20170714 12:04:11.721"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:04:11.789" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170714 12:04:11.789" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.789" starttime="20170714 12:04:11.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:11.790" starttime="20170714 12:04:11.789"></status>
</kw>
<msg timestamp="20170714 12:04:11.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.790" starttime="20170714 12:04:11.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:11.791" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:11.791" starttime="20170714 12:04:11.790"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:04:11.791" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:04:11.791" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:04:11.791" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170714 12:04:11.791" starttime="20170714 12:04:11.791"></status>
</kw>
<msg timestamp="20170714 12:04:11.792" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170714 12:04:11.792" starttime="20170714 12:04:11.509"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:11.792" starttime="20170714 12:04:11.509"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:04:11.796" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:04:11.797" starttime="20170714 12:04:11.796"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:04:11.797" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:04:11.798" starttime="20170714 12:04:11.797"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:04:11.798" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:04:11.799" starttime="20170714 12:04:11.798"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:04:11.799" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:04:11.800" starttime="20170714 12:04:11.799"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:04:12.094" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:04:12.094" starttime="20170714 12:04:11.801"></status>
</kw>
<msg timestamp="20170714 12:04:12.094" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:04:12.094" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:12.094" starttime="20170714 12:04:11.800"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:04:12.095" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:12.095" starttime="20170714 12:04:12.094"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:12.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:12.095" starttime="20170714 12:04:12.095"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:12.096" starttime="20170714 12:04:11.795"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:12.096" starttime="20170714 12:04:11.795"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:12.096" starttime="20170714 12:04:11.794"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:04:12.096" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170714 12:04:12.096" starttime="20170714 12:04:12.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:12.097" starttime="20170714 12:04:12.097"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:04:12.167" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170714 12:04:12.167" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:12.167" starttime="20170714 12:04:12.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:12.168" starttime="20170714 12:04:12.168"></status>
</kw>
<msg timestamp="20170714 12:04:12.168" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:04:12.168" starttime="20170714 12:04:11.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:04:12.169" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:04:12.169" starttime="20170714 12:04:12.169"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:04:12.169" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:04:12.170" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:04:12.170" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170714 12:04:12.170" starttime="20170714 12:04:12.169"></status>
</kw>
<msg timestamp="20170714 12:04:12.170" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170714 12:04:12.170" starttime="20170714 12:04:11.793"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:12.170" starttime="20170714 12:04:11.792"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>OBMC Reboot (off)</arg>
</arguments>
<msg timestamp="20170714 12:04:12.176" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:04:12.178" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:04:12.178" starttime="20170714 12:04:12.178"></status>
</kw>
<msg timestamp="20170714 12:04:12.178" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:04:12.178" starttime="20170714 12:04:12.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:12.180" starttime="20170714 12:04:12.179"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:12.180" starttime="20170714 12:04:12.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:12.180" starttime="20170714 12:04:12.180"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:04:12.181" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:04:12.181" starttime="20170714 12:04:12.181"></status>
</kw>
<msg timestamp="20170714 12:04:12.182" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:04:12.182" starttime="20170714 12:04:12.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:04:12.184" starttime="20170714 12:04:12.183"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:12.184" starttime="20170714 12:04:12.183"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:12.184" starttime="20170714 12:04:12.182"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:04:12.184" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:04:13.861" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:04:13.861" starttime="20170714 12:04:12.184"></status>
</kw>
<status status="PASS" endtime="20170714 12:04:13.862" starttime="20170714 12:04:12.177"></status>
</kw>
<kw name="Start Command" library="SSHLibrary">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>/sbin/reboot</arg>
</arguments>
<msg timestamp="20170714 12:04:13.862" level="INFO">Starting command '/sbin/reboot'.</msg>
<status status="PASS" endtime="20170714 12:04:13.868" starttime="20170714 12:04:13.862"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:04:17.908" level="FAIL">
#(UTC) 2017/07/14 12:04:17.901031 -    5.729118 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:04:17.912" starttime="20170714 12:04:13.882"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:04:21.938" level="FAIL">
#(UTC) 2017/07/14 12:04:21.936307 -    4.035276 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:04:21.939" starttime="20170714 12:04:17.924"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:04:25.953" level="FAIL">
#(UTC) 2017/07/14 12:04:25.951347 -    4.015040 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:04:25.954" starttime="20170714 12:04:21.941"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:04:29.971" level="FAIL">
#(UTC) 2017/07/14 12:04:29.968995 -    4.017648 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:04:29.972" starttime="20170714 12:04:25.957"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:04:33.990" level="FAIL">
#(UTC) 2017/07/14 12:04:33.987894 -    4.018899 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:04:33.991" starttime="20170714 12:04:29.975"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:04:38.006" level="FAIL">
#(UTC) 2017/07/14 12:04:38.003965 -    4.016071 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:04:38.007" starttime="20170714 12:04:33.994"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:04:42.021" level="FAIL">
#(UTC) 2017/07/14 12:04:42.019238 -    4.015273 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:04:42.022" starttime="20170714 12:04:38.009"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:04:46.035" level="FAIL">
#(UTC) 2017/07/14 12:04:46.032853 -    4.013615 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:04:46.036" starttime="20170714 12:04:42.024"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:04:50.049" level="FAIL">
#(UTC) 2017/07/14 12:04:50.047385 -    4.014532 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:04:50.050" starttime="20170714 12:04:46.038"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:04:54.066" level="FAIL">
#(UTC) 2017/07/14 12:04:54.063322 -    4.015937 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:04:54.066" starttime="20170714 12:04:50.053"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:04:58.106" level="FAIL">
#(UTC) 2017/07/14 12:04:58.097436 -    4.034114 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:04:58.111" starttime="20170714 12:04:54.069"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:05:02.158" level="FAIL">
#(UTC) 2017/07/14 12:05:02.147125 -    4.049689 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:05:02.163" starttime="20170714 12:04:58.121"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:05:06.209" level="FAIL">
#(UTC) 2017/07/14 12:05:06.206670 -    4.059545 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:05:06.210" starttime="20170714 12:05:02.175"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:05:10.227" level="FAIL">
#(UTC) 2017/07/14 12:05:10.224784 -    4.018114 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:05:10.228" starttime="20170714 12:05:06.213"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:05:14.242" level="FAIL">
#(UTC) 2017/07/14 12:05:14.239638 -    4.014854 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:05:14.243" starttime="20170714 12:05:10.231"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:05:18.254" level="FAIL">
#(UTC) 2017/07/14 12:05:18.251739 -    4.012101 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:05:18.255" starttime="20170714 12:05:14.245"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:05:22.272" level="FAIL">
#(UTC) 2017/07/14 12:05:22.269854 -    4.018115 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:05:22.273" starttime="20170714 12:05:18.258"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:05:26.286" level="FAIL">
#(UTC) 2017/07/14 12:05:26.283707 -    4.013853 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:05:26.287" starttime="20170714 12:05:22.276"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:05:30.303" level="FAIL">
#(UTC) 2017/07/14 12:05:30.300285 -    4.016578 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:05:30.304" starttime="20170714 12:05:26.290"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:05:34.318" level="FAIL">
#(UTC) 2017/07/14 12:05:34.315650 -    4.015365 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:05:34.319" starttime="20170714 12:05:30.306"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:05:38.335" level="FAIL">
#(UTC) 2017/07/14 12:05:38.332208 -    4.016558 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:05:38.336" starttime="20170714 12:05:34.322"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:05:42.351" level="FAIL">
#(UTC) 2017/07/14 12:05:42.348889 -    4.016681 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:05:42.352" starttime="20170714 12:05:38.338"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:05:46.367" level="FAIL">
#(UTC) 2017/07/14 12:05:46.364428 -    4.015539 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:05:46.368" starttime="20170714 12:05:42.355"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:05:50.383" level="FAIL">
#(UTC) 2017/07/14 12:05:50.381398 -    4.016970 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:05:50.384" starttime="20170714 12:05:46.371"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:05:54.401" level="FAIL">
#(UTC) 2017/07/14 12:05:54.398706 -    4.017308 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:05:54.402" starttime="20170714 12:05:50.386"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:05:58.418" level="FAIL">
#(UTC) 2017/07/14 12:05:58.415900 -    4.017194 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:05:58.419" starttime="20170714 12:05:54.405"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:06:02.439" level="FAIL">
#(UTC) 2017/07/14 12:06:02.435981 -    4.020081 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:06:02.440" starttime="20170714 12:05:58.422"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:06:06.470" level="FAIL">
#(UTC) 2017/07/14 12:06:06.462995 -    4.027014 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:06:06.471" starttime="20170714 12:06:02.442"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:06:10.492" level="FAIL">
#(UTC) 2017/07/14 12:06:10.489488 -    4.026493 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:06:10.493" starttime="20170714 12:06:06.474"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:06:14.506" level="FAIL">
#(UTC) 2017/07/14 12:06:14.503722 -    4.014234 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:06:14.507" starttime="20170714 12:06:10.495"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:06:18.523" level="FAIL">
#(UTC) 2017/07/14 12:06:18.520119 -    4.016397 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:06:18.524" starttime="20170714 12:06:14.510"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:06:22.539" level="FAIL">
#(UTC) 2017/07/14 12:06:22.536811 -    4.016692 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:06:22.540" starttime="20170714 12:06:18.526"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:06:26.565" level="FAIL">
#(UTC) 2017/07/14 12:06:26.560898 -    4.024087 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:06:26.566" starttime="20170714 12:06:22.543"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:06:30.578" level="FAIL">
#(UTC) 2017/07/14 12:06:30.575700 -    4.014802 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:06:30.579" starttime="20170714 12:06:26.568"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:06:34.595" level="FAIL">
#(UTC) 2017/07/14 12:06:34.592423 -    4.016723 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:06:34.596" starttime="20170714 12:06:30.582"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:06:38.610" level="FAIL">
#(UTC) 2017/07/14 12:06:38.607744 -    4.015321 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:06:38.611" starttime="20170714 12:06:34.598"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:06:42.632" level="FAIL">
#(UTC) 2017/07/14 12:06:42.623688 -    4.015944 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:06:42.632" starttime="20170714 12:06:38.614"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:06:46.647" level="FAIL">
#(UTC) 2017/07/14 12:06:46.644097 -    4.020409 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:06:46.648" starttime="20170714 12:06:42.634"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:06:50.663" level="FAIL">
#(UTC) 2017/07/14 12:06:50.659967 -    4.015870 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:06:50.663" starttime="20170714 12:06:46.650"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:06:54.679" level="FAIL">
#(UTC) 2017/07/14 12:06:54.676113 -    4.016146 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:06:54.680" starttime="20170714 12:06:50.666"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:06:58.694" level="FAIL">
#(UTC) 2017/07/14 12:06:58.691975 -    4.015862 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:06:58.696" starttime="20170714 12:06:54.682"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:07:02.710" level="FAIL">
#(UTC) 2017/07/14 12:07:02.707969 -    4.015994 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:07:02.711" starttime="20170714 12:06:58.698"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:07:06.728" level="FAIL">
#(UTC) 2017/07/14 12:07:06.725090 -    4.017121 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:07:06.729" starttime="20170714 12:07:02.714"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:07:10.745" level="FAIL">
#(UTC) 2017/07/14 12:07:10.742305 -    4.017215 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:07:10.746" starttime="20170714 12:07:06.731"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:07:14.762" level="FAIL">
#(UTC) 2017/07/14 12:07:14.759911 -    4.017606 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:07:14.763" starttime="20170714 12:07:10.749"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:07:18.780" level="FAIL">
#(UTC) 2017/07/14 12:07:18.777544 -    4.017633 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:07:18.781" starttime="20170714 12:07:14.766"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:07:22.799" level="FAIL">
#(UTC) 2017/07/14 12:07:22.795891 -    4.018347 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:07:22.799" starttime="20170714 12:07:18.784"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:07:26.818" level="FAIL">
#(UTC) 2017/07/14 12:07:26.814846 -    4.018955 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:07:26.819" starttime="20170714 12:07:22.802"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:07:30.835" level="FAIL">
#(UTC) 2017/07/14 12:07:30.832143 -    4.017297 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:07:30.836" starttime="20170714 12:07:26.821"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:07:34.856" level="FAIL">
#(UTC) 2017/07/14 12:07:34.851986 -    4.019843 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:07:34.857" starttime="20170714 12:07:30.839"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:07:38.870" level="FAIL">
#(UTC) 2017/07/14 12:07:38.867824 -    4.015838 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:07:38.871" starttime="20170714 12:07:34.859"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:07:42.887" level="FAIL">
#(UTC) 2017/07/14 12:07:42.884365 -    4.016541 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:07:42.888" starttime="20170714 12:07:38.874"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:07:46.904" level="FAIL">
#(UTC) 2017/07/14 12:07:46.901482 -    4.017117 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:07:46.905" starttime="20170714 12:07:42.891"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:07:50.919" level="FAIL">
#(UTC) 2017/07/14 12:07:50.915983 -    4.014501 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:07:50.920" starttime="20170714 12:07:46.908"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:07:54.935" level="FAIL">
#(UTC) 2017/07/14 12:07:54.931992 -    4.016009 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:07:54.935" starttime="20170714 12:07:50.922"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:07:58.953" level="FAIL">
#(UTC) 2017/07/14 12:07:58.950306 -    4.018314 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:07:58.953" starttime="20170714 12:07:54.938"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:08:02.966" level="FAIL">
#(UTC) 2017/07/14 12:08:02.963722 -    4.013416 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:08:02.967" starttime="20170714 12:07:58.956"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:08:06.983" level="FAIL">
#(UTC) 2017/07/14 12:08:06.980125 -    4.016403 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:08:06.984" starttime="20170714 12:08:02.970"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:08:10.998" level="FAIL">
#(UTC) 2017/07/14 12:08:10.995649 -    4.015524 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:08:11.000" starttime="20170714 12:08:06.986"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:08:15.015" level="FAIL">
#(UTC) 2017/07/14 12:08:15.012282 -    4.016633 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:08:15.016" starttime="20170714 12:08:11.003"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:08:19.033" level="FAIL">
#(UTC) 2017/07/14 12:08:19.029923 -    4.017641 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:08:19.033" starttime="20170714 12:08:15.018"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:08:23.051" level="FAIL">
#(UTC) 2017/07/14 12:08:23.048030 -    4.018107 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:08:23.052" starttime="20170714 12:08:19.036"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:08:27.068" level="FAIL">
#(UTC) 2017/07/14 12:08:27.064654 -    4.016624 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:08:27.069" starttime="20170714 12:08:23.054"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:08:31.083" level="FAIL">
#(UTC) 2017/07/14 12:08:31.079949 -    4.015295 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:08:31.084" starttime="20170714 12:08:27.071"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:08:35.099" level="FAIL">
#(UTC) 2017/07/14 12:08:35.095965 -    4.016016 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:08:35.100" starttime="20170714 12:08:31.086"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:08:39.115" level="FAIL">
#(UTC) 2017/07/14 12:08:39.112089 -    4.016124 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:08:39.116" starttime="20170714 12:08:35.102"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:08:43.130" level="FAIL">
#(UTC) 2017/07/14 12:08:43.127828 -    4.015739 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:08:43.131" starttime="20170714 12:08:39.118"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:08:47.149" level="FAIL">
#(UTC) 2017/07/14 12:08:47.146389 -    4.018561 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:08:47.150" starttime="20170714 12:08:43.134"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:08:51.164" level="FAIL">
#(UTC) 2017/07/14 12:08:51.161261 -    4.014872 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:08:51.165" starttime="20170714 12:08:47.153"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:08:55.179" level="FAIL">
#(UTC) 2017/07/14 12:08:55.176159 -    4.014898 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:08:55.180" starttime="20170714 12:08:51.167"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:08:59.195" level="FAIL">
#(UTC) 2017/07/14 12:08:59.191905 -    4.015746 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:08:59.195" starttime="20170714 12:08:55.183"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:09:03.212" level="FAIL">
#(UTC) 2017/07/14 12:09:03.209072 -    4.017167 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:09:03.213" starttime="20170714 12:08:59.198"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:09:07.227" level="FAIL">
#(UTC) 2017/07/14 12:09:07.223936 -    4.014864 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:09:07.228" starttime="20170714 12:09:03.215"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:09:11.243" level="FAIL">
#(UTC) 2017/07/14 12:09:11.240317 -    4.016381 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:09:11.244" starttime="20170714 12:09:07.230"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:09:15.261" level="FAIL">
#(UTC) 2017/07/14 12:09:15.258024 -    4.017707 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:09:15.262" starttime="20170714 12:09:11.246"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:09:19.278" level="FAIL">
#(UTC) 2017/07/14 12:09:19.274414 -    4.016390 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:09:19.279" starttime="20170714 12:09:15.265"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:09:23.295" level="FAIL">
#(UTC) 2017/07/14 12:09:23.291939 -    4.017525 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:09:23.295" starttime="20170714 12:09:19.281"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:09:27.311" level="FAIL">
#(UTC) 2017/07/14 12:09:27.308813 -    4.016874 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:09:27.312" starttime="20170714 12:09:23.298"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:09:31.327" level="FAIL">
#(UTC) 2017/07/14 12:09:31.323965 -    4.015152 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:09:31.327" starttime="20170714 12:09:27.315"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:09:35.350" level="FAIL">
#(UTC) 2017/07/14 12:09:35.344241 -    4.020276 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:09:35.355" starttime="20170714 12:09:31.330"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:09:39.375" level="FAIL">
#(UTC) 2017/07/14 12:09:39.371946 -    4.027705 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:09:39.376" starttime="20170714 12:09:35.363"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:09:43.390" level="FAIL">
#(UTC) 2017/07/14 12:09:43.387760 -    4.015814 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:09:43.391" starttime="20170714 12:09:39.379"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:09:47.407" level="FAIL">
#(UTC) 2017/07/14 12:09:47.405124 -    4.017364 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:09:47.408" starttime="20170714 12:09:43.393"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:09:51.425" level="FAIL">
#(UTC) 2017/07/14 12:09:51.422010 -    4.016886 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:09:51.426" starttime="20170714 12:09:47.411"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:09:55.439" level="FAIL">
#(UTC) 2017/07/14 12:09:55.436494 -    4.014484 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:09:55.440" starttime="20170714 12:09:51.428"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:09:59.454" level="FAIL">
#(UTC) 2017/07/14 12:09:59.451687 -    4.015193 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:09:59.455" starttime="20170714 12:09:55.442"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:10:03.471" level="FAIL">
#(UTC) 2017/07/14 12:10:03.468385 -    4.016698 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:10:03.472" starttime="20170714 12:09:59.457"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:10:07.486" level="FAIL">
#(UTC) 2017/07/14 12:10:07.484080 -    4.015695 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:10:07.487" starttime="20170714 12:10:03.474"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:10:11.506" level="FAIL">
#(UTC) 2017/07/14 12:10:11.502287 -    4.018207 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:10:11.506" starttime="20170714 12:10:07.490"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:10:15.524" level="FAIL">
#(UTC) 2017/07/14 12:10:15.521546 -    4.019259 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:10:15.525" starttime="20170714 12:10:11.508"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:10:19.546" level="FAIL">
#(UTC) 2017/07/14 12:10:19.543518 -    4.021972 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:10:19.547" starttime="20170714 12:10:15.528"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:10:23.562" level="FAIL">
#(UTC) 2017/07/14 12:10:23.559833 -    4.016315 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:10:23.563" starttime="20170714 12:10:19.549"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:10:27.594" level="FAIL">
#(UTC) 2017/07/14 12:10:27.583750 -    4.023917 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:10:27.595" starttime="20170714 12:10:23.565"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:10:31.611" level="FAIL">
#(UTC) 2017/07/14 12:10:31.607996 -    4.024246 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:10:31.612" starttime="20170714 12:10:27.597"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:10:35.634" level="FAIL">
#(UTC) 2017/07/14 12:10:35.631553 -    4.023557 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:10:35.635" starttime="20170714 12:10:31.616"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:10:39.651" level="FAIL">
#(UTC) 2017/07/14 12:10:39.648240 -    4.016687 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:10:39.652" starttime="20170714 12:10:35.638"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:10:43.666" level="FAIL">
#(UTC) 2017/07/14 12:10:43.663788 -    4.015548 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:10:43.667" starttime="20170714 12:10:39.655"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:10:47.683" level="FAIL">
#(UTC) 2017/07/14 12:10:47.680300 -    4.016512 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:10:47.684" starttime="20170714 12:10:43.670"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:10:51.698" level="FAIL">
#(UTC) 2017/07/14 12:10:51.695953 -    4.015653 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:10:51.699" starttime="20170714 12:10:47.686"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:10:55.714" level="FAIL">
#(UTC) 2017/07/14 12:10:55.711988 -    4.016035 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:10:55.715" starttime="20170714 12:10:51.702"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:10:59.727" level="FAIL">
#(UTC) 2017/07/14 12:10:59.723865 -    4.011877 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:10:59.728" starttime="20170714 12:10:55.718"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:11:03.744" level="FAIL">
#(UTC) 2017/07/14 12:11:03.740244 -    4.016379 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:11:03.745" starttime="20170714 12:10:59.730"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:11:07.763" level="FAIL">
#(UTC) 2017/07/14 12:11:07.759963 -    4.019719 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:11:07.764" starttime="20170714 12:11:03.747"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:11:11.779" level="FAIL">
#(UTC) 2017/07/14 12:11:11.776699 -    4.016736 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:11:11.780" starttime="20170714 12:11:07.766"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:11:15.803" level="FAIL">
#(UTC) 2017/07/14 12:11:15.800524 -    4.023825 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:11:15.804" starttime="20170714 12:11:11.783"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:11:19.819" level="FAIL">
#(UTC) 2017/07/14 12:11:19.816467 -    4.015943 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:11:19.820" starttime="20170714 12:11:15.807"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:11:23.835" level="FAIL">
#(UTC) 2017/07/14 12:11:23.831924 -    4.015457 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:11:23.836" starttime="20170714 12:11:19.823"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:11:27.851" level="FAIL">
#(UTC) 2017/07/14 12:11:27.847928 -    4.016004 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:11:27.852" starttime="20170714 12:11:23.838"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:11:31.866" level="FAIL">
#(UTC) 2017/07/14 12:11:31.863506 -    4.015578 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:11:31.867" starttime="20170714 12:11:27.854"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:11:35.891" level="FAIL">
#(UTC) 2017/07/14 12:11:35.886442 -    4.022936 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:11:35.892" starttime="20170714 12:11:31.870"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:11:39.906" level="FAIL">
#(UTC) 2017/07/14 12:11:39.903559 -    4.017117 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:11:39.907" starttime="20170714 12:11:35.895"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:11:43.921" level="FAIL">
#(UTC) 2017/07/14 12:11:43.918527 -    4.014968 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:11:43.922" starttime="20170714 12:11:39.909"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:11:47.939" level="FAIL">
#(UTC) 2017/07/14 12:11:47.936517 -    4.017990 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:11:47.940" starttime="20170714 12:11:43.925"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:11:51.955" level="FAIL">
#(UTC) 2017/07/14 12:11:51.952247 -    4.015730 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:11:51.955" starttime="20170714 12:11:47.943"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:11:55.973" level="FAIL">
#(UTC) 2017/07/14 12:11:55.968816 -    4.016569 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:11:55.974" starttime="20170714 12:11:51.958"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:11:59.987" level="FAIL">
#(UTC) 2017/07/14 12:11:59.984623 -    4.015807 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:11:59.988" starttime="20170714 12:11:55.976"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:12:04.024" level="FAIL">
#(UTC) 2017/07/14 12:12:04.011158 -    4.026535 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:12:04.029" starttime="20170714 12:11:59.991"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:12:08.060" level="FAIL">
#(UTC) 2017/07/14 12:12:08.057058 -    4.045900 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:12:08.061" starttime="20170714 12:12:04.042"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:12:12.074" level="FAIL">
#(UTC) 2017/07/14 12:12:12.071873 -    4.014815 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:12:12.075" starttime="20170714 12:12:08.063"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170714 12:12:16.111" level="FAIL">
#(UTC) 2017/07/14 12:12:16.099130 -    4.027257 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:12:16.116" starttime="20170714 12:12:12.078"></status>
</kw>
<msg timestamp="20170714 12:12:16.126" level="FAIL">Keyword 'Check State' failed after retrying for 8 minutes. The last error was: 
#(UTC) 2017/07/14 12:12:16.099130 -    4.027257 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170714 12:12:16.126" starttime="20170714 12:04:12.172"></status>
</kw>
<msg timestamp="20170714 12:12:16.138" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170714 12:12:16.142" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="My Ffdc" library="obmc_boot_test">
<doc>Collect FFDC data.</doc>
<msg timestamp="20170714 12:12:16.154" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<arguments>
<arg>ffdc_prefix=9.41.166.169.170714.121216.</arg>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170714 12:12:16.189" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170714 12:12:16.189" starttime="20170714 12:12:16.189"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170714 12:12:16.196" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170714 12:12:19.198" level="INFO">${RC} = 0</msg>
<msg timestamp="20170714 12:12:19.199" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.788 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.562 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" endtime="20170714 12:12:19.199" starttime="20170714 12:12:16.190"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170714 12:12:19.203" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.788 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.562 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.502 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.523 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.502/0.593/0.788/0.118 ms</msg>
<status status="PASS" endtime="20170714 12:12:19.203" starttime="20170714 12:12:19.202"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:19.203" starttime="20170714 12:12:19.203"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.204" starttime="20170714 12:12:16.188"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170714 12:12:19.240" level="INFO">${cur_time} = 2017-07-14 12:12:19:240108</msg>
<status status="PASS" endtime="20170714 12:12:19.240" starttime="20170714 12:12:19.240"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170714 12:12:19.241" level="INFO">${cur_time} = 20170714121219240108</msg>
<status status="PASS" endtime="20170714 12:12:19.241" starttime="20170714 12:12:19.241"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.241" starttime="20170714 12:12:19.239"></status>
</kw>
<msg timestamp="20170714 12:12:19.247" level="INFO">${FFDC_TIME} = 20170714121219240108</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170714 12:12:19.249" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170714 12:12:19.249" starttime="20170714 12:12:19.248"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170714 12:12:19.249" level="INFO">${suite_name} = 20170714121219240108_UpdateBmc</msg>
<status status="PASS" endtime="20170714 12:12:19.249" starttime="20170714 12:12:19.249"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170714 12:12:19.250" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170714 12:12:19.250" starttime="20170714 12:12:19.250"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170714 12:12:19.251" level="INFO">${test_name} = 20170714121219240108_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170714 12:12:19.251" starttime="20170714 12:12:19.250"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.251" starttime="20170714 12:12:19.248"></status>
</kw>
<msg timestamp="20170714 12:12:19.251" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170714 12:12:19.251" level="INFO">${FFDC_PREFIX} = 9.41.166.169.170714.121216.</msg>
<msg timestamp="20170714 12:12:19.279" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170714 12:12:19.281" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:19.281" starttime="20170714 12:12:19.280"></status>
</kw>
<msg timestamp="20170714 12:12:19.286" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:19.304" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:19.304" starttime="20170714 12:12:19.303"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.304" starttime="20170714 12:12:19.303"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:19.306" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:19.306" starttime="20170714 12:12:19.305"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.306" starttime="20170714 12:12:19.304"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:19.307" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:19.307" starttime="20170714 12:12:19.307"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.307" starttime="20170714 12:12:19.306"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:19.308" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:19.308" starttime="20170714 12:12:19.308"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.308" starttime="20170714 12:12:19.307"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:19.310" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:19.310" starttime="20170714 12:12:19.309"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.310" starttime="20170714 12:12:19.309"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:19.311" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:19.311" starttime="20170714 12:12:19.311"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.311" starttime="20170714 12:12:19.310"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:19.313" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:19.314" starttime="20170714 12:12:19.313"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.314" starttime="20170714 12:12:19.311"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:19.315" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:19.315" starttime="20170714 12:12:19.315"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.315" starttime="20170714 12:12:19.314"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:19.316" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:19.316" starttime="20170714 12:12:19.316"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.316" starttime="20170714 12:12:19.315"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:19.318" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:19.318" starttime="20170714 12:12:19.318"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.318" starttime="20170714 12:12:19.317"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:19.319" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:19.319" starttime="20170714 12:12:19.319"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.319" starttime="20170714 12:12:19.318"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:19.321" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:19.321" starttime="20170714 12:12:19.321"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.321" starttime="20170714 12:12:19.320"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:19.323" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:19.323" starttime="20170714 12:12:19.322"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.323" starttime="20170714 12:12:19.322"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:12:19.326" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:12:19.326" starttime="20170714 12:12:19.326"></status>
</kw>
<msg timestamp="20170714 12:12:19.326" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:12:19.326" starttime="20170714 12:12:19.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:19.328" starttime="20170714 12:12:19.328"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.328" starttime="20170714 12:12:19.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:19.329" starttime="20170714 12:12:19.329"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:12:19.330" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:12:19.330" starttime="20170714 12:12:19.330"></status>
</kw>
<msg timestamp="20170714 12:12:19.330" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:12:19.330" starttime="20170714 12:12:19.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:19.332" starttime="20170714 12:12:19.332"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.332" starttime="20170714 12:12:19.331"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:19.333" starttime="20170714 12:12:19.331"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:12:19.333" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:12:21.114" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:12:21.114" starttime="20170714 12:12:19.333"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.114" starttime="20170714 12:12:19.324"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:21.115" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170714 12:12:21.193" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:21.193" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170714 12:12:21.193" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:21.193" starttime="20170714 12:12:21.115"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170714 12:12:21.194" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170714 12:12:21.194" starttime="20170714 12:12:21.194"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170714 12:12:21.194" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170714 12:12:21.195" starttime="20170714 12:12:21.194"></status>
</kw>
<msg timestamp="20170714 12:12:21.195" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170714 12:12:21.195" starttime="20170714 12:12:19.323"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:21.196" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:21.196" starttime="20170714 12:12:21.196"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.196" starttime="20170714 12:12:21.195"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.197" starttime="20170714 12:12:19.317"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:21.198" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:21.198" starttime="20170714 12:12:21.198"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.198" starttime="20170714 12:12:21.197"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170714 12:12:21.199" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170714 12:12:21.199" starttime="20170714 12:12:21.199"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:21.200" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:21.201" starttime="20170714 12:12:21.200"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.201" starttime="20170714 12:12:21.199"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:21.202" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:21.202" starttime="20170714 12:12:21.201"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.202" starttime="20170714 12:12:21.201"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.202" starttime="20170714 12:12:21.199"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:21.203" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:21.204" starttime="20170714 12:12:21.203"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.204" starttime="20170714 12:12:21.202"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:21.205" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:21.205" starttime="20170714 12:12:21.205"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.205" starttime="20170714 12:12:21.204"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.205" starttime="20170714 12:12:21.202"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:21.206" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:21.207" starttime="20170714 12:12:21.206"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.207" starttime="20170714 12:12:21.205"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:21.208" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:21.208" starttime="20170714 12:12:21.207"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.208" starttime="20170714 12:12:21.207"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.208" starttime="20170714 12:12:21.205"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.208" starttime="20170714 12:12:21.199"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:21.209" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:21.209" starttime="20170714 12:12:21.209"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.209" starttime="20170714 12:12:21.208"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.210" starttime="20170714 12:12:19.302"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170714 12:12:21.219" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170714 12:12:21.219" starttime="20170714 12:12:21.218"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170714 12:12:21.221" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170714 12:12:21.221" starttime="20170714 12:12:21.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:21.222" starttime="20170714 12:12:21.222"></status>
</kw>
<msg timestamp="20170714 12:12:21.222" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170714 12:12:21.222" starttime="20170714 12:12:21.221"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:21.225" starttime="20170714 12:12:21.225"></status>
</kw>
<msg timestamp="20170714 12:12:21.225" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:21.225" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 12:12:21.225" starttime="20170714 12:12:21.224"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:21.226" starttime="20170714 12:12:21.225"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:12:21.253" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:12:21.253" starttime="20170714 12:12:21.253"></status>
</kw>
<msg timestamp="20170714 12:12:21.253" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:12:21.254" starttime="20170714 12:12:21.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:21.255" starttime="20170714 12:12:21.254"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.255" starttime="20170714 12:12:21.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:21.256" starttime="20170714 12:12:21.255"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:12:21.257" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:12:21.257" starttime="20170714 12:12:21.256"></status>
</kw>
<msg timestamp="20170714 12:12:21.257" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:12:21.257" starttime="20170714 12:12:21.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:21.259" starttime="20170714 12:12:21.258"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.259" starttime="20170714 12:12:21.258"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:21.259" starttime="20170714 12:12:21.257"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:12:21.259" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:12:22.905" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:12:22.906" starttime="20170714 12:12:21.259"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:22.906" starttime="20170714 12:12:21.251"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170714 12:12:22.906" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170714 12:12:22.906" starttime="20170714 12:12:22.906"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170714 12:12:22.908" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170714 12:12:22.908" starttime="20170714 12:12:22.907"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170714 12:12:22.913" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170714 12:12:22.913" starttime="20170714 12:12:22.908"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:22.916" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:22.917" starttime="20170714 12:12:22.916"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:22.917" starttime="20170714 12:12:22.915"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:22.918" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:22.918" starttime="20170714 12:12:22.918"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:22.918" starttime="20170714 12:12:22.917"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:22.919" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:22.919" starttime="20170714 12:12:22.919"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:22.919" starttime="20170714 12:12:22.918"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:22.921" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:22.921" starttime="20170714 12:12:22.920"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:22.921" starttime="20170714 12:12:22.920"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:22.921" starttime="20170714 12:12:22.915"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:22.921" starttime="20170714 12:12:22.914"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:22.922" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170714 12:12:24.314" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:24.315" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170714 12:12:24.315" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:24.315" starttime="20170714 12:12:22.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.322" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.322" starttime="20170714 12:12:24.321"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.322" starttime="20170714 12:12:24.320"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.322" starttime="20170714 12:12:24.315"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.322" starttime="20170714 12:12:22.914"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.322" starttime="20170714 12:12:22.913"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.322" starttime="20170714 12:12:22.913"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.322" starttime="20170714 12:12:22.907"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.323" starttime="20170714 12:12:22.907"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170714 12:12:24.324" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170714 12:12:24.324" starttime="20170714 12:12:24.323"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.324" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170714 12:12:24.325" starttime="20170714 12:12:24.324"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.328" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.328" starttime="20170714 12:12:24.327"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.328" starttime="20170714 12:12:24.327"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.329" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.329" starttime="20170714 12:12:24.329"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.329" starttime="20170714 12:12:24.328"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.330" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.331" starttime="20170714 12:12:24.330"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.331" starttime="20170714 12:12:24.330"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.332" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.332" starttime="20170714 12:12:24.332"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.332" starttime="20170714 12:12:24.331"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.332" starttime="20170714 12:12:24.326"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.332" starttime="20170714 12:12:24.326"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:24.333" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170714 12:12:24.428" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170714 12:12:24.428" level="INFO">${stdout} = </msg>
<msg timestamp="20170714 12:12:24.428" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170714 12:12:24.428" starttime="20170714 12:12:24.333"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.435" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.435" starttime="20170714 12:12:24.435"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.435" starttime="20170714 12:12:24.434"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.435" starttime="20170714 12:12:24.428"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.436" starttime="20170714 12:12:24.325"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.436" starttime="20170714 12:12:24.325"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.439" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.439" starttime="20170714 12:12:24.439"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.439" starttime="20170714 12:12:24.438"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.441" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.441" starttime="20170714 12:12:24.440"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.441" starttime="20170714 12:12:24.440"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.442" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.442" starttime="20170714 12:12:24.442"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.442" starttime="20170714 12:12:24.441"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.443" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.443" starttime="20170714 12:12:24.443"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.443" starttime="20170714 12:12:24.442"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.443" starttime="20170714 12:12:24.437"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.444" starttime="20170714 12:12:24.437"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:24.444" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170714 12:12:24.555" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:24.555" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-79"
VERSION_ID="v1.99.7-79-gdc969e4"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170714 12:12:24.555" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:24.555" starttime="20170714 12:12:24.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.562" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.562" starttime="20170714 12:12:24.561"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.562" starttime="20170714 12:12:24.561"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.562" starttime="20170714 12:12:24.556"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.562" starttime="20170714 12:12:24.436"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.562" starttime="20170714 12:12:24.436"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.562" starttime="20170714 12:12:24.325"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.562" starttime="20170714 12:12:24.323"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.562" starttime="20170714 12:12:24.323"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170714 12:12:24.563" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170714 12:12:24.563" starttime="20170714 12:12:24.563"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.564" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170714 12:12:24.564" starttime="20170714 12:12:24.564"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.567" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.567" starttime="20170714 12:12:24.567"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.568" starttime="20170714 12:12:24.566"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.569" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.569" starttime="20170714 12:12:24.568"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.569" starttime="20170714 12:12:24.568"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.570" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.570" starttime="20170714 12:12:24.570"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.570" starttime="20170714 12:12:24.569"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.572" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.572" starttime="20170714 12:12:24.571"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.572" starttime="20170714 12:12:24.570"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.572" starttime="20170714 12:12:24.566"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.572" starttime="20170714 12:12:24.566"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:24.573" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170714 12:12:24.709" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:24.710" level="INFO">${stdout} =  22:43:56 up  5:14,  load average: 0.53, 0.41, 0.36</msg>
<msg timestamp="20170714 12:12:24.710" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:24.710" starttime="20170714 12:12:24.572"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.716" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.716" starttime="20170714 12:12:24.716"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.716" starttime="20170714 12:12:24.715"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.717" starttime="20170714 12:12:24.710"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.717" starttime="20170714 12:12:24.565"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.717" starttime="20170714 12:12:24.565"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.720" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.720" starttime="20170714 12:12:24.719"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.720" starttime="20170714 12:12:24.719"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.721" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.721" starttime="20170714 12:12:24.721"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.721" starttime="20170714 12:12:24.720"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.722" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.723" starttime="20170714 12:12:24.722"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.723" starttime="20170714 12:12:24.721"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.724" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.724" starttime="20170714 12:12:24.723"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.724" starttime="20170714 12:12:24.723"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.724" starttime="20170714 12:12:24.718"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.724" starttime="20170714 12:12:24.718"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:24.725" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170714 12:12:24.809" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:24.809" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     46.1...</msg>
<msg timestamp="20170714 12:12:24.809" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:24.809" starttime="20170714 12:12:24.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.816" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.816" starttime="20170714 12:12:24.816"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.816" starttime="20170714 12:12:24.815"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.816" starttime="20170714 12:12:24.810"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.816" starttime="20170714 12:12:24.717"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.816" starttime="20170714 12:12:24.717"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.820" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.820" starttime="20170714 12:12:24.819"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.820" starttime="20170714 12:12:24.818"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.821" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.821" starttime="20170714 12:12:24.821"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.821" starttime="20170714 12:12:24.820"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.822" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.823" starttime="20170714 12:12:24.822"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.823" starttime="20170714 12:12:24.822"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.824" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.824" starttime="20170714 12:12:24.823"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.824" starttime="20170714 12:12:24.823"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.824" starttime="20170714 12:12:24.818"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.824" starttime="20170714 12:12:24.817"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:24.825" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170714 12:12:24.901" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:24.901" level="INFO">${stdout} = Linux witherspoon 4.10.17-990f06c35b7e119f00967e90f0514dbbd2e1b51b #1 Fri Jul 14 05:11:32 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170714 12:12:24.901" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:24.901" starttime="20170714 12:12:24.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.908" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:24.908" starttime="20170714 12:12:24.907"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.908" starttime="20170714 12:12:24.907"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.908" starttime="20170714 12:12:24.901"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.908" starttime="20170714 12:12:24.817"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.908" starttime="20170714 12:12:24.816"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.908" starttime="20170714 12:12:24.564"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.908" starttime="20170714 12:12:24.563"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.908" starttime="20170714 12:12:24.562"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.908" starttime="20170714 12:12:22.907"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.908" starttime="20170714 12:12:21.251"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.908" starttime="20170714 12:12:21.226"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.909" starttime="20170714 12:12:21.223"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.909" starttime="20170714 12:12:21.222"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:24.910" starttime="20170714 12:12:24.910"></status>
</kw>
<msg timestamp="20170714 12:12:24.911" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:24.911" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 12:12:24.911" starttime="20170714 12:12:24.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:24.911" starttime="20170714 12:12:24.911"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:12:24.938" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:12:24.938" starttime="20170714 12:12:24.938"></status>
</kw>
<msg timestamp="20170714 12:12:24.938" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:12:24.938" starttime="20170714 12:12:24.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:24.939" starttime="20170714 12:12:24.939"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.939" starttime="20170714 12:12:24.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:24.940" starttime="20170714 12:12:24.940"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:12:24.941" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:12:24.942" starttime="20170714 12:12:24.941"></status>
</kw>
<msg timestamp="20170714 12:12:24.942" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:12:24.942" starttime="20170714 12:12:24.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:24.943" starttime="20170714 12:12:24.943"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.944" starttime="20170714 12:12:24.943"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:24.944" starttime="20170714 12:12:24.942"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:12:24.946" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:12:26.627" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:12:26.627" starttime="20170714 12:12:24.944"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:26.628" starttime="20170714 12:12:24.936"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170714 12:12:26.629" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170714 12:12:26.629" starttime="20170714 12:12:26.628"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170714 12:12:26.630" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170714 12:12:26.630" starttime="20170714 12:12:26.630"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:12:26.631" level="INFO">${logpath} = /home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_elog.txt</msg>
<status status="PASS" endtime="20170714 12:12:26.631" starttime="20170714 12:12:26.631"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:26.634" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:26.635" starttime="20170714 12:12:26.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:26.636" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:26.636" starttime="20170714 12:12:26.635"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:26.636" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:26.636" starttime="20170714 12:12:26.636"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:26.637" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:26.637" starttime="20170714 12:12:26.637"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:26.988" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:26.988" starttime="20170714 12:12:26.638"></status>
</kw>
<msg timestamp="20170714 12:12:26.988" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:26.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:26.988" starttime="20170714 12:12:26.637"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:26.989" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:26.989" starttime="20170714 12:12:26.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:26.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:26.990" starttime="20170714 12:12:26.989"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:26.990" starttime="20170714 12:12:26.633"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:26.990" starttime="20170714 12:12:26.633"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:26.990" starttime="20170714 12:12:26.632"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:26.991" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170714 12:12:26.991" starttime="20170714 12:12:26.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:26.991" starttime="20170714 12:12:26.991"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:27.147" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170714 12:12:27.148" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:27.148" starttime="20170714 12:12:26.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:27.149" starttime="20170714 12:12:27.148"></status>
</kw>
<msg timestamp="20170714 12:12:27.149" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:27.149" starttime="20170714 12:12:26.631"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:27.150" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:27.150" starttime="20170714 12:12:27.149"></status>
</kw>
<msg timestamp="20170714 12:12:27.150" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170714 12:12:27.150" starttime="20170714 12:12:27.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:27.151" starttime="20170714 12:12:27.150"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170714 12:12:27.152" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710064281, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f c9 36 6a 5d 00 00 00 10 1f 11 ef c9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 00 01 00 00 00 01 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 a6 fc 00 00 08 48 55 44 04 dc 01 00 2a 00 b2 f0 01 01 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 00 03 7c 35 01 01 01 80 00 00 00 01 00 00 00 01 00 00 00 00 04 d4 04 5c 00 01 04 34 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00 6c 00 00 00 02 00 00 00 00 00 00 00 00 00 06 e6 da 00 00 00 01 00 08 46 54 74 fc e4 c9 00 00 02 77 80 3c 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 06 f0 64 00 00 00 01 00 04 46 54 5d ac e6 35 00 00 05 25 00 00 00 01 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bc 00 00 00 00 00 00 00 bc 00 00 00 04 00 00 00 00 00 00 00 00 00 01 dd 9a 00 00 00 01 00 08 46 54 90 52 f3 90 00 00 00 7e 00 00 00 01 00 00 00 00 00 00 00 24 00 00 00 00 00 04 9b 4a 00 00 00 01 00 04 46 54 9b c8 e8 24 00 00 02 7f ff f8 f2 58 00 00 00 20 00 00 00 00 00 06 9e f0 00 00 00 01 00 08 46 54 e7 28 2c 11 00 00 02 db ff f2 b8 00 ff f2 b8 04 00 00 00 24 00 00 00 00 00 06 a9 24 00 00 00 01 00 10 46 54 a7 f5 5a b9 00 00 02 e2 00 00 00 00 00 00 00 00 ff f2 b8 20 ff f2 b8 18 00 00 00 2c 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 0c 00 00 00 00 00 00 03 0c 00 00 00 16 00 00 00 00 00 00 00 00 00 01 52 74 00 00 00 00 00 04 46 54 51 ba 56 0f 00 00 07 cf ff fa 34 e0 00 00 00 20 00 00 00 00 00 01 5d 58 00 00 00 00 00 04 46 54 ed a3 95 d1 00 00 07 d3 ff fa 3f 38 00 00 00 20 00 00 00 00 00 01 65 d8 00 00 00 00 00 0c 46 54 33 b3 ad 6e 00 00 07 e4 00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 28 00 00 00 00 00 01 6e 4a 00 00 00 00 00 0c 46 54 bc 0d c8 47 00 00 07 e7 00 00 00 00 1d cd 65 00 00 00 00 00 00 00 00 28 00 00 00 00 00 01 78 be 00 00 00 00 00 0c 46 54 f4 73 1e 62 00 00 08 0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 28 00 00 00 00 00 01 86 9a 00 00 00 00 00 04 46 54 0a dc 26 00 00 00 04 b4 ff f9 fb 30 00 00 00 20 00 00 00 00 00 01 90 86 00 00 00 00 00 04 46 54 98 89 c1 e3 00 00 04 ba 00 00 10 00 00 00 00 20 00 00 00 00 00 01 98 02 00 00 00 00 00 04 46 54 27 60 c3 45 00 00 04 bd ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 9f f8 00 00 00 00 00 04 46 54 2e 0f 9e bb 00 00 04 c0 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 a8 04 00 00 00 00 00 04 46 54 e7 4b a0 ca 00 00 04 c3 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 d3 d2 00 00 00 01 00 04 46 54 9c b6 b2 72 00 00 06 27 00 00 08 08 00 00 00 20 00 00 00 00 00 04 a7 2a 00 00 00 01 00 08 46 54 81 6a 8c 3c 00 00 01 44 00 00 6c 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 cb b6 00 00 00 00 00 0c 46 54 de 96 27 53 00 00 00 7c 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 28 00 00 00 00 00 04 d5 16 00 00 00 01 00 04 46 54 68 af 80 4f 00 00 05 81 ff f9 fa e0 00 00 00 20 00 00 00 00 00 06 3b 06 00 00 00 01 00 04 46 54 8e 8a c0 53 00 00 03 39 80 30 00 00 00 00 00 20 00 00 00 00 00 06 57 50 00 00 00 01 00 04 46 54 6d 4d 98 fd 00 00 03 b8 80 32 00 00 00 00 00 20 00 00 00 00 00 06 8a ce 00 00 00 01 00 04 46 54 c5 9b 22 99 00 00 04 3e 00 00 03 e8 00 00 00 20 00 00 00 00 00 06 94 20 00 00 00 01 00 04 46 54 2b 09 df a5 00 00 02 c6 ff f2 01 80 00 00 00 20 00 00 00 00 00 06 b2 a2 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 27 00 00 00 00 00 00 00 20 00 00 00 00 00 06 c0 b8 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 32 80 3c 00 00 00 00 00 20 00 00 00 00 00 06 dd 80 00 00 00 01 00 04 46 54 ac d1 13 d0 00 00 02 66 00 00 00 00 00 00 00 20 00 00 00 00 00 06 fa cc 00 00 00 01 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 55 44 00 60 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 3f e7 94 00 00 00 00 40 40 22 80 00 00 00 00 40 3f dc 98 00 00 00 00 40 3f e2 f0 00 00 00 00 40 3f e5 30 00 00 00 00 40 3f e5 ec 00 00 00 00 40 3f 6c 60 00 00 00 00 40 19 bc 7c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 64 30 61 38 66 31 38 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 00 00 00 01 00 02 5c a4 00 00 00 01 00 02 58 a8 00 00 00 01 00 02 58 ec 00 00 00 01 00 02 63 48 00 00 00 01 00 02 72 6c 00 00 00 01 00 02 68 10 00 00 00 01 00 02 52 48 00 00 00 01 00 02 54 24 00 00 00 01 00 02 4c b4 00 00 00 01 00 02 4c 70 00 00 00 01 00 02 53 e0 00 00 00 01 00 02 4b e8 00 00 00 01 00 02 4c 2c 00 00 00 01 00 02 6b 40 00 00 00 01 00 02 64 e0 00 00 00 01 00 02 6e f8 00 00 00 01 00 02 6a 74 00 00 00 01 00 02 69 20 00 00 00 01 00 02 71 a0 00 00 00 01 00 02 6f c4 00 00 00 01 00 02 6d a4 00 00 00 01 00 02 72 28 00 00 00 01 00 02 67 88 00 00 00 01 00 02 64 14 00 00 00 01 00 02 5d 2c 00 00 00 01 00 02 5e 3c 00 00 00 01 00 02 66 34 00 00 00 01 00 02 6a 30 00 00 00 01 00 02 6e b4 00 00 00 01 00 02 69 ec 00 00 00 01 00 02 5c e8 00 00 00 01 00 02 60 18 00 00 00 01 00 02 6c 94 00 00 00 01 00 02 6c d8 00 00 00 01 00 02 6d 1c 00 00 00 01 00 02 63 04 00 00 00 01 00 02 60 e4 00 00 00 01 00 02 67 44 00 00 00 01 00 02 70 d4 00 00 00 01 00 02 52 8c 00 00 00 01 00 02 54 ac 00 00 00 01 00 02 4d 80 00 00 00 01 00 02 4d c4 00 00 00 01 00 02 54 68 00 00 00 01 00 02 4d 3c 00 00 00 01 00 02 4c f8 00 00 00 01 00 02 61 f4 00 00 00 01 00 02 69 a8 00 00 00 01 00 02 68 dc 00 00 00 01 00 02 73 7c 00 00 00 01 00 02 72 f4 00 00 00 01 00 02 6f 80 00 00 00 01 00 02 62 38 00 00 00 01 00 02 6a fc 00 00 00 01 00 02 68 98 00 00 00 01 00 02 53 58 00 00 00 01 00 02 56 00"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710068876, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "TIMEOUT_IN_MSEC=300000"
      ], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.State.Host.Error.SoftOffTimeout", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1492710422223, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:12:27.152" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170714 12:12:27.152" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "org.open_power.Error.Host.Event.Event",
            "Re...</msg>
<status status="PASS" endtime="20170714 12:12:27.152" starttime="20170714 12:12:27.151"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:27.154" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_elog.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:27.154" starttime="20170714 12:12:27.153"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:27.154" starttime="20170714 12:12:27.152"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:27.154" starttime="20170714 12:12:26.630"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:12:27.155" level="INFO">${logpath} = /home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170714 12:12:27.155" starttime="20170714 12:12:27.154"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:27.158" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:27.158" starttime="20170714 12:12:27.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:27.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:27.159" starttime="20170714 12:12:27.158"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:27.159" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:27.159" starttime="20170714 12:12:27.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:27.160" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:27.160" starttime="20170714 12:12:27.160"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:27.350" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:27.350" starttime="20170714 12:12:27.161"></status>
</kw>
<msg timestamp="20170714 12:12:27.351" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:27.351" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:27.351" starttime="20170714 12:12:27.160"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:27.351" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:27.351" starttime="20170714 12:12:27.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:27.352" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:27.352" starttime="20170714 12:12:27.352"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:27.352" starttime="20170714 12:12:27.157"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:27.352" starttime="20170714 12:12:27.156"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:27.352" starttime="20170714 12:12:27.156"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:27.353" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170714 12:12:27.353" starttime="20170714 12:12:27.353"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:27.354" starttime="20170714 12:12:27.353"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:27.562" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170714 12:12:27.562" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:27.562" starttime="20170714 12:12:27.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:27.563" starttime="20170714 12:12:27.563"></status>
</kw>
<msg timestamp="20170714 12:12:27.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:27.563" starttime="20170714 12:12:27.155"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:27.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:27.564" starttime="20170714 12:12:27.564"></status>
</kw>
<msg timestamp="20170714 12:12:27.565" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170714 12:12:27.565" starttime="20170714 12:12:27.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:27.565" starttime="20170714 12:12:27.565"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170714 12:12:27.566" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 1
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:12:27.566" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170714 12:12:27.566" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 1
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170714 12:12:27.566" starttime="20170714 12:12:27.565"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:27.568" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:27.568" starttime="20170714 12:12:27.567"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:27.568" starttime="20170714 12:12:27.566"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:27.568" starttime="20170714 12:12:27.154"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:12:27.569" level="INFO">${logpath} = /home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_inventory.txt</msg>
<status status="PASS" endtime="20170714 12:12:27.569" starttime="20170714 12:12:27.568"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:27.572" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:27.572" starttime="20170714 12:12:27.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:27.572" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:27.573" starttime="20170714 12:12:27.572"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:27.573" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:27.573" starttime="20170714 12:12:27.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:27.574" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:27.574" starttime="20170714 12:12:27.573"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:27.762" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:27.762" starttime="20170714 12:12:27.575"></status>
</kw>
<msg timestamp="20170714 12:12:27.762" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:27.762" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:27.762" starttime="20170714 12:12:27.575"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:27.763" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:27.763" starttime="20170714 12:12:27.762"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:27.763" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:27.763" starttime="20170714 12:12:27.763"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:27.763" starttime="20170714 12:12:27.571"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:27.764" starttime="20170714 12:12:27.570"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:27.764" starttime="20170714 12:12:27.570"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:27.764" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170714 12:12:27.764" starttime="20170714 12:12:27.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:27.765" starttime="20170714 12:12:27.765"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:29.713" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170714 12:12:29.714" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:29.714" starttime="20170714 12:12:27.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:29.715" starttime="20170714 12:12:29.714"></status>
</kw>
<msg timestamp="20170714 12:12:29.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:29.715" starttime="20170714 12:12:27.569"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:29.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:29.716" starttime="20170714 12:12:29.716"></status>
</kw>
<msg timestamp="20170714 12:12:29.716" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170714 12:12:29.716" starttime="20170714 12:12:29.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:29.717" starttime="20170714 12:12:29.717"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170714 12:12:29.721" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y230UF72R00C    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:12:29.722" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170714 12:12:29.722" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status status="PASS" endtime="20170714 12:12:29.722" starttime="20170714 12:12:29.717"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:29.724" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_inventory.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:29.724" starttime="20170714 12:12:29.723"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:29.724" starttime="20170714 12:12:29.722"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:29.724" starttime="20170714 12:12:27.568"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:12:29.725" level="INFO">${logpath} = /home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_led.txt</msg>
<status status="PASS" endtime="20170714 12:12:29.725" starttime="20170714 12:12:29.724"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:29.728" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:29.728" starttime="20170714 12:12:29.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:29.729" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:29.729" starttime="20170714 12:12:29.728"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:29.729" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:29.730" starttime="20170714 12:12:29.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:29.730" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:29.730" starttime="20170714 12:12:29.730"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:29.926" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:29.927" starttime="20170714 12:12:29.731"></status>
</kw>
<msg timestamp="20170714 12:12:29.927" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:29.927" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:29.927" starttime="20170714 12:12:29.731"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:29.928" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:29.928" starttime="20170714 12:12:29.927"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:29.928" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:29.929" starttime="20170714 12:12:29.928"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:29.929" starttime="20170714 12:12:29.727"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:29.929" starttime="20170714 12:12:29.726"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:29.929" starttime="20170714 12:12:29.725"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:29.929" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170714 12:12:29.929" starttime="20170714 12:12:29.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:29.930" starttime="20170714 12:12:29.930"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:29.972" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170714 12:12:29.972" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:29.972" starttime="20170714 12:12:29.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:29.973" starttime="20170714 12:12:29.973"></status>
</kw>
<msg timestamp="20170714 12:12:29.973" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:29.973" starttime="20170714 12:12:29.725"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:29.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170714 12:12:29.975" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170714 12:12:29.975" starttime="20170714 12:12:29.974"></status>
</kw>
<msg timestamp="20170714 12:12:29.975" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 12:12:29.975" starttime="20170714 12:12:29.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170714 12:12:29.976" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170714 12:12:29.976" starttime="20170714 12:12:29.976"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:29.976" starttime="20170714 12:12:29.975"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:29.976" starttime="20170714 12:12:29.724"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:12:29.977" level="INFO">${logpath} = /home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_record_log.txt</msg>
<status status="PASS" endtime="20170714 12:12:29.977" starttime="20170714 12:12:29.977"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:29.980" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:29.980" starttime="20170714 12:12:29.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:29.981" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:29.981" starttime="20170714 12:12:29.981"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:29.982" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:29.982" starttime="20170714 12:12:29.982"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:29.983" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:29.983" starttime="20170714 12:12:29.983"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:30.219" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:30.219" starttime="20170714 12:12:29.984"></status>
</kw>
<msg timestamp="20170714 12:12:30.219" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:30.220" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:30.220" starttime="20170714 12:12:29.984"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:30.220" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:30.220" starttime="20170714 12:12:30.220"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:30.221" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:30.221" starttime="20170714 12:12:30.221"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.221" starttime="20170714 12:12:29.979"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.221" starttime="20170714 12:12:29.978"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.221" starttime="20170714 12:12:29.978"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:30.222" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170714 12:12:30.222" starttime="20170714 12:12:30.222"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:30.223" starttime="20170714 12:12:30.222"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:30.283" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170714 12:12:30.283" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:30.283" starttime="20170714 12:12:30.223"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:30.283" starttime="20170714 12:12:30.283"></status>
</kw>
<msg timestamp="20170714 12:12:30.284" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:30.284" starttime="20170714 12:12:29.977"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:30.285" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170714 12:12:30.285" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170714 12:12:30.285" starttime="20170714 12:12:30.285"></status>
</kw>
<msg timestamp="20170714 12:12:30.285" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 12:12:30.285" starttime="20170714 12:12:30.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170714 12:12:30.287" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170714 12:12:30.287" starttime="20170714 12:12:30.287"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.287" starttime="20170714 12:12:30.286"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.287" starttime="20170714 12:12:29.976"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.287" starttime="20170714 12:12:26.630"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.287" starttime="20170714 12:12:26.629"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.287" starttime="20170714 12:12:26.629"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.287" starttime="20170714 12:12:26.629"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.288" starttime="20170714 12:12:24.936"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.288" starttime="20170714 12:12:24.912"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.288" starttime="20170714 12:12:24.909"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.288" starttime="20170714 12:12:24.909"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:30.291" starttime="20170714 12:12:30.290"></status>
</kw>
<msg timestamp="20170714 12:12:30.291" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:30.291" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 12:12:30.291" starttime="20170714 12:12:30.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:30.292" starttime="20170714 12:12:30.291"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:12:30.320" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:12:30.321" starttime="20170714 12:12:30.320"></status>
</kw>
<msg timestamp="20170714 12:12:30.321" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:12:30.321" starttime="20170714 12:12:30.319"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:30.322" starttime="20170714 12:12:30.322"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.322" starttime="20170714 12:12:30.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:30.323" starttime="20170714 12:12:30.322"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:12:30.326" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:12:30.326" starttime="20170714 12:12:30.324"></status>
</kw>
<msg timestamp="20170714 12:12:30.326" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:12:30.326" starttime="20170714 12:12:30.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:30.330" starttime="20170714 12:12:30.329"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.330" starttime="20170714 12:12:30.329"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:30.330" starttime="20170714 12:12:30.327"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:12:30.331" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:12:32.074" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:12:32.074" starttime="20170714 12:12:30.331"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:32.074" starttime="20170714 12:12:30.318"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170714 12:12:32.075" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170714 12:12:32.131" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170714 12:12:32.131" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170714 12:12:32.131" starttime="20170714 12:12:32.075"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170714 12:12:32.132" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170714 12:12:32.132" starttime="20170714 12:12:32.132"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:32.135" starttime="20170714 12:12:32.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:32.903" starttime="20170714 12:12:32.136"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:32.903" starttime="20170714 12:12:32.135"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:32.904" starttime="20170714 12:12:32.132"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170714 12:12:32.904" starttime="20170714 12:12:32.904"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:32.904" starttime="20170714 12:12:30.318"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:32.904" starttime="20170714 12:12:30.292"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:32.904" starttime="20170714 12:12:30.288"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:32.904" starttime="20170714 12:12:30.288"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:32.907" starttime="20170714 12:12:32.906"></status>
</kw>
<msg timestamp="20170714 12:12:32.907" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:32.907" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 12:12:32.907" starttime="20170714 12:12:32.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:32.908" starttime="20170714 12:12:32.907"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:12:32.937" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:12:32.937" starttime="20170714 12:12:32.937"></status>
</kw>
<msg timestamp="20170714 12:12:32.938" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:12:32.938" starttime="20170714 12:12:32.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:32.939" starttime="20170714 12:12:32.939"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:32.939" starttime="20170714 12:12:32.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:32.940" starttime="20170714 12:12:32.939"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:12:32.941" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:12:32.941" starttime="20170714 12:12:32.940"></status>
</kw>
<msg timestamp="20170714 12:12:32.941" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:12:32.941" starttime="20170714 12:12:32.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:32.943" starttime="20170714 12:12:32.942"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:32.943" starttime="20170714 12:12:32.942"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:32.943" starttime="20170714 12:12:32.941"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:12:32.943" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:12:34.623" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:12:34.623" starttime="20170714 12:12:32.943"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:34.623" starttime="20170714 12:12:32.935"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170714 12:12:34.624" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170714 12:12:34.624" starttime="20170714 12:12:34.624"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170714 12:12:34.626" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170714 12:12:34.626" starttime="20170714 12:12:34.625"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:12:34.627" level="INFO">${logpath} = /home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170714 12:12:34.627" starttime="20170714 12:12:34.627"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:34.629" starttime="20170714 12:12:34.628"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:34.629" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170714 12:12:34.959" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:34.959" level="INFO">${stdout} = Mem: 230372K used, 201960K free, 80356K shrd, 10952K buff, 116992K cached
CPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.69 0.45 0.38 1/155 2857
  PID  PPID USER ...</msg>
<msg timestamp="20170714 12:12:34.959" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:34.959" starttime="20170714 12:12:34.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:34.970" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:34.970" starttime="20170714 12:12:34.969"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:34.970" starttime="20170714 12:12:34.968"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:34.970" starttime="20170714 12:12:34.960"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:34.970" starttime="20170714 12:12:34.627"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:34.970" starttime="20170714 12:12:34.626"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:12:34.971" level="INFO">${logpath} = /home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170714 12:12:34.971" starttime="20170714 12:12:34.970"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:34.972" starttime="20170714 12:12:34.972"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:34.973" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170714 12:12:35.100" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:35.100" level="INFO">${stdout} = [  585.730000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[  585.730000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[  585.920000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[ ...</msg>
<msg timestamp="20170714 12:12:35.100" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:35.100" starttime="20170714 12:12:34.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:35.107" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:35.107" starttime="20170714 12:12:35.106"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:35.107" starttime="20170714 12:12:35.106"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:35.107" starttime="20170714 12:12:35.100"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:35.107" starttime="20170714 12:12:34.971"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:35.107" starttime="20170714 12:12:34.970"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:12:35.108" level="INFO">${logpath} = /home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170714 12:12:35.108" starttime="20170714 12:12:35.108"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:35.109" starttime="20170714 12:12:35.109"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:35.110" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170714 12:12:35.195" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:35.195" level="INFO">${stdout} = MemTotal:         432332 kB
MemFree:          201680 kB
MemAvailable:     247084 kB
Buffers:           10952 kB
Cached:           116996 kB
SwapCached:            0 kB
Active:           146412 kB
Inac...</msg>
<msg timestamp="20170714 12:12:35.195" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:35.195" starttime="20170714 12:12:35.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:35.203" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:35.203" starttime="20170714 12:12:35.203"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:35.204" starttime="20170714 12:12:35.202"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:35.204" starttime="20170714 12:12:35.195"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:35.204" starttime="20170714 12:12:35.108"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:35.204" starttime="20170714 12:12:35.107"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:12:35.205" level="INFO">${logpath} = /home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170714 12:12:35.205" starttime="20170714 12:12:35.204"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:35.206" starttime="20170714 12:12:35.206"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:35.207" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170714 12:12:35.291" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:35.291" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170714 12:12:35.291" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:35.291" starttime="20170714 12:12:35.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:35.298" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:35.298" starttime="20170714 12:12:35.298"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:35.298" starttime="20170714 12:12:35.297"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:35.298" starttime="20170714 12:12:35.292"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:35.298" starttime="20170714 12:12:35.205"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:35.298" starttime="20170714 12:12:35.204"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:12:35.299" level="INFO">${logpath} = /home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170714 12:12:35.299" starttime="20170714 12:12:35.299"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:35.301" starttime="20170714 12:12:35.300"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:35.301" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170714 12:12:39.388" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:39.390" level="INFO">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:28 UTC, end at Thu 2017-04-20 22:44:05 UTC. --
Apr 20 17:29:28 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:28 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170714 12:12:39.390" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:39.390" starttime="20170714 12:12:35.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:39.400" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:39.400" starttime="20170714 12:12:39.399"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:39.400" starttime="20170714 12:12:39.396"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:39.401" starttime="20170714 12:12:39.391"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:39.401" starttime="20170714 12:12:35.299"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:39.401" starttime="20170714 12:12:35.298"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:39.401" starttime="20170714 12:12:34.626"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:39.401" starttime="20170714 12:12:34.625"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:39.401" starttime="20170714 12:12:34.624"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:39.401" starttime="20170714 12:12:34.624"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:39.401" starttime="20170714 12:12:32.935"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:39.401" starttime="20170714 12:12:32.908"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:39.401" starttime="20170714 12:12:32.905"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:39.401" starttime="20170714 12:12:32.904"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:39.403" starttime="20170714 12:12:39.403"></status>
</kw>
<msg timestamp="20170714 12:12:39.403" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:39.404" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 12:12:39.404" starttime="20170714 12:12:39.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:39.404" starttime="20170714 12:12:39.404"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:39.437" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:39.438" starttime="20170714 12:12:39.435"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:39.438" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:39.438" starttime="20170714 12:12:39.438"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:39.439" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:39.439" starttime="20170714 12:12:39.439"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:39.440" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:39.440" starttime="20170714 12:12:39.439"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:39.709" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:39.709" starttime="20170714 12:12:39.440"></status>
</kw>
<msg timestamp="20170714 12:12:39.709" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:39.710" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:39.710" starttime="20170714 12:12:39.440"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:39.711" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:39.711" starttime="20170714 12:12:39.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:39.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:39.712" starttime="20170714 12:12:39.711"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:39.712" starttime="20170714 12:12:39.435"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:39.712" starttime="20170714 12:12:39.434"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:39.712" starttime="20170714 12:12:39.434"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:39.713" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170714 12:12:39.713" starttime="20170714 12:12:39.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:39.714" starttime="20170714 12:12:39.714"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:39.933" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170714 12:12:39.933" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:39.933" starttime="20170714 12:12:39.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:39.934" starttime="20170714 12:12:39.934"></status>
</kw>
<msg timestamp="20170714 12:12:39.934" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:39.934" starttime="20170714 12:12:39.433"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:39.936" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:39.936" starttime="20170714 12:12:39.936"></status>
</kw>
<msg timestamp="20170714 12:12:39.936" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170714 12:12:39.936" starttime="20170714 12:12:39.935"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:39.937" starttime="20170714 12:12:39.937"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:12:39.938" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710064281, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f c9 36 6a 5d 00 00 00 10 1f 11 ef c9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 00 01 00 00 00 01 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 a6 fc 00 00 08 48 55 44 04 dc 01 00 2a 00 b2 f0 01 01 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 00 03 7c 35 01 01 01 80 00 00 00 01 00 00 00 01 00 00 00 00 04 d4 04 5c 00 01 04 34 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00 6c 00 00 00 02 00 00 00 00 00 00 00 00 00 06 e6 da 00 00 00 01 00 08 46 54 74 fc e4 c9 00 00 02 77 80 3c 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 06 f0 64 00 00 00 01 00 04 46 54 5d ac e6 35 00 00 05 25 00 00 00 01 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bc 00 00 00 00 00 00 00 bc 00 00 00 04 00 00 00 00 00 00 00 00 00 01 dd 9a 00 00 00 01 00 08 46 54 90 52 f3 90 00 00 00 7e 00 00 00 01 00 00 00 00 00 00 00 24 00 00 00 00 00 04 9b 4a 00 00 00 01 00 04 46 54 9b c8 e8 24 00 00 02 7f ff f8 f2 58 00 00 00 20 00 00 00 00 00 06 9e f0 00 00 00 01 00 08 46 54 e7 28 2c 11 00 00 02 db ff f2 b8 00 ff f2 b8 04 00 00 00 24 00 00 00 00 00 06 a9 24 00 00 00 01 00 10 46 54 a7 f5 5a b9 00 00 02 e2 00 00 00 00 00 00 00 00 ff f2 b8 20 ff f2 b8 18 00 00 00 2c 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 0c 00 00 00 00 00 00 03 0c 00 00 00 16 00 00 00 00 00 00 00 00 00 01 52 74 00 00 00 00 00 04 46 54 51 ba 56 0f 00 00 07 cf ff fa 34 e0 00 00 00 20 00 00 00 00 00 01 5d 58 00 00 00 00 00 04 46 54 ed a3 95 d1 00 00 07 d3 ff fa 3f 38 00 00 00 20 00 00 00 00 00 01 65 d8 00 00 00 00 00 0c 46 54 33 b3 ad 6e 00 00 07 e4 00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 28 00 00 00 00 00 01 6e 4a 00 00 00 00 00 0c 46 54 bc 0d c8 47 00 00 07 e7 00 00 00 00 1d cd 65 00 00 00 00 00 00 00 00 28 00 00 00 00 00 01 78 be 00 00 00 00 00 0c 46 54 f4 73 1e 62 00 00 08 0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 28 00 00 00 00 00 01 86 9a 00 00 00 00 00 04 46 54 0a dc 26 00 00 00 04 b4 ff f9 fb 30 00 00 00 20 00 00 00 00 00 01 90 86 00 00 00 00 00 04 46 54 98 89 c1 e3 00 00 04 ba 00 00 10 00 00 00 00 20 00 00 00 00 00 01 98 02 00 00 00 00 00 04 46 54 27 60 c3 45 00 00 04 bd ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 9f f8 00 00 00 00 00 04 46 54 2e 0f 9e bb 00 00 04 c0 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 a8 04 00 00 00 00 00 04 46 54 e7 4b a0 ca 00 00 04 c3 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 d3 d2 00 00 00 01 00 04 46 54 9c b6 b2 72 00 00 06 27 00 00 08 08 00 00 00 20 00 00 00 00 00 04 a7 2a 00 00 00 01 00 08 46 54 81 6a 8c 3c 00 00 01 44 00 00 6c 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 cb b6 00 00 00 00 00 0c 46 54 de 96 27 53 00 00 00 7c 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 28 00 00 00 00 00 04 d5 16 00 00 00 01 00 04 46 54 68 af 80 4f 00 00 05 81 ff f9 fa e0 00 00 00 20 00 00 00 00 00 06 3b 06 00 00 00 01 00 04 46 54 8e 8a c0 53 00 00 03 39 80 30 00 00 00 00 00 20 00 00 00 00 00 06 57 50 00 00 00 01 00 04 46 54 6d 4d 98 fd 00 00 03 b8 80 32 00 00 00 00 00 20 00 00 00 00 00 06 8a ce 00 00 00 01 00 04 46 54 c5 9b 22 99 00 00 04 3e 00 00 03 e8 00 00 00 20 00 00 00 00 00 06 94 20 00 00 00 01 00 04 46 54 2b 09 df a5 00 00 02 c6 ff f2 01 80 00 00 00 20 00 00 00 00 00 06 b2 a2 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 27 00 00 00 00 00 00 00 20 00 00 00 00 00 06 c0 b8 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 32 80 3c 00 00 00 00 00 20 00 00 00 00 00 06 dd 80 00 00 00 01 00 04 46 54 ac d1 13 d0 00 00 02 66 00 00 00 00 00 00 00 20 00 00 00 00 00 06 fa cc 00 00 00 01 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 55 44 00 60 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 3f e7 94 00 00 00 00 40 40 22 80 00 00 00 00 40 3f dc 98 00 00 00 00 40 3f e2 f0 00 00 00 00 40 3f e5 30 00 00 00 00 40 3f e5 ec 00 00 00 00 40 3f 6c 60 00 00 00 00 40 19 bc 7c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 64 30 61 38 66 31 38 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 00 00 00 01 00 02 5c a4 00 00 00 01 00 02 58 a8 00 00 00 01 00 02 58 ec 00 00 00 01 00 02 63 48 00 00 00 01 00 02 72 6c 00 00 00 01 00 02 68 10 00 00 00 01 00 02 52 48 00 00 00 01 00 02 54 24 00 00 00 01 00 02 4c b4 00 00 00 01 00 02 4c 70 00 00 00 01 00 02 53 e0 00 00 00 01 00 02 4b e8 00 00 00 01 00 02 4c 2c 00 00 00 01 00 02 6b 40 00 00 00 01 00 02 64 e0 00 00 00 01 00 02 6e f8 00 00 00 01 00 02 6a 74 00 00 00 01 00 02 69 20 00 00 00 01 00 02 71 a0 00 00 00 01 00 02 6f c4 00 00 00 01 00 02 6d a4 00 00 00 01 00 02 72 28 00 00 00 01 00 02 67 88 00 00 00 01 00 02 64 14 00 00 00 01 00 02 5d 2c 00 00 00 01 00 02 5e 3c 00 00 00 01 00 02 66 34 00 00 00 01 00 02 6a 30 00 00 00 01 00 02 6e b4 00 00 00 01 00 02 69 ec 00 00 00 01 00 02 5c e8 00 00 00 01 00 02 60 18 00 00 00 01 00 02 6c 94 00 00 00 01 00 02 6c d8 00 00 00 01 00 02 6d 1c 00 00 00 01 00 02 63 04 00 00 00 01 00 02 60 e4 00 00 00 01 00 02 67 44 00 00 00 01 00 02 70 d4 00 00 00 01 00 02 52 8c 00 00 00 01 00 02 54 ac 00 00 00 01 00 02 4d 80 00 00 00 01 00 02 4d c4 00 00 00 01 00 02 54 68 00 00 00 01 00 02 4d 3c 00 00 00 01 00 02 4c f8 00 00 00 01 00 02 61 f4 00 00 00 01 00 02 69 a8 00 00 00 01 00 02 68 dc 00 00 00 01 00 02 73 7c 00 00 00 01 00 02 72 f4 00 00 00 01 00 02 6f 80 00 00 00 01 00 02 62 38 00 00 00 01 00 02 6a fc 00 00 00 01 00 02 68 98 00 00 00 01 00 02 53 58 00 00 00 01 00 02 56 00"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710068876, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "TIMEOUT_IN_MSEC=300000"
      ], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.State.Host.Error.SoftOffTimeout", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1492710422223, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:12:39.938" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:12:39.939" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/3': {u'Resolved': 0, u'AdditionalData': [u'TIMEOUT_IN_MSEC=300000'], u'Severity': u'xyz.openbmc_project.Logging...</msg>
<status status="PASS" endtime="20170714 12:12:39.939" starttime="20170714 12:12:39.938"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170714 12:12:39.939" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3']</msg>
<status status="PASS" endtime="20170714 12:12:39.939" starttime="20170714 12:12:39.939"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:12:39.940" level="INFO">${logpath} = /home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.esel</msg>
<status status="PASS" endtime="20170714 12:12:39.940" starttime="20170714 12:12:39.940"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170714 12:12:39.941" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.esel"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:39.941" starttime="20170714 12:12:39.940"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:39.946" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:39.946" starttime="20170714 12:12:39.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:39.947" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:39.947" starttime="20170714 12:12:39.947"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:39.948" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:39.948" starttime="20170714 12:12:39.948"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:39.949" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:39.949" starttime="20170714 12:12:39.949"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.133" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:40.134" starttime="20170714 12:12:39.951"></status>
</kw>
<msg timestamp="20170714 12:12:40.134" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:40.134" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.134" starttime="20170714 12:12:39.950"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.135" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.135" starttime="20170714 12:12:40.134"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.135" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.135" starttime="20170714 12:12:40.135"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.136" starttime="20170714 12:12:39.945"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.136" starttime="20170714 12:12:39.943"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.136" starttime="20170714 12:12:39.943"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:40.136" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170714 12:12:40.136" starttime="20170714 12:12:40.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:40.137" starttime="20170714 12:12:40.137"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:40.223" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170714 12:12:40.223" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.223" starttime="20170714 12:12:40.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:40.223" starttime="20170714 12:12:40.223"></status>
</kw>
<msg timestamp="20170714 12:12:40.224" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.224" starttime="20170714 12:12:39.942"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.224" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.224" starttime="20170714 12:12:40.224"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:12:40.225" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:12:40.225" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:12:40.225" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170714 12:12:40.225" starttime="20170714 12:12:40.225"></status>
</kw>
<msg timestamp="20170714 12:12:40.226" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170714 12:12:40.226" starttime="20170714 12:12:39.941"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170714 12:12:40.226" level="INFO">Length is 0</msg>
<msg timestamp="20170714 12:12:40.226" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170714 12:12:40.226" starttime="20170714 12:12:40.226"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.227" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170714 12:12:40.227" starttime="20170714 12:12:40.226"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.227" starttime="20170714 12:12:39.941"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:40.231" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:40.231" starttime="20170714 12:12:40.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:40.232" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:40.232" starttime="20170714 12:12:40.232"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:40.233" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:40.233" starttime="20170714 12:12:40.232"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:40.233" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:40.233" starttime="20170714 12:12:40.233"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.417" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:40.417" starttime="20170714 12:12:40.234"></status>
</kw>
<msg timestamp="20170714 12:12:40.418" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:40.418" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.418" starttime="20170714 12:12:40.234"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.418" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.418" starttime="20170714 12:12:40.418"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.419" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.419" starttime="20170714 12:12:40.419"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.419" starttime="20170714 12:12:40.230"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.419" starttime="20170714 12:12:40.230"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.420" starttime="20170714 12:12:40.229"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:40.420" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" endtime="20170714 12:12:40.420" starttime="20170714 12:12:40.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:40.421" starttime="20170714 12:12:40.421"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:40.519" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170714 12:12:40.519" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.519" starttime="20170714 12:12:40.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:40.520" starttime="20170714 12:12:40.519"></status>
</kw>
<msg timestamp="20170714 12:12:40.520" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.520" starttime="20170714 12:12:40.228"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.521" starttime="20170714 12:12:40.520"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:12:40.522" level="INFO">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f c9 36 6a 5d 00 00 00 10 1f 11 ef c9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 00 01 00 00 00 01 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 a6 fc 00 00 08 48 55 44 04 dc 01 00 2a 00 b2 f0 01 01 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 00 03 7c 35 01 01 01 80 00 00 00 01 00 00 00 01 00 00 00 00 04 d4 04 5c 00 01 04 34 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00 6c 00 00 00 02 00 00 00 00 00 00 00 00 00 06 e6 da 00 00 00 01 00 08 46 54 74 fc e4 c9 00 00 02 77 80 3c 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 06 f0 64 00 00 00 01 00 04 46 54 5d ac e6 35 00 00 05 25 00 00 00 01 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bc 00 00 00 00 00 00 00 bc 00 00 00 04 00 00 00 00 00 00 00 00 00 01 dd 9a 00 00 00 01 00 08 46 54 90 52 f3 90 00 00 00 7e 00 00 00 01 00 00 00 00 00 00 00 24 00 00 00 00 00 04 9b 4a 00 00 00 01 00 04 46 54 9b c8 e8 24 00 00 02 7f ff f8 f2 58 00 00 00 20 00 00 00 00 00 06 9e f0 00 00 00 01 00 08 46 54 e7 28 2c 11 00 00 02 db ff f2 b8 00 ff f2 b8 04 00 00 00 24 00 00 00 00 00 06 a9 24 00 00 00 01 00 10 46 54 a7 f5 5a b9 00 00 02 e2 00 00 00 00 00 00 00 00 ff f2 b8 20 ff f2 b8 18 00 00 00 2c 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 0c 00 00 00 00 00 00 03 0c 00 00 00 16 00 00 00 00 00 00 00 00 00 01 52 74 00 00 00 00 00 04 46 54 51 ba 56 0f 00 00 07 cf ff fa 34 e0 00 00 00 20 00 00 00 00 00 01 5d 58 00 00 00 00 00 04 46 54 ed a3 95 d1 00 00 07 d3 ff fa 3f 38 00 00 00 20 00 00 00 00 00 01 65 d8 00 00 00 00 00 0c 46 54 33 b3 ad 6e 00 00 07 e4 00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 28 00 00 00 00 00 01 6e 4a 00 00 00 00 00 0c 46 54 bc 0d c8 47 00 00 07 e7 00 00 00 00 1d cd 65 00 00 00 00 00 00 00 00 28 00 00 00 00 00 01 78 be 00 00 00 00 00 0c 46 54 f4 73 1e 62 00 00 08 0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 28 00 00 00 00 00 01 86 9a 00 00 00 00 00 04 46 54 0a dc 26 00 00 00 04 b4 ff f9 fb 30 00 00 00 20 00 00 00 00 00 01 90 86 00 00 00 00 00 04 46 54 98 89 c1 e3 00 00 04 ba 00 00 10 00 00 00 00 20 00 00 00 00 00 01 98 02 00 00 00 00 00 04 46 54 27 60 c3 45 00 00 04 bd ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 9f f8 00 00 00 00 00 04 46 54 2e 0f 9e bb 00 00 04 c0 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 a8 04 00 00 00 00 00 04 46 54 e7 4b a0 ca 00 00 04 c3 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 d3 d2 00 00 00 01 00 04 46 54 9c b6 b2 72 00 00 06 27 00 00 08 08 00 00 00 20 00 00 00 00 00 04 a7 2a 00 00 00 01 00 08 46 54 81 6a 8c 3c 00 00 01 44 00 00 6c 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 cb b6 00 00 00 00 00 0c 46 54 de 96 27 53 00 00 00 7c 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 28 00 00 00 00 00 04 d5 16 00 00 00 01 00 04 46 54 68 af 80 4f 00 00 05 81 ff f9 fa e0 00 00 00 20 00 00 00 00 00 06 3b 06 00 00 00 01 00 04 46 54 8e 8a c0 53 00 00 03 39 80 30 00 00 00 00 00 20 00 00 00 00 00 06 57 50 00 00 00 01 00 04 46 54 6d 4d 98 fd 00 00 03 b8 80 32 00 00 00 00 00 20 00 00 00 00 00 06 8a ce 00 00 00 01 00 04 46 54 c5 9b 22 99 00 00 04 3e 00 00 03 e8 00 00 00 20 00 00 00 00 00 06 94 20 00 00 00 01 00 04 46 54 2b 09 df a5 00 00 02 c6 ff f2 01 80 00 00 00 20 00 00 00 00 00 06 b2 a2 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 27 00 00 00 00 00 00 00 20 00 00 00 00 00 06 c0 b8 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 32 80 3c 00 00 00 00 00 20 00 00 00 00 00 06 dd 80 00 00 00 01 00 04 46 54 ac d1 13 d0 00 00 02 66 00 00 00 00 00 00 00 20 00 00 00 00 00 06 fa cc 00 00 00 01 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 55 44 00 60 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 3f e7 94 00 00 00 00 40 40 22 80 00 00 00 00 40 3f dc 98 00 00 00 00 40 3f e2 f0 00 00 00 00 40 3f e5 30 00 00 00 00 40 3f e5 ec 00 00 00 00 40 3f 6c 60 00 00 00 00 40 19 bc 7c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 64 30 61 38 66 31 38 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 00 00 00 01 00 02 5c a4 00 00 00 01 00 02 58 a8 00 00 00 01 00 02 58 ec 00 00 00 01 00 02 63 48 00 00 00 01 00 02 72 6c 00 00 00 01 00 02 68 10 00 00 00 01 00 02 52 48 00 00 00 01 00 02 54 24 00 00 00 01 00 02 4c b4 00 00 00 01 00 02 4c 70 00 00 00 01 00 02 53 e0 00 00 00 01 00 02 4b e8 00 00 00 01 00 02 4c 2c 00 00 00 01 00 02 6b 40 00 00 00 01 00 02 64 e0 00 00 00 01 00 02 6e f8 00 00 00 01 00 02 6a 74 00 00 00 01 00 02 69 20 00 00 00 01 00 02 71 a0 00 00 00 01 00 02 6f c4 00 00 00 01 00 02 6d a4 00 00 00 01 00 02 72 28 00 00 00 01 00 02 67 88 00 00 00 01 00 02 64 14 00 00 00 01 00 02 5d 2c 00 00 00 01 00 02 5e 3c 00 00 00 01 00 02 66 34 00 00 00 01 00 02 6a 30 00 00 00 01 00 02 6e b4 00 00 00 01 00 02 69 ec 00 00 00 01 00 02 5c e8 00 00 00 01 00 02 60 18 00 00 00 01 00 02 6c 94 00 00 00 01 00 02 6c d8 00 00 00 01 00 02 6d 1c 00 00 00 01 00 02 63 04 00 00 00 01 00 02 60 e4 00 00 00 01 00 02 67 44 00 00 00 01 00 02 70 d4 00 00 00 01 00 02 52 8c 00 00 00 01 00 02 54 ac 00 00 00 01 00 02 4d 80 00 00 00 01 00 02 4d c4 00 00 00 01 00 02 54 68 00 00 00 01 00 02 4d 3c 00 00 00 01 00 02 4c f8 00 00 00 01 00 02 61 f4 00 00 00 01 00 02 69 a8 00 00 00 01 00 02 68 dc 00 00 00 01 00 02 73 7c 00 00 00 01 00 02 72 f4 00 00 00 01 00 02 6f 80 00 00 00 01 00 02 62 38 00 00 00 01 00 02 6a fc 00 00 00 01 00 02 68 98 00 00 00 01 00 02 53 58 00 00 00 01 00 02 56 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:12:40.522" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:12:40.522" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f c9 36 6a 5d 00 00 00 10 1f 11 ef c9 42 00 00 07 00 00 00 ...</msg>
<status status="PASS" endtime="20170714 12:12:40.522" starttime="20170714 12:12:40.521"></status>
</kw>
<msg timestamp="20170714 12:12:40.523" level="INFO">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f c9 36 6a 5d 00 00 00 10 1f 11 ef c9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 ...</msg>
<status status="PASS" endtime="20170714 12:12:40.523" starttime="20170714 12:12:40.227"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170714 12:12:40.523" level="INFO">Length is 1</msg>
<msg timestamp="20170714 12:12:40.523" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20170714 12:12:40.524" starttime="20170714 12:12:40.523"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:40.525" starttime="20170714 12:12:40.524"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.526" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.esel"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:40.527" starttime="20170714 12:12:40.526"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.527" starttime="20170714 12:12:40.525"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.528" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.esel"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:40.528" starttime="20170714 12:12:40.527"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.528" starttime="20170714 12:12:40.527"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.528" starttime="20170714 12:12:40.227"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:40.532" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:40.532" starttime="20170714 12:12:40.532"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:40.533" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:40.533" starttime="20170714 12:12:40.533"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:40.534" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:40.534" starttime="20170714 12:12:40.533"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:40.534" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:40.534" starttime="20170714 12:12:40.534"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.738" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:40.738" starttime="20170714 12:12:40.535"></status>
</kw>
<msg timestamp="20170714 12:12:40.738" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:40.738" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.739" starttime="20170714 12:12:40.535"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.739" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.739" starttime="20170714 12:12:40.739"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.740" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.740" starttime="20170714 12:12:40.740"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.740" starttime="20170714 12:12:40.531"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.740" starttime="20170714 12:12:40.531"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.740" starttime="20170714 12:12:40.530"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:40.741" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" endtime="20170714 12:12:40.741" starttime="20170714 12:12:40.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:40.742" starttime="20170714 12:12:40.741"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:40.882" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170714 12:12:40.882" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.882" starttime="20170714 12:12:40.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:40.883" starttime="20170714 12:12:40.882"></status>
</kw>
<msg timestamp="20170714 12:12:40.883" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.883" starttime="20170714 12:12:40.529"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.883" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:40.883" starttime="20170714 12:12:40.883"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:12:40.884" level="INFO">To JSON using : content={
  "data": [
    "TIMEOUT_IN_MSEC=300000"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:12:40.884" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:12:40.884" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'TIMEOUT_IN_MSEC=300000']}</msg>
<status status="PASS" endtime="20170714 12:12:40.884" starttime="20170714 12:12:40.884"></status>
</kw>
<msg timestamp="20170714 12:12:40.885" level="INFO">${esel_data} = [u'TIMEOUT_IN_MSEC=300000']</msg>
<status status="PASS" endtime="20170714 12:12:40.885" starttime="20170714 12:12:40.528"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170714 12:12:40.885" level="INFO">Length is 1</msg>
<msg timestamp="20170714 12:12:40.885" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20170714 12:12:40.885" starttime="20170714 12:12:40.885"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:40.886" starttime="20170714 12:12:40.886"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.888" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.esel"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:40.888" starttime="20170714 12:12:40.887"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.888" starttime="20170714 12:12:40.886"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:40.889" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.esel"&gt;/home/fspcibld/logs/20170714121219240108_UpdateBmc/20170714121219240108_InitiateCodeUpdateBMC/9.41.166.169.170714.121216.esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:40.889" starttime="20170714 12:12:40.889"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.889" starttime="20170714 12:12:40.888"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.889" starttime="20170714 12:12:40.528"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.889" starttime="20170714 12:12:39.941"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170714 12:12:40.894" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170714 12:12:40.901" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170714 12:12:40.901" starttime="20170714 12:12:40.889"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170714 12:12:40.921" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170714 12:12:40.921" starttime="20170714 12:12:40.920"></status>
</kw>
<msg timestamp="20170714 12:12:40.921" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 12:12:40.921" starttime="20170714 12:12:40.918"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170714 12:12:40.922" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170714 12:12:40.922" starttime="20170714 12:12:40.921"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.923" starttime="20170714 12:12:39.432"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.923" starttime="20170714 12:12:39.405"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.923" starttime="20170714 12:12:39.402"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.923" starttime="20170714 12:12:39.401"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:40.926" starttime="20170714 12:12:40.926"></status>
</kw>
<msg timestamp="20170714 12:12:40.927" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:40.927" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 12:12:40.927" starttime="20170714 12:12:40.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:40.928" starttime="20170714 12:12:40.927"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170714 12:12:40.953" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170714 12:12:40.953" starttime="20170714 12:12:40.953"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.954" starttime="20170714 12:12:40.952"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.954" starttime="20170714 12:12:40.928"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.954" starttime="20170714 12:12:40.924"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.954" starttime="20170714 12:12:40.923"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.954" starttime="20170714 12:12:21.222"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.954" starttime="20170714 12:12:21.219"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.954" starttime="20170714 12:12:21.219"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:40.955" starttime="20170714 12:12:21.219"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170714 12:12:41.181" starttime="20170714 12:12:40.955"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:41.181" starttime="20170714 12:12:21.218"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:41.182" starttime="20170714 12:12:16.165"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:12:41.185" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:12:41.185" starttime="20170714 12:12:41.185"></status>
</kw>
<msg timestamp="20170714 12:12:41.185" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:12:41.186" starttime="20170714 12:12:41.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:41.188" starttime="20170714 12:12:41.187"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:41.188" starttime="20170714 12:12:41.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:41.189" starttime="20170714 12:12:41.188"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:12:41.191" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:12:41.191" starttime="20170714 12:12:41.190"></status>
</kw>
<msg timestamp="20170714 12:12:41.191" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:12:41.191" starttime="20170714 12:12:41.190"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:41.194" starttime="20170714 12:12:41.193"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:41.194" starttime="20170714 12:12:41.193"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:41.194" starttime="20170714 12:12:41.192"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:12:41.195" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:12:43.689" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:12:43.689" starttime="20170714 12:12:41.195"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:43.690" starttime="20170714 12:12:41.183"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:43.733" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:43.734" starttime="20170714 12:12:43.732"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:43.735" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:43.735" starttime="20170714 12:12:43.734"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:43.736" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:43.736" starttime="20170714 12:12:43.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:43.736" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:43.736" starttime="20170714 12:12:43.736"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:43.940" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:43.940" starttime="20170714 12:12:43.737"></status>
</kw>
<msg timestamp="20170714 12:12:43.940" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:43.940" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:43.940" starttime="20170714 12:12:43.737"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:43.941" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:43.941" starttime="20170714 12:12:43.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:43.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:43.941" starttime="20170714 12:12:43.941"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:43.941" starttime="20170714 12:12:43.731"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:43.942" starttime="20170714 12:12:43.731"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:43.942" starttime="20170714 12:12:43.728"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:43.942" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170714 12:12:43.942" starttime="20170714 12:12:43.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:43.943" starttime="20170714 12:12:43.943"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:44.012" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170714 12:12:44.012" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.012" starttime="20170714 12:12:43.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:44.013" starttime="20170714 12:12:44.012"></status>
</kw>
<msg timestamp="20170714 12:12:44.013" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.013" starttime="20170714 12:12:43.727"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:44.014" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.014" starttime="20170714 12:12:44.013"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:12:44.014" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:12:44.014" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:12:44.014" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170714 12:12:44.014" starttime="20170714 12:12:44.014"></status>
</kw>
<msg timestamp="20170714 12:12:44.015" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170714 12:12:44.015" starttime="20170714 12:12:43.726"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:44.015" starttime="20170714 12:12:43.724"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:44.020" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:44.020" starttime="20170714 12:12:44.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:44.021" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:44.021" starttime="20170714 12:12:44.020"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:44.021" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:44.021" starttime="20170714 12:12:44.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:44.022" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:44.022" starttime="20170714 12:12:44.022"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:44.217" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:44.217" starttime="20170714 12:12:44.023"></status>
</kw>
<msg timestamp="20170714 12:12:44.217" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:44.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.218" starttime="20170714 12:12:44.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:44.218" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.218" starttime="20170714 12:12:44.218"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:44.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.219" starttime="20170714 12:12:44.219"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:44.219" starttime="20170714 12:12:44.019"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:44.219" starttime="20170714 12:12:44.018"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:44.219" starttime="20170714 12:12:44.017"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:44.220" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170714 12:12:44.220" starttime="20170714 12:12:44.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:44.221" starttime="20170714 12:12:44.220"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:44.286" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170714 12:12:44.286" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.286" starttime="20170714 12:12:44.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:44.287" starttime="20170714 12:12:44.287"></status>
</kw>
<msg timestamp="20170714 12:12:44.287" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.287" starttime="20170714 12:12:44.016"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:44.288" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.288" starttime="20170714 12:12:44.288"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:12:44.289" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:12:44.289" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:12:44.289" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170714 12:12:44.289" starttime="20170714 12:12:44.288"></status>
</kw>
<msg timestamp="20170714 12:12:44.289" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170714 12:12:44.289" starttime="20170714 12:12:44.016"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:44.289" starttime="20170714 12:12:44.015"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:44.294" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:44.294" starttime="20170714 12:12:44.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:44.295" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:44.295" starttime="20170714 12:12:44.294"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:44.296" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:44.296" starttime="20170714 12:12:44.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:44.296" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:44.296" starttime="20170714 12:12:44.296"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:44.663" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:44.663" starttime="20170714 12:12:44.297"></status>
</kw>
<msg timestamp="20170714 12:12:44.663" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:44.663" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.663" starttime="20170714 12:12:44.297"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:44.664" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.664" starttime="20170714 12:12:44.663"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:44.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.665" starttime="20170714 12:12:44.665"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:44.665" starttime="20170714 12:12:44.293"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:44.665" starttime="20170714 12:12:44.292"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:44.666" starttime="20170714 12:12:44.291"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:44.667" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170714 12:12:44.667" starttime="20170714 12:12:44.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:44.668" starttime="20170714 12:12:44.667"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:44.734" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170714 12:12:44.734" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.734" starttime="20170714 12:12:44.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:44.735" starttime="20170714 12:12:44.734"></status>
</kw>
<msg timestamp="20170714 12:12:44.735" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.735" starttime="20170714 12:12:44.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:44.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.736" starttime="20170714 12:12:44.735"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:12:44.736" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:12:44.736" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:12:44.736" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170714 12:12:44.736" starttime="20170714 12:12:44.736"></status>
</kw>
<msg timestamp="20170714 12:12:44.737" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170714 12:12:44.737" starttime="20170714 12:12:44.290"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:44.737" starttime="20170714 12:12:44.290"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:44.743" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:44.743" starttime="20170714 12:12:44.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:44.744" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:44.744" starttime="20170714 12:12:44.743"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:44.744" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:44.744" starttime="20170714 12:12:44.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:44.745" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:44.745" starttime="20170714 12:12:44.745"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:44.932" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:44.932" starttime="20170714 12:12:44.746"></status>
</kw>
<msg timestamp="20170714 12:12:44.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:44.932" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.932" starttime="20170714 12:12:44.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:44.933" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.933" starttime="20170714 12:12:44.933"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:44.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:44.934" starttime="20170714 12:12:44.933"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:44.934" starttime="20170714 12:12:44.740"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:44.934" starttime="20170714 12:12:44.739"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:44.934" starttime="20170714 12:12:44.739"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:44.935" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170714 12:12:44.935" starttime="20170714 12:12:44.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:44.935" starttime="20170714 12:12:44.935"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:45.019" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170714 12:12:45.020" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.020" starttime="20170714 12:12:44.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:45.020" starttime="20170714 12:12:45.020"></status>
</kw>
<msg timestamp="20170714 12:12:45.020" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.021" starttime="20170714 12:12:44.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:45.021" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.021" starttime="20170714 12:12:45.021"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:12:45.022" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:12:45.022" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:12:45.022" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170714 12:12:45.022" starttime="20170714 12:12:45.022"></status>
</kw>
<msg timestamp="20170714 12:12:45.022" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170714 12:12:45.022" starttime="20170714 12:12:44.738"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:45.023" starttime="20170714 12:12:44.737"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:45.093" starttime="20170714 12:12:16.150"></status>
</kw>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:45.112" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:45.113" starttime="20170714 12:12:45.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:45.113" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:45.113" starttime="20170714 12:12:45.113"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:45.114" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:45.114" starttime="20170714 12:12:45.114"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:45.115" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:45.115" starttime="20170714 12:12:45.114"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:45.319" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:45.319" starttime="20170714 12:12:45.116"></status>
</kw>
<msg timestamp="20170714 12:12:45.319" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:45.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.319" starttime="20170714 12:12:45.115"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:45.320" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.320" starttime="20170714 12:12:45.320"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:45.321" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.321" starttime="20170714 12:12:45.321"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:45.321" starttime="20170714 12:12:45.110"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:45.321" starttime="20170714 12:12:45.109"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:45.322" starttime="20170714 12:12:45.108"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:45.322" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170714 12:12:45.322" starttime="20170714 12:12:45.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:45.323" starttime="20170714 12:12:45.322"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:45.390" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170714 12:12:45.390" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.390" starttime="20170714 12:12:45.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:45.390" starttime="20170714 12:12:45.390"></status>
</kw>
<msg timestamp="20170714 12:12:45.391" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.391" starttime="20170714 12:12:45.107"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:45.391" starttime="20170714 12:12:45.391"></status>
</kw>
<kw name="Get URL List" library="utils">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:45.396" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:45.396" starttime="20170714 12:12:45.395"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:45.397" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:45.397" starttime="20170714 12:12:45.396"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:45.397" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:45.397" starttime="20170714 12:12:45.397"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:45.398" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:45.398" starttime="20170714 12:12:45.398"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:45.658" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:45.658" starttime="20170714 12:12:45.399"></status>
</kw>
<msg timestamp="20170714 12:12:45.658" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:45.658" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.658" starttime="20170714 12:12:45.398"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:45.659" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.659" starttime="20170714 12:12:45.659"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:45.660" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.660" starttime="20170714 12:12:45.659"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:45.660" starttime="20170714 12:12:45.394"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:45.660" starttime="20170714 12:12:45.394"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:45.660" starttime="20170714 12:12:45.393"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:45.661" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170714 12:12:45.661" starttime="20170714 12:12:45.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:45.662" starttime="20170714 12:12:45.661"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:45.724" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170714 12:12:45.724" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.724" starttime="20170714 12:12:45.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:45.725" starttime="20170714 12:12:45.725"></status>
</kw>
<msg timestamp="20170714 12:12:45.725" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.725" starttime="20170714 12:12:45.393"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:45.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.726" starttime="20170714 12:12:45.725"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:12:45.726" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/3", 
    "/xyz/openbmc_project/logging/entry/2", 
    "/xyz/openbmc_project/logging/entry/1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:12:45.727" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:12:45.727" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/1']}</msg>
<status status="PASS" endtime="20170714 12:12:45.727" starttime="20170714 12:12:45.726"></status>
</kw>
<msg timestamp="20170714 12:12:45.727" level="INFO">${url_list} = [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170714 12:12:45.727" starttime="20170714 12:12:45.392"></status>
</kw>
<msg timestamp="20170714 12:12:45.727" level="INFO">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170714 12:12:45.727" starttime="20170714 12:12:45.392"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/3">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:45.729" starttime="20170714 12:12:45.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:45.729" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170714 12:12:45.729" starttime="20170714 12:12:45.729"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:45.732" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:45.733" starttime="20170714 12:12:45.732"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:45.733" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:45.733" starttime="20170714 12:12:45.733"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:45.734" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:45.734" starttime="20170714 12:12:45.734"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:45.735" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:45.735" starttime="20170714 12:12:45.734"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:45.923" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:45.923" starttime="20170714 12:12:45.736"></status>
</kw>
<msg timestamp="20170714 12:12:45.923" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:45.923" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.923" starttime="20170714 12:12:45.735"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:45.924" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.924" starttime="20170714 12:12:45.924"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:45.925" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:45.925" starttime="20170714 12:12:45.924"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:45.925" starttime="20170714 12:12:45.731"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:45.925" starttime="20170714 12:12:45.731"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:45.925" starttime="20170714 12:12:45.730"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:45.926" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3</msg>
<status status="PASS" endtime="20170714 12:12:45.926" starttime="20170714 12:12:45.926"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 12:12:45.929" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20170714 12:12:45.929" starttime="20170714 12:12:45.927"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 12:12:45.930" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20170714 12:12:45.930" starttime="20170714 12:12:45.930"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:45.930" starttime="20170714 12:12:45.929"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:45.931" starttime="20170714 12:12:45.926"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:46.027" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20170714 12:12:46.028" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:46.028" starttime="20170714 12:12:45.931"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 12:12:46.029" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 12:12:46.030" starttime="20170714 12:12:46.029"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 12:12:46.030" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 12:12:46.031" starttime="20170714 12:12:46.030"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.031" starttime="20170714 12:12:46.030"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.031" starttime="20170714 12:12:46.028"></status>
</kw>
<msg timestamp="20170714 12:12:46.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:46.031" starttime="20170714 12:12:45.730"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:46.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:46.032" starttime="20170714 12:12:46.032"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.033" starttime="20170714 12:12:45.728"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.033" starttime="20170714 12:12:45.728"></status>
</kw>
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/2">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:46.034" starttime="20170714 12:12:46.033"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:46.035" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170714 12:12:46.035" starttime="20170714 12:12:46.034"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:46.038" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:46.038" starttime="20170714 12:12:46.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:46.039" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:46.039" starttime="20170714 12:12:46.039"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:46.040" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:46.040" starttime="20170714 12:12:46.039"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:46.040" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:46.040" starttime="20170714 12:12:46.040"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:46.266" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:46.267" starttime="20170714 12:12:46.041"></status>
</kw>
<msg timestamp="20170714 12:12:46.267" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:46.267" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:46.267" starttime="20170714 12:12:46.041"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:46.268" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:46.268" starttime="20170714 12:12:46.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:46.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:46.268" starttime="20170714 12:12:46.268"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.268" starttime="20170714 12:12:46.037"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.269" starttime="20170714 12:12:46.036"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.269" starttime="20170714 12:12:46.036"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:46.269" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2</msg>
<status status="PASS" endtime="20170714 12:12:46.269" starttime="20170714 12:12:46.269"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 12:12:46.271" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20170714 12:12:46.271" starttime="20170714 12:12:46.270"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 12:12:46.272" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20170714 12:12:46.272" starttime="20170714 12:12:46.272"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.273" starttime="20170714 12:12:46.271"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.273" starttime="20170714 12:12:46.269"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:46.350" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20170714 12:12:46.350" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:46.350" starttime="20170714 12:12:46.274"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 12:12:46.352" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 12:12:46.352" starttime="20170714 12:12:46.351"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 12:12:46.354" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 12:12:46.354" starttime="20170714 12:12:46.353"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.354" starttime="20170714 12:12:46.353"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.355" starttime="20170714 12:12:46.351"></status>
</kw>
<msg timestamp="20170714 12:12:46.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:46.355" starttime="20170714 12:12:46.035"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:46.356" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:46.356" starttime="20170714 12:12:46.355"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.356" starttime="20170714 12:12:46.033"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.356" starttime="20170714 12:12:46.033"></status>
</kw>
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/1">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:46.357" starttime="20170714 12:12:46.357"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:46.358" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170714 12:12:46.358" starttime="20170714 12:12:46.358"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:46.361" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:46.361" starttime="20170714 12:12:46.361"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:46.362" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:46.362" starttime="20170714 12:12:46.362"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:46.363" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:46.363" starttime="20170714 12:12:46.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:46.363" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:46.363" starttime="20170714 12:12:46.363"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:46.545" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:46.545" starttime="20170714 12:12:46.364"></status>
</kw>
<msg timestamp="20170714 12:12:46.545" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:46.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:46.545" starttime="20170714 12:12:46.364"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:46.546" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:46.546" starttime="20170714 12:12:46.546"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:46.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:46.547" starttime="20170714 12:12:46.547"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.547" starttime="20170714 12:12:46.360"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.547" starttime="20170714 12:12:46.360"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.547" starttime="20170714 12:12:46.359"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:46.548" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1</msg>
<status status="PASS" endtime="20170714 12:12:46.548" starttime="20170714 12:12:46.548"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 12:12:46.550" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20170714 12:12:46.550" starttime="20170714 12:12:46.549"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 12:12:46.551" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20170714 12:12:46.551" starttime="20170714 12:12:46.550"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.551" starttime="20170714 12:12:46.550"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.552" starttime="20170714 12:12:46.548"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:46.634" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20170714 12:12:46.634" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:46.634" starttime="20170714 12:12:46.552"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170714 12:12:46.636" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 12:12:46.636" starttime="20170714 12:12:46.635"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170714 12:12:46.637" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170714 12:12:46.637" starttime="20170714 12:12:46.636"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.637" starttime="20170714 12:12:46.636"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.637" starttime="20170714 12:12:46.635"></status>
</kw>
<msg timestamp="20170714 12:12:46.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:46.637" starttime="20170714 12:12:46.358"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:46.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:46.639" starttime="20170714 12:12:46.638"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.639" starttime="20170714 12:12:46.356"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.639" starttime="20170714 12:12:46.356"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.639" starttime="20170714 12:12:45.727"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:46.639" starttime="20170714 12:12:45.107"></status>
</kw>
<msg timestamp="20170714 12:12:46.644" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170714 12:12:46.682" starttime="20170714 12:12:46.650"></status>
</kw>
<msg timestamp="20170714 12:12:46.694" level="FAIL">#(UTC) 2017/07/14 12:12:46.693781 -    5.512657 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170714 12:12:46.695" starttime="20170714 12:04:05.798"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170714 12:12:46.699" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170714 12:12:46.701" starttime="20170714 12:12:46.695"></status>
</kw>
<status status="FAIL" endtime="20170714 12:12:46.701" starttime="20170714 12:04:05.797"></status>
</kw>
<msg timestamp="20170714 12:12:46.701" level="FAIL">#(UTC) 2017/07/14 12:12:46.693781 -    5.512657 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170714 12:12:46.702" starttime="20170714 12:04:05.793"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:46.718" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:46.719" starttime="20170714 12:12:46.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:46.719" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:46.719" starttime="20170714 12:12:46.719"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:46.720" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:46.720" starttime="20170714 12:12:46.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:46.721" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:46.721" starttime="20170714 12:12:46.720"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:47.010" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:47.011" starttime="20170714 12:12:46.722"></status>
</kw>
<msg timestamp="20170714 12:12:47.011" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:47.011" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:47.011" starttime="20170714 12:12:46.721"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:47.012" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:47.012" starttime="20170714 12:12:47.011"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:47.012" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:47.012" starttime="20170714 12:12:47.012"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:47.013" starttime="20170714 12:12:46.717"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:47.013" starttime="20170714 12:12:46.716"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:47.013" starttime="20170714 12:12:46.716"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:47.013" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170714 12:12:47.013" starttime="20170714 12:12:47.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:47.014" starttime="20170714 12:12:47.014"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:47.084" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170714 12:12:47.084" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:47.084" starttime="20170714 12:12:47.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:47.085" starttime="20170714 12:12:47.085"></status>
</kw>
<msg timestamp="20170714 12:12:47.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:47.085" starttime="20170714 12:12:46.715"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:47.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:47.086" starttime="20170714 12:12:47.085"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170714 12:12:47.086" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:12:47.087" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170714 12:12:47.087" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170714 12:12:47.087" starttime="20170714 12:12:47.086"></status>
</kw>
<msg timestamp="20170714 12:12:47.087" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170714 12:12:47.087" starttime="20170714 12:12:46.714"></status>
</kw>
<msg timestamp="20170714 12:12:47.087" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170714 12:12:47.087" starttime="20170714 12:12:46.714"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170714 12:12:47.088" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170714 12:12:47.089" starttime="20170714 12:12:47.088"></status>
</kw>
<msg timestamp="20170714 12:12:47.089" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 12:12:47.089" starttime="20170714 12:12:47.088"></status>
</kw>
<msg timestamp="20170714 12:12:47.089" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 12:12:47.089" starttime="20170714 12:12:46.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170714 12:12:47.103" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170714 12:12:47.103" starttime="20170714 12:12:47.103"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170714 12:12:47.108" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170714 12:12:50.112" level="INFO">${RC} = 0</msg>
<msg timestamp="20170714 12:12:50.112" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.750 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.558 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" endtime="20170714 12:12:50.112" starttime="20170714 12:12:47.103"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170714 12:12:50.116" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.750 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.558 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.572 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=1.34 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.558/0.805/1.343/0.321 ms</msg>
<status status="PASS" endtime="20170714 12:12:50.116" starttime="20170714 12:12:50.115"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:50.117" starttime="20170714 12:12:50.116"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.117" starttime="20170714 12:12:47.102"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170714 12:12:50.133" level="INFO">${cur_time} = 2017-07-14 12:12:50:133127</msg>
<status status="PASS" endtime="20170714 12:12:50.133" starttime="20170714 12:12:50.133"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170714 12:12:50.134" level="INFO">${cur_time} = 20170714121250133127</msg>
<status status="PASS" endtime="20170714 12:12:50.134" starttime="20170714 12:12:50.134"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.134" starttime="20170714 12:12:50.132"></status>
</kw>
<msg timestamp="20170714 12:12:50.135" level="INFO">${FFDC_TIME} = 20170714121250133127</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170714 12:12:50.137" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170714 12:12:50.137" starttime="20170714 12:12:50.136"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170714 12:12:50.137" level="INFO">${suite_name} = 20170714121250133127_UpdateBmc</msg>
<status status="PASS" endtime="20170714 12:12:50.137" starttime="20170714 12:12:50.137"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170714 12:12:50.138" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170714 12:12:50.138" starttime="20170714 12:12:50.138"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170714 12:12:50.139" level="INFO">${test_name} = 20170714121250133127_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170714 12:12:50.139" starttime="20170714 12:12:50.138"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.139" starttime="20170714 12:12:50.136"></status>
</kw>
<msg timestamp="20170714 12:12:50.139" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170714 12:12:50.139" level="INFO">${FFDC_PREFIX} = 20170714121250133127_</msg>
<msg timestamp="20170714 12:12:50.159" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170714 12:12:50.161" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:50.161" starttime="20170714 12:12:50.161"></status>
</kw>
<msg timestamp="20170714 12:12:50.162" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:50.177" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:50.177" starttime="20170714 12:12:50.176"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.177" starttime="20170714 12:12:50.175"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:50.178" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:50.178" starttime="20170714 12:12:50.178"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.178" starttime="20170714 12:12:50.177"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:50.179" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:50.179" starttime="20170714 12:12:50.179"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.180" starttime="20170714 12:12:50.178"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:50.181" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:50.181" starttime="20170714 12:12:50.180"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.181" starttime="20170714 12:12:50.180"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:50.182" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:50.183" starttime="20170714 12:12:50.182"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.183" starttime="20170714 12:12:50.181"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:50.184" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:50.184" starttime="20170714 12:12:50.183"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.185" starttime="20170714 12:12:50.183"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:50.187" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:50.187" starttime="20170714 12:12:50.186"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.187" starttime="20170714 12:12:50.186"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:50.188" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:50.188" starttime="20170714 12:12:50.188"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.188" starttime="20170714 12:12:50.187"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:50.189" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:50.190" starttime="20170714 12:12:50.189"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.190" starttime="20170714 12:12:50.189"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:50.191" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:50.191" starttime="20170714 12:12:50.191"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.191" starttime="20170714 12:12:50.190"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:50.193" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:50.193" starttime="20170714 12:12:50.193"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.193" starttime="20170714 12:12:50.192"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:50.195" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:50.195" starttime="20170714 12:12:50.194"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.195" starttime="20170714 12:12:50.194"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:50.196" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:50.196" starttime="20170714 12:12:50.196"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.196" starttime="20170714 12:12:50.195"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:12:50.198" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:12:50.198" starttime="20170714 12:12:50.198"></status>
</kw>
<msg timestamp="20170714 12:12:50.199" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:12:50.199" starttime="20170714 12:12:50.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:50.200" starttime="20170714 12:12:50.199"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.200" starttime="20170714 12:12:50.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:50.201" starttime="20170714 12:12:50.200"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:12:50.202" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:12:50.202" starttime="20170714 12:12:50.202"></status>
</kw>
<msg timestamp="20170714 12:12:50.202" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:12:50.202" starttime="20170714 12:12:50.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:50.204" starttime="20170714 12:12:50.204"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.204" starttime="20170714 12:12:50.203"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:50.204" starttime="20170714 12:12:50.202"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:12:50.205" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:12:51.985" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:12:51.986" starttime="20170714 12:12:50.205"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:51.986" starttime="20170714 12:12:50.197"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:51.987" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170714 12:12:52.074" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:52.074" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170714 12:12:52.074" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:52.074" starttime="20170714 12:12:51.986"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170714 12:12:52.075" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170714 12:12:52.075" starttime="20170714 12:12:52.075"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170714 12:12:52.075" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170714 12:12:52.075" starttime="20170714 12:12:52.075"></status>
</kw>
<msg timestamp="20170714 12:12:52.076" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170714 12:12:52.076" starttime="20170714 12:12:50.196"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:52.077" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:52.077" starttime="20170714 12:12:52.077"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.077" starttime="20170714 12:12:52.076"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.077" starttime="20170714 12:12:50.190"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:52.079" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:52.079" starttime="20170714 12:12:52.078"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.079" starttime="20170714 12:12:52.078"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170714 12:12:52.080" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170714 12:12:52.080" starttime="20170714 12:12:52.079"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:52.081" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:52.081" starttime="20170714 12:12:52.081"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.082" starttime="20170714 12:12:52.080"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:52.083" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:52.083" starttime="20170714 12:12:52.082"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.083" starttime="20170714 12:12:52.082"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.083" starttime="20170714 12:12:52.080"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:52.085" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:52.085" starttime="20170714 12:12:52.084"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.085" starttime="20170714 12:12:52.083"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:52.086" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:52.086" starttime="20170714 12:12:52.086"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.086" starttime="20170714 12:12:52.085"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.086" starttime="20170714 12:12:52.083"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:52.087" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:52.088" starttime="20170714 12:12:52.087"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.088" starttime="20170714 12:12:52.086"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:52.089" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:52.089" starttime="20170714 12:12:52.088"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.089" starttime="20170714 12:12:52.088"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.089" starttime="20170714 12:12:52.086"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.089" starttime="20170714 12:12:52.080"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:52.090" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:52.090" starttime="20170714 12:12:52.090"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.090" starttime="20170714 12:12:52.089"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.090" starttime="20170714 12:12:50.175"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170714 12:12:52.098" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170714 12:12:52.098" starttime="20170714 12:12:52.098"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170714 12:12:52.100" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170714 12:12:52.100" starttime="20170714 12:12:52.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:52.102" starttime="20170714 12:12:52.101"></status>
</kw>
<msg timestamp="20170714 12:12:52.102" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170714 12:12:52.102" starttime="20170714 12:12:52.101"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:52.104" starttime="20170714 12:12:52.104"></status>
</kw>
<msg timestamp="20170714 12:12:52.104" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:52.104" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 12:12:52.104" starttime="20170714 12:12:52.103"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:52.105" starttime="20170714 12:12:52.105"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:12:52.131" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:12:52.131" starttime="20170714 12:12:52.131"></status>
</kw>
<msg timestamp="20170714 12:12:52.131" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:12:52.131" starttime="20170714 12:12:52.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:52.132" starttime="20170714 12:12:52.132"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.133" starttime="20170714 12:12:52.132"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:52.133" starttime="20170714 12:12:52.133"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:12:52.134" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:12:52.135" starttime="20170714 12:12:52.134"></status>
</kw>
<msg timestamp="20170714 12:12:52.135" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:12:52.135" starttime="20170714 12:12:52.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:52.138" starttime="20170714 12:12:52.138"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.138" starttime="20170714 12:12:52.136"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:52.138" starttime="20170714 12:12:52.135"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:12:52.139" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:12:53.919" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:12:53.919" starttime="20170714 12:12:52.138"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:53.919" starttime="20170714 12:12:52.126"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170714 12:12:53.920" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170714 12:12:53.920" starttime="20170714 12:12:53.919"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170714 12:12:53.921" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170714 12:12:53.921" starttime="20170714 12:12:53.921"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170714 12:12:53.922" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170714 12:12:53.922" starttime="20170714 12:12:53.922"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:53.926" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:53.926" starttime="20170714 12:12:53.925"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:53.926" starttime="20170714 12:12:53.925"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:53.927" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:53.927" starttime="20170714 12:12:53.927"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:53.928" starttime="20170714 12:12:53.926"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:53.929" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:53.929" starttime="20170714 12:12:53.928"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:53.929" starttime="20170714 12:12:53.928"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:53.930" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:53.930" starttime="20170714 12:12:53.930"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:53.930" starttime="20170714 12:12:53.929"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:53.930" starttime="20170714 12:12:53.924"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:53.930" starttime="20170714 12:12:53.923"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:53.931" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170714 12:12:55.337" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:55.338" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170714 12:12:55.338" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:55.338" starttime="20170714 12:12:53.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.346" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.346" starttime="20170714 12:12:55.345"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.346" starttime="20170714 12:12:55.344"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.346" starttime="20170714 12:12:55.339"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.346" starttime="20170714 12:12:53.922"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.346" starttime="20170714 12:12:53.922"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.346" starttime="20170714 12:12:53.922"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.346" starttime="20170714 12:12:53.920"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.346" starttime="20170714 12:12:53.920"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170714 12:12:55.348" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170714 12:12:55.348" starttime="20170714 12:12:55.347"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.348" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170714 12:12:55.348" starttime="20170714 12:12:55.348"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.352" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.352" starttime="20170714 12:12:55.351"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.352" starttime="20170714 12:12:55.351"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.353" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.354" starttime="20170714 12:12:55.353"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.354" starttime="20170714 12:12:55.352"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.355" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.355" starttime="20170714 12:12:55.354"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.355" starttime="20170714 12:12:55.354"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.356" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.356" starttime="20170714 12:12:55.356"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.356" starttime="20170714 12:12:55.355"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.356" starttime="20170714 12:12:55.350"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.357" starttime="20170714 12:12:55.350"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:55.357" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170714 12:12:55.442" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170714 12:12:55.442" level="INFO">${stdout} = </msg>
<msg timestamp="20170714 12:12:55.442" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170714 12:12:55.442" starttime="20170714 12:12:55.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.449" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.449" starttime="20170714 12:12:55.448"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.449" starttime="20170714 12:12:55.448"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.449" starttime="20170714 12:12:55.442"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.449" starttime="20170714 12:12:55.349"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.449" starttime="20170714 12:12:55.349"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.452" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.452" starttime="20170714 12:12:55.452"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.453" starttime="20170714 12:12:55.451"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.454" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.454" starttime="20170714 12:12:55.453"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.454" starttime="20170714 12:12:55.453"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.455" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.455" starttime="20170714 12:12:55.455"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.455" starttime="20170714 12:12:55.454"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.456" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.456" starttime="20170714 12:12:55.456"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.457" starttime="20170714 12:12:55.455"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.457" starttime="20170714 12:12:55.451"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.457" starttime="20170714 12:12:55.450"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:55.457" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170714 12:12:55.527" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:55.527" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-79"
VERSION_ID="v1.99.7-79-gdc969e4"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170714 12:12:55.527" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:55.527" starttime="20170714 12:12:55.457"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.534" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.534" starttime="20170714 12:12:55.533"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.534" starttime="20170714 12:12:55.532"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.534" starttime="20170714 12:12:55.527"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.534" starttime="20170714 12:12:55.450"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.534" starttime="20170714 12:12:55.449"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.534" starttime="20170714 12:12:55.348"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.534" starttime="20170714 12:12:55.347"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.534" starttime="20170714 12:12:55.347"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170714 12:12:55.535" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170714 12:12:55.536" starttime="20170714 12:12:55.535"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.536" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170714 12:12:55.536" starttime="20170714 12:12:55.536"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.540" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.540" starttime="20170714 12:12:55.539"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.540" starttime="20170714 12:12:55.539"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.541" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.541" starttime="20170714 12:12:55.541"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.541" starttime="20170714 12:12:55.540"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.543" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.543" starttime="20170714 12:12:55.542"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.543" starttime="20170714 12:12:55.542"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.544" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.544" starttime="20170714 12:12:55.544"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.544" starttime="20170714 12:12:55.543"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.544" starttime="20170714 12:12:55.538"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.544" starttime="20170714 12:12:55.538"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:55.545" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170714 12:12:55.620" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:55.620" level="INFO">${stdout} =  22:44:27 up  5:15,  load average: 1.03, 0.55, 0.41</msg>
<msg timestamp="20170714 12:12:55.620" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:55.620" starttime="20170714 12:12:55.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.627" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.627" starttime="20170714 12:12:55.627"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.628" starttime="20170714 12:12:55.626"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.628" starttime="20170714 12:12:55.621"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.628" starttime="20170714 12:12:55.537"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.628" starttime="20170714 12:12:55.536"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.631" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.631" starttime="20170714 12:12:55.630"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.631" starttime="20170714 12:12:55.630"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.632" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.632" starttime="20170714 12:12:55.632"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.632" starttime="20170714 12:12:55.631"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.634" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.634" starttime="20170714 12:12:55.634"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.634" starttime="20170714 12:12:55.633"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.635" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.635" starttime="20170714 12:12:55.635"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.635" starttime="20170714 12:12:55.634"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.636" starttime="20170714 12:12:55.629"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.636" starttime="20170714 12:12:55.629"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:55.636" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170714 12:12:55.731" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:55.731" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     46.1...</msg>
<msg timestamp="20170714 12:12:55.731" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:55.731" starttime="20170714 12:12:55.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.738" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.738" starttime="20170714 12:12:55.737"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.738" starttime="20170714 12:12:55.737"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.738" starttime="20170714 12:12:55.732"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.738" starttime="20170714 12:12:55.628"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.738" starttime="20170714 12:12:55.628"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.741" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.741" starttime="20170714 12:12:55.741"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.741" starttime="20170714 12:12:55.740"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.743" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.743" starttime="20170714 12:12:55.742"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.743" starttime="20170714 12:12:55.742"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.744" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.744" starttime="20170714 12:12:55.744"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.744" starttime="20170714 12:12:55.743"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.745" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.745" starttime="20170714 12:12:55.745"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.746" starttime="20170714 12:12:55.744"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.746" starttime="20170714 12:12:55.740"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.746" starttime="20170714 12:12:55.739"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:12:55.746" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170714 12:12:55.831" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:12:55.831" level="INFO">${stdout} = Linux witherspoon 4.10.17-990f06c35b7e119f00967e90f0514dbbd2e1b51b #1 Fri Jul 14 05:11:32 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170714 12:12:55.831" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:12:55.831" starttime="20170714 12:12:55.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.838" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:55.838" starttime="20170714 12:12:55.837"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.838" starttime="20170714 12:12:55.837"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.838" starttime="20170714 12:12:55.832"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.838" starttime="20170714 12:12:55.739"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.838" starttime="20170714 12:12:55.738"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.838" starttime="20170714 12:12:55.536"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.838" starttime="20170714 12:12:55.535"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.838" starttime="20170714 12:12:55.534"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.839" starttime="20170714 12:12:53.920"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.839" starttime="20170714 12:12:52.125"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.839" starttime="20170714 12:12:52.105"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.839" starttime="20170714 12:12:52.102"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.839" starttime="20170714 12:12:52.102"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:55.841" starttime="20170714 12:12:55.840"></status>
</kw>
<msg timestamp="20170714 12:12:55.841" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:55.841" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 12:12:55.841" starttime="20170714 12:12:55.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:55.842" starttime="20170714 12:12:55.841"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:12:55.867" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:12:55.867" starttime="20170714 12:12:55.867"></status>
</kw>
<msg timestamp="20170714 12:12:55.867" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:12:55.868" starttime="20170714 12:12:55.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:55.869" starttime="20170714 12:12:55.869"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.869" starttime="20170714 12:12:55.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:55.871" starttime="20170714 12:12:55.870"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:12:55.873" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:12:55.873" starttime="20170714 12:12:55.873"></status>
</kw>
<msg timestamp="20170714 12:12:55.874" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:12:55.874" starttime="20170714 12:12:55.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:55.879" starttime="20170714 12:12:55.876"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.879" starttime="20170714 12:12:55.875"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:55.879" starttime="20170714 12:12:55.874"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:12:55.880" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:12:57.659" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:12:57.659" starttime="20170714 12:12:55.879"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:57.660" starttime="20170714 12:12:55.865"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170714 12:12:57.660" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170714 12:12:57.661" starttime="20170714 12:12:57.660"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170714 12:12:57.662" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170714 12:12:57.662" starttime="20170714 12:12:57.662"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:12:57.663" level="INFO">${logpath} = /home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_elog.txt</msg>
<status status="PASS" endtime="20170714 12:12:57.663" starttime="20170714 12:12:57.663"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:57.666" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:57.667" starttime="20170714 12:12:57.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:57.668" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:57.668" starttime="20170714 12:12:57.667"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:57.668" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:57.668" starttime="20170714 12:12:57.668"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:57.669" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:57.669" starttime="20170714 12:12:57.669"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:57.866" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:57.866" starttime="20170714 12:12:57.670"></status>
</kw>
<msg timestamp="20170714 12:12:57.866" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:57.866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:57.867" starttime="20170714 12:12:57.669"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:57.867" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:57.867" starttime="20170714 12:12:57.867"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:57.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:57.868" starttime="20170714 12:12:57.868"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:57.868" starttime="20170714 12:12:57.665"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:57.868" starttime="20170714 12:12:57.665"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:57.869" starttime="20170714 12:12:57.664"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:57.869" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170714 12:12:57.869" starttime="20170714 12:12:57.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:57.870" starttime="20170714 12:12:57.870"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:57.928" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170714 12:12:57.928" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:57.928" starttime="20170714 12:12:57.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:57.929" starttime="20170714 12:12:57.928"></status>
</kw>
<msg timestamp="20170714 12:12:57.929" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:57.929" starttime="20170714 12:12:57.663"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:57.930" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170714 12:12:57.930" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170714 12:12:57.930" starttime="20170714 12:12:57.930"></status>
</kw>
<msg timestamp="20170714 12:12:57.930" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 12:12:57.930" starttime="20170714 12:12:57.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170714 12:12:57.932" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170714 12:12:57.932" starttime="20170714 12:12:57.931"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:57.932" starttime="20170714 12:12:57.931"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:57.932" starttime="20170714 12:12:57.662"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:12:57.933" level="INFO">${logpath} = /home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170714 12:12:57.933" starttime="20170714 12:12:57.932"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:57.938" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:57.938" starttime="20170714 12:12:57.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:57.939" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:57.939" starttime="20170714 12:12:57.939"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:57.940" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:57.940" starttime="20170714 12:12:57.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:57.941" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:57.941" starttime="20170714 12:12:57.941"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:58.173" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:58.173" starttime="20170714 12:12:57.942"></status>
</kw>
<msg timestamp="20170714 12:12:58.173" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:58.173" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:58.173" starttime="20170714 12:12:57.942"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:58.174" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:58.174" starttime="20170714 12:12:58.173"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:58.174" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:58.175" starttime="20170714 12:12:58.174"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:58.175" starttime="20170714 12:12:57.936"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:58.175" starttime="20170714 12:12:57.935"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:58.175" starttime="20170714 12:12:57.934"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:58.175" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170714 12:12:58.176" starttime="20170714 12:12:58.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:58.176" starttime="20170714 12:12:58.176"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:12:58.564" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170714 12:12:58.564" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:58.564" starttime="20170714 12:12:58.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:58.565" starttime="20170714 12:12:58.565"></status>
</kw>
<msg timestamp="20170714 12:12:58.565" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:58.565" starttime="20170714 12:12:57.933"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:58.566" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:58.566" starttime="20170714 12:12:58.566"></status>
</kw>
<msg timestamp="20170714 12:12:58.566" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170714 12:12:58.567" starttime="20170714 12:12:58.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:58.567" starttime="20170714 12:12:58.567"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170714 12:12:58.568" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 1
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:12:58.568" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170714 12:12:58.568" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 1
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170714 12:12:58.568" starttime="20170714 12:12:58.567"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:12:58.570" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:12:58.570" starttime="20170714 12:12:58.569"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:58.570" starttime="20170714 12:12:58.568"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:58.570" starttime="20170714 12:12:57.932"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:12:58.571" level="INFO">${logpath} = /home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170714 12:12:58.571" starttime="20170714 12:12:58.570"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:12:58.574" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:12:58.574" starttime="20170714 12:12:58.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:12:58.575" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:12:58.575" starttime="20170714 12:12:58.575"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:12:58.576" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:12:58.576" starttime="20170714 12:12:58.575"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:12:58.576" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:12:58.576" starttime="20170714 12:12:58.576"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:12:58.769" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:12:58.769" starttime="20170714 12:12:58.577"></status>
</kw>
<msg timestamp="20170714 12:12:58.769" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:12:58.769" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:12:58.769" starttime="20170714 12:12:58.577"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:12:58.770" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:58.770" starttime="20170714 12:12:58.769"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:12:58.770" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:12:58.771" starttime="20170714 12:12:58.770"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:58.771" starttime="20170714 12:12:58.573"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:58.771" starttime="20170714 12:12:58.572"></status>
</kw>
<status status="PASS" endtime="20170714 12:12:58.771" starttime="20170714 12:12:58.572"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:12:58.771" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170714 12:12:58.772" starttime="20170714 12:12:58.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:12:58.772" starttime="20170714 12:12:58.772"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:13:00.658" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170714 12:13:00.658" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:13:00.658" starttime="20170714 12:12:58.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:00.659" starttime="20170714 12:13:00.659"></status>
</kw>
<msg timestamp="20170714 12:13:00.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:13:00.660" starttime="20170714 12:12:58.571"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:13:00.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:13:00.661" starttime="20170714 12:13:00.660"></status>
</kw>
<msg timestamp="20170714 12:13:00.661" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170714 12:13:00.661" starttime="20170714 12:13:00.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:00.661" starttime="20170714 12:13:00.661"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170714 12:13:00.664" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y230UF72R00C    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170714 12:13:00.665" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170714 12:13:00.665" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status status="PASS" endtime="20170714 12:13:00.665" starttime="20170714 12:13:00.662"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:13:00.667" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:13:00.667" starttime="20170714 12:13:00.666"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:00.667" starttime="20170714 12:13:00.665"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:00.667" starttime="20170714 12:12:58.570"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:13:00.668" level="INFO">${logpath} = /home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_led.txt</msg>
<status status="PASS" endtime="20170714 12:13:00.668" starttime="20170714 12:13:00.667"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:13:00.671" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:13:00.671" starttime="20170714 12:13:00.671"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:13:00.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:13:00.672" starttime="20170714 12:13:00.672"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:13:00.673" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:13:00.673" starttime="20170714 12:13:00.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:13:00.673" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:13:00.673" starttime="20170714 12:13:00.673"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:13:00.963" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:13:00.964" starttime="20170714 12:13:00.674"></status>
</kw>
<msg timestamp="20170714 12:13:00.964" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:13:00.964" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:13:00.964" starttime="20170714 12:13:00.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:13:00.965" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:13:00.965" starttime="20170714 12:13:00.964"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:13:00.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:13:00.965" starttime="20170714 12:13:00.965"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:00.966" starttime="20170714 12:13:00.670"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:00.966" starttime="20170714 12:13:00.670"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:00.966" starttime="20170714 12:13:00.669"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:13:00.966" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170714 12:13:00.966" starttime="20170714 12:13:00.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:00.967" starttime="20170714 12:13:00.967"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:13:01.011" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170714 12:13:01.011" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 12:13:01.011" starttime="20170714 12:13:00.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:01.012" starttime="20170714 12:13:01.012"></status>
</kw>
<msg timestamp="20170714 12:13:01.012" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 12:13:01.012" starttime="20170714 12:13:00.668"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:13:01.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170714 12:13:01.014" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170714 12:13:01.014" starttime="20170714 12:13:01.013"></status>
</kw>
<msg timestamp="20170714 12:13:01.014" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 12:13:01.014" starttime="20170714 12:13:01.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170714 12:13:01.015" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170714 12:13:01.015" starttime="20170714 12:13:01.015"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.015" starttime="20170714 12:13:01.014"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.015" starttime="20170714 12:13:00.667"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:13:01.016" level="INFO">${logpath} = /home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170714 12:13:01.016" starttime="20170714 12:13:01.016"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:13:01.020" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:13:01.020" starttime="20170714 12:13:01.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:13:01.021" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:13:01.021" starttime="20170714 12:13:01.020"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:13:01.021" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:13:01.021" starttime="20170714 12:13:01.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:13:01.022" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:13:01.022" starttime="20170714 12:13:01.022"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:13:01.226" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:13:01.226" starttime="20170714 12:13:01.023"></status>
</kw>
<msg timestamp="20170714 12:13:01.226" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:13:01.226" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:13:01.226" starttime="20170714 12:13:01.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:13:01.227" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:13:01.227" starttime="20170714 12:13:01.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:13:01.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:13:01.228" starttime="20170714 12:13:01.227"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.228" starttime="20170714 12:13:01.019"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.228" starttime="20170714 12:13:01.018"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.228" starttime="20170714 12:13:01.017"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:13:01.229" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170714 12:13:01.229" starttime="20170714 12:13:01.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:01.230" starttime="20170714 12:13:01.229"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:13:01.272" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170714 12:13:01.272" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 12:13:01.272" starttime="20170714 12:13:01.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:01.273" starttime="20170714 12:13:01.272"></status>
</kw>
<msg timestamp="20170714 12:13:01.273" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 12:13:01.273" starttime="20170714 12:13:01.016"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:13:01.274" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170714 12:13:01.274" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170714 12:13:01.274" starttime="20170714 12:13:01.273"></status>
</kw>
<msg timestamp="20170714 12:13:01.274" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 12:13:01.274" starttime="20170714 12:13:01.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170714 12:13:01.275" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170714 12:13:01.275" starttime="20170714 12:13:01.275"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.275" starttime="20170714 12:13:01.275"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.276" starttime="20170714 12:13:01.015"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.276" starttime="20170714 12:12:57.662"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.276" starttime="20170714 12:12:57.661"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.276" starttime="20170714 12:12:57.661"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.276" starttime="20170714 12:12:57.661"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.276" starttime="20170714 12:12:55.865"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.276" starttime="20170714 12:12:55.842"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.276" starttime="20170714 12:12:55.839"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.276" starttime="20170714 12:12:55.839"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:01.278" starttime="20170714 12:13:01.278"></status>
</kw>
<msg timestamp="20170714 12:13:01.279" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:13:01.279" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 12:13:01.279" starttime="20170714 12:13:01.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:01.279" starttime="20170714 12:13:01.279"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:13:01.301" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:13:01.301" starttime="20170714 12:13:01.301"></status>
</kw>
<msg timestamp="20170714 12:13:01.301" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:13:01.301" starttime="20170714 12:13:01.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:01.303" starttime="20170714 12:13:01.302"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.303" starttime="20170714 12:13:01.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:01.303" starttime="20170714 12:13:01.303"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:13:01.306" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:13:01.306" starttime="20170714 12:13:01.305"></status>
</kw>
<msg timestamp="20170714 12:13:01.306" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:13:01.306" starttime="20170714 12:13:01.304"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:01.308" starttime="20170714 12:13:01.307"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.308" starttime="20170714 12:13:01.307"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:01.308" starttime="20170714 12:13:01.306"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:13:01.309" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:13:03.022" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:13:03.023" starttime="20170714 12:13:01.308"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:03.023" starttime="20170714 12:13:01.299"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170714 12:13:03.024" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170714 12:13:03.090" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170714 12:13:03.090" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170714 12:13:03.090" starttime="20170714 12:13:03.023"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170714 12:13:03.091" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170714 12:13:03.091" starttime="20170714 12:13:03.091"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:03.093" starttime="20170714 12:13:03.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:03.863" starttime="20170714 12:13:03.094"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:03.863" starttime="20170714 12:13:03.093"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:03.863" starttime="20170714 12:13:03.091"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170714 12:13:03.863" starttime="20170714 12:13:03.863"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:03.863" starttime="20170714 12:13:01.299"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:03.864" starttime="20170714 12:13:01.280"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:03.864" starttime="20170714 12:13:01.276"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:03.864" starttime="20170714 12:13:01.276"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:03.866" starttime="20170714 12:13:03.866"></status>
</kw>
<msg timestamp="20170714 12:13:03.866" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:13:03.866" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 12:13:03.866" starttime="20170714 12:13:03.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:03.867" starttime="20170714 12:13:03.867"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170714 12:13:03.889" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170714 12:13:03.889" starttime="20170714 12:13:03.889"></status>
</kw>
<msg timestamp="20170714 12:13:03.889" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170714 12:13:03.889" starttime="20170714 12:13:03.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:03.891" starttime="20170714 12:13:03.890"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:03.891" starttime="20170714 12:13:03.890"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:03.892" starttime="20170714 12:13:03.891"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170714 12:13:03.895" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170714 12:13:03.895" starttime="20170714 12:13:03.894"></status>
</kw>
<msg timestamp="20170714 12:13:03.895" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170714 12:13:03.895" starttime="20170714 12:13:03.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:03.898" starttime="20170714 12:13:03.897"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:03.898" starttime="20170714 12:13:03.897"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:03.898" starttime="20170714 12:13:03.895"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170714 12:13:03.899" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170714 12:13:05.677" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170714 12:13:05.678" starttime="20170714 12:13:03.898"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:05.678" starttime="20170714 12:13:03.887"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170714 12:13:05.678" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170714 12:13:05.678" starttime="20170714 12:13:05.678"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170714 12:13:05.680" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170714 12:13:05.680" starttime="20170714 12:13:05.680"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:13:05.681" level="INFO">${logpath} = /home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170714 12:13:05.681" starttime="20170714 12:13:05.680"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:05.682" starttime="20170714 12:13:05.682"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:13:05.683" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170714 12:13:05.991" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:13:05.991" level="INFO">${stdout} = Mem: 227168K used, 205164K free, 80376K shrd, 10952K buff, 117000K cached
CPU:   0% usr  18% sys   0% nic  81% idle   0% io   0% irq   0% sirq
Load average: 1.03 0.57 0.42 1/147 2928
  PID  PPID USER ...</msg>
<msg timestamp="20170714 12:13:05.991" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:13:05.992" starttime="20170714 12:13:05.683"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:13:05.999" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:13:05.999" starttime="20170714 12:13:05.998"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:05.999" starttime="20170714 12:13:05.997"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:05.999" starttime="20170714 12:13:05.992"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:05.999" starttime="20170714 12:13:05.681"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:05.999" starttime="20170714 12:13:05.680"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:13:06.000" level="INFO">${logpath} = /home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170714 12:13:06.000" starttime="20170714 12:13:06.000"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:06.001" starttime="20170714 12:13:06.001"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:13:06.002" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170714 12:13:06.087" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:13:06.087" level="INFO">${stdout} = [  585.730000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[  585.730000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[  585.920000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[ ...</msg>
<msg timestamp="20170714 12:13:06.087" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:13:06.087" starttime="20170714 12:13:06.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:13:06.095" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:13:06.095" starttime="20170714 12:13:06.095"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:06.095" starttime="20170714 12:13:06.093"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:06.095" starttime="20170714 12:13:06.088"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:06.096" starttime="20170714 12:13:06.000"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:06.096" starttime="20170714 12:13:05.999"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:13:06.096" level="INFO">${logpath} = /home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170714 12:13:06.096" starttime="20170714 12:13:06.096"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:06.098" starttime="20170714 12:13:06.097"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:13:06.098" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170714 12:13:06.185" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:13:06.185" level="INFO">${stdout} = MemTotal:         432332 kB
MemFree:          205132 kB
MemAvailable:     250240 kB
Buffers:           10952 kB
Cached:           117000 kB
SwapCached:            0 kB
Active:           145536 kB
Inac...</msg>
<msg timestamp="20170714 12:13:06.185" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:13:06.185" starttime="20170714 12:13:06.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:13:06.192" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:13:06.192" starttime="20170714 12:13:06.191"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:06.192" starttime="20170714 12:13:06.191"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:06.192" starttime="20170714 12:13:06.185"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:06.192" starttime="20170714 12:13:06.097"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:06.192" starttime="20170714 12:13:06.096"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:13:06.193" level="INFO">${logpath} = /home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170714 12:13:06.193" starttime="20170714 12:13:06.193"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:06.194" starttime="20170714 12:13:06.194"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:13:06.195" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170714 12:13:06.280" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:13:06.280" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170714 12:13:06.280" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:13:06.280" starttime="20170714 12:13:06.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:13:06.287" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:13:06.287" starttime="20170714 12:13:06.286"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:06.287" starttime="20170714 12:13:06.286"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:06.287" starttime="20170714 12:13:06.281"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:06.287" starttime="20170714 12:13:06.193"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:06.287" starttime="20170714 12:13:06.192"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170714 12:13:06.288" level="INFO">${logpath} = /home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170714 12:13:06.288" starttime="20170714 12:13:06.288"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:06.289" starttime="20170714 12:13:06.289"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170714 12:13:06.290" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170714 12:13:11.044" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170714 12:13:11.048" level="INFO">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:28 UTC, end at Thu 2017-04-20 22:44:36 UTC. --
Apr 20 17:29:28 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:28 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170714 12:13:11.048" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170714 12:13:11.048" starttime="20170714 12:13:06.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170714 12:13:11.060" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/20170714121250133127_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:13:11.060" starttime="20170714 12:13:11.057"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.060" starttime="20170714 12:13:11.054"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.060" starttime="20170714 12:13:11.049"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.060" starttime="20170714 12:13:06.288"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.060" starttime="20170714 12:13:06.287"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.060" starttime="20170714 12:13:05.680"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.061" starttime="20170714 12:13:05.679"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.061" starttime="20170714 12:13:05.679"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.061" starttime="20170714 12:13:05.679"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.061" starttime="20170714 12:13:03.887"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.061" starttime="20170714 12:13:03.867"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.061" starttime="20170714 12:13:03.864"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.061" starttime="20170714 12:13:03.864"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:11.065" starttime="20170714 12:13:11.064"></status>
</kw>
<msg timestamp="20170714 12:13:11.065" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:13:11.065" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 12:13:11.065" starttime="20170714 12:13:11.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:11.066" starttime="20170714 12:13:11.065"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170714 12:13:11.093" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170714 12:13:11.094" starttime="20170714 12:13:11.092"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170714 12:13:11.094" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170714 12:13:11.094" starttime="20170714 12:13:11.094"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170714 12:13:11.095" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170714 12:13:11.095" starttime="20170714 12:13:11.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170714 12:13:11.096" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170714 12:13:11.096" starttime="20170714 12:13:11.095"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170714 12:13:11.273" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170714 12:13:11.273" starttime="20170714 12:13:11.097"></status>
</kw>
<msg timestamp="20170714 12:13:11.273" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:13:11.274" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170714 12:13:11.274" starttime="20170714 12:13:11.096"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170714 12:13:11.274" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:13:11.274" starttime="20170714 12:13:11.274"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:13:11.275" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170714 12:13:11.275" starttime="20170714 12:13:11.275"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.275" starttime="20170714 12:13:11.092"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.275" starttime="20170714 12:13:11.091"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.276" starttime="20170714 12:13:11.091"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170714 12:13:11.276" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170714 12:13:11.276" starttime="20170714 12:13:11.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:11.277" starttime="20170714 12:13:11.277"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170714 12:13:11.321" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170714 12:13:11.321" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 12:13:11.321" starttime="20170714 12:13:11.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:11.321" starttime="20170714 12:13:11.321"></status>
</kw>
<msg timestamp="20170714 12:13:11.322" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170714 12:13:11.322" starttime="20170714 12:13:11.090"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170714 12:13:11.323" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170714 12:13:11.323" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170714 12:13:11.323" starttime="20170714 12:13:11.322"></status>
</kw>
<msg timestamp="20170714 12:13:11.323" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170714 12:13:11.323" starttime="20170714 12:13:11.322"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170714 12:13:11.324" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170714 12:13:11.324" starttime="20170714 12:13:11.323"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.324" starttime="20170714 12:13:11.090"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.324" starttime="20170714 12:13:11.066"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.324" starttime="20170714 12:13:11.062"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.324" starttime="20170714 12:13:11.061"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:11.326" starttime="20170714 12:13:11.326"></status>
</kw>
<msg timestamp="20170714 12:13:11.326" level="INFO">${status} = PASS</msg>
<msg timestamp="20170714 12:13:11.326" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170714 12:13:11.326" starttime="20170714 12:13:11.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:11.327" starttime="20170714 12:13:11.327"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170714 12:13:11.349" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170714 12:13:11.349" starttime="20170714 12:13:11.348"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.349" starttime="20170714 12:13:11.347"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.349" starttime="20170714 12:13:11.327"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.349" starttime="20170714 12:13:11.325"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.349" starttime="20170714 12:13:11.324"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.349" starttime="20170714 12:12:52.102"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.349" starttime="20170714 12:12:52.099"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.349" starttime="20170714 12:12:52.099"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.349" starttime="20170714 12:12:52.098"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170714 12:13:11.555" starttime="20170714 12:13:11.350"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.555" starttime="20170714 12:12:52.097"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.556" starttime="20170714 12:12:47.090"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.556" starttime="20170714 12:12:47.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:11.558" starttime="20170714 12:13:11.557"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170714 12:13:11.559" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170714 12:13:11.559" starttime="20170714 12:13:11.559"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170714 12:13:11.560" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170714121250133127_UpdateBmc/20170714121250133127_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170714 12:13:11.560" starttime="20170714 12:13:11.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:11.561" starttime="20170714 12:13:11.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:11.562" starttime="20170714 12:13:11.561"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170714 12:13:11.562" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170714 12:13:11.562" starttime="20170714 12:13:11.562"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170714 12:13:11.563" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170714 12:13:11.563" starttime="20170714 12:13:11.563"></status>
</kw>
<msg timestamp="20170714 12:13:11.564" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170714 12:13:11.564" starttime="20170714 12:13:11.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:11.564" starttime="20170714 12:13:11.564"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170714 12:13:11.565" starttime="20170714 12:13:11.564"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170714 12:13:11.566" level="INFO">${cur_time} = 2017-07-14 12:13:11:566197</msg>
<status status="PASS" endtime="20170714 12:13:11.566" starttime="20170714 12:13:11.566"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170714 12:13:11.567" level="INFO">${cur_time} = 20170714121311566197</msg>
<status status="PASS" endtime="20170714 12:13:11.567" starttime="20170714 12:13:11.567"></status>
</kw>
<msg timestamp="20170714 12:13:11.567" level="INFO">${cur_time} = 20170714121311566197</msg>
<status status="PASS" endtime="20170714 12:13:11.567" starttime="20170714 12:13:11.565"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170714 12:13:11.568" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 12:13:11.569" starttime="20170714 12:13:11.568"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.569" starttime="20170714 12:13:11.558"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.569" starttime="20170714 12:12:46.712"></status>
</kw>
<status status="PASS" endtime="20170714 12:13:11.569" starttime="20170714 12:12:46.704"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170714 12:13:11.569" critical="yes" starttime="20170714 12:03:19.476">#(UTC) 2017/07/14 12:12:46.693781 -    5.512657 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170714 12:13:11.571" starttime="20170714 12:03:18.444"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
