<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161207 10:01:19.554" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite name="Tests" source="/tmp/root/25025/obmc-robot/tests" id="s1">
<suite name="Security" source="/tmp/root/25025/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/root/25025/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:20.187">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:20.187" starttime="20161207 10:01:20.187" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:20.188">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:20.188" starttime="20161207 10:01:20.188" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:20.189">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:20.189" starttime="20161207 10:01:20.188" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:20.189">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:20.189" starttime="20161207 10:01:20.189" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:20.531">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:20.531">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:20.531" starttime="20161207 10:01:20.190" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:20.532">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:20.532" starttime="20161207 10:01:20.532" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:20.532" starttime="20161207 10:01:20.186" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20161207 10:01:20.536" starttime="20161207 10:01:20.533" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:01:20.537">Created directory '&lt;a href="file:///tmp/root/25025/obmc-robot/logs"&gt;/tmp/root/25025/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20161207 10:01:20.537" starttime="20161207 10:01:20.537" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:01:20.538">File '/tmp/root/25025/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20161207 10:01:20.538" starttime="20161207 10:01:20.538" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:20.538">${exist} = False</msg>
<status endtime="20161207 10:01:20.538" starttime="20161207 10:01:20.537" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:01:20.542">Created file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/test_history.txt"&gt;/tmp/root/25025/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:01:20.542" starttime="20161207 10:01:20.541" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:20.542" starttime="20161207 10:01:20.539" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:20.543">${cur_time} = 2016-12-07 10:01:20:542430</msg>
<status endtime="20161207 10:01:20.543" starttime="20161207 10:01:20.542" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:20.543">${cur_time} = 20161207100120542430</msg>
<status endtime="20161207 10:01:20.543" starttime="20161207 10:01:20.543" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:20.543">${cur_time} = 20161207100120542430</msg>
<status endtime="20161207 10:01:20.543" starttime="20161207 10:01:20.542" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:01:20.544">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/test_history.txt"&gt;/tmp/root/25025/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:01:20.544" starttime="20161207 10:01:20.544" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:20.544" starttime="20161207 10:01:20.536" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:20.545" starttime="20161207 10:01:20.533" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" endtime="20161207 10:01:20.545" starttime="20161207 10:01:20.186" status="PASS"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20161207 10:01:20.545">Delete All Sessions</msg>
<status endtime="20161207 10:01:20.545" starttime="20161207 10:01:20.545" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20161207 10:01:20.545" starttime="20161207 10:01:19.583" status="PASS"></status>
</suite>
<status endtime="20161207 10:01:20.546" starttime="20161207 10:01:19.581" status="PASS"></status>
</suite>
<suite name="Test Association" source="/tmp/root/25025/obmc-robot/tests/test_association.robot" id="s1-s2">
<kw name="Suite Initialization Setup" type="setup">
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:01:20.579">Dictionary does not contain key 'host'.</msg>
<status endtime="20161207 10:01:20.579" starttime="20161207 10:01:20.578" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:20.579">${has_host} = False</msg>
<status endtime="20161207 10:01:20.579" starttime="20161207 10:01:20.578" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161207 10:01:20.582" starttime="20161207 10:01:20.582" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:20.582" starttime="20161207 10:01:20.579" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:20.586">${port_num} = 22</msg>
<status endtime="20161207 10:01:20.587" starttime="20161207 10:01:20.586" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:20.587">${SSH_PORT} = 22</msg>
<status endtime="20161207 10:01:20.587" starttime="20161207 10:01:20.587" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:20.587">${https_num} = 443</msg>
<status endtime="20161207 10:01:20.588" starttime="20161207 10:01:20.587" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:20.588">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161207 10:01:20.588" starttime="20161207 10:01:20.588" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:20.588" starttime="20161207 10:01:20.586" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:20.588" starttime="20161207 10:01:20.583" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:01:20.589">Dictionary does not contain key 'port'.</msg>
<status endtime="20161207 10:01:20.589" starttime="20161207 10:01:20.589" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:20.589">${has_port} = False</msg>
<status endtime="20161207 10:01:20.589" starttime="20161207 10:01:20.589" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161207 10:01:20.593" starttime="20161207 10:01:20.593" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161207 10:01:20.594" starttime="20161207 10:01:20.594" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:20.594" starttime="20161207 10:01:20.593" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:20.594" starttime="20161207 10:01:20.590" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:20.595">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161207 10:01:22.840">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161207 10:01:22.841" starttime="20161207 10:01:20.594" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:22.841" starttime="20161207 10:01:20.576" status="PASS"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:22.843">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status endtime="20161207 10:01:22.843" starttime="20161207 10:01:22.843" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:22.844">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:22.844" starttime="20161207 10:01:22.844" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:01:22.845" starttime="20161207 10:01:22.844" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:22.849">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:22.849" starttime="20161207 10:01:22.848" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:22.850">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:22.850" starttime="20161207 10:01:22.850" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:22.850" starttime="20161207 10:01:22.849" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:22.850" starttime="20161207 10:01:22.848" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:22.850" starttime="20161207 10:01:22.845" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:22.851">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:22.852" starttime="20161207 10:01:22.851" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:22.852">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:22.852" starttime="20161207 10:01:22.852" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:22.853">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:22.853" starttime="20161207 10:01:22.852" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:22.853">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:22.853" starttime="20161207 10:01:22.853" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:23.317">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:23.317">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:23.317" starttime="20161207 10:01:22.853" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:23.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:23.318" starttime="20161207 10:01:23.318" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:23.318" starttime="20161207 10:01:22.850" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:23.812">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:23.812">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:23.812" starttime="20161207 10:01:23.319" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:23.820">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:23.820" starttime="20161207 10:01:23.819" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:23.821">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:23.822" starttime="20161207 10:01:23.821" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:23.822" starttime="20161207 10:01:23.820" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:23.822" starttime="20161207 10:01:23.819" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:23.822" starttime="20161207 10:01:23.813" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:23.822">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:23.822" starttime="20161207 10:01:22.842" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:23.823">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:23.824" starttime="20161207 10:01:23.823" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:23.825">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161207 10:01:23.825" starttime="20161207 10:01:23.825" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:23.831">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161207 10:01:23.831" starttime="20161207 10:01:23.830" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:23.832">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161207 10:01:23.833" starttime="20161207 10:01:23.832" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:23.833" starttime="20161207 10:01:23.831" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:23.833" starttime="20161207 10:01:23.830" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:23.833" starttime="20161207 10:01:23.826" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:23.834">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:23.834" starttime="20161207 10:01:23.833" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:23.835">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:23.835" starttime="20161207 10:01:23.834" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:23.835">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:23.835" starttime="20161207 10:01:23.835" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:23.836">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:23.836" starttime="20161207 10:01:23.835" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:24.301">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:24.301">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:24.301" starttime="20161207 10:01:23.836" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:24.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:24.302" starttime="20161207 10:01:24.301" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:24.302" starttime="20161207 10:01:23.833" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:24.376">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161207 10:01:24.377">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:24.377" starttime="20161207 10:01:24.302" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:24.381">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:24.381" starttime="20161207 10:01:24.380" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:24.381">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:24.382" starttime="20161207 10:01:24.381" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:24.382" starttime="20161207 10:01:24.381" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:24.382" starttime="20161207 10:01:24.380" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:24.382" starttime="20161207 10:01:24.377" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:24.382">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:24.382" starttime="20161207 10:01:23.824" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:24.383">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:01:24.383">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:01:24.383">${json} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status endtime="20161207 10:01:24.383" starttime="20161207 10:01:24.382" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:24.383">Length is 0</msg>
<status endtime="20161207 10:01:24.383" starttime="20161207 10:01:24.383" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:24.383" starttime="20161207 10:01:22.842" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:24.383" starttime="20161207 10:01:22.841" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:24.384" starttime="20161207 10:01:20.576" status="PASS"></status>
</kw>
<test name="Create error log on single FRU" id="s1-s2-t1">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:24.387">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status endtime="20161207 10:01:24.387" starttime="20161207 10:01:24.385" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:24.388">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:24.388" starttime="20161207 10:01:24.388" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:01:24.389" starttime="20161207 10:01:24.388" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:24.393">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:24.393" starttime="20161207 10:01:24.392" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:24.394">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:24.394" starttime="20161207 10:01:24.393" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:24.394" starttime="20161207 10:01:24.393" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:24.394" starttime="20161207 10:01:24.392" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:24.394" starttime="20161207 10:01:24.389" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:24.395">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:24.395" starttime="20161207 10:01:24.395" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:24.396">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:24.396" starttime="20161207 10:01:24.395" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:24.396">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:24.396" starttime="20161207 10:01:24.396" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:24.397">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:24.397" starttime="20161207 10:01:24.397" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:24.824">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:24.825">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:24.825" starttime="20161207 10:01:24.397" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:24.825">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:24.825" starttime="20161207 10:01:24.825" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:24.826" starttime="20161207 10:01:24.394" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.062">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:25.062">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:25.062" starttime="20161207 10:01:24.826" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.070">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:25.070" starttime="20161207 10:01:25.069" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:25.071">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:25.072" starttime="20161207 10:01:25.071" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:25.072" starttime="20161207 10:01:25.070" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:25.072" starttime="20161207 10:01:25.068" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:25.072" starttime="20161207 10:01:25.063" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:25.072">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:25.072" starttime="20161207 10:01:24.385" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:25.073">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:25.073" starttime="20161207 10:01:25.073" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.075">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161207 10:01:25.075" starttime="20161207 10:01:25.075" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.079">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161207 10:01:25.079" starttime="20161207 10:01:25.079" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:25.080">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161207 10:01:25.080" starttime="20161207 10:01:25.080" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:25.080" starttime="20161207 10:01:25.079" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:25.080" starttime="20161207 10:01:25.078" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:25.080" starttime="20161207 10:01:25.075" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:25.081">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:25.081" starttime="20161207 10:01:25.081" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.082">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:25.082" starttime="20161207 10:01:25.082" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.083">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:25.083" starttime="20161207 10:01:25.082" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.083">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:25.083" starttime="20161207 10:01:25.083" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.411">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:25.411">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:25.411" starttime="20161207 10:01:25.083" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:25.412">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:25.412" starttime="20161207 10:01:25.411" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:25.412" starttime="20161207 10:01:25.080" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.470">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161207 10:01:25.470">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:25.470" starttime="20161207 10:01:25.412" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.475">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:25.475" starttime="20161207 10:01:25.474" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:25.476">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:25.476" starttime="20161207 10:01:25.476" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:25.476" starttime="20161207 10:01:25.475" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:25.476" starttime="20161207 10:01:25.474" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:25.476" starttime="20161207 10:01:25.471" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:25.476">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:25.476" starttime="20161207 10:01:25.074" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.477">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:01:25.477">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:01:25.477">${json} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status endtime="20161207 10:01:25.477" starttime="20161207 10:01:25.477" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:25.478">Length is 0</msg>
<status endtime="20161207 10:01:25.478" starttime="20161207 10:01:25.478" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:25.478" starttime="20161207 10:01:24.385" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:25.478" starttime="20161207 10:01:24.384" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${CREATE_ERROR_SINGLE_FRU}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${elog}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.478">Executing command 'busctl call org.openbmc.records.events /org/openbmc/records/events org.openbmc.recordlog acceptHostMessage sssay "Error" "Testing failure" "/org/openbmc/inventory/system/chassis/motherboard/dimm1" 1 1'.</msg>
<msg level="INFO" timestamp="20161207 10:01:25.859">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:01:25.860">${elog} = q 197</msg>
<msg level="INFO" timestamp="20161207 10:01:25.860">${stderr} = </msg>
<status endtime="20161207 10:01:25.860" starttime="20161207 10:01:25.478" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:25.860">Length is 0</msg>
<status endtime="20161207 10:01:25.860" starttime="20161207 10:01:25.860" status="PASS"></status>
</kw>
<kw name="Get EventList">
<assign>
<var>${log_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.862">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161207 10:01:25.862" starttime="20161207 10:01:25.861" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.866">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161207 10:01:25.866" starttime="20161207 10:01:25.866" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:25.867">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161207 10:01:25.867" starttime="20161207 10:01:25.867" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:25.867" starttime="20161207 10:01:25.866" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:25.867" starttime="20161207 10:01:25.865" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:25.867" starttime="20161207 10:01:25.862" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:25.868">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:25.869" starttime="20161207 10:01:25.868" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.869">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:25.869" starttime="20161207 10:01:25.869" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.870">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:25.870" starttime="20161207 10:01:25.869" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:25.870">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:25.870" starttime="20161207 10:01:25.870" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.261">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:26.261">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:26.262" starttime="20161207 10:01:25.870" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:26.263">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:26.263" starttime="20161207 10:01:26.262" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:26.263" starttime="20161207 10:01:25.867" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.321">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161207 10:01:26.321">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:26.321" starttime="20161207 10:01:26.263" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.327">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/197"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:26.328" starttime="20161207 10:01:26.327" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:26.329">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/197"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:26.329" starttime="20161207 10:01:26.328" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:26.329" starttime="20161207 10:01:26.328" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:26.329" starttime="20161207 10:01:26.326" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:26.329" starttime="20161207 10:01:26.322" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:26.329">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:26.329" starttime="20161207 10:01:25.861" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:26.330">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:26.330" starttime="20161207 10:01:26.330" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.331">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/197"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:01:26.331">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:01:26.331">${jsondata} = {u'status': u'ok', u'data': [u'/org/openbmc/records/events/197'], u'message': u'200 OK'}</msg>
<status endtime="20161207 10:01:26.331" starttime="20161207 10:01:26.330" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:26.331">${log_list} = [u'/org/openbmc/records/events/197']</msg>
<status endtime="20161207 10:01:26.332" starttime="20161207 10:01:25.860" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>'${log_list}'</arg>
<arg>${elog.strip('q ')}</arg>
</arguments>
<status endtime="20161207 10:01:26.332" starttime="20161207 10:01:26.332" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}/${elog.strip('q ')}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.333">${association_uri} = /org/openbmc/records/events/197/fru</msg>
<status endtime="20161207 10:01:26.333" starttime="20161207 10:01:26.333" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${association_uri}</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${association_content}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.335">${base_uri} = /org/openbmc/records/events/197/fru/attr/endpoints</msg>
<status endtime="20161207 10:01:26.335" starttime="20161207 10:01:26.335" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.339">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/197/fru/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161207 10:01:26.339" starttime="20161207 10:01:26.339" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:26.340">URI:https://9.3.23.30:443/org/openbmc/records/events/197/fru/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161207 10:01:26.340" starttime="20161207 10:01:26.340" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:26.340" starttime="20161207 10:01:26.340" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:26.340" starttime="20161207 10:01:26.338" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:26.341" starttime="20161207 10:01:26.335" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:26.342">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:26.342" starttime="20161207 10:01:26.341" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.343">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:26.343" starttime="20161207 10:01:26.342" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.343">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:26.343" starttime="20161207 10:01:26.343" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.344">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:26.344" starttime="20161207 10:01:26.344" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.674">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:26.674">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:26.674" starttime="20161207 10:01:26.344" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:26.675">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:26.675" starttime="20161207 10:01:26.674" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:26.675" starttime="20161207 10:01:26.341" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.770">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/197/fru/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161207 10:01:26.770">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:26.770" starttime="20161207 10:01:26.675" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.774">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:26.775" starttime="20161207 10:01:26.774" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:26.775">Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:26.775" starttime="20161207 10:01:26.775" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:26.776" starttime="20161207 10:01:26.775" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:26.776" starttime="20161207 10:01:26.774" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:26.776" starttime="20161207 10:01:26.771" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:26.776">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:26.776" starttime="20161207 10:01:26.334" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.776">To JSON using : content={
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:01:26.776">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:01:26.777">${content} = {u'status': u'ok', u'data': [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1'], u'message': u'200 OK'}</msg>
<status endtime="20161207 10:01:26.777" starttime="20161207 10:01:26.776" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:26.777">${association_content} = [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']</msg>
<status endtime="20161207 10:01:26.777" starttime="20161207 10:01:26.333" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${association_content}</arg>
<arg>${DIMM1_URI}</arg>
</arguments>
<status endtime="20161207 10:01:26.777" starttime="20161207 10:01:26.777" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM1_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm1_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.779">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints</msg>
<status endtime="20161207 10:01:26.779" starttime="20161207 10:01:26.779" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.784">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161207 10:01:26.784" starttime="20161207 10:01:26.783" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:26.784">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161207 10:01:26.785" starttime="20161207 10:01:26.784" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:26.785" starttime="20161207 10:01:26.784" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:26.785" starttime="20161207 10:01:26.782" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:26.785" starttime="20161207 10:01:26.779" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:26.786">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:26.786" starttime="20161207 10:01:26.785" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.787">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:26.787" starttime="20161207 10:01:26.786" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.787">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:26.787" starttime="20161207 10:01:26.787" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:26.788">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:26.788" starttime="20161207 10:01:26.787" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:27.575">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:27.575">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:27.575" starttime="20161207 10:01:26.788" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:27.576">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:27.576" starttime="20161207 10:01:27.575" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:27.576" starttime="20161207 10:01:26.785" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:27.654">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161207 10:01:27.654">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:27.654" starttime="20161207 10:01:27.576" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:27.659">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/197"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:27.659" starttime="20161207 10:01:27.658" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:27.660">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/197"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:27.660" starttime="20161207 10:01:27.659" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:27.660" starttime="20161207 10:01:27.659" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:27.660" starttime="20161207 10:01:27.658" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:27.660" starttime="20161207 10:01:27.655" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:27.660">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:27.660" starttime="20161207 10:01:26.778" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:27.661">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/197"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:01:27.661">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:01:27.661">${content} = {u'status': u'ok', u'data': [u'/org/openbmc/records/events/197'], u'message': u'200 OK'}</msg>
<status endtime="20161207 10:01:27.661" starttime="20161207 10:01:27.661" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:27.661">${dimm1_event} = [u'/org/openbmc/records/events/197']</msg>
<status endtime="20161207 10:01:27.661" starttime="20161207 10:01:26.777" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${dimm1_event}</arg>
<arg>${log_list[0]}</arg>
</arguments>
<status endtime="20161207 10:01:27.662" starttime="20161207 10:01:27.661" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20161207 10:01:27.665" starttime="20161207 10:01:27.662" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:01:27.666">Directory '&lt;a href="file:///tmp/root/25025/obmc-robot/logs"&gt;/tmp/root/25025/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161207 10:01:27.666" starttime="20161207 10:01:27.666" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:01:27.667">File '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/test_history.txt"&gt;/tmp/root/25025/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161207 10:01:27.667" starttime="20161207 10:01:27.667" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:27.667">${exist} = True</msg>
<status endtime="20161207 10:01:27.667" starttime="20161207 10:01:27.667" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161207 10:01:27.670" starttime="20161207 10:01:27.668" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:27.671">${cur_time} = 2016-12-07 10:01:27:671054</msg>
<status endtime="20161207 10:01:27.671" starttime="20161207 10:01:27.671" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:27.672">${cur_time} = 20161207100127671054</msg>
<status endtime="20161207 10:01:27.672" starttime="20161207 10:01:27.672" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:27.672">${cur_time} = 20161207100127671054</msg>
<status endtime="20161207 10:01:27.672" starttime="20161207 10:01:27.671" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:01:27.673">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/test_history.txt"&gt;/tmp/root/25025/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:01:27.673" starttime="20161207 10:01:27.672" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:27.673" starttime="20161207 10:01:27.665" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:27.673" starttime="20161207 10:01:27.662" status="PASS"></status>
</kw>
<doc>***GOOD PATH***
Create an error log on single FRU and verify
its association.
</doc>
<tags>
<tag>Create_error_log_on_single_FRU</tag>
</tags>
<status critical="yes" endtime="20161207 10:01:27.673" starttime="20161207 10:01:24.384" status="PASS"></status>
</test>
<test name="Delete error log" id="s1-s2-t2">
<kw name="Create a test log">
<assign>
<var>${log_uri1}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:27.675">${data} = {u'data': []}</msg>
<status endtime="20161207 10:01:27.675" starttime="20161207 10:01:27.674" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:27.676">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status endtime="20161207 10:01:27.676" starttime="20161207 10:01:27.675" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:27.676">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:27.676" starttime="20161207 10:01:27.676" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:01:27.677" starttime="20161207 10:01:27.677" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:27.681">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:27.681" starttime="20161207 10:01:27.681" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:27.682">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:27.682" starttime="20161207 10:01:27.682" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:27.682" starttime="20161207 10:01:27.682" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:27.682" starttime="20161207 10:01:27.680" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:27.682" starttime="20161207 10:01:27.677" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:27.683">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:27.684" starttime="20161207 10:01:27.683" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:27.684">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:27.684" starttime="20161207 10:01:27.684" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:27.685">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:27.685" starttime="20161207 10:01:27.684" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:27.685">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:27.685" starttime="20161207 10:01:27.685" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:28.150">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:28.151">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:28.151" starttime="20161207 10:01:27.686" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:28.152">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:28.152" starttime="20161207 10:01:28.151" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:28.152" starttime="20161207 10:01:27.683" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:28.448">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:28.448">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:28.448" starttime="20161207 10:01:28.152" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:28.452">${msg} = Response code:200, Content:{
  "data": 198, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:28.452" starttime="20161207 10:01:28.452" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:28.453">Response code:200, Content:{
  "data": 198, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:28.453" starttime="20161207 10:01:28.453" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:28.453" starttime="20161207 10:01:28.452" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:28.453" starttime="20161207 10:01:28.451" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:28.453" starttime="20161207 10:01:28.448" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:28.453">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:28.453" starttime="20161207 10:01:27.675" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:28.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:28.454" starttime="20161207 10:01:28.454" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:28.455">To JSON using : content={
  "data": 198, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:01:28.455">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:01:28.455">${json} = {u'status': u'ok', u'data': 198, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:01:28.455" starttime="20161207 10:01:28.454" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:28.455">${LOGID} = 198</msg>
<status endtime="20161207 10:01:28.455" starttime="20161207 10:01:28.455" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:28.456">${uri} = /org/openbmc/records/events/198</msg>
<status endtime="20161207 10:01:28.456" starttime="20161207 10:01:28.455" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:28.456">${log_uri1} = /org/openbmc/records/events/198</msg>
<status endtime="20161207 10:01:28.456" starttime="20161207 10:01:27.674" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri1}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:28.456">${association_uri1} = /org/openbmc/records/events/198/fru</msg>
<status endtime="20161207 10:01:28.457" starttime="20161207 10:01:28.456" status="PASS"></status>
</kw>
<kw name="Create a test log">
<assign>
<var>${log_uri2}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:28.457">${data} = {u'data': []}</msg>
<status endtime="20161207 10:01:28.457" starttime="20161207 10:01:28.457" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:28.458">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status endtime="20161207 10:01:28.458" starttime="20161207 10:01:28.458" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:28.459">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:28.459" starttime="20161207 10:01:28.459" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:01:28.459" starttime="20161207 10:01:28.459" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:28.465">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:28.465" starttime="20161207 10:01:28.464" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:28.466">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:28.466" starttime="20161207 10:01:28.466" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:28.466" starttime="20161207 10:01:28.465" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:28.467" starttime="20161207 10:01:28.463" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:28.467" starttime="20161207 10:01:28.460" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:28.467">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:28.468" starttime="20161207 10:01:28.467" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:28.468">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:28.468" starttime="20161207 10:01:28.468" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:28.469">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:28.469" starttime="20161207 10:01:28.468" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:28.470">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:28.470" starttime="20161207 10:01:28.469" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:28.886">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:28.887">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:28.887" starttime="20161207 10:01:28.470" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:28.887">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:28.887" starttime="20161207 10:01:28.887" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:28.888" starttime="20161207 10:01:28.467" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.182">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:29.183">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:29.183" starttime="20161207 10:01:28.888" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.193">${msg} = Response code:200, Content:{
  "data": 199, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:29.193" starttime="20161207 10:01:29.192" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:29.195">Response code:200, Content:{
  "data": 199, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:29.195" starttime="20161207 10:01:29.195" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:29.195" starttime="20161207 10:01:29.193" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:29.195" starttime="20161207 10:01:29.191" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:29.196" starttime="20161207 10:01:29.183" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:29.196">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:29.196" starttime="20161207 10:01:28.457" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:29.197">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:29.197" starttime="20161207 10:01:29.196" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.198">To JSON using : content={
  "data": 199, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:01:29.198">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:01:29.198">${json} = {u'status': u'ok', u'data': 199, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:01:29.198" starttime="20161207 10:01:29.197" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.199">${LOGID} = 199</msg>
<status endtime="20161207 10:01:29.199" starttime="20161207 10:01:29.198" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.200">${uri} = /org/openbmc/records/events/199</msg>
<status endtime="20161207 10:01:29.200" starttime="20161207 10:01:29.199" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:29.200">${log_uri2} = /org/openbmc/records/events/199</msg>
<status endtime="20161207 10:01:29.200" starttime="20161207 10:01:28.457" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/action/delete</arg>
</arguments>
<assign>
<var>${del_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.201">${del_uri} = /org/openbmc/records/events/198/action/delete</msg>
<status endtime="20161207 10:01:29.201" starttime="20161207 10:01:29.200" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${del_uri}</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.202">${base_uri} = /org/openbmc/records/events/198/action/delete</msg>
<status endtime="20161207 10:01:29.202" starttime="20161207 10:01:29.202" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.203">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:29.203" starttime="20161207 10:01:29.202" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:01:29.203" starttime="20161207 10:01:29.203" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.207">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/198/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:29.207" starttime="20161207 10:01:29.207" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:29.208">URI:https://9.3.23.30:443/org/openbmc/records/events/198/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:29.208" starttime="20161207 10:01:29.208" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:29.208" starttime="20161207 10:01:29.208" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:29.209" starttime="20161207 10:01:29.206" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:29.209" starttime="20161207 10:01:29.203" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:29.209">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:29.210" starttime="20161207 10:01:29.209" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.210">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:29.210" starttime="20161207 10:01:29.210" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.211">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:29.211" starttime="20161207 10:01:29.211" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.211">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:29.211" starttime="20161207 10:01:29.211" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.733">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:29.734">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:29.734" starttime="20161207 10:01:29.212" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:29.735">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:29.735" starttime="20161207 10:01:29.734" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:29.735" starttime="20161207 10:01:29.209" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.962">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/198/action/delete, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:29.962">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:29.962" starttime="20161207 10:01:29.735" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.970">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:29.971" starttime="20161207 10:01:29.969" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:29.973">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:29.973" starttime="20161207 10:01:29.972" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:29.973" starttime="20161207 10:01:29.971" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:29.973" starttime="20161207 10:01:29.968" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:29.974" starttime="20161207 10:01:29.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:29.974">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:29.974" starttime="20161207 10:01:29.201" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:29.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:29.975" starttime="20161207 10:01:29.974" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${association_uri1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.976">${base_uri} = /org/openbmc/records/events/198/fru</msg>
<status endtime="20161207 10:01:29.976" starttime="20161207 10:01:29.976" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.980">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/198/fru, method:Get, args:{}</msg>
<status endtime="20161207 10:01:29.980" starttime="20161207 10:01:29.980" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:29.981">URI:https://9.3.23.30:443/org/openbmc/records/events/198/fru, method:Get, args:{}</msg>
<status endtime="20161207 10:01:29.981" starttime="20161207 10:01:29.981" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:29.981" starttime="20161207 10:01:29.980" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:29.981" starttime="20161207 10:01:29.979" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:29.981" starttime="20161207 10:01:29.976" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:29.982">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:29.983" starttime="20161207 10:01:29.982" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.983">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:29.983" starttime="20161207 10:01:29.983" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.984">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:29.984" starttime="20161207 10:01:29.983" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:29.984">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:29.984" starttime="20161207 10:01:29.984" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.452">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:30.452">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:30.452" starttime="20161207 10:01:29.985" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:30.453">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:30.453" starttime="20161207 10:01:30.453" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:30.453" starttime="20161207 10:01:29.981" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.526">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/198/fru, headers=None </msg>
<msg level="INFO" timestamp="20161207 10:01:30.527">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20161207 10:01:30.527" starttime="20161207 10:01:30.454" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.531">${msg} = Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/198/fru"
  }, 
  "message": "404 Not Found",...</msg>
<status endtime="20161207 10:01:30.531" starttime="20161207 10:01:30.530" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:30.532">Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/198/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
}</msg>
<status endtime="20161207 10:01:30.532" starttime="20161207 10:01:30.531" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:30.532" starttime="20161207 10:01:30.531" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:30.532" starttime="20161207 10:01:30.530" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:30.532" starttime="20161207 10:01:30.527" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:30.532">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20161207 10:01:30.532" starttime="20161207 10:01:29.975" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.533">To JSON using : content={
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/198/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg level="INFO" timestamp="20161207 10:01:30.533">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:01:30.533">${jsondata} = {u'status': u'error', u'data': {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/198/fru'}, u'message': u'404 Not Found'}</msg>
<status endtime="20161207 10:01:30.533" starttime="20161207 10:01:30.532" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsondata['message']}</arg>
<arg>404 Not Found</arg>
</arguments>
<status endtime="20161207 10:01:30.534" starttime="20161207 10:01:30.533" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM3_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm3_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.535">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints</msg>
<status endtime="20161207 10:01:30.535" starttime="20161207 10:01:30.535" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.540">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161207 10:01:30.540" starttime="20161207 10:01:30.539" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:30.540">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161207 10:01:30.541" starttime="20161207 10:01:30.540" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:30.541" starttime="20161207 10:01:30.540" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:30.541" starttime="20161207 10:01:30.539" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:30.541" starttime="20161207 10:01:30.536" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:30.542">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:30.542" starttime="20161207 10:01:30.541" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.543">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:30.543" starttime="20161207 10:01:30.542" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.543">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:30.543" starttime="20161207 10:01:30.543" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.544">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:30.544" starttime="20161207 10:01:30.543" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.874">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:30.875">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:30.875" starttime="20161207 10:01:30.544" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:30.876">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:30.876" starttime="20161207 10:01:30.875" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:30.876" starttime="20161207 10:01:30.541" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.956">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161207 10:01:30.956">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:30.957" starttime="20161207 10:01:30.877" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.962">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/199"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:30.962" starttime="20161207 10:01:30.961" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:30.963">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/199"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:30.963" starttime="20161207 10:01:30.962" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:30.963" starttime="20161207 10:01:30.962" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:30.963" starttime="20161207 10:01:30.961" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:30.963" starttime="20161207 10:01:30.957" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:30.963">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:30.963" starttime="20161207 10:01:30.534" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.964">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/199"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:01:30.964">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:01:30.964">${content} = {u'status': u'ok', u'data': [u'/org/openbmc/records/events/199'], u'message': u'200 OK'}</msg>
<status endtime="20161207 10:01:30.964" starttime="20161207 10:01:30.964" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:30.965">${dimm3_event} = [u'/org/openbmc/records/events/199']</msg>
<status endtime="20161207 10:01:30.965" starttime="20161207 10:01:30.534" status="PASS"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm3_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status endtime="20161207 10:01:30.965" starttime="20161207 10:01:30.965" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM2_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm2_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.967">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints</msg>
<status endtime="20161207 10:01:30.967" starttime="20161207 10:01:30.967" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.973">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161207 10:01:30.973" starttime="20161207 10:01:30.973" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:30.974">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161207 10:01:30.975" starttime="20161207 10:01:30.974" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:30.975" starttime="20161207 10:01:30.974" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:30.975" starttime="20161207 10:01:30.972" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:30.975" starttime="20161207 10:01:30.968" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:30.976">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:30.976" starttime="20161207 10:01:30.975" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.977">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:30.977" starttime="20161207 10:01:30.976" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.978">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:30.978" starttime="20161207 10:01:30.977" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:30.979">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:30.979" starttime="20161207 10:01:30.978" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:31.310">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:31.310">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:31.310" starttime="20161207 10:01:30.979" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:31.311">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:31.311" starttime="20161207 10:01:31.310" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:31.311" starttime="20161207 10:01:30.975" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:31.389">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161207 10:01:31.390">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:31.390" starttime="20161207 10:01:31.311" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:31.394">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/199"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:31.394" starttime="20161207 10:01:31.393" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:31.395">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/199"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:31.395" starttime="20161207 10:01:31.395" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:31.395" starttime="20161207 10:01:31.394" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:31.395" starttime="20161207 10:01:31.393" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:31.395" starttime="20161207 10:01:31.390" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:31.395">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:31.395" starttime="20161207 10:01:30.966" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:31.396">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/199"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:01:31.396">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:01:31.396">${content} = {u'status': u'ok', u'data': [u'/org/openbmc/records/events/199'], u'message': u'200 OK'}</msg>
<status endtime="20161207 10:01:31.396" starttime="20161207 10:01:31.396" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:31.396">${dimm2_event} = [u'/org/openbmc/records/events/199']</msg>
<status endtime="20161207 10:01:31.396" starttime="20161207 10:01:30.965" status="PASS"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm2_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status endtime="20161207 10:01:31.397" starttime="20161207 10:01:31.397" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20161207 10:01:31.400" starttime="20161207 10:01:31.397" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:01:31.401">Directory '&lt;a href="file:///tmp/root/25025/obmc-robot/logs"&gt;/tmp/root/25025/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161207 10:01:31.401" starttime="20161207 10:01:31.401" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:01:31.402">File '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/test_history.txt"&gt;/tmp/root/25025/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161207 10:01:31.402" starttime="20161207 10:01:31.402" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:31.402">${exist} = True</msg>
<status endtime="20161207 10:01:31.402" starttime="20161207 10:01:31.401" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161207 10:01:31.405" starttime="20161207 10:01:31.402" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:31.406">${cur_time} = 2016-12-07 10:01:31:405703</msg>
<status endtime="20161207 10:01:31.406" starttime="20161207 10:01:31.406" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:31.406">${cur_time} = 20161207100131405703</msg>
<status endtime="20161207 10:01:31.406" starttime="20161207 10:01:31.406" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:31.407">${cur_time} = 20161207100131405703</msg>
<status endtime="20161207 10:01:31.407" starttime="20161207 10:01:31.405" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:01:31.407">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/test_history.txt"&gt;/tmp/root/25025/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:01:31.407" starttime="20161207 10:01:31.407" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:31.408" starttime="20161207 10:01:31.400" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:31.408" starttime="20161207 10:01:31.397" status="PASS"></status>
</kw>
<doc>***BAD PATH***
Delete an error log and verify that its
association is also removed.
</doc>
<tags>
<tag>Delete_error_log</tag>
</tags>
<status critical="yes" endtime="20161207 10:01:31.408" starttime="20161207 10:01:27.673" status="PASS"></status>
</test>
<kw name="Close All Connections" library="SSHLibrary" type="teardown">
<doc>Closes all open connections.</doc>
<status endtime="20161207 10:01:31.417" starttime="20161207 10:01:31.409" status="PASS"></status>
</kw>
<doc>This suite is used for testing eventlog association.</doc>
<status endtime="20161207 10:01:31.417" starttime="20161207 10:01:20.547" status="PASS"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/root/25025/obmc-robot/tests/test_basic_poweron.robot" id="s1-s3">
<test name="power on test" id="s1-s3-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start logging to a file in /tmp so that it can</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:01:31.447">Dictionary does not contain key 'host'.</msg>
<status endtime="20161207 10:01:31.447" starttime="20161207 10:01:31.447" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:31.447">${has_host} = False</msg>
<status endtime="20161207 10:01:31.447" starttime="20161207 10:01:31.446" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161207 10:01:31.451" starttime="20161207 10:01:31.450" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:31.451" starttime="20161207 10:01:31.448" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:31.455">${port_num} = 22</msg>
<status endtime="20161207 10:01:31.455" starttime="20161207 10:01:31.455" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:31.456">${SSH_PORT} = 22</msg>
<status endtime="20161207 10:01:31.456" starttime="20161207 10:01:31.455" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:31.456">${https_num} = 443</msg>
<status endtime="20161207 10:01:31.456" starttime="20161207 10:01:31.456" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:31.457">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161207 10:01:31.457" starttime="20161207 10:01:31.456" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:31.457" starttime="20161207 10:01:31.454" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:31.457" starttime="20161207 10:01:31.451" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:01:31.458">Dictionary does not contain key 'port'.</msg>
<status endtime="20161207 10:01:31.458" starttime="20161207 10:01:31.458" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:31.458">${has_port} = False</msg>
<status endtime="20161207 10:01:31.458" starttime="20161207 10:01:31.457" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161207 10:01:31.462" starttime="20161207 10:01:31.462" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161207 10:01:31.463" starttime="20161207 10:01:31.462" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:31.463" starttime="20161207 10:01:31.461" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:31.463" starttime="20161207 10:01:31.458" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:31.463">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161207 10:01:33.844">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161207 10:01:33.844" starttime="20161207 10:01:31.463" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:33.845" starttime="20161207 10:01:31.446" status="PASS"></status>
</kw>
<kw name="Get Time Stamp" library="utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y%m%d%H%M%S%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:33.846">${cur_time} = 20161207100133845452</msg>
<status endtime="20161207 10:01:33.846" starttime="20161207 10:01:33.845" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:33.846">${cur_time} = 20161207100133845452</msg>
<status endtime="20161207 10:01:33.846" starttime="20161207 10:01:33.845" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:33.849">${LOG_TIME} = 20161207100133845452</msg>
<status endtime="20161207 10:01:33.849" starttime="20161207 10:01:33.846" status="PASS"></status>
</kw>
<kw name="Start Command" library="SSHLibrary">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>obmc-console-client &gt; ${file_path}-${LOG_TIME}_$$</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:33.850">Starting command 'obmc-console-client &gt; /tmp/obmc-console.log-20161207100133845452_$$'.</msg>
<status endtime="20161207 10:01:33.858" starttime="20161207 10:01:33.849" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:33.858" starttime="20161207 10:01:31.446" status="PASS"></status>
</kw>
<kw name="BMC Power Off" library="poweroffs">
<doc>Powers off the system and makes sure that all states are</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:01:33.859">Dictionary does not contain key 'host'.</msg>
<status endtime="20161207 10:01:33.860" starttime="20161207 10:01:33.859" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:33.860">${has_host} = False</msg>
<status endtime="20161207 10:01:33.860" starttime="20161207 10:01:33.859" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161207 10:01:33.863" starttime="20161207 10:01:33.863" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:33.863" starttime="20161207 10:01:33.860" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:33.867">${port_num} = 22</msg>
<status endtime="20161207 10:01:33.867" starttime="20161207 10:01:33.867" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:33.868">${SSH_PORT} = 22</msg>
<status endtime="20161207 10:01:33.868" starttime="20161207 10:01:33.868" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:33.868">${https_num} = 443</msg>
<status endtime="20161207 10:01:33.868" starttime="20161207 10:01:33.868" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:33.869">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161207 10:01:33.869" starttime="20161207 10:01:33.869" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:33.869" starttime="20161207 10:01:33.866" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:33.869" starttime="20161207 10:01:33.863" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:01:33.870">Dictionary does not contain key 'port'.</msg>
<status endtime="20161207 10:01:33.870" starttime="20161207 10:01:33.870" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:33.870">${has_port} = False</msg>
<status endtime="20161207 10:01:33.870" starttime="20161207 10:01:33.870" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161207 10:01:33.874" starttime="20161207 10:01:33.874" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161207 10:01:33.875" starttime="20161207 10:01:33.875" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:33.875" starttime="20161207 10:01:33.874" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:33.875" starttime="20161207 10:01:33.871" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:33.876">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161207 10:01:36.263">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161207 10:01:36.264" starttime="20161207 10:01:33.875" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:36.264" starttime="20161207 10:01:33.858" status="PASS"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:36.265">@{arglist} = [ ]</msg>
<status endtime="20161207 10:01:36.265" starttime="20161207 10:01:36.265" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:36.266">${args} = {u'data': []}</msg>
<status endtime="20161207 10:01:36.266" starttime="20161207 10:01:36.266" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:36.268">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:01:36.268" starttime="20161207 10:01:36.268" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:36.271">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status endtime="20161207 10:01:36.271" starttime="20161207 10:01:36.270" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:36.272">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:36.272" starttime="20161207 10:01:36.271" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:01:36.273" starttime="20161207 10:01:36.272" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:36.278">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:36.278" starttime="20161207 10:01:36.277" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:36.279">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:36.279" starttime="20161207 10:01:36.278" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:36.279" starttime="20161207 10:01:36.278" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:36.279" starttime="20161207 10:01:36.277" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:36.279" starttime="20161207 10:01:36.273" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:36.280">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:36.280" starttime="20161207 10:01:36.279" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:36.281">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:36.281" starttime="20161207 10:01:36.280" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:36.281">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:36.281" starttime="20161207 10:01:36.281" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:36.282">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:36.282" starttime="20161207 10:01:36.281" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:36.617">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:36.617">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:36.618" starttime="20161207 10:01:36.282" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:36.618">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:36.618" starttime="20161207 10:01:36.618" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:36.618" starttime="20161207 10:01:36.279" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:37.036">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:37.036">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:37.036" starttime="20161207 10:01:36.619" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:37.042">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:37.042" starttime="20161207 10:01:37.041" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:37.043">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:37.043" starttime="20161207 10:01:37.043" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:37.043" starttime="20161207 10:01:37.042" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:37.043" starttime="20161207 10:01:37.040" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:37.043" starttime="20161207 10:01:37.036" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:37.044">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:37.044" starttime="20161207 10:01:36.269" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:37.044">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:37.044" starttime="20161207 10:01:36.267" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:37.045">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:37.045" starttime="20161207 10:01:37.045" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:37.048">@{arglist} = [ ]</msg>
<status endtime="20161207 10:01:37.048" starttime="20161207 10:01:37.047" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:37.049">${args} = {u'data': []}</msg>
<status endtime="20161207 10:01:37.049" starttime="20161207 10:01:37.048" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:37.051">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:01:37.051" starttime="20161207 10:01:37.051" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:37.054">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:01:37.054" starttime="20161207 10:01:37.053" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:37.055">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:37.055" starttime="20161207 10:01:37.054" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:01:37.056" starttime="20161207 10:01:37.055" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:37.062">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:37.062" starttime="20161207 10:01:37.061" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:37.063">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:37.063" starttime="20161207 10:01:37.062" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:37.063" starttime="20161207 10:01:37.062" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:37.063" starttime="20161207 10:01:37.060" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:37.063" starttime="20161207 10:01:37.056" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:37.064">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:37.065" starttime="20161207 10:01:37.064" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:37.065">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:37.065" starttime="20161207 10:01:37.065" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:37.066">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:37.066" starttime="20161207 10:01:37.065" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:37.066">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:37.066" starttime="20161207 10:01:37.066" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:38.225">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:38.225">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:38.225" starttime="20161207 10:01:37.066" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:38.226">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:38.226" starttime="20161207 10:01:38.225" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:38.226" starttime="20161207 10:01:37.063" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:38.628">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:38.629">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:38.629" starttime="20161207 10:01:38.226" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:38.633">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:38.633" starttime="20161207 10:01:38.632" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:38.634">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:38.634" starttime="20161207 10:01:38.634" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:38.634" starttime="20161207 10:01:38.633" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:38.634" starttime="20161207 10:01:38.632" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:38.634" starttime="20161207 10:01:38.629" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:38.634">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:38.634" starttime="20161207 10:01:37.052" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:38.635">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:38.635" starttime="20161207 10:01:37.049" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:38.635">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:38.635" starttime="20161207 10:01:38.635" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:38.636">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:01:38.636">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:01:38.636">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:01:38.636" starttime="20161207 10:01:38.635" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:38.636">${state} = 0</msg>
<status endtime="20161207 10:01:38.636" starttime="20161207 10:01:37.046" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20161207 10:01:38.637" starttime="20161207 10:01:38.636" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:38.637" starttime="20161207 10:01:37.046" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:38.637" starttime="20161207 10:01:37.045" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:38.637" starttime="20161207 10:01:36.264" status="PASS"></status>
</kw>
<kw name="Check Power Off States" library="poweroffs">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:38.638">@{arglist} = [ ]</msg>
<status endtime="20161207 10:01:38.638" starttime="20161207 10:01:38.638" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:38.638">${args} = {u'data': []}</msg>
<status endtime="20161207 10:01:38.638" starttime="20161207 10:01:38.638" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:38.640">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:01:38.640" starttime="20161207 10:01:38.639" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:38.641">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:01:38.641" starttime="20161207 10:01:38.641" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:38.641">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:38.642" starttime="20161207 10:01:38.641" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:01:38.642" starttime="20161207 10:01:38.642" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:38.646">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:38.646" starttime="20161207 10:01:38.646" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:38.647">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:38.647" starttime="20161207 10:01:38.647" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:38.647" starttime="20161207 10:01:38.647" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:38.648" starttime="20161207 10:01:38.645" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:38.648" starttime="20161207 10:01:38.643" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:38.648">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:38.649" starttime="20161207 10:01:38.648" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:38.649">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:38.649" starttime="20161207 10:01:38.649" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:38.650">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:38.650" starttime="20161207 10:01:38.649" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:38.650">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:38.650" starttime="20161207 10:01:38.650" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:40.180">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:40.180">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:40.180" starttime="20161207 10:01:38.651" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:40.182">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:40.182" starttime="20161207 10:01:40.181" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:40.182" starttime="20161207 10:01:38.648" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:40.648">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:40.649">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:40.649" starttime="20161207 10:01:40.182" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:40.656">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:40.656" starttime="20161207 10:01:40.655" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:40.658">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:40.658" starttime="20161207 10:01:40.657" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:40.658" starttime="20161207 10:01:40.656" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:40.658" starttime="20161207 10:01:40.654" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:40.658" starttime="20161207 10:01:40.649" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:40.659">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:40.659" starttime="20161207 10:01:38.640" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:40.659">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:40.659" starttime="20161207 10:01:38.639" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:40.660">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:40.660" starttime="20161207 10:01:40.659" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:40.661">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:01:40.661">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:01:40.661">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:01:40.661" starttime="20161207 10:01:40.660" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:40.662">${power_state} = 0</msg>
<status endtime="20161207 10:01:40.662" starttime="20161207 10:01:38.637" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20161207 10:01:40.663" starttime="20161207 10:01:40.662" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status endtime="20161207 10:01:40.663" starttime="20161207 10:01:40.663" status="PASS"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:40.666">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20161207 10:01:40.666" starttime="20161207 10:01:40.666" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:40.672">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20161207 10:01:40.672" starttime="20161207 10:01:40.671" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:40.673">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20161207 10:01:40.673" starttime="20161207 10:01:40.672" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:40.673" starttime="20161207 10:01:40.672" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:40.673" starttime="20161207 10:01:40.670" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:40.673" starttime="20161207 10:01:40.666" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:40.674">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:40.674" starttime="20161207 10:01:40.674" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:40.675">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:40.675" starttime="20161207 10:01:40.675" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:40.675">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:40.675" starttime="20161207 10:01:40.675" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:40.676">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:40.676" starttime="20161207 10:01:40.676" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:41.236">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:41.236">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:41.236" starttime="20161207 10:01:40.676" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:41.237">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:41.237" starttime="20161207 10:01:41.236" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:41.237" starttime="20161207 10:01:40.673" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:41.315">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg level="INFO" timestamp="20161207 10:01:41.315">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:41.315" starttime="20161207 10:01:41.238" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:41.319">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:41.319" starttime="20161207 10:01:41.319" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:41.320">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:41.320" starttime="20161207 10:01:41.320" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:41.320" starttime="20161207 10:01:41.319" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:41.320" starttime="20161207 10:01:41.318" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:41.321" starttime="20161207 10:01:41.316" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:41.321">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:41.321" starttime="20161207 10:01:40.665" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:41.321">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:01:41.321">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:01:41.321">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status endtime="20161207 10:01:41.321" starttime="20161207 10:01:41.321" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:41.322">${state} = Off</msg>
<status endtime="20161207 10:01:41.322" starttime="20161207 10:01:40.664" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:41.322">${boot_progress} = Off</msg>
<status endtime="20161207 10:01:41.322" starttime="20161207 10:01:40.664" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status endtime="20161207 10:01:41.322" starttime="20161207 10:01:41.322" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status endtime="20161207 10:01:41.323" starttime="20161207 10:01:41.323" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:41.323">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status endtime="20161207 10:01:41.323" starttime="20161207 10:01:41.323" status="PASS"></status>
</kw>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:41.324">@{arglist} = [ ]</msg>
<status endtime="20161207 10:01:41.324" starttime="20161207 10:01:41.324" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:41.325">${args} = {u'data': []}</msg>
<status endtime="20161207 10:01:41.325" starttime="20161207 10:01:41.324" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:41.326">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161207 10:01:41.326" starttime="20161207 10:01:41.326" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:41.327">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161207 10:01:41.327" starttime="20161207 10:01:41.327" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:41.328">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:41.328" starttime="20161207 10:01:41.327" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:01:41.328" starttime="20161207 10:01:41.328" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:41.334">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:41.334" starttime="20161207 10:01:41.332" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:41.335">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:41.335" starttime="20161207 10:01:41.334" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:41.335" starttime="20161207 10:01:41.334" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:41.335" starttime="20161207 10:01:41.331" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:41.335" starttime="20161207 10:01:41.328" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:41.336">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:41.336" starttime="20161207 10:01:41.336" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:41.337">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:41.337" starttime="20161207 10:01:41.336" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:41.337">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:41.337" starttime="20161207 10:01:41.337" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:41.338">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:41.338" starttime="20161207 10:01:41.338" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:41.790">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:41.790">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:41.790" starttime="20161207 10:01:41.338" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:41.790">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:41.791" starttime="20161207 10:01:41.790" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:41.791" starttime="20161207 10:01:41.335" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:42.068">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:42.068">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:42.068" starttime="20161207 10:01:41.791" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:42.075">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:42.075" starttime="20161207 10:01:42.074" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:42.077">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:42.077" starttime="20161207 10:01:42.077" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:42.077" starttime="20161207 10:01:42.076" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:42.078" starttime="20161207 10:01:42.073" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:42.078" starttime="20161207 10:01:42.069" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:42.078">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:42.078" starttime="20161207 10:01:41.326" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:42.079">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:42.079" starttime="20161207 10:01:41.325" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:42.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:42.081" starttime="20161207 10:01:42.080" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:42.082">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:01:42.082">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:01:42.082">${content} = {u'status': u'ok', u'data': u'BMC_READY', u'message': u'200 OK'}</msg>
<status endtime="20161207 10:01:42.083" starttime="20161207 10:01:42.081" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:42.083">${bmc_state} = BMC_READY</msg>
<status endtime="20161207 10:01:42.083" starttime="20161207 10:01:41.323" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${states}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status endtime="20161207 10:01:42.084" starttime="20161207 10:01:42.084" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status endtime="20161207 10:01:42.085" starttime="20161207 10:01:42.085" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:42.086" starttime="20161207 10:01:38.637" status="PASS"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status endtime="20161207 10:01:42.200" starttime="20161207 10:01:42.086" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:42.200" starttime="20161207 10:01:33.858" status="PASS"></status>
</kw>
<kw name="BMC Power On" library="powerons">
<doc>Powers on the system, checks that the OS is functional, and</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>alias=bmc_connection</arg>
</arguments>
<assign>
<var>&amp;{bmc_connection_args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:42.201">&amp;{bmc_connection_args} = { alias=bmc_connection }</msg>
<status endtime="20161207 10:01:42.201" starttime="20161207 10:01:42.200" status="PASS"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<arguments>
<arg>&amp;{bmc_connection_args}</arg>
</arguments>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:01:42.203">Dictionary does not contain key 'host'.</msg>
<status endtime="20161207 10:01:42.203" starttime="20161207 10:01:42.202" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:42.203">${has_host} = False</msg>
<status endtime="20161207 10:01:42.203" starttime="20161207 10:01:42.202" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161207 10:01:42.206" starttime="20161207 10:01:42.206" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:42.206" starttime="20161207 10:01:42.203" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:42.210">${port_num} = 22</msg>
<status endtime="20161207 10:01:42.210" starttime="20161207 10:01:42.210" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:42.211">${SSH_PORT} = 22</msg>
<status endtime="20161207 10:01:42.211" starttime="20161207 10:01:42.210" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:42.211">${https_num} = 443</msg>
<status endtime="20161207 10:01:42.211" starttime="20161207 10:01:42.211" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:42.212">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161207 10:01:42.212" starttime="20161207 10:01:42.211" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:42.212" starttime="20161207 10:01:42.209" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:42.212" starttime="20161207 10:01:42.207" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:01:42.213">Dictionary does not contain key 'port'.</msg>
<status endtime="20161207 10:01:42.213" starttime="20161207 10:01:42.212" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:42.213">${has_port} = False</msg>
<status endtime="20161207 10:01:42.213" starttime="20161207 10:01:42.212" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161207 10:01:42.217" starttime="20161207 10:01:42.217" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161207 10:01:42.217" starttime="20161207 10:01:42.217" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:42.218" starttime="20161207 10:01:42.216" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:42.218" starttime="20161207 10:01:42.213" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:42.218">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161207 10:01:44.767">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161207 10:01:44.767" starttime="20161207 10:01:42.218" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:44.768" starttime="20161207 10:01:42.201" status="PASS"></status>
</kw>
<kw name="Initiate Power On" library="utils">
<doc>Initiates the power on and waits until the Is Power On</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:44.769">@{arglist} = [ ]</msg>
<status endtime="20161207 10:01:44.769" starttime="20161207 10:01:44.768" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:44.769">${args} = {u'data': []}</msg>
<status endtime="20161207 10:01:44.769" starttime="20161207 10:01:44.769" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOn</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:44.770">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:01:44.770" starttime="20161207 10:01:44.770" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:44.772">${base_uri} = /org/openbmc/control/chassis0//action/powerOn</msg>
<status endtime="20161207 10:01:44.772" starttime="20161207 10:01:44.771" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:44.772">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:44.772" starttime="20161207 10:01:44.772" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:01:44.773" starttime="20161207 10:01:44.772" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:44.778">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:44.778" starttime="20161207 10:01:44.777" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:44.778">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:44.778" starttime="20161207 10:01:44.778" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:44.779" starttime="20161207 10:01:44.778" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:44.779" starttime="20161207 10:01:44.776" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:44.779" starttime="20161207 10:01:44.773" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:44.780">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:44.780" starttime="20161207 10:01:44.779" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:44.780">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:44.780" starttime="20161207 10:01:44.780" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:44.781">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:44.781" starttime="20161207 10:01:44.781" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:44.782">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:44.782" starttime="20161207 10:01:44.781" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:45.114">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:45.114">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:45.114" starttime="20161207 10:01:44.782" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:45.115">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:45.115" starttime="20161207 10:01:45.114" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:45.116" starttime="20161207 10:01:44.779" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:45.604">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOn, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:45.604">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:45.605" starttime="20161207 10:01:45.116" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:45.612">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:45.612" starttime="20161207 10:01:45.611" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:45.614">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:45.614" starttime="20161207 10:01:45.613" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:45.614" starttime="20161207 10:01:45.613" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:45.614" starttime="20161207 10:01:45.611" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:45.614" starttime="20161207 10:01:45.605" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:45.615">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:45.615" starttime="20161207 10:01:44.770" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:45.615">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:45.615" starttime="20161207 10:01:44.769" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:45.616">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:45.616" starttime="20161207 10:01:45.615" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20161207 10:01:45.619" starttime="20161207 10:01:45.616" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Power On</arg>
</arguments>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:45.620">@{arglist} = [ ]</msg>
<status endtime="20161207 10:01:45.620" starttime="20161207 10:01:45.620" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:45.621">${args} = {u'data': []}</msg>
<status endtime="20161207 10:01:45.621" starttime="20161207 10:01:45.620" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:45.622">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:01:45.622" starttime="20161207 10:01:45.621" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:45.623">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:01:45.623" starttime="20161207 10:01:45.623" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:45.623">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:45.623" starttime="20161207 10:01:45.623" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:01:45.624" starttime="20161207 10:01:45.624" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:45.628">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:45.628" starttime="20161207 10:01:45.628" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:45.629">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:01:45.629" starttime="20161207 10:01:45.629" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:45.629" starttime="20161207 10:01:45.628" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:45.629" starttime="20161207 10:01:45.627" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:45.629" starttime="20161207 10:01:45.624" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:45.630">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:01:45.631" starttime="20161207 10:01:45.630" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:45.631">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:01:45.631" starttime="20161207 10:01:45.631" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:45.632">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:01:45.632" starttime="20161207 10:01:45.632" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:45.632">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:01:45.632" starttime="20161207 10:01:45.632" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:49.497">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:49.497">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:49.497" starttime="20161207 10:01:45.633" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:49.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:49.499" starttime="20161207 10:01:49.498" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:49.499" starttime="20161207 10:01:45.630" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:50.001">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:01:50.001">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:50.001" starttime="20161207 10:01:49.499" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:50.012">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:50.012" starttime="20161207 10:01:50.010" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:50.014">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:01:50.014" starttime="20161207 10:01:50.013" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:50.014" starttime="20161207 10:01:50.012" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:50.014" starttime="20161207 10:01:50.009" status="PASS"></status>
</kw>
<status endtime="20161207 10:01:50.014" starttime="20161207 10:01:50.002" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:50.015">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:50.015" starttime="20161207 10:01:45.622" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:50.015">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:01:50.015" starttime="20161207 10:01:45.621" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:01:50.016">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:01:50.016" starttime="20161207 10:01:50.015" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:01:50.016">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:01:50.016">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:01:50.016">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:01:50.016" starttime="20161207 10:01:50.016" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:01:50.017">${state} = 0</msg>
<status endtime="20161207 10:01:50.017" starttime="20161207 10:01:45.619" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:01:50.017">0 != 1</msg>
<status endtime="20161207 10:01:50.017" starttime="20161207 10:01:50.017" status="FAIL"></status>
</kw>
<status endtime="20161207 10:01:50.017" starttime="20161207 10:01:45.619" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:00.020">@{arglist} = [ ]</msg>
<status endtime="20161207 10:02:00.020" starttime="20161207 10:02:00.020" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:00.021">${args} = {u'data': []}</msg>
<status endtime="20161207 10:02:00.021" starttime="20161207 10:02:00.020" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:00.024">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:02:00.024" starttime="20161207 10:02:00.023" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:00.026">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:02:00.026" starttime="20161207 10:02:00.025" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:00.027">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:02:00.027" starttime="20161207 10:02:00.026" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:02:00.028" starttime="20161207 10:02:00.027" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:00.037">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:02:00.037" starttime="20161207 10:02:00.036" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:00.038">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:02:00.038" starttime="20161207 10:02:00.037" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:00.038" starttime="20161207 10:02:00.037" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:00.038" starttime="20161207 10:02:00.035" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:00.038" starttime="20161207 10:02:00.028" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:00.039">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:02:00.039" starttime="20161207 10:02:00.039" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:00.040">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:02:00.040" starttime="20161207 10:02:00.040" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:00.041">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:02:00.041" starttime="20161207 10:02:00.040" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:00.041">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:02:00.041" starttime="20161207 10:02:00.041" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:00.373">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:02:00.373">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:00.373" starttime="20161207 10:02:00.041" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:00.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:02:00.374" starttime="20161207 10:02:00.373" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:00.374" starttime="20161207 10:02:00.038" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:00.731">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:02:00.731">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:00.731" starttime="20161207 10:02:00.374" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:00.735">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:02:00.735" starttime="20161207 10:02:00.734" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:00.736">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:02:00.736" starttime="20161207 10:02:00.736" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:00.736" starttime="20161207 10:02:00.735" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:00.736" starttime="20161207 10:02:00.734" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:00.736" starttime="20161207 10:02:00.731" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:00.736">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:00.736" starttime="20161207 10:02:00.024" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:00.737">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:00.737" starttime="20161207 10:02:00.021" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:00.737">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:02:00.737" starttime="20161207 10:02:00.737" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:00.738">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:02:00.738">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:02:00.738">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:02:00.738" starttime="20161207 10:02:00.737" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:00.738">${state} = 0</msg>
<status endtime="20161207 10:02:00.738" starttime="20161207 10:02:00.019" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:02:00.739">0 != 1</msg>
<status endtime="20161207 10:02:00.739" starttime="20161207 10:02:00.738" status="FAIL"></status>
</kw>
<status endtime="20161207 10:02:00.739" starttime="20161207 10:02:00.018" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:10.742">@{arglist} = [ ]</msg>
<status endtime="20161207 10:02:10.742" starttime="20161207 10:02:10.741" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:10.743">${args} = {u'data': []}</msg>
<status endtime="20161207 10:02:10.743" starttime="20161207 10:02:10.742" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:10.745">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:02:10.745" starttime="20161207 10:02:10.744" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:10.747">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:02:10.747" starttime="20161207 10:02:10.746" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:10.747">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:02:10.747" starttime="20161207 10:02:10.747" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:02:10.748" starttime="20161207 10:02:10.748" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:10.753">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:02:10.753" starttime="20161207 10:02:10.752" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:10.755">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:02:10.755" starttime="20161207 10:02:10.754" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:10.755" starttime="20161207 10:02:10.754" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:10.755" starttime="20161207 10:02:10.752" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:10.755" starttime="20161207 10:02:10.748" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:10.756">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:02:10.757" starttime="20161207 10:02:10.756" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:10.757">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:02:10.757" starttime="20161207 10:02:10.757" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:10.758">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:02:10.758" starttime="20161207 10:02:10.758" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:10.758">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:02:10.758" starttime="20161207 10:02:10.758" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:11.094">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:02:11.094">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:11.094" starttime="20161207 10:02:10.759" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:11.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:02:11.095" starttime="20161207 10:02:11.094" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:11.095" starttime="20161207 10:02:10.755" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:11.359">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:02:11.359">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:11.359" starttime="20161207 10:02:11.095" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:11.366">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:02:11.366" starttime="20161207 10:02:11.365" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:11.368">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:02:11.368" starttime="20161207 10:02:11.367" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:11.368" starttime="20161207 10:02:11.367" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:11.368" starttime="20161207 10:02:11.364" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:11.369" starttime="20161207 10:02:11.360" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:11.369">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:11.369" starttime="20161207 10:02:10.745" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:11.369">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:11.369" starttime="20161207 10:02:10.743" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:11.370">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:02:11.370" starttime="20161207 10:02:11.370" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:11.371">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:02:11.371">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:02:11.371">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:02:11.371" starttime="20161207 10:02:11.371" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:11.372">${state} = 0</msg>
<status endtime="20161207 10:02:11.372" starttime="20161207 10:02:10.740" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:02:11.373">0 != 1</msg>
<status endtime="20161207 10:02:11.373" starttime="20161207 10:02:11.372" status="FAIL"></status>
</kw>
<status endtime="20161207 10:02:11.373" starttime="20161207 10:02:10.740" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:21.377">@{arglist} = [ ]</msg>
<status endtime="20161207 10:02:21.377" starttime="20161207 10:02:21.376" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:21.378">${args} = {u'data': []}</msg>
<status endtime="20161207 10:02:21.378" starttime="20161207 10:02:21.377" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:21.381">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:02:21.381" starttime="20161207 10:02:21.380" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:21.384">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:02:21.384" starttime="20161207 10:02:21.383" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:21.386">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:02:21.386" starttime="20161207 10:02:21.385" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:02:21.387" starttime="20161207 10:02:21.386" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:21.393">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:02:21.393" starttime="20161207 10:02:21.392" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:21.394">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:02:21.394" starttime="20161207 10:02:21.393" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:21.394" starttime="20161207 10:02:21.393" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:21.394" starttime="20161207 10:02:21.391" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:21.394" starttime="20161207 10:02:21.387" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:21.395">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:02:21.395" starttime="20161207 10:02:21.395" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:21.396">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:02:21.396" starttime="20161207 10:02:21.396" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:21.397">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:02:21.397" starttime="20161207 10:02:21.396" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:21.397">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:02:21.397" starttime="20161207 10:02:21.397" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:21.732">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:02:21.732">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:21.732" starttime="20161207 10:02:21.397" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:21.734">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:02:21.734" starttime="20161207 10:02:21.733" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:21.734" starttime="20161207 10:02:21.394" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:21.994">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:02:21.994">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:21.994" starttime="20161207 10:02:21.735" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:22.005">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:02:22.005" starttime="20161207 10:02:22.004" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:22.006">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:02:22.007" starttime="20161207 10:02:22.006" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:22.007" starttime="20161207 10:02:22.005" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:22.007" starttime="20161207 10:02:22.003" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:22.007" starttime="20161207 10:02:21.995" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:22.007">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:22.007" starttime="20161207 10:02:21.381" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:22.007">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:22.007" starttime="20161207 10:02:21.378" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:22.008">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:02:22.008" starttime="20161207 10:02:22.008" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:22.009">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:02:22.009">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:02:22.009">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:02:22.009" starttime="20161207 10:02:22.008" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:22.009">${state} = 0</msg>
<status endtime="20161207 10:02:22.009" starttime="20161207 10:02:21.376" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:02:22.010">0 != 1</msg>
<status endtime="20161207 10:02:22.010" starttime="20161207 10:02:22.009" status="FAIL"></status>
</kw>
<status endtime="20161207 10:02:22.010" starttime="20161207 10:02:21.374" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:32.012">@{arglist} = [ ]</msg>
<status endtime="20161207 10:02:32.012" starttime="20161207 10:02:32.012" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:32.013">${args} = {u'data': []}</msg>
<status endtime="20161207 10:02:32.013" starttime="20161207 10:02:32.013" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:32.014">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:02:32.014" starttime="20161207 10:02:32.014" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:32.015">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:02:32.015" starttime="20161207 10:02:32.015" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:32.016">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:02:32.016" starttime="20161207 10:02:32.016" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:02:32.016" starttime="20161207 10:02:32.016" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:32.021">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:02:32.021" starttime="20161207 10:02:32.020" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:32.022">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:02:32.023" starttime="20161207 10:02:32.022" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:32.023" starttime="20161207 10:02:32.021" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:32.023" starttime="20161207 10:02:32.019" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:32.023" starttime="20161207 10:02:32.017" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:32.025">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:02:32.026" starttime="20161207 10:02:32.024" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:32.027">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:02:32.027" starttime="20161207 10:02:32.026" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:32.028">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:02:32.028" starttime="20161207 10:02:32.027" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:32.029">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:02:32.029" starttime="20161207 10:02:32.028" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:32.362">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:02:32.363">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:32.363" starttime="20161207 10:02:32.029" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:32.363">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:02:32.364" starttime="20161207 10:02:32.363" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:32.364" starttime="20161207 10:02:32.023" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:32.634">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:02:32.634">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:32.634" starttime="20161207 10:02:32.364" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:32.638">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:02:32.638" starttime="20161207 10:02:32.638" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:32.639">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:02:32.639" starttime="20161207 10:02:32.639" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:32.639" starttime="20161207 10:02:32.638" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:32.639" starttime="20161207 10:02:32.637" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:32.639" starttime="20161207 10:02:32.634" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:32.639">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:32.639" starttime="20161207 10:02:32.014" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:32.640">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:32.640" starttime="20161207 10:02:32.013" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:32.640">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:02:32.640" starttime="20161207 10:02:32.640" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:32.641">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:02:32.641">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:02:32.641">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:02:32.641" starttime="20161207 10:02:32.640" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:32.641">${state} = 0</msg>
<status endtime="20161207 10:02:32.641" starttime="20161207 10:02:32.011" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:02:32.642">0 != 1</msg>
<status endtime="20161207 10:02:32.642" starttime="20161207 10:02:32.641" status="FAIL"></status>
</kw>
<status endtime="20161207 10:02:32.642" starttime="20161207 10:02:32.011" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:42.645">@{arglist} = [ ]</msg>
<status endtime="20161207 10:02:42.645" starttime="20161207 10:02:42.644" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:42.646">${args} = {u'data': []}</msg>
<status endtime="20161207 10:02:42.646" starttime="20161207 10:02:42.645" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:42.648">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:02:42.648" starttime="20161207 10:02:42.647" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:42.650">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:02:42.650" starttime="20161207 10:02:42.650" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:42.651">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:02:42.651" starttime="20161207 10:02:42.651" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:02:42.652" starttime="20161207 10:02:42.651" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:42.659">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:02:42.659" starttime="20161207 10:02:42.658" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:42.660">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:02:42.660" starttime="20161207 10:02:42.659" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:42.660" starttime="20161207 10:02:42.659" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:42.660" starttime="20161207 10:02:42.657" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:42.660" starttime="20161207 10:02:42.652" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:42.661">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:02:42.661" starttime="20161207 10:02:42.661" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:42.662">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:02:42.662" starttime="20161207 10:02:42.661" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:42.662">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:02:42.662" starttime="20161207 10:02:42.662" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:42.663">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:02:42.663" starttime="20161207 10:02:42.663" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:42.997">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:02:42.997">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:42.997" starttime="20161207 10:02:42.663" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:42.998">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:02:42.998" starttime="20161207 10:02:42.998" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:42.998" starttime="20161207 10:02:42.660" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:43.321">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:02:43.321">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:43.321" starttime="20161207 10:02:42.998" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:43.330">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:02:43.330" starttime="20161207 10:02:43.329" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:43.331">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:02:43.332" starttime="20161207 10:02:43.331" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:43.332" starttime="20161207 10:02:43.330" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:43.332" starttime="20161207 10:02:43.328" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:43.332" starttime="20161207 10:02:43.321" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:43.332">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:43.332" starttime="20161207 10:02:42.648" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:43.333">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:43.333" starttime="20161207 10:02:42.646" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:43.334">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:02:43.334" starttime="20161207 10:02:43.333" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:43.335">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:02:43.335">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:02:43.335">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:02:43.335" starttime="20161207 10:02:43.334" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:43.335">${state} = 0</msg>
<status endtime="20161207 10:02:43.335" starttime="20161207 10:02:42.643" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:02:43.336">0 != 1</msg>
<status endtime="20161207 10:02:43.336" starttime="20161207 10:02:43.336" status="FAIL"></status>
</kw>
<status endtime="20161207 10:02:43.337" starttime="20161207 10:02:42.643" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:53.339">@{arglist} = [ ]</msg>
<status endtime="20161207 10:02:53.339" starttime="20161207 10:02:53.339" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:53.340">${args} = {u'data': []}</msg>
<status endtime="20161207 10:02:53.340" starttime="20161207 10:02:53.340" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:53.342">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:02:53.342" starttime="20161207 10:02:53.342" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:53.344">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:02:53.344" starttime="20161207 10:02:53.344" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:53.345">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:02:53.345" starttime="20161207 10:02:53.345" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:02:53.346" starttime="20161207 10:02:53.346" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:53.354">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:02:53.354" starttime="20161207 10:02:53.353" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:53.355">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:02:53.356" starttime="20161207 10:02:53.355" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:53.356" starttime="20161207 10:02:53.354" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:53.356" starttime="20161207 10:02:53.351" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:53.356" starttime="20161207 10:02:53.347" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:53.358">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:02:53.359" starttime="20161207 10:02:53.357" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:53.360">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:02:53.360" starttime="20161207 10:02:53.359" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:53.361">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:02:53.361" starttime="20161207 10:02:53.360" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:53.362">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:02:53.362" starttime="20161207 10:02:53.361" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:53.922">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:02:53.922">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:53.922" starttime="20161207 10:02:53.362" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:53.923">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:02:53.923" starttime="20161207 10:02:53.922" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:53.923" starttime="20161207 10:02:53.356" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:54.189">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:02:54.189">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:54.189" starttime="20161207 10:02:53.923" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:54.193">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:02:54.193" starttime="20161207 10:02:54.193" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:54.194">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:02:54.194" starttime="20161207 10:02:54.194" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:54.194" starttime="20161207 10:02:54.193" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:54.194" starttime="20161207 10:02:54.192" status="PASS"></status>
</kw>
<status endtime="20161207 10:02:54.194" starttime="20161207 10:02:54.189" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:54.195">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:54.195" starttime="20161207 10:02:53.343" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:54.195">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:02:54.195" starttime="20161207 10:02:53.341" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:02:54.195">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:02:54.196" starttime="20161207 10:02:54.195" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:02:54.196">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:02:54.196">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:02:54.196">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:02:54.196" starttime="20161207 10:02:54.196" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:02:54.197">${state} = 0</msg>
<status endtime="20161207 10:02:54.197" starttime="20161207 10:02:53.338" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:02:54.197">0 != 1</msg>
<status endtime="20161207 10:02:54.197" starttime="20161207 10:02:54.197" status="FAIL"></status>
</kw>
<status endtime="20161207 10:02:54.197" starttime="20161207 10:02:53.337" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:04.201">@{arglist} = [ ]</msg>
<status endtime="20161207 10:03:04.201" starttime="20161207 10:03:04.200" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:04.202">${args} = {u'data': []}</msg>
<status endtime="20161207 10:03:04.202" starttime="20161207 10:03:04.201" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:04.204">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:03:04.204" starttime="20161207 10:03:04.203" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:04.206">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:03:04.207" starttime="20161207 10:03:04.205" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:04.208">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:03:04.208" starttime="20161207 10:03:04.207" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:03:04.208" starttime="20161207 10:03:04.208" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:04.215">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:03:04.215" starttime="20161207 10:03:04.214" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:04.216">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:03:04.216" starttime="20161207 10:03:04.216" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:04.217" starttime="20161207 10:03:04.215" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:04.217" starttime="20161207 10:03:04.213" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:04.217" starttime="20161207 10:03:04.209" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:04.218">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:03:04.218" starttime="20161207 10:03:04.217" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:04.218">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:03:04.218" starttime="20161207 10:03:04.218" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:04.219">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:03:04.219" starttime="20161207 10:03:04.219" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:04.220">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:03:04.220" starttime="20161207 10:03:04.219" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:04.551">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:03:04.551">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:04.551" starttime="20161207 10:03:04.220" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:04.552">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:03:04.552" starttime="20161207 10:03:04.552" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:04.552" starttime="20161207 10:03:04.217" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:04.820">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:03:04.821">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:04.821" starttime="20161207 10:03:04.553" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:04.826">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:03:04.826" starttime="20161207 10:03:04.825" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:04.828">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:03:04.828" starttime="20161207 10:03:04.827" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:04.828" starttime="20161207 10:03:04.827" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:04.828" starttime="20161207 10:03:04.825" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:04.829" starttime="20161207 10:03:04.821" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:04.829">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:04.829" starttime="20161207 10:03:04.204" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:04.829">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:04.829" starttime="20161207 10:03:04.202" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:04.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:03:04.830" starttime="20161207 10:03:04.830" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:04.831">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:03:04.831">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:03:04.831">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:03:04.832" starttime="20161207 10:03:04.831" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:04.832">${state} = 0</msg>
<status endtime="20161207 10:03:04.832" starttime="20161207 10:03:04.199" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:03:04.833">0 != 1</msg>
<status endtime="20161207 10:03:04.833" starttime="20161207 10:03:04.832" status="FAIL"></status>
</kw>
<status endtime="20161207 10:03:04.833" starttime="20161207 10:03:04.198" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:14.835">@{arglist} = [ ]</msg>
<status endtime="20161207 10:03:14.835" starttime="20161207 10:03:14.835" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:14.836">${args} = {u'data': []}</msg>
<status endtime="20161207 10:03:14.836" starttime="20161207 10:03:14.836" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:14.837">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:03:14.837" starttime="20161207 10:03:14.837" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:14.838">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:03:14.838" starttime="20161207 10:03:14.838" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:14.839">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:03:14.839" starttime="20161207 10:03:14.839" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:03:14.839" starttime="20161207 10:03:14.839" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:14.844">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:03:14.844" starttime="20161207 10:03:14.843" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:14.845">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:03:14.845" starttime="20161207 10:03:14.844" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:14.845" starttime="20161207 10:03:14.844" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:14.845" starttime="20161207 10:03:14.842" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:14.845" starttime="20161207 10:03:14.840" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:14.846">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:03:14.846" starttime="20161207 10:03:14.845" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:14.847">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:03:14.847" starttime="20161207 10:03:14.847" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:14.848">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:03:14.848" starttime="20161207 10:03:14.847" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:14.848">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:03:14.848" starttime="20161207 10:03:14.848" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:15.374">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:03:15.375">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:15.375" starttime="20161207 10:03:14.849" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:15.376">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:03:15.376" starttime="20161207 10:03:15.375" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:15.376" starttime="20161207 10:03:14.845" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:15.666">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:03:15.666">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:15.666" starttime="20161207 10:03:15.377" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:15.672">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:03:15.672" starttime="20161207 10:03:15.671" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:15.673">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:03:15.673" starttime="20161207 10:03:15.673" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:15.673" starttime="20161207 10:03:15.672" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:15.674" starttime="20161207 10:03:15.671" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:15.674" starttime="20161207 10:03:15.667" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:15.674">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:15.674" starttime="20161207 10:03:14.837" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:15.674">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:15.674" starttime="20161207 10:03:14.836" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:15.675">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:03:15.675" starttime="20161207 10:03:15.675" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:15.676">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:03:15.676">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:03:15.676">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:03:15.676" starttime="20161207 10:03:15.675" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:15.676">${state} = 0</msg>
<status endtime="20161207 10:03:15.676" starttime="20161207 10:03:14.835" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:03:15.677">0 != 1</msg>
<status endtime="20161207 10:03:15.677" starttime="20161207 10:03:15.677" status="FAIL"></status>
</kw>
<status endtime="20161207 10:03:15.677" starttime="20161207 10:03:14.834" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:25.680">@{arglist} = [ ]</msg>
<status endtime="20161207 10:03:25.680" starttime="20161207 10:03:25.679" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:25.681">${args} = {u'data': []}</msg>
<status endtime="20161207 10:03:25.681" starttime="20161207 10:03:25.680" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:25.683">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:03:25.683" starttime="20161207 10:03:25.682" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:25.685">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:03:25.685" starttime="20161207 10:03:25.685" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:25.687">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:03:25.687" starttime="20161207 10:03:25.686" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:03:25.688" starttime="20161207 10:03:25.687" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:25.695">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:03:25.695" starttime="20161207 10:03:25.694" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:25.697">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:03:25.697" starttime="20161207 10:03:25.696" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:25.697" starttime="20161207 10:03:25.696" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:25.697" starttime="20161207 10:03:25.693" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:25.697" starttime="20161207 10:03:25.688" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:25.698">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:03:25.699" starttime="20161207 10:03:25.698" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:25.700">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:03:25.700" starttime="20161207 10:03:25.699" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:25.701">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:03:25.701" starttime="20161207 10:03:25.700" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:25.702">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:03:25.702" starttime="20161207 10:03:25.701" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:26.034">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:03:26.035">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:26.035" starttime="20161207 10:03:25.702" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:26.036">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:03:26.036" starttime="20161207 10:03:26.035" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:26.036" starttime="20161207 10:03:25.697" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:26.299">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:03:26.299">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:26.300" starttime="20161207 10:03:26.036" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:26.308">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:03:26.308" starttime="20161207 10:03:26.307" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:26.309">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:03:26.309" starttime="20161207 10:03:26.309" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:26.309" starttime="20161207 10:03:26.308" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:26.310" starttime="20161207 10:03:26.306" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:26.310" starttime="20161207 10:03:26.300" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:26.310">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:26.310" starttime="20161207 10:03:25.683" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:26.310">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:26.310" starttime="20161207 10:03:25.681" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:26.311">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:03:26.311" starttime="20161207 10:03:26.311" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:26.312">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:03:26.312">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:03:26.312">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:03:26.312" starttime="20161207 10:03:26.312" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:26.313">${state} = 0</msg>
<status endtime="20161207 10:03:26.313" starttime="20161207 10:03:25.679" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:03:26.314">0 != 1</msg>
<status endtime="20161207 10:03:26.314" starttime="20161207 10:03:26.313" status="FAIL"></status>
</kw>
<status endtime="20161207 10:03:26.314" starttime="20161207 10:03:25.678" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:36.318">@{arglist} = [ ]</msg>
<status endtime="20161207 10:03:36.318" starttime="20161207 10:03:36.317" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:36.319">${args} = {u'data': []}</msg>
<status endtime="20161207 10:03:36.320" starttime="20161207 10:03:36.319" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:36.322">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:03:36.322" starttime="20161207 10:03:36.321" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:36.324">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:03:36.324" starttime="20161207 10:03:36.323" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:36.325">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:03:36.325" starttime="20161207 10:03:36.324" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:03:36.326" starttime="20161207 10:03:36.325" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:36.332">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:03:36.332" starttime="20161207 10:03:36.331" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:36.333">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:03:36.333" starttime="20161207 10:03:36.333" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:36.333" starttime="20161207 10:03:36.332" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:36.334" starttime="20161207 10:03:36.331" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:36.334" starttime="20161207 10:03:36.326" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:36.335">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:03:36.335" starttime="20161207 10:03:36.334" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:36.336">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:03:36.336" starttime="20161207 10:03:36.335" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:36.336">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:03:36.336" starttime="20161207 10:03:36.336" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:36.337">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:03:36.337" starttime="20161207 10:03:36.337" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:36.682">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:03:36.682">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:36.682" starttime="20161207 10:03:36.337" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:36.683">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:03:36.683" starttime="20161207 10:03:36.683" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:36.684" starttime="20161207 10:03:36.334" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:36.946">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:03:36.946">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:36.946" starttime="20161207 10:03:36.684" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:36.954">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:03:36.954" starttime="20161207 10:03:36.953" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:36.955">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:03:36.955" starttime="20161207 10:03:36.955" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:36.956" starttime="20161207 10:03:36.954" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:36.956" starttime="20161207 10:03:36.952" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:36.956" starttime="20161207 10:03:36.947" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:36.956">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:36.956" starttime="20161207 10:03:36.322" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:36.956">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:36.957" starttime="20161207 10:03:36.320" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:36.957">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:03:36.957" starttime="20161207 10:03:36.957" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:36.958">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:03:36.958">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:03:36.958">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:03:36.958" starttime="20161207 10:03:36.958" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:36.958">${state} = 0</msg>
<status endtime="20161207 10:03:36.958" starttime="20161207 10:03:36.316" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:03:36.959">0 != 1</msg>
<status endtime="20161207 10:03:36.959" starttime="20161207 10:03:36.959" status="FAIL"></status>
</kw>
<status endtime="20161207 10:03:36.959" starttime="20161207 10:03:36.315" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:46.961">@{arglist} = [ ]</msg>
<status endtime="20161207 10:03:46.961" starttime="20161207 10:03:46.961" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:46.962">${args} = {u'data': []}</msg>
<status endtime="20161207 10:03:46.962" starttime="20161207 10:03:46.961" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:46.963">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:03:46.963" starttime="20161207 10:03:46.963" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:46.964">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:03:46.964" starttime="20161207 10:03:46.964" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:46.965">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:03:46.965" starttime="20161207 10:03:46.964" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:03:46.966" starttime="20161207 10:03:46.965" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:46.972">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:03:46.972" starttime="20161207 10:03:46.971" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:46.973">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:03:46.973" starttime="20161207 10:03:46.973" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:46.974" starttime="20161207 10:03:46.972" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:46.974" starttime="20161207 10:03:46.970" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:46.974" starttime="20161207 10:03:46.966" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:46.975">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:03:46.976" starttime="20161207 10:03:46.975" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:46.977">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:03:46.977" starttime="20161207 10:03:46.976" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:46.978">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:03:46.978" starttime="20161207 10:03:46.977" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:46.978">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:03:46.978" starttime="20161207 10:03:46.978" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:47.619">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:03:47.619">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:47.619" starttime="20161207 10:03:46.978" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:47.620">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:03:47.620" starttime="20161207 10:03:47.620" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:47.620" starttime="20161207 10:03:46.974" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:48.076">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:03:48.077">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:48.077" starttime="20161207 10:03:47.621" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:48.084">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:03:48.084" starttime="20161207 10:03:48.083" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:48.086">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:03:48.086" starttime="20161207 10:03:48.085" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:48.086" starttime="20161207 10:03:48.085" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:48.086" starttime="20161207 10:03:48.082" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:48.086" starttime="20161207 10:03:48.077" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:48.087">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:48.087" starttime="20161207 10:03:46.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:48.087">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:48.087" starttime="20161207 10:03:46.962" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:48.088">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:03:48.088" starttime="20161207 10:03:48.087" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:48.088">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:03:48.088">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:03:48.088">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:03:48.089" starttime="20161207 10:03:48.088" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:48.089">${state} = 0</msg>
<status endtime="20161207 10:03:48.089" starttime="20161207 10:03:46.960" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:03:48.089">0 != 1</msg>
<status endtime="20161207 10:03:48.089" starttime="20161207 10:03:48.089" status="FAIL"></status>
</kw>
<status endtime="20161207 10:03:48.090" starttime="20161207 10:03:46.960" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:58.092">@{arglist} = [ ]</msg>
<status endtime="20161207 10:03:58.092" starttime="20161207 10:03:58.092" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:58.093">${args} = {u'data': []}</msg>
<status endtime="20161207 10:03:58.093" starttime="20161207 10:03:58.093" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:58.095">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:03:58.095" starttime="20161207 10:03:58.095" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:58.098">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:03:58.098" starttime="20161207 10:03:58.097" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:58.099">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:03:58.099" starttime="20161207 10:03:58.098" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:03:58.100" starttime="20161207 10:03:58.099" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:58.107">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:03:58.107" starttime="20161207 10:03:58.106" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:58.108">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:03:58.108" starttime="20161207 10:03:58.108" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:58.108" starttime="20161207 10:03:58.107" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:58.108" starttime="20161207 10:03:58.105" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:58.108" starttime="20161207 10:03:58.100" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:58.109">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:03:58.110" starttime="20161207 10:03:58.109" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:58.111">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:03:58.111" starttime="20161207 10:03:58.110" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:58.111">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:03:58.111" starttime="20161207 10:03:58.111" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:58.112">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:03:58.112" starttime="20161207 10:03:58.111" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:58.441">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:03:58.441">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:58.441" starttime="20161207 10:03:58.112" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:58.442">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:03:58.442" starttime="20161207 10:03:58.442" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:58.442" starttime="20161207 10:03:58.109" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:58.744">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:03:58.744">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:58.744" starttime="20161207 10:03:58.442" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:58.748">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:03:58.748" starttime="20161207 10:03:58.748" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:58.749">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:03:58.749" starttime="20161207 10:03:58.749" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:58.749" starttime="20161207 10:03:58.748" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:58.749" starttime="20161207 10:03:58.747" status="PASS"></status>
</kw>
<status endtime="20161207 10:03:58.749" starttime="20161207 10:03:58.744" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:58.749">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:58.749" starttime="20161207 10:03:58.096" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:58.750">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:03:58.750" starttime="20161207 10:03:58.094" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:03:58.750">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:03:58.750" starttime="20161207 10:03:58.750" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:03:58.751">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:03:58.751">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:03:58.751">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:03:58.751" starttime="20161207 10:03:58.750" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:03:58.751">${state} = 0</msg>
<status endtime="20161207 10:03:58.751" starttime="20161207 10:03:58.091" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:03:58.752">0 != 1</msg>
<status endtime="20161207 10:03:58.752" starttime="20161207 10:03:58.751" status="FAIL"></status>
</kw>
<status endtime="20161207 10:03:58.753" starttime="20161207 10:03:58.090" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:08.755">@{arglist} = [ ]</msg>
<status endtime="20161207 10:04:08.755" starttime="20161207 10:04:08.755" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:08.757">${args} = {u'data': []}</msg>
<status endtime="20161207 10:04:08.757" starttime="20161207 10:04:08.756" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:08.759">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:04:08.759" starttime="20161207 10:04:08.758" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:08.761">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:04:08.761" starttime="20161207 10:04:08.760" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:08.762">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:04:08.762" starttime="20161207 10:04:08.762" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:04:08.763" starttime="20161207 10:04:08.763" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:08.772">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:04:08.772" starttime="20161207 10:04:08.771" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:08.773">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:04:08.773" starttime="20161207 10:04:08.773" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:08.774" starttime="20161207 10:04:08.772" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:08.774" starttime="20161207 10:04:08.770" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:08.774" starttime="20161207 10:04:08.764" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:08.775">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:04:08.775" starttime="20161207 10:04:08.774" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:08.776">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:04:08.776" starttime="20161207 10:04:08.775" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:08.776">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:04:08.776" starttime="20161207 10:04:08.776" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:08.777">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:04:08.777" starttime="20161207 10:04:08.776" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:09.121">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:04:09.121">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:09.121" starttime="20161207 10:04:08.777" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:09.122">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:04:09.122" starttime="20161207 10:04:09.122" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:09.123" starttime="20161207 10:04:08.774" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:09.386">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:04:09.386">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:09.386" starttime="20161207 10:04:09.123" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:09.397">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:04:09.397" starttime="20161207 10:04:09.396" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:09.399">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:04:09.399" starttime="20161207 10:04:09.398" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:09.399" starttime="20161207 10:04:09.398" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:09.399" starttime="20161207 10:04:09.393" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:09.399" starttime="20161207 10:04:09.386" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:09.400">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:09.400" starttime="20161207 10:04:08.759" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:09.400">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:09.400" starttime="20161207 10:04:08.757" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:09.401">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:04:09.401" starttime="20161207 10:04:09.400" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:09.401">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:04:09.402">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:04:09.402">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:04:09.402" starttime="20161207 10:04:09.401" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:09.402">${state} = 0</msg>
<status endtime="20161207 10:04:09.402" starttime="20161207 10:04:08.754" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:04:09.403">0 != 1</msg>
<status endtime="20161207 10:04:09.403" starttime="20161207 10:04:09.402" status="FAIL"></status>
</kw>
<status endtime="20161207 10:04:09.403" starttime="20161207 10:04:08.753" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:19.406">@{arglist} = [ ]</msg>
<status endtime="20161207 10:04:19.406" starttime="20161207 10:04:19.405" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:19.408">${args} = {u'data': []}</msg>
<status endtime="20161207 10:04:19.408" starttime="20161207 10:04:19.407" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:19.410">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:04:19.411" starttime="20161207 10:04:19.410" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:19.413">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:04:19.414" starttime="20161207 10:04:19.413" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:19.414">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:04:19.415" starttime="20161207 10:04:19.414" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:04:19.415" starttime="20161207 10:04:19.415" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:19.422">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:04:19.422" starttime="20161207 10:04:19.421" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:19.423">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:04:19.423" starttime="20161207 10:04:19.423" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:19.423" starttime="20161207 10:04:19.422" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:19.424" starttime="20161207 10:04:19.421" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:19.424" starttime="20161207 10:04:19.416" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:19.425">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:04:19.425" starttime="20161207 10:04:19.424" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:19.457">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:04:19.457" starttime="20161207 10:04:19.425" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:19.458">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:04:19.458" starttime="20161207 10:04:19.457" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:19.458">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:04:19.458" starttime="20161207 10:04:19.458" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:19.805">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:04:19.805">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:19.805" starttime="20161207 10:04:19.459" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:19.806">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:04:19.806" starttime="20161207 10:04:19.806" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:19.807" starttime="20161207 10:04:19.424" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:20.069">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:04:20.069">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:20.069" starttime="20161207 10:04:19.807" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:20.077">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:04:20.077" starttime="20161207 10:04:20.076" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:20.079">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:04:20.079" starttime="20161207 10:04:20.078" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:20.079" starttime="20161207 10:04:20.077" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:20.079" starttime="20161207 10:04:20.075" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:20.079" starttime="20161207 10:04:20.069" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:20.080">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:20.080" starttime="20161207 10:04:19.411" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:20.080">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:20.080" starttime="20161207 10:04:19.408" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:20.081">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:04:20.081" starttime="20161207 10:04:20.080" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:20.082">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:04:20.082">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:04:20.082">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:04:20.082" starttime="20161207 10:04:20.081" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:20.083">${state} = 0</msg>
<status endtime="20161207 10:04:20.083" starttime="20161207 10:04:19.405" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:04:20.084">0 != 1</msg>
<status endtime="20161207 10:04:20.084" starttime="20161207 10:04:20.083" status="FAIL"></status>
</kw>
<status endtime="20161207 10:04:20.084" starttime="20161207 10:04:19.404" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:30.087">@{arglist} = [ ]</msg>
<status endtime="20161207 10:04:30.087" starttime="20161207 10:04:30.086" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:30.088">${args} = {u'data': []}</msg>
<status endtime="20161207 10:04:30.088" starttime="20161207 10:04:30.087" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:30.090">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:04:30.090" starttime="20161207 10:04:30.089" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:30.092">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:04:30.092" starttime="20161207 10:04:30.091" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:30.093">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:04:30.093" starttime="20161207 10:04:30.092" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:04:30.094" starttime="20161207 10:04:30.093" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:30.100">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:04:30.100" starttime="20161207 10:04:30.099" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:30.101">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:04:30.101" starttime="20161207 10:04:30.101" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:30.101" starttime="20161207 10:04:30.100" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:30.101" starttime="20161207 10:04:30.099" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:30.101" starttime="20161207 10:04:30.094" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:30.102">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:04:30.103" starttime="20161207 10:04:30.102" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:30.103">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:04:30.103" starttime="20161207 10:04:30.103" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:30.104">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:04:30.104" starttime="20161207 10:04:30.104" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:30.105">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:04:30.105" starttime="20161207 10:04:30.104" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:30.573">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:04:30.573">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:30.573" starttime="20161207 10:04:30.105" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:30.574">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:04:30.574" starttime="20161207 10:04:30.573" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:30.574" starttime="20161207 10:04:30.101" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:30.842">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:04:30.842">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:30.842" starttime="20161207 10:04:30.574" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:30.846">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:04:30.846" starttime="20161207 10:04:30.846" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:30.847">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:04:30.847" starttime="20161207 10:04:30.847" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:30.847" starttime="20161207 10:04:30.847" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:30.848" starttime="20161207 10:04:30.846" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:30.848" starttime="20161207 10:04:30.843" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:30.848">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:30.848" starttime="20161207 10:04:30.090" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:30.848">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:30.848" starttime="20161207 10:04:30.088" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:30.849">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:04:30.849" starttime="20161207 10:04:30.848" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:30.849">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:04:30.849">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:04:30.849">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:04:30.849" starttime="20161207 10:04:30.849" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:30.850">${state} = 0</msg>
<status endtime="20161207 10:04:30.850" starttime="20161207 10:04:30.085" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:04:30.850">0 != 1</msg>
<status endtime="20161207 10:04:30.850" starttime="20161207 10:04:30.850" status="FAIL"></status>
</kw>
<status endtime="20161207 10:04:30.850" starttime="20161207 10:04:30.085" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:40.853">@{arglist} = [ ]</msg>
<status endtime="20161207 10:04:40.853" starttime="20161207 10:04:40.853" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:40.854">${args} = {u'data': []}</msg>
<status endtime="20161207 10:04:40.854" starttime="20161207 10:04:40.854" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:40.856">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:04:40.856" starttime="20161207 10:04:40.856" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:40.859">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:04:40.859" starttime="20161207 10:04:40.859" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:40.860">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:04:40.860" starttime="20161207 10:04:40.859" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:04:40.861" starttime="20161207 10:04:40.860" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:40.868">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:04:40.868" starttime="20161207 10:04:40.867" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:40.870">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:04:40.870" starttime="20161207 10:04:40.869" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:40.870" starttime="20161207 10:04:40.869" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:40.870" starttime="20161207 10:04:40.866" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:40.870" starttime="20161207 10:04:40.861" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:40.871">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:04:40.872" starttime="20161207 10:04:40.871" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:40.872">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:04:40.872" starttime="20161207 10:04:40.872" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:40.873">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:04:40.873" starttime="20161207 10:04:40.873" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:40.874">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:04:40.874" starttime="20161207 10:04:40.873" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:41.211">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:04:41.211">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:41.211" starttime="20161207 10:04:40.874" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:41.212">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:04:41.212" starttime="20161207 10:04:41.211" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:41.212" starttime="20161207 10:04:40.870" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:41.476">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:04:41.476">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:41.476" starttime="20161207 10:04:41.212" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:41.481">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:04:41.481" starttime="20161207 10:04:41.480" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:41.481">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:04:41.481" starttime="20161207 10:04:41.481" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:41.482" starttime="20161207 10:04:41.481" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:41.482" starttime="20161207 10:04:41.479" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:41.482" starttime="20161207 10:04:41.476" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:41.482">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:41.482" starttime="20161207 10:04:40.857" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:41.482">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:41.482" starttime="20161207 10:04:40.854" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:41.483">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:04:41.483" starttime="20161207 10:04:41.482" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:41.483">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:04:41.483">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:04:41.483">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:04:41.483" starttime="20161207 10:04:41.483" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:41.484">${state} = 0</msg>
<status endtime="20161207 10:04:41.484" starttime="20161207 10:04:40.852" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:04:41.484">0 != 1</msg>
<status endtime="20161207 10:04:41.484" starttime="20161207 10:04:41.484" status="FAIL"></status>
</kw>
<status endtime="20161207 10:04:41.484" starttime="20161207 10:04:40.851" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:51.488">@{arglist} = [ ]</msg>
<status endtime="20161207 10:04:51.488" starttime="20161207 10:04:51.487" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:51.489">${args} = {u'data': []}</msg>
<status endtime="20161207 10:04:51.489" starttime="20161207 10:04:51.488" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:51.491">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161207 10:04:51.491" starttime="20161207 10:04:51.490" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:51.493">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161207 10:04:51.493" starttime="20161207 10:04:51.493" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:51.494">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:04:51.494" starttime="20161207 10:04:51.493" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:04:51.495" starttime="20161207 10:04:51.494" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:51.501">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:04:51.501" starttime="20161207 10:04:51.500" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:51.501">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:04:51.502" starttime="20161207 10:04:51.501" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:51.502" starttime="20161207 10:04:51.501" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:51.502" starttime="20161207 10:04:51.499" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:51.502" starttime="20161207 10:04:51.495" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:51.503">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:04:51.503" starttime="20161207 10:04:51.502" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:51.504">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:04:51.504" starttime="20161207 10:04:51.504" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:51.504">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:04:51.504" starttime="20161207 10:04:51.504" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:51.505">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:04:51.505" starttime="20161207 10:04:51.505" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:51.831">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:04:51.831">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:51.831" starttime="20161207 10:04:51.505" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:51.832">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:04:51.832" starttime="20161207 10:04:51.832" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:51.832" starttime="20161207 10:04:51.502" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.095">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:04:52.096">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:52.096" starttime="20161207 10:04:51.833" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.103">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:04:52.103" starttime="20161207 10:04:52.102" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:52.104">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:04:52.104" starttime="20161207 10:04:52.104" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.104" starttime="20161207 10:04:52.103" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.104" starttime="20161207 10:04:52.101" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.105" starttime="20161207 10:04:52.096" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:52.105">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:52.105" starttime="20161207 10:04:51.491" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:52.105">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:52.105" starttime="20161207 10:04:51.489" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:52.106">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:04:52.106" starttime="20161207 10:04:52.106" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.107">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:04:52.107">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:04:52.107">${content} = {u'status': u'ok', u'data': 0, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:04:52.107" starttime="20161207 10:04:52.107" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:52.108">${state} = 0</msg>
<status endtime="20161207 10:04:52.108" starttime="20161207 10:04:51.486" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:04:52.109">0 != 1</msg>
<status endtime="20161207 10:04:52.109" starttime="20161207 10:04:52.108" status="FAIL"></status>
</kw>
<status endtime="20161207 10:04:52.109" starttime="20161207 10:04:51.485" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20161207 10:04:52.109">Keyword 'Is Power On' failed after retrying for 3 minutes. The last error was: 0 != 1</msg>
<status endtime="20161207 10:04:52.109" starttime="20161207 10:01:45.619" status="FAIL"></status>
</kw>
<status endtime="20161207 10:04:52.109" starttime="20161207 10:01:44.768" status="FAIL"></status>
</kw>
<status endtime="20161207 10:04:52.109" starttime="20161207 10:01:42.200" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Log FFDC if failed and collect SOL</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="FFDC" library="openbmc_ffdc">
<doc>Main entry point to gather logs on Test case failure</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.114">${cur_time} = 2016-12-07 10:04:52:113882</msg>
<status endtime="20161207 10:04:52.114" starttime="20161207 10:04:52.114" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.115">${cur_time} = 20161207100452113882</msg>
<status endtime="20161207 10:04:52.115" starttime="20161207 10:04:52.114" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:52.115">${cur_time} = 20161207100452113882</msg>
<status endtime="20161207 10:04:52.115" starttime="20161207 10:04:52.113" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:52.118">${FFDC_TIME} = 20161207100452113882</msg>
<status endtime="20161207 10:04:52.118" starttime="20161207 10:04:52.115" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${\n}FFDC Collection Started \t: ${cur_time}</arg>
</arguments>
<status endtime="20161207 10:04:52.119" starttime="20161207 10:04:52.118" status="PASS"></status>
</kw>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<assign>
<var>${suitename}</var>
<var>${testname}</var>
</assign>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.120">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20161207 10:04:52.120" starttime="20161207 10:04:52.119" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.120">${suite_name} = 20161207100452113882_TestsTestBasicPoweron</msg>
<status endtime="20161207 10:04:52.120" starttime="20161207 10:04:52.120" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.121">${test_name} = powerontest</msg>
<status endtime="20161207 10:04:52.121" starttime="20161207 10:04:52.120" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.121">${test_name} = 20161207100452113882_powerontest</msg>
<status endtime="20161207 10:04:52.121" starttime="20161207 10:04:52.121" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:52.121">${suitename} = 20161207100452113882_TestsTestBasicPoweron</msg>
<msg level="INFO" timestamp="20161207 10:04:52.121">${testname} = 20161207100452113882_powerontest</msg>
<status endtime="20161207 10:04:52.121" starttime="20161207 10:04:52.119" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${FFDC_LOG_PATH}${suitename}${/}${testname}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:52.125">${FFDC_DIR_PATH} = /tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest</msg>
<status endtime="20161207 10:04:52.125" starttime="20161207 10:04:52.122" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_DIR_PATH}${/}</arg>
<arg>${FFDC_TIME}_</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.125">${prefix} = /tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_</msg>
<status endtime="20161207 10:04:52.125" starttime="20161207 10:04:52.125" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_PREFIX}</arg>
<arg>${prefix}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:52.128">${LOG_PREFIX} = /tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_</msg>
<status endtime="20161207 10:04:52.128" starttime="20161207 10:04:52.126" status="PASS"></status>
</kw>
<kw name="Create FFDC Directory" library="openbmc_ffdc_utils">
<doc>Creates directory and report file</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.130">Created directory '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.130" starttime="20161207 10:04:52.129" status="PASS"></status>
</kw>
<kw name="Create FFDC Report File" library="openbmc_ffdc_utils">
<doc>Create a generic file name for ffdc</doc>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
<arg>${FFDC_DIR_PATH}${/}${FFDC_TIME}_BMC_general.txt</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:52.133">${FFDC_FILE_PATH} = /tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt</msg>
<status endtime="20161207 10:04:52.133" starttime="20161207 10:04:52.130" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.134">Created file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.134" starttime="20161207 10:04:52.133" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.134" starttime="20161207 10:04:52.130" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.134" starttime="20161207 10:04:52.129" status="PASS"></status>
</kw>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.136">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.136" starttime="20161207 10:04:52.135" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.136" starttime="20161207 10:04:52.135" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.137">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.137" starttime="20161207 10:04:52.136" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.137" starttime="20161207 10:04:52.136" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.138">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.138" starttime="20161207 10:04:52.138" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.138" starttime="20161207 10:04:52.137" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.139">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.139" starttime="20161207 10:04:52.139" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.139" starttime="20161207 10:04:52.138" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.141">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.141" starttime="20161207 10:04:52.140" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.141" starttime="20161207 10:04:52.140" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.142">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.142" starttime="20161207 10:04:52.142" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.142" starttime="20161207 10:04:52.141" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.143">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.143" starttime="20161207 10:04:52.143" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.143" starttime="20161207 10:04:52.142" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.144">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.145" starttime="20161207 10:04:52.144" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.145" starttime="20161207 10:04:52.144" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.146">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.146" starttime="20161207 10:04:52.145" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.146" starttime="20161207 10:04:52.145" status="PASS"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.147">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.147" starttime="20161207 10:04:52.147" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.147" starttime="20161207 10:04:52.146" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.148">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.149" starttime="20161207 10:04:52.148" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.149" starttime="20161207 10:04:52.147" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.150">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.150" starttime="20161207 10:04:52.149" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.150" starttime="20161207 10:04:52.149" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.151">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.151" starttime="20161207 10:04:52.150" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.151" starttime="20161207 10:04:52.150" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${OPENBMC_MODEL.replace('./data/','').replace('.py','')}${\n}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.152">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.152" starttime="20161207 10:04:52.152" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.152" starttime="20161207 10:04:52.151" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.152" starttime="20161207 10:04:52.146" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.153">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.154" starttime="20161207 10:04:52.153" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.154" starttime="20161207 10:04:52.153" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.154">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status endtime="20161207 10:04:52.154" starttime="20161207 10:04:52.154" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.156">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.156" starttime="20161207 10:04:52.155" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.156" starttime="20161207 10:04:52.154" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.157">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.157" starttime="20161207 10:04:52.156" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.157" starttime="20161207 10:04:52.156" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.157" starttime="20161207 10:04:52.154" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.158">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.158" starttime="20161207 10:04:52.158" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.159" starttime="20161207 10:04:52.157" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.160">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.161" starttime="20161207 10:04:52.160" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.161" starttime="20161207 10:04:52.159" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.161" starttime="20161207 10:04:52.157" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.163">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.163" starttime="20161207 10:04:52.162" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.163" starttime="20161207 10:04:52.161" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.165">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.165" starttime="20161207 10:04:52.164" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.165" starttime="20161207 10:04:52.163" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.165" starttime="20161207 10:04:52.161" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.165" starttime="20161207 10:04:52.154" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:52.167">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:52.167" starttime="20161207 10:04:52.166" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.167" starttime="20161207 10:04:52.166" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.167" starttime="20161207 10:04:52.134" status="PASS"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.169">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20161207 10:04:52.169" starttime="20161207 10:04:52.168" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.170">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('BMC Specific Files', 'BMC FFDC Files') ]</msg>
<status endtime="20161207 10:04:52.170" starttime="20161207 10:04:52.170" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:52.175">Returning from the enclosing user keyword.</msg>
<status endtime="20161207 10:04:52.175" starttime="20161207 10:04:52.172" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.175" starttime="20161207 10:04:52.171" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.175" starttime="20161207 10:04:52.171" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.175" starttime="20161207 10:04:52.170" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.175" starttime="20161207 10:04:52.170" status="PASS"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:04:52.178">Dictionary does not contain key 'host'.</msg>
<status endtime="20161207 10:04:52.178" starttime="20161207 10:04:52.177" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:52.178">${has_host} = False</msg>
<status endtime="20161207 10:04:52.178" starttime="20161207 10:04:52.177" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161207 10:04:52.181" starttime="20161207 10:04:52.181" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.181" starttime="20161207 10:04:52.178" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.185">${port_num} = 22</msg>
<status endtime="20161207 10:04:52.185" starttime="20161207 10:04:52.185" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.186">${SSH_PORT} = 22</msg>
<status endtime="20161207 10:04:52.186" starttime="20161207 10:04:52.185" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:52.186">${https_num} = 443</msg>
<status endtime="20161207 10:04:52.186" starttime="20161207 10:04:52.186" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:52.187">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161207 10:04:52.187" starttime="20161207 10:04:52.186" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.187" starttime="20161207 10:04:52.184" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.187" starttime="20161207 10:04:52.182" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:04:52.188">Dictionary does not contain key 'port'.</msg>
<status endtime="20161207 10:04:52.188" starttime="20161207 10:04:52.188" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:52.188">${has_port} = False</msg>
<status endtime="20161207 10:04:52.188" starttime="20161207 10:04:52.187" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161207 10:04:52.192" starttime="20161207 10:04:52.192" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161207 10:04:52.193" starttime="20161207 10:04:52.192" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.193" starttime="20161207 10:04:52.191" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:52.193" starttime="20161207 10:04:52.188" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:52.193">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161207 10:04:54.377">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161207 10:04:54.377" starttime="20161207 10:04:52.193" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.377" starttime="20161207 10:04:52.176" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:54.378">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status endtime="20161207 10:04:54.378" starttime="20161207 10:04:54.378" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:54.380">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20161207 10:04:54.380" starttime="20161207 10:04:54.380" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:54.386">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20161207 10:04:54.386" starttime="20161207 10:04:54.381" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.392">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.392" starttime="20161207 10:04:54.392" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.392" starttime="20161207 10:04:54.391" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.393">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.394" starttime="20161207 10:04:54.393" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.394" starttime="20161207 10:04:54.393" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.395">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.395" starttime="20161207 10:04:54.394" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.395" starttime="20161207 10:04:54.394" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.396">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.396" starttime="20161207 10:04:54.396" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.396" starttime="20161207 10:04:54.395" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.397" starttime="20161207 10:04:54.391" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.397" starttime="20161207 10:04:54.388" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:54.397">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20161207 10:04:54.466">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:04:54.466">${stdout} = 20161207093324</msg>
<msg level="INFO" timestamp="20161207 10:04:54.466">${stderr} = </msg>
<status endtime="20161207 10:04:54.466" starttime="20161207 10:04:54.397" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.470">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.470" starttime="20161207 10:04:54.470" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.470" starttime="20161207 10:04:54.469" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.471" starttime="20161207 10:04:54.466" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.471" starttime="20161207 10:04:54.387" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.471" starttime="20161207 10:04:54.386" status="PASS"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.476">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.476" starttime="20161207 10:04:54.475" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.476" starttime="20161207 10:04:54.475" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.477">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.477" starttime="20161207 10:04:54.477" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.477" starttime="20161207 10:04:54.476" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.478">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.478" starttime="20161207 10:04:54.478" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.478" starttime="20161207 10:04:54.477" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.479">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.479" starttime="20161207 10:04:54.479" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.480" starttime="20161207 10:04:54.479" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.480" starttime="20161207 10:04:54.474" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.480" starttime="20161207 10:04:54.472" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:54.480">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20161207 10:04:54.560">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:04:54.560">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.0-310"
VERSION_ID="v1.99.0-310-gaabe90c-dirty"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC ...</msg>
<msg level="INFO" timestamp="20161207 10:04:54.560">${stderr} = </msg>
<status endtime="20161207 10:04:54.560" starttime="20161207 10:04:54.480" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.567">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.567" starttime="20161207 10:04:54.567" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.568" starttime="20161207 10:04:54.566" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.568" starttime="20161207 10:04:54.561" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.568" starttime="20161207 10:04:54.471" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.568" starttime="20161207 10:04:54.471" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.568" starttime="20161207 10:04:54.386" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.568" starttime="20161207 10:04:54.379" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.568" starttime="20161207 10:04:54.379" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:54.570">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20161207 10:04:54.570" starttime="20161207 10:04:54.570" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:54.571">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20161207 10:04:54.571" starttime="20161207 10:04:54.571" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.581">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.581" starttime="20161207 10:04:54.580" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.581" starttime="20161207 10:04:54.580" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.582">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.582" starttime="20161207 10:04:54.582" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.582" starttime="20161207 10:04:54.581" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.583">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.583" starttime="20161207 10:04:54.583" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.583" starttime="20161207 10:04:54.582" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.584">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.584" starttime="20161207 10:04:54.584" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.584" starttime="20161207 10:04:54.583" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.584" starttime="20161207 10:04:54.579" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.585" starttime="20161207 10:04:54.575" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:54.585">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20161207 10:04:54.675">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:04:54.675">${stdout} = Linux barreleye 4.7.10-6fcd70b7e3d37b9189c9cdbcb982cf0862f63dff #1 Mon Nov 28 09:47:45 UTC 2016 armv5tejl GNU/Linux</msg>
<msg level="INFO" timestamp="20161207 10:04:54.675">${stderr} = </msg>
<status endtime="20161207 10:04:54.675" starttime="20161207 10:04:54.585" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.680">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.680" starttime="20161207 10:04:54.679" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.680" starttime="20161207 10:04:54.679" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.680" starttime="20161207 10:04:54.676" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.680" starttime="20161207 10:04:54.572" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.680" starttime="20161207 10:04:54.572" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.685">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.685" starttime="20161207 10:04:54.685" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.685" starttime="20161207 10:04:54.684" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.686">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.686" starttime="20161207 10:04:54.686" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.686" starttime="20161207 10:04:54.685" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.688">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.688" starttime="20161207 10:04:54.687" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.688" starttime="20161207 10:04:54.687" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.689">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.689" starttime="20161207 10:04:54.689" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.689" starttime="20161207 10:04:54.688" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.689" starttime="20161207 10:04:54.684" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.689" starttime="20161207 10:04:54.681" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:54.690">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20161207 10:04:54.780">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:04:54.780">${stdout} =  06:16:37 up 8 min,  load average: 0.50, 1.80, 1.38</msg>
<msg level="INFO" timestamp="20161207 10:04:54.780">${stderr} = </msg>
<status endtime="20161207 10:04:54.780" starttime="20161207 10:04:54.690" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.784">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.784" starttime="20161207 10:04:54.784" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.785" starttime="20161207 10:04:54.783" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.785" starttime="20161207 10:04:54.780" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.785" starttime="20161207 10:04:54.680" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.785" starttime="20161207 10:04:54.680" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.790">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.790" starttime="20161207 10:04:54.789" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.790" starttime="20161207 10:04:54.789" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.791">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.791" starttime="20161207 10:04:54.791" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.791" starttime="20161207 10:04:54.790" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.792">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.792" starttime="20161207 10:04:54.792" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.792" starttime="20161207 10:04:54.791" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.793">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.793" starttime="20161207 10:04:54.793" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.794" starttime="20161207 10:04:54.793" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.794" starttime="20161207 10:04:54.789" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.794" starttime="20161207 10:04:54.786" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:54.794">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20161207 10:04:54.890">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:04:54.891">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      242.4M         0    242.4M   0% /dev
tmpfs                tmpfs         243.7M      8.9...</msg>
<msg level="INFO" timestamp="20161207 10:04:54.891">${stderr} = </msg>
<status endtime="20161207 10:04:54.891" starttime="20161207 10:04:54.794" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.895">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.895" starttime="20161207 10:04:54.894" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.895" starttime="20161207 10:04:54.894" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.895" starttime="20161207 10:04:54.891" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.895" starttime="20161207 10:04:54.785" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.895" starttime="20161207 10:04:54.785" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.895" starttime="20161207 10:04:54.571" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.896" starttime="20161207 10:04:54.569" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.896" starttime="20161207 10:04:54.569" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:54.897">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status endtime="20161207 10:04:54.897" starttime="20161207 10:04:54.896" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:54.897">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20161207 10:04:54.897" starttime="20161207 10:04:54.897" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.906">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.906" starttime="20161207 10:04:54.905" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.906" starttime="20161207 10:04:54.904" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.908">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.908" starttime="20161207 10:04:54.907" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.908" starttime="20161207 10:04:54.906" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.909">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.909" starttime="20161207 10:04:54.909" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.909" starttime="20161207 10:04:54.908" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:54.910">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:54.910" starttime="20161207 10:04:54.910" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.910" starttime="20161207 10:04:54.909" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.911" starttime="20161207 10:04:54.904" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:54.911" starttime="20161207 10:04:54.899" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:54.911">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20161207 10:04:56.665">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:04:56.665">${stdout} =  = HOST_POWERING_ON</msg>
<msg level="INFO" timestamp="20161207 10:04:56.665">${stderr} = </msg>
<status endtime="20161207 10:04:56.665" starttime="20161207 10:04:54.911" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:04:56.670">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:04:56.671" starttime="20161207 10:04:56.670" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.671" starttime="20161207 10:04:56.669" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.671" starttime="20161207 10:04:56.666" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.671" starttime="20161207 10:04:54.898" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.671" starttime="20161207 10:04:54.898" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.671" starttime="20161207 10:04:54.897" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.672" starttime="20161207 10:04:54.896" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.672" starttime="20161207 10:04:54.896" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.672" starttime="20161207 10:04:54.379" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.672" starttime="20161207 10:04:52.176" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.672" starttime="20161207 10:04:52.176" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.672" starttime="20161207 10:04:52.175" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.672" starttime="20161207 10:04:52.175" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:04:56.677">Dictionary does not contain key 'host'.</msg>
<status endtime="20161207 10:04:56.677" starttime="20161207 10:04:56.676" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:56.677">${has_host} = False</msg>
<status endtime="20161207 10:04:56.677" starttime="20161207 10:04:56.676" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161207 10:04:56.681" starttime="20161207 10:04:56.681" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.681" starttime="20161207 10:04:56.678" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:56.685">${port_num} = 22</msg>
<status endtime="20161207 10:04:56.685" starttime="20161207 10:04:56.685" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:56.686">${SSH_PORT} = 22</msg>
<status endtime="20161207 10:04:56.686" starttime="20161207 10:04:56.685" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:56.686">${https_num} = 443</msg>
<status endtime="20161207 10:04:56.686" starttime="20161207 10:04:56.686" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:56.687">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161207 10:04:56.687" starttime="20161207 10:04:56.686" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.687" starttime="20161207 10:04:56.684" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.687" starttime="20161207 10:04:56.681" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:04:56.688">Dictionary does not contain key 'port'.</msg>
<status endtime="20161207 10:04:56.688" starttime="20161207 10:04:56.688" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:04:56.688">${has_port} = False</msg>
<status endtime="20161207 10:04:56.688" starttime="20161207 10:04:56.687" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161207 10:04:56.692" starttime="20161207 10:04:56.692" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161207 10:04:56.693" starttime="20161207 10:04:56.693" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.693" starttime="20161207 10:04:56.691" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:56.693" starttime="20161207 10:04:56.688" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:56.694">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161207 10:04:59.506">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161207 10:04:59.506" starttime="20161207 10:04:56.693" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:59.507" starttime="20161207 10:04:56.675" status="PASS"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:59.507">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20161207 10:04:59.508" starttime="20161207 10:04:59.507" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:59.510">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/org/openbmc/inventory/system/enumerate') | ('BMC_sensor_list', '...</msg>
<status endtime="20161207 10:04:59.510" starttime="20161207 10:04:59.509" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:59.511">${logpath} = /tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_record_log.txt</msg>
<status endtime="20161207 10:04:59.511" starttime="20161207 10:04:59.510" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:59.513">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20161207 10:04:59.513" starttime="20161207 10:04:59.513" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20161207 10:04:59.519" starttime="20161207 10:04:59.514" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:59.519">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:04:59.520" starttime="20161207 10:04:59.519" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:59.520">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:04:59.520" starttime="20161207 10:04:59.520" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:59.521">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:04:59.521" starttime="20161207 10:04:59.521" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:59.522">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:04:59.522" starttime="20161207 10:04:59.521" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:04:59.858">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:04:59.858">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:04:59.858" starttime="20161207 10:04:59.522" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:04:59.859">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:04:59.859" starttime="20161207 10:04:59.858" status="PASS"></status>
</kw>
<status endtime="20161207 10:04:59.859" starttime="20161207 10:04:59.519" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:00.058">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161207 10:05:00.058">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:00.058" starttime="20161207 10:04:59.859" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20161207 10:05:00.064" starttime="20161207 10:05:00.059" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:00.064">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:00.065" starttime="20161207 10:04:59.511" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:00.066">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:05:00.066" starttime="20161207 10:05:00.066" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:00.066">${status} = True</msg>
<status endtime="20161207 10:05:00.067" starttime="20161207 10:05:00.065" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20161207 10:05:00.072" starttime="20161207 10:05:00.067" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:00.074">To JSON using : content={
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:05:00.074">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161207 10:05:00.074">${jsondata} = {
    "data": {
        "/org/openbmc/control/led/beep": {},
        "/org/openbmc/control/led/heartbeat": {},
        "/org/openbmc/control/led/identify": {}
    },
    "message": "200 OK",
    "stat...</msg>
<status endtime="20161207 10:05:00.074" starttime="20161207 10:05:00.073" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:00.077">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_record_log.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_record_log.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:05:00.078" starttime="20161207 10:05:00.076" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:00.078" starttime="20161207 10:05:00.075" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:00.078" starttime="20161207 10:04:59.510" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:00.079">${logpath} = /tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_led.txt</msg>
<status endtime="20161207 10:05:00.079" starttime="20161207 10:05:00.078" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:00.081">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20161207 10:05:00.081" starttime="20161207 10:05:00.081" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20161207 10:05:00.087" starttime="20161207 10:05:00.082" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:00.088">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:05:00.089" starttime="20161207 10:05:00.088" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:00.089">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:05:00.089" starttime="20161207 10:05:00.089" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:00.090">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:05:00.090" starttime="20161207 10:05:00.089" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:00.091">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:05:00.091" starttime="20161207 10:05:00.090" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:00.528">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:05:00.528">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:00.528" starttime="20161207 10:05:00.091" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:00.529">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:05:00.529" starttime="20161207 10:05:00.529" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:00.529" starttime="20161207 10:05:00.087" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:00.773">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161207 10:05:00.773">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:00.773" starttime="20161207 10:05:00.529" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20161207 10:05:00.776" starttime="20161207 10:05:00.773" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:00.776">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:00.777" starttime="20161207 10:05:00.080" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:00.777">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:05:00.777" starttime="20161207 10:05:00.777" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:00.778">${status} = True</msg>
<status endtime="20161207 10:05:00.778" starttime="20161207 10:05:00.777" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20161207 10:05:00.781" starttime="20161207 10:05:00.778" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:00.782">To JSON using : content={
  "data": {
    "/org/openbmc/records/events/197": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:11:21 06:13:08"
    }, 
    "/org/openbmc/records/events/197/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/199": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:11:21 06:13:11"
    }, 
    "/org/openbmc/records/events/199/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:05:00.782">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161207 10:05:00.782">${jsondata} = {
    "data": {
        "/org/openbmc/records/events/197": {
            "associations": [
                [
                    "fru",
                    "event",
                    "/org/openbmc/i...</msg>
<status endtime="20161207 10:05:00.782" starttime="20161207 10:05:00.781" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:00.783">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_led.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_led.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:05:00.784" starttime="20161207 10:05:00.783" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:00.784" starttime="20161207 10:05:00.782" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:00.784" starttime="20161207 10:05:00.078" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/org/openbmc/inventory/system/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:00.784">${logpath} = /tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_inventory.txt</msg>
<status endtime="20161207 10:05:00.784" starttime="20161207 10:05:00.784" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:00.785">${base_uri} = /org/openbmc/inventory/system/enumerate</msg>
<status endtime="20161207 10:05:00.785" starttime="20161207 10:05:00.785" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20161207 10:05:00.789" starttime="20161207 10:05:00.786" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:00.790">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:05:00.790" starttime="20161207 10:05:00.789" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:00.791">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:05:00.791" starttime="20161207 10:05:00.790" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:00.791">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:05:00.791" starttime="20161207 10:05:00.791" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:00.792">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:05:00.792" starttime="20161207 10:05:00.792" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:01.125">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:05:01.125">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:01.125" starttime="20161207 10:05:00.792" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:01.126">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:05:01.126" starttime="20161207 10:05:01.126" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:01.127" starttime="20161207 10:05:00.789" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:04.603">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161207 10:05:04.603">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:04.603" starttime="20161207 10:05:01.127" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20161207 10:05:04.609" starttime="20161207 10:05:04.604" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:04.609">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:04.610" starttime="20161207 10:05:00.785" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:04.612">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:05:04.612" starttime="20161207 10:05:04.611" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:04.612">${status} = True</msg>
<status endtime="20161207 10:05:04.612" starttime="20161207 10:05:04.610" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20161207 10:05:04.619" starttime="20161207 10:05:04.613" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:04.626">To JSON using : content={
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-fda20bd", 
      "Custom Field 2": "\tskiboot-5.2.0-opdirty", 
      "Custom Field 3": "\thostboot-c223637-1d3dbf3", 
      "Custom Field 4": "\tlinux-4.4.6-openpower1-opdirty-99d283b", 
      "Custom Field 5": "\tpetitboot-72928ed-opdirty-47f54ff", 
      "Custom Field 6": "\tbarreleye-xml-1250f06-opdirty", 
      "Custom Field 7": "\tocc-1093bf9-opdir", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-v1.8", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-310-gaabe90c-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/197"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/199"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/199"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:05:04.627">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161207 10:05:04.628">${jsondata} = {
    "data": {
        "/org/openbmc/inventory/system/bios": {
            "Asset Tag": "",
            "Custom Field 1": "\tbuildroot-fda20bd",
            "Custom Field 2": "\tskiboot-5.2.0-opdirty...</msg>
<status endtime="20161207 10:05:04.628" starttime="20161207 10:05:04.619" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:04.630">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_inventory.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:05:04.630" starttime="20161207 10:05:04.629" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:04.630" starttime="20161207 10:05:04.628" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:04.630" starttime="20161207 10:05:00.784" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:04.631">${logpath} = /tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_sensor_list.txt</msg>
<status endtime="20161207 10:05:04.631" starttime="20161207 10:05:04.630" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:04.632">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20161207 10:05:04.632" starttime="20161207 10:05:04.632" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20161207 10:05:04.635" starttime="20161207 10:05:04.632" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:04.636">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:05:04.637" starttime="20161207 10:05:04.636" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:04.637">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:05:04.637" starttime="20161207 10:05:04.637" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:04.638">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:05:04.638" starttime="20161207 10:05:04.637" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:04.638">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:05:04.638" starttime="20161207 10:05:04.638" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:04.969">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:05:04.969">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:04.969" starttime="20161207 10:05:04.638" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:04.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:05:04.970" starttime="20161207 10:05:04.970" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:04.971" starttime="20161207 10:05:04.635" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:06.944">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161207 10:05:06.945">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:06.945" starttime="20161207 10:05:04.971" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20161207 10:05:06.950" starttime="20161207 10:05:06.945" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:06.950">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:06.950" starttime="20161207 10:05:04.631" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:06.951">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:05:06.951" starttime="20161207 10:05:06.951" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:06.951">${status} = True</msg>
<status endtime="20161207 10:05:06.951" starttime="20161207 10:05:06.950" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20161207 10:05:06.955" starttime="20161207 10:05:06.952" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:06.961">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 72, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 472, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 5, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 25500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 27000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:05:06.961">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161207 10:05:06.962">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/HSCA/Iout": {
            "adjust": 0.25,
            "critical_lower": 0,
            "critical_upper": 0,
            "emergency_enabled": 0,
          ...</msg>
<status endtime="20161207 10:05:06.962" starttime="20161207 10:05:06.955" status="PASS"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:06.964">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_sensor_list.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:05:06.964" starttime="20161207 10:05:06.963" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:06.964" starttime="20161207 10:05:06.962" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:06.964" starttime="20161207 10:05:04.630" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:06.964" starttime="20161207 10:04:59.510" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:06.964" starttime="20161207 10:04:59.508" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:06.964" starttime="20161207 10:04:59.508" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:06.964" starttime="20161207 10:04:59.508" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:06.964" starttime="20161207 10:04:56.674" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:06.964" starttime="20161207 10:04:56.674" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:06.964" starttime="20161207 10:04:56.673" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:06.964" starttime="20161207 10:04:56.672" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:05:06.967">Dictionary does not contain key 'host'.</msg>
<status endtime="20161207 10:05:06.967" starttime="20161207 10:05:06.967" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:06.967">${has_host} = False</msg>
<status endtime="20161207 10:05:06.967" starttime="20161207 10:05:06.966" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161207 10:05:06.971" starttime="20161207 10:05:06.970" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:06.971" starttime="20161207 10:05:06.967" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:06.975">${port_num} = 22</msg>
<status endtime="20161207 10:05:06.975" starttime="20161207 10:05:06.974" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:06.975">${SSH_PORT} = 22</msg>
<status endtime="20161207 10:05:06.975" starttime="20161207 10:05:06.975" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:06.976">${https_num} = 443</msg>
<status endtime="20161207 10:05:06.976" starttime="20161207 10:05:06.976" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:06.977">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161207 10:05:06.977" starttime="20161207 10:05:06.976" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:06.977" starttime="20161207 10:05:06.974" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:06.977" starttime="20161207 10:05:06.971" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:05:06.978">Dictionary does not contain key 'port'.</msg>
<status endtime="20161207 10:05:06.978" starttime="20161207 10:05:06.977" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:06.978">${has_port} = False</msg>
<status endtime="20161207 10:05:06.978" starttime="20161207 10:05:06.977" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161207 10:05:06.983" starttime="20161207 10:05:06.983" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161207 10:05:06.984" starttime="20161207 10:05:06.984" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:06.984" starttime="20161207 10:05:06.982" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:06.984" starttime="20161207 10:05:06.978" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:06.985">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161207 10:05:09.797">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161207 10:05:09.797" starttime="20161207 10:05:06.985" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:09.797" starttime="20161207 10:05:06.966" status="PASS"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:09.798">@{entries} = [ BMC FILES ]</msg>
<status endtime="20161207 10:05:09.798" starttime="20161207 10:05:09.798" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:09.800">@{cmd_list} = [ ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_dmesg', 'dmesg') ]</msg>
<status endtime="20161207 10:05:09.800" starttime="20161207 10:05:09.800" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:09.802">${logpath} = /tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_journalctl.txt</msg>
<status endtime="20161207 10:05:09.802" starttime="20161207 10:05:09.801" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20161207 10:05:09.808" starttime="20161207 10:05:09.803" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:09.809">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20161207 10:05:11.669">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:05:11.671">${stdout} = -- Logs begin at Mon 2016-11-21 06:08:11 UTC, end at Mon 2016-11-21 06:16:51 UTC. --
Nov 21 06:08:11 barreleye systemd-journald[458]: Runtime journal (/run/log/journal/) is 3.0M, max 24.3M, 21.3M free...</msg>
<msg level="INFO" timestamp="20161207 10:05:11.671">${stderr} = </msg>
<status endtime="20161207 10:05:11.671" starttime="20161207 10:05:09.808" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:11.681">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_journalctl.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:05:11.682" starttime="20161207 10:05:11.680" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:11.682" starttime="20161207 10:05:11.678" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:11.682" starttime="20161207 10:05:11.672" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:11.682" starttime="20161207 10:05:09.802" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:11.682" starttime="20161207 10:05:09.801" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:11.683">${logpath} = /tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_procinfo.txt</msg>
<status endtime="20161207 10:05:11.683" starttime="20161207 10:05:11.682" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20161207 10:05:11.686" starttime="20161207 10:05:11.684" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:11.687">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20161207 10:05:11.759">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:05:11.760">${stdout} = processor	: 0
model name	: ARM926EJ-S rev 5 (v5l)
BogoMIPS	: 190.87
Features	: swp half thumb fastmult edsp java 
CPU implementer	: 0x41
CPU architecture: 5TEJ
CPU variant	: 0x0
CPU part	: 0x926
CPU r...</msg>
<msg level="INFO" timestamp="20161207 10:05:11.760">${stderr} = </msg>
<status endtime="20161207 10:05:11.760" starttime="20161207 10:05:11.687" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:11.765">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_procinfo.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:05:11.765" starttime="20161207 10:05:11.764" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:11.765" starttime="20161207 10:05:11.764" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:11.765" starttime="20161207 10:05:11.760" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:11.765" starttime="20161207 10:05:11.683" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:11.765" starttime="20161207 10:05:11.682" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:11.766">${logpath} = /tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_proc_list.txt</msg>
<status endtime="20161207 10:05:11.766" starttime="20161207 10:05:11.765" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20161207 10:05:11.770" starttime="20161207 10:05:11.767" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:11.770">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20161207 10:05:12.159">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:05:12.159">${stdout} = Mem: 133796K used, 365224K free, 9148K shrd, 10408K buff, 43212K cached
CPU:   6% usr   0% sys   0% nic  93% idle   0% io   0% irq   0% sirq
Load average: 0.54 1.75 1.37 1/118 990
  PID  PPID USER    ...</msg>
<msg level="INFO" timestamp="20161207 10:05:12.160">${stderr} = </msg>
<status endtime="20161207 10:05:12.160" starttime="20161207 10:05:11.770" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:12.168">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_proc_list.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:05:12.168" starttime="20161207 10:05:12.166" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.168" starttime="20161207 10:05:12.165" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.169" starttime="20161207 10:05:12.160" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.169" starttime="20161207 10:05:11.766" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.169" starttime="20161207 10:05:11.765" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:12.170">${logpath} = /tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_meminfo.txt</msg>
<status endtime="20161207 10:05:12.170" starttime="20161207 10:05:12.169" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20161207 10:05:12.177" starttime="20161207 10:05:12.171" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:12.178">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20161207 10:05:12.250">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:05:12.251">${stdout} = MemTotal:         499020 kB
MemFree:          365224 kB
MemAvailable:     404480 kB
Buffers:           10408 kB
Cached:            43212 kB
SwapCached:            0 kB
Active:            94180 kB
Inac...</msg>
<msg level="INFO" timestamp="20161207 10:05:12.251">${stderr} = </msg>
<status endtime="20161207 10:05:12.251" starttime="20161207 10:05:12.178" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:12.256">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_meminfo.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:05:12.256" starttime="20161207 10:05:12.255" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.256" starttime="20161207 10:05:12.254" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.256" starttime="20161207 10:05:12.251" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.256" starttime="20161207 10:05:12.170" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.256" starttime="20161207 10:05:12.169" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:12.257">${logpath} = /tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_dmesg.txt</msg>
<status endtime="20161207 10:05:12.257" starttime="20161207 10:05:12.256" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20161207 10:05:12.261" starttime="20161207 10:05:12.258" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:12.261">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20161207 10:05:12.368">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:05:12.368">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-6fcd70b7e3d37b9189c9cdbcb982cf0862f63dff (jenkins@hudson) (gcc version 5.3.0 (GCC) ) #1 Mon Nov 28 09:47:45 UTC 2016
CPU: ARM926EJ-S [41069265] r...</msg>
<msg level="INFO" timestamp="20161207 10:05:12.368">${stderr} = </msg>
<status endtime="20161207 10:05:12.368" starttime="20161207 10:05:12.261" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:12.373">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_dmesg.txt"&gt;/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest/20161207100452113882_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:05:12.373" starttime="20161207 10:05:12.372" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.373" starttime="20161207 10:05:12.372" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.373" starttime="20161207 10:05:12.369" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.374" starttime="20161207 10:05:12.257" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.374" starttime="20161207 10:05:12.256" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.374" starttime="20161207 10:05:09.801" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.374" starttime="20161207 10:05:09.799" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.374" starttime="20161207 10:05:09.799" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.374" starttime="20161207 10:05:09.798" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.374" starttime="20161207 10:05:06.966" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.374" starttime="20161207 10:05:06.965" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.374" starttime="20161207 10:05:06.965" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.374" starttime="20161207 10:05:06.965" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.374" starttime="20161207 10:04:52.170" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.374" starttime="20161207 10:04:52.169" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.374" starttime="20161207 10:04:52.169" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.374" starttime="20161207 10:04:52.169" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.374" starttime="20161207 10:04:52.168" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:12.375">${cur_time} = 2016-12-07 10:05:12:375193</msg>
<status endtime="20161207 10:05:12.375" starttime="20161207 10:05:12.375" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:12.376">${cur_time} = 20161207100512375193</msg>
<status endtime="20161207 10:05:12.376" starttime="20161207 10:05:12.376" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:12.376">${cur_time} = 20161207100512375193</msg>
<status endtime="20161207 10:05:12.376" starttime="20161207 10:05:12.375" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FFDC Collection Completed \t: ${cur_time}</arg>
</arguments>
<status endtime="20161207 10:05:12.377" starttime="20161207 10:05:12.377" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${\n}${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:12.377">
/tmp/root/25025/obmc-robot/logs/20161207100452113882_TestsTestBasicPoweron/20161207100452113882_powerontest</msg>
<status endtime="20161207 10:05:12.377" starttime="20161207 10:05:12.377" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.377" starttime="20161207 10:04:52.113" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.378" starttime="20161207 10:04:52.110" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:12.378">Directory '&lt;a href="file:///tmp/root/25025/obmc-robot/logs"&gt;/tmp/root/25025/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161207 10:05:12.378" starttime="20161207 10:05:12.378" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:12.379">File '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/test_history.txt"&gt;/tmp/root/25025/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161207 10:05:12.380" starttime="20161207 10:05:12.379" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:12.380">${exist} = True</msg>
<status endtime="20161207 10:05:12.380" starttime="20161207 10:05:12.379" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161207 10:05:12.383" starttime="20161207 10:05:12.380" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:12.384">${cur_time} = 2016-12-07 10:05:12:383389</msg>
<status endtime="20161207 10:05:12.384" starttime="20161207 10:05:12.383" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:12.385">${cur_time} = 20161207100512383389</msg>
<status endtime="20161207 10:05:12.385" starttime="20161207 10:05:12.384" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:12.385">${cur_time} = 20161207100512383389</msg>
<status endtime="20161207 10:05:12.386" starttime="20161207 10:05:12.383" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:12.387">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/test_history.txt"&gt;/tmp/root/25025/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:05:12.387" starttime="20161207 10:05:12.386" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.387" starttime="20161207 10:05:12.378" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.388" starttime="20161207 10:04:52.110" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Login to BMC and Stop the obmc-console-client process.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:05:12.391">Dictionary does not contain key 'host'.</msg>
<status endtime="20161207 10:05:12.391" starttime="20161207 10:05:12.390" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:12.391">${has_host} = False</msg>
<status endtime="20161207 10:05:12.391" starttime="20161207 10:05:12.390" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161207 10:05:12.397" starttime="20161207 10:05:12.397" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.398" starttime="20161207 10:05:12.392" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:12.403">${port_num} = 22</msg>
<status endtime="20161207 10:05:12.404" starttime="20161207 10:05:12.403" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:12.404">${SSH_PORT} = 22</msg>
<status endtime="20161207 10:05:12.404" starttime="20161207 10:05:12.404" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:12.405">${https_num} = 443</msg>
<status endtime="20161207 10:05:12.405" starttime="20161207 10:05:12.404" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:12.406">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161207 10:05:12.406" starttime="20161207 10:05:12.405" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.406" starttime="20161207 10:05:12.403" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.406" starttime="20161207 10:05:12.398" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:05:12.407">Dictionary does not contain key 'port'.</msg>
<status endtime="20161207 10:05:12.407" starttime="20161207 10:05:12.406" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:12.407">${has_port} = False</msg>
<status endtime="20161207 10:05:12.407" starttime="20161207 10:05:12.406" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161207 10:05:12.411" starttime="20161207 10:05:12.411" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161207 10:05:12.412" starttime="20161207 10:05:12.412" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.412" starttime="20161207 10:05:12.410" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:12.412" starttime="20161207 10:05:12.407" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:12.413">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161207 10:05:14.599">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161207 10:05:14.600" starttime="20161207 10:05:12.412" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:14.600" starttime="20161207 10:05:12.389" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${file_path}-${LOG_TIME}_* | cut -d'_' -f 2</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${pid}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:14.601">Executing command 'ls /tmp/obmc-console.log-20161207100133845452_* | cut -d'_' -f 2'.</msg>
<msg level="INFO" timestamp="20161207 10:05:14.700">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:05:14.700">${pid} = 927</msg>
<msg level="INFO" timestamp="20161207 10:05:14.700">${stderr} = </msg>
<status endtime="20161207 10:05:14.700" starttime="20161207 10:05:14.601" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:14.701">Length is 0</msg>
<status endtime="20161207 10:05:14.701" starttime="20161207 10:05:14.701" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep ${pid} | grep -v grep</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:14.702">Executing command 'ps ax | grep 927 | grep -v grep'.</msg>
<msg level="INFO" timestamp="20161207 10:05:14.972">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:05:14.972">${rc} = 0</msg>
<status endtime="20161207 10:05:14.972" starttime="20161207 10:05:14.702" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${rc}' == '${1}'</arg>
<arg>No obmc-console-client process running</arg>
</arguments>
<status endtime="20161207 10:05:14.978" starttime="20161207 10:05:14.973" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -s KILL ${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:14.979">Executing command 'kill -s KILL 927'.</msg>
<msg level="INFO" timestamp="20161207 10:05:15.097">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:05:15.097">${console} = </msg>
<msg level="INFO" timestamp="20161207 10:05:15.097">${stderr} = </msg>
<status endtime="20161207 10:05:15.097" starttime="20161207 10:05:14.978" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:15.098">Length is 0</msg>
<status endtime="20161207 10:05:15.098" starttime="20161207 10:05:15.098" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Current Client PID:${pid}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:15.098">Current Client PID:927</msg>
<status endtime="20161207 10:05:15.098" starttime="20161207 10:05:15.098" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${file_path}-${LOG_TIME}_${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:15.099">Executing command 'cat /tmp/obmc-console.log-20161207100133845452_927'.</msg>
<msg level="INFO" timestamp="20161207 10:05:15.227">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161207 10:05:15.227">${console} = </msg>
<msg level="INFO" timestamp="20161207 10:05:15.227">${stderr} = </msg>
<status endtime="20161207 10:05:15.227" starttime="20161207 10:05:15.099" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:15.228">Length is 0</msg>
<status endtime="20161207 10:05:15.228" starttime="20161207 10:05:15.227" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:15.228">${sol_log} = </msg>
<status endtime="20161207 10:05:15.228" starttime="20161207 10:05:12.388" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:15.228"></msg>
<status endtime="20161207 10:05:15.228" starttime="20161207 10:05:15.228" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:15.229" starttime="20161207 10:04:52.110" status="PASS"></status>
</kw>
<doc>Power OFF and power ON</doc>
<tags>
<tag>chassisboot</tag>
<tag>power_on_test</tag>
</tags>
<status critical="yes" endtime="20161207 10:05:15.229" starttime="20161207 10:01:31.445" status="FAIL">Keyword 'Is Power On' failed after retrying for 3 minutes. The last error was: 0 != 1</status>
</test>
<doc>This module will test basic power on use cases for CI</doc>
<status endtime="20161207 10:05:15.229" starttime="20161207 10:01:31.420" status="FAIL"></status>
</suite>
<suite name="Test Eventlog" source="/tmp/root/25025/obmc-robot/tests/test_eventlog.robot" id="s1-s4">
<kw name="Open Connection And Log In" library="connection_client" type="setup">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:05:15.261">Dictionary does not contain key 'host'.</msg>
<status endtime="20161207 10:05:15.261" starttime="20161207 10:05:15.261" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:15.261">${has_host} = False</msg>
<status endtime="20161207 10:05:15.261" starttime="20161207 10:05:15.260" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161207 10:05:15.265" starttime="20161207 10:05:15.264" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:15.265" starttime="20161207 10:05:15.262" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:15.269">${port_num} = 22</msg>
<status endtime="20161207 10:05:15.269" starttime="20161207 10:05:15.268" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:15.269">${SSH_PORT} = 22</msg>
<status endtime="20161207 10:05:15.269" starttime="20161207 10:05:15.269" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:15.270">${https_num} = 443</msg>
<status endtime="20161207 10:05:15.270" starttime="20161207 10:05:15.270" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:15.271">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161207 10:05:15.271" starttime="20161207 10:05:15.271" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:15.271" starttime="20161207 10:05:15.268" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:15.271" starttime="20161207 10:05:15.265" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161207 10:05:15.273">Dictionary does not contain key 'port'.</msg>
<status endtime="20161207 10:05:15.273" starttime="20161207 10:05:15.272" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:15.273">${has_port} = False</msg>
<status endtime="20161207 10:05:15.273" starttime="20161207 10:05:15.272" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161207 10:05:15.278" starttime="20161207 10:05:15.278" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161207 10:05:15.279" starttime="20161207 10:05:15.279" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:15.279" starttime="20161207 10:05:15.278" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:15.279" starttime="20161207 10:05:15.273" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:15.280">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161207 10:05:17.705">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161207 10:05:17.706" starttime="20161207 10:05:15.280" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:17.706" starttime="20161207 10:05:15.260" status="PASS"></status>
</kw>
<test name="clear any logs" id="s1-s4-t1">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:17.709">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status endtime="20161207 10:05:17.709" starttime="20161207 10:05:17.709" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:17.710">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:05:17.710" starttime="20161207 10:05:17.710" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:05:17.711" starttime="20161207 10:05:17.711" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:17.720">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:05:17.720" starttime="20161207 10:05:17.719" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:17.721">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:05:17.722" starttime="20161207 10:05:17.721" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:17.722" starttime="20161207 10:05:17.721" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:17.722" starttime="20161207 10:05:17.719" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:17.722" starttime="20161207 10:05:17.711" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:17.723">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:05:17.723" starttime="20161207 10:05:17.722" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:17.724">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:05:17.724" starttime="20161207 10:05:17.724" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:17.724">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:05:17.724" starttime="20161207 10:05:17.724" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:17.725">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:05:17.725" starttime="20161207 10:05:17.725" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:18.157">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:05:18.157">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:18.157" starttime="20161207 10:05:17.725" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:18.158">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:05:18.158" starttime="20161207 10:05:18.158" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:18.158" starttime="20161207 10:05:17.722" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:18.472">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:05:18.473">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:18.473" starttime="20161207 10:05:18.159" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:18.483">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:05:18.483" starttime="20161207 10:05:18.482" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:18.484">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:05:18.485" starttime="20161207 10:05:18.484" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:18.485" starttime="20161207 10:05:18.483" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:18.485" starttime="20161207 10:05:18.481" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:18.485" starttime="20161207 10:05:18.473" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:18.485">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:18.486" starttime="20161207 10:05:17.707" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:18.486">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:05:18.486" starttime="20161207 10:05:18.486" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:18.487">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161207 10:05:18.487" starttime="20161207 10:05:18.487" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:18.493">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161207 10:05:18.493" starttime="20161207 10:05:18.493" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:18.495">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161207 10:05:18.495" starttime="20161207 10:05:18.494" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:18.495" starttime="20161207 10:05:18.494" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:18.495" starttime="20161207 10:05:18.492" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:18.495" starttime="20161207 10:05:18.488" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:18.497">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:05:18.497" starttime="20161207 10:05:18.496" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:18.498">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:05:18.499" starttime="20161207 10:05:18.498" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:18.499">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:05:18.499" starttime="20161207 10:05:18.499" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:18.500">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:05:18.500" starttime="20161207 10:05:18.499" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:18.996">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:05:18.996">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:18.996" starttime="20161207 10:05:18.500" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:18.998">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:05:18.998" starttime="20161207 10:05:18.997" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:18.998" starttime="20161207 10:05:18.495" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.054">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161207 10:05:19.054">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:19.054" starttime="20161207 10:05:18.999" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.061">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:05:19.061" starttime="20161207 10:05:19.060" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:19.062">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:05:19.062" starttime="20161207 10:05:19.062" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:19.063" starttime="20161207 10:05:19.061" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:19.063" starttime="20161207 10:05:19.060" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:19.063" starttime="20161207 10:05:19.055" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:19.063">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:19.063" starttime="20161207 10:05:18.487" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.064">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:05:19.065">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:05:19.065">${json} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status endtime="20161207 10:05:19.065" starttime="20161207 10:05:19.064" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:19.066">Length is 0</msg>
<status endtime="20161207 10:05:19.066" starttime="20161207 10:05:19.065" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20161207 10:05:19.071" starttime="20161207 10:05:19.067" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:19.072">Directory '&lt;a href="file:///tmp/root/25025/obmc-robot/logs"&gt;/tmp/root/25025/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161207 10:05:19.072" starttime="20161207 10:05:19.071" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:19.073">File '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/test_history.txt"&gt;/tmp/root/25025/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161207 10:05:19.073" starttime="20161207 10:05:19.073" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:19.073">${exist} = True</msg>
<status endtime="20161207 10:05:19.073" starttime="20161207 10:05:19.072" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161207 10:05:19.076" starttime="20161207 10:05:19.073" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.077">${cur_time} = 2016-12-07 10:05:19:076759</msg>
<status endtime="20161207 10:05:19.077" starttime="20161207 10:05:19.077" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.077">${cur_time} = 20161207100519076759</msg>
<status endtime="20161207 10:05:19.077" starttime="20161207 10:05:19.077" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:19.078">${cur_time} = 20161207100519076759</msg>
<status endtime="20161207 10:05:19.078" starttime="20161207 10:05:19.076" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:19.079">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/test_history.txt"&gt;/tmp/root/25025/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:05:19.079" starttime="20161207 10:05:19.078" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:19.079" starttime="20161207 10:05:19.071" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:19.079" starttime="20161207 10:05:19.067" status="PASS"></status>
</kw>
<doc>Test delete all events</doc>
<tags>
<tag>CI</tag>
<tag>clear_any_logs</tag>
</tags>
<status critical="yes" endtime="20161207 10:05:19.079" starttime="20161207 10:05:17.706" status="PASS"></status>
</test>
<test name="write a log" id="s1-s4-t2">
<kw name="create a test log">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.080">${data} = {u'data': []}</msg>
<status endtime="20161207 10:05:19.080" starttime="20161207 10:05:19.080" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.081">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status endtime="20161207 10:05:19.081" starttime="20161207 10:05:19.081" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.082">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:05:19.082" starttime="20161207 10:05:19.082" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161207 10:05:19.082" starttime="20161207 10:05:19.082" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.089">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:05:19.089" starttime="20161207 10:05:19.088" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:19.091">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161207 10:05:19.091" starttime="20161207 10:05:19.090" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:19.091" starttime="20161207 10:05:19.089" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:19.091" starttime="20161207 10:05:19.087" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:19.091" starttime="20161207 10:05:19.083" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:19.093">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:05:19.094" starttime="20161207 10:05:19.092" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.094">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:05:19.095" starttime="20161207 10:05:19.094" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.095">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:05:19.096" starttime="20161207 10:05:19.095" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.096">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:05:19.097" starttime="20161207 10:05:19.096" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.430">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:05:19.430">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:19.430" starttime="20161207 10:05:19.097" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:19.431">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:05:19.431" starttime="20161207 10:05:19.431" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:19.431" starttime="20161207 10:05:19.092" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.725">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:05:19.725">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:19.725" starttime="20161207 10:05:19.432" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.730">${msg} = Response code:200, Content:{
  "data": 200, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:05:19.730" starttime="20161207 10:05:19.729" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:19.731">Response code:200, Content:{
  "data": 200, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:05:19.731" starttime="20161207 10:05:19.730" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:19.731" starttime="20161207 10:05:19.730" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:19.731" starttime="20161207 10:05:19.729" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:19.731" starttime="20161207 10:05:19.726" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:19.731">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:19.731" starttime="20161207 10:05:19.081" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:19.732">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:05:19.732" starttime="20161207 10:05:19.731" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.732">To JSON using : content={
  "data": 200, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:05:19.732">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:05:19.732">${json} = {u'status': u'ok', u'data': 200, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:05:19.732" starttime="20161207 10:05:19.732" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.733">${LOGID} = 200</msg>
<status endtime="20161207 10:05:19.733" starttime="20161207 10:05:19.733" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.733">${uri} = /org/openbmc/records/events/200</msg>
<status endtime="20161207 10:05:19.733" starttime="20161207 10:05:19.733" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:19.734" starttime="20161207 10:05:19.080" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20161207 10:05:19.737" starttime="20161207 10:05:19.734" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:19.738">Directory '&lt;a href="file:///tmp/root/25025/obmc-robot/logs"&gt;/tmp/root/25025/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161207 10:05:19.738" starttime="20161207 10:05:19.737" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:19.739">File '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/test_history.txt"&gt;/tmp/root/25025/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161207 10:05:19.739" starttime="20161207 10:05:19.738" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:19.739">${exist} = True</msg>
<status endtime="20161207 10:05:19.739" starttime="20161207 10:05:19.738" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161207 10:05:19.742" starttime="20161207 10:05:19.739" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.743">${cur_time} = 2016-12-07 10:05:19:742412</msg>
<status endtime="20161207 10:05:19.743" starttime="20161207 10:05:19.742" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.743">${cur_time} = 20161207100519742412</msg>
<status endtime="20161207 10:05:19.743" starttime="20161207 10:05:19.743" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:19.743">${cur_time} = 20161207100519742412</msg>
<status endtime="20161207 10:05:19.743" starttime="20161207 10:05:19.742" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:19.744">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/test_history.txt"&gt;/tmp/root/25025/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:05:19.744" starttime="20161207 10:05:19.744" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:19.744" starttime="20161207 10:05:19.737" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:19.744" starttime="20161207 10:05:19.734" status="PASS"></status>
</kw>
<doc>Test create event</doc>
<tags>
<tag>CI</tag>
<tag>write_a_log</tag>
</tags>
<status critical="yes" endtime="20161207 10:05:19.744" starttime="20161207 10:05:19.079" status="PASS"></status>
</test>
<kw name="Close All Connections" library="SSHLibrary" type="teardown">
<doc>Closes all open connections.</doc>
<status endtime="20161207 10:05:19.967" starttime="20161207 10:05:19.745" status="PASS"></status>
</kw>
<doc>This suite is used for testing the error logging
capability from the host</doc>
<status endtime="20161207 10:05:19.968" starttime="20161207 10:05:15.232" status="PASS"></status>
</suite>
<suite name="Test Obmcrest" source="/tmp/root/25025/obmc-robot/tests/test_obmcrest.robot" id="s1-s5">
<test name="Get a Property" id="s1-s5-t1">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/org/openbmc/inventory/system/chassis/motherboard/cpu0</arg>
<arg>is_fru</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:19.999">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru</msg>
<status endtime="20161207 10:05:19.999" starttime="20161207 10:05:19.998" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:20.004">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status endtime="20161207 10:05:20.004" starttime="20161207 10:05:20.003" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:20.004">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status endtime="20161207 10:05:20.004" starttime="20161207 10:05:20.004" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:20.005" starttime="20161207 10:05:20.004" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:20.005" starttime="20161207 10:05:20.002" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:20.005" starttime="20161207 10:05:19.999" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:20.006">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161207 10:05:20.006" starttime="20161207 10:05:20.005" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:20.007">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161207 10:05:20.007" starttime="20161207 10:05:20.006" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:20.007">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161207 10:05:20.007" starttime="20161207 10:05:20.007" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:20.008">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161207 10:05:20.008" starttime="20161207 10:05:20.008" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:20.661">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161207 10:05:20.661">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:20.662" starttime="20161207 10:05:20.008" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:20.662">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161207 10:05:20.662" starttime="20161207 10:05:20.662" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:20.662" starttime="20161207 10:05:20.005" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:20.984">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, headers=None </msg>
<msg level="INFO" timestamp="20161207 10:05:20.984">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:20.984" starttime="20161207 10:05:20.663" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:20.989">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:05:20.989" starttime="20161207 10:05:20.988" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161207 10:05:20.990">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161207 10:05:20.990" starttime="20161207 10:05:20.989" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:20.990" starttime="20161207 10:05:20.989" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:20.990" starttime="20161207 10:05:20.988" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:20.990" starttime="20161207 10:05:20.985" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:20.991">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161207 10:05:20.991" starttime="20161207 10:05:19.998" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:20.992">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161207 10:05:20.992">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161207 10:05:20.992">${content} = {u'status': u'ok', u'data': 1, u'message': u'200 OK'}</msg>
<status endtime="20161207 10:05:20.992" starttime="20161207 10:05:20.991" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:20.992">${resp} = 1</msg>
<status endtime="20161207 10:05:20.992" starttime="20161207 10:05:19.997" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${1}</arg>
</arguments>
<status endtime="20161207 10:05:20.993" starttime="20161207 10:05:20.993" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20161207 10:05:20.999" starttime="20161207 10:05:20.995" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:21.000">Directory '&lt;a href="file:///tmp/root/25025/obmc-robot/logs"&gt;/tmp/root/25025/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161207 10:05:21.000" starttime="20161207 10:05:20.999" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:21.001">File '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/test_history.txt"&gt;/tmp/root/25025/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161207 10:05:21.001" starttime="20161207 10:05:21.000" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:21.001">${exist} = True</msg>
<status endtime="20161207 10:05:21.001" starttime="20161207 10:05:21.000" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161207 10:05:21.004" starttime="20161207 10:05:21.001" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:21.005">${cur_time} = 2016-12-07 10:05:21:004562</msg>
<status endtime="20161207 10:05:21.005" starttime="20161207 10:05:21.004" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161207 10:05:21.005">${cur_time} = 20161207100521004562</msg>
<status endtime="20161207 10:05:21.005" starttime="20161207 10:05:21.005" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161207 10:05:21.005">${cur_time} = 20161207100521004562</msg>
<status endtime="20161207 10:05:21.005" starttime="20161207 10:05:21.004" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161207 10:05:21.007">Appended to file '&lt;a href="file:///tmp/root/25025/obmc-robot/logs/test_history.txt"&gt;/tmp/root/25025/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161207 10:05:21.007" starttime="20161207 10:05:21.006" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:21.007" starttime="20161207 10:05:20.999" status="PASS"></status>
</kw>
<status endtime="20161207 10:05:21.007" starttime="20161207 10:05:20.994" status="PASS"></status>
</kw>
<tags>
<tag>Get_a_Property</tag>
</tags>
<status critical="yes" endtime="20161207 10:05:21.007" starttime="20161207 10:05:19.997" status="PASS"></status>
</test>
<doc>This suite will verifiy all OpenBMC rest interfaces
Details of valid interfaces can be found here...
https://github.com/openbmc/docs/blob/master/rest-api.md</doc>
<status endtime="20161207 10:05:21.008" starttime="20161207 10:05:19.971" status="PASS"></status>
</suite>
<status endtime="20161207 10:05:21.012" starttime="20161207 10:01:19.555" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="6" fail="1">Critical Tests</stat>
<stat pass="6" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="2" fail="0">CI</stat>
<stat pass="1" fail="0">clear_any_logs</stat>
<stat pass="1" fail="0">Create_error_log_on_single_FRU</stat>
<stat pass="1" fail="0">Delete_error_log</stat>
<stat pass="1" fail="0">Get_a_Property</stat>
<stat pass="0" fail="1">power_on_test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
<stat pass="1" fail="0">write_a_log</stat>
</tag>
<suite>
<stat pass="6" name="Tests" id="s1" fail="1">Tests</stat>
<stat pass="1" name="Security" id="s1-s1" fail="0">Tests.Security</stat>
<stat pass="1" name="Test Ssl" id="s1-s1-s1" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="2" name="Test Association" id="s1-s2" fail="0">Tests.Test Association</stat>
<stat pass="0" name="Test Basic Poweron" id="s1-s3" fail="1">Tests.Test Basic Poweron</stat>
<stat pass="2" name="Test Eventlog" id="s1-s4" fail="0">Tests.Test Eventlog</stat>
<stat pass="1" name="Test Obmcrest" id="s1-s5" fail="0">Tests.Test Obmcrest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
