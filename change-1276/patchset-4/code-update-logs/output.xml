<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161207 14:45:20.943" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code update BMC">
<kw name="Check If File Exist" library="code_update_utils">
<arguments>
<arg>${FILE_PATH}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n PATH: ${filepath}</arg>
</arguments>
<msg timestamp="20161207 14:45:21.376" level="INFO">
PATH: /home/fspcibld/barreleye-20161207093324.all.tar</msg>
<status status="PASS" endtime="20161207 14:45:21.376" starttime="20161207 14:45:21.376"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>msg=${filepath} doesn't exist [ ERROR ]</arg>
</arguments>
<msg timestamp="20161207 14:45:21.377" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/barreleye-20161207093324.all.tar"&gt;/home/fspcibld/barreleye-20161207093324.all.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161207 14:45:21.377" starttime="20161207 14:45:21.377"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${filepath}</arg>
</arguments>
<msg timestamp="20161207 14:45:21.377" level="INFO">${FILE_PATH} = /home/fspcibld/barreleye-20161207093324.all.tar</msg>
<status status="PASS" endtime="20161207 14:45:21.378" starttime="20161207 14:45:21.377"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:21.378" starttime="20161207 14:45:21.375"></status>
</kw>
<kw name="System Readiness Test" library="code_update_utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<assign>
<var>${l_status}</var>
</assign>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161207 14:45:21.380" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161207 14:45:21.380" starttime="20161207 14:45:21.380"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161207 14:45:21.383" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161207 14:45:24.388" level="INFO">${RC} = 0</msg>
<msg timestamp="20161207 14:45:24.388" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.89 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.766 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161207 14:45:24.388" starttime="20161207 14:45:21.380"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161207 14:45:24.391" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.89 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.766 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.794 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.878 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.766/1.082/1.890/0.468 ms</msg>
<status status="PASS" endtime="20161207 14:45:24.391" starttime="20161207 14:45:24.390"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:24.392" starttime="20161207 14:45:24.392"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:24.393" starttime="20161207 14:45:21.379"></status>
</kw>
<msg timestamp="20161207 14:45:24.393" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161207 14:45:24.393" starttime="20161207 14:45:21.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:24.398" starttime="20161207 14:45:24.393"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:45:24.400" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:45:24.401" starttime="20161207 14:45:24.399"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:45:24.402" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:45:24.402" starttime="20161207 14:45:24.401"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:45:24.402" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:45:24.402" starttime="20161207 14:45:24.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:45:24.403" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:45:24.403" starttime="20161207 14:45:24.402"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:45:40.127" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:45:40.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:40.127" starttime="20161207 14:45:24.403"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:45:40.128" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:45:40.128" starttime="20161207 14:45:40.128"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:40.129" starttime="20161207 14:45:24.399"></status>
</kw>
<msg timestamp="20161207 14:45:40.129" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161207 14:45:40.129" starttime="20161207 14:45:24.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:40.134" starttime="20161207 14:45:40.129"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161207 14:45:40.136" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161207 14:45:40.136" starttime="20161207 14:45:40.135"></status>
</kw>
<msg timestamp="20161207 14:45:40.136" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161207 14:45:40.136" starttime="20161207 14:45:40.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:40.140" starttime="20161207 14:45:40.140"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:40.141" starttime="20161207 14:45:40.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:40.143" starttime="20161207 14:45:40.141"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161207 14:45:40.144" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161207 14:45:40.144" starttime="20161207 14:45:40.144"></status>
</kw>
<msg timestamp="20161207 14:45:40.144" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161207 14:45:40.144" starttime="20161207 14:45:40.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:40.148" starttime="20161207 14:45:40.148"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:40.148" starttime="20161207 14:45:40.147"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:40.148" starttime="20161207 14:45:40.144"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161207 14:45:40.149" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161207 14:45:42.591" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161207 14:45:42.591" starttime="20161207 14:45:40.148"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:42.591" starttime="20161207 14:45:40.134"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 14:45:42.592" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161207 14:45:42.661" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 14:45:42.661" level="INFO">${system} = barreleye</msg>
<msg timestamp="20161207 14:45:42.661" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161207 14:45:42.661" starttime="20161207 14:45:42.592"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 14:45:42.662" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161207 14:45:42.662" starttime="20161207 14:45:42.662"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:42.662" starttime="20161207 14:45:21.379"></status>
</kw>
<msg timestamp="20161207 14:45:42.663" level="INFO">${l_status} = True</msg>
<status status="PASS" endtime="20161207 14:45:42.663" starttime="20161207 14:45:21.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_status}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=System not in ideal state to use [ERROR]</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:42.667" starttime="20161207 14:45:42.663"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:42.667" starttime="20161207 14:45:21.378"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Validate BMC Version</arg>
<arg>before</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Validate BMC Version" library="code_update_utils">
<arguments>
<arg>before</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161207 14:45:42.671" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161207 14:45:42.671" starttime="20161207 14:45:42.670"></status>
</kw>
<msg timestamp="20161207 14:45:42.671" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161207 14:45:42.671" starttime="20161207 14:45:42.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:42.674" starttime="20161207 14:45:42.674"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:42.674" starttime="20161207 14:45:42.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:42.678" starttime="20161207 14:45:42.675"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161207 14:45:42.678" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161207 14:45:42.679" starttime="20161207 14:45:42.678"></status>
</kw>
<msg timestamp="20161207 14:45:42.679" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161207 14:45:42.679" starttime="20161207 14:45:42.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:42.682" starttime="20161207 14:45:42.682"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:42.682" starttime="20161207 14:45:42.682"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:42.682" starttime="20161207 14:45:42.679"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161207 14:45:42.683" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161207 14:45:44.865" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161207 14:45:44.866" starttime="20161207 14:45:42.683"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:44.866" starttime="20161207 14:45:42.669"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat /etc/version</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${version}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 14:45:44.867" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20161207 14:45:44.937" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 14:45:44.937" level="INFO">${version} = 20161205223427</msg>
<msg timestamp="20161207 14:45:44.937" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161207 14:45:44.937" starttime="20161207 14:45:44.867"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 14:45:44.938" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161207 14:45:44.938" starttime="20161207 14:45:44.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${args}' == 'before'</arg>
<arg>Should not Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
<arg>ELSE</arg>
<arg>Should Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Code update Failed</arg>
</arguments>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:44.944" starttime="20161207 14:45:44.944"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:44.945" starttime="20161207 14:45:44.938"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:44.945" starttime="20161207 14:45:42.668"></status>
</kw>
<msg timestamp="20161207 14:45:44.945" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20161207 14:45:44.945" starttime="20161207 14:45:42.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Pass Execution</arg>
<arg>Same Driver version installed</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:44.950" starttime="20161207 14:45:44.945"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:45:44.951" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:45:44.951" starttime="20161207 14:45:44.950"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:45:44.952" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:45:44.952" starttime="20161207 14:45:44.951"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:45:44.953" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161207 14:45:44.953" starttime="20161207 14:45:44.952"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:45:44.954" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status status="PASS" endtime="20161207 14:45:44.954" starttime="20161207 14:45:44.954"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:45:44.954" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:45:44.954" starttime="20161207 14:45:44.954"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:44.955" starttime="20161207 14:45:44.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:45:44.959" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:45:44.959" starttime="20161207 14:45:44.958"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:45:44.960" level="INFO">URI:https://9.3.23.30/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:45:44.960" starttime="20161207 14:45:44.959"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:44.960" starttime="20161207 14:45:44.959"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:44.960" starttime="20161207 14:45:44.958"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:44.960" starttime="20161207 14:45:44.955"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:45:44.961" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:45:44.961" starttime="20161207 14:45:44.961"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:45:44.962" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:45:44.962" starttime="20161207 14:45:44.962"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:45:44.962" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:45:44.962" starttime="20161207 14:45:44.962"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:45:44.963" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:45:44.963" starttime="20161207 14:45:44.963"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:45:45.295" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:45:45.295" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:45.295" starttime="20161207 14:45:44.963"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:45:45.295" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:45:45.295" starttime="20161207 14:45:45.295"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:45.296" starttime="20161207 14:45:44.960"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:45:45.762" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:45:45.762" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:45.763" starttime="20161207 14:45:45.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:45:45.769" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:45:45.769" starttime="20161207 14:45:45.768"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:45:45.770" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:45:45.771" starttime="20161207 14:45:45.770"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:45.771" starttime="20161207 14:45:45.769"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:45.771" starttime="20161207 14:45:45.768"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:45.771" starttime="20161207 14:45:45.763"></status>
</kw>
<msg timestamp="20161207 14:45:45.771" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:45.771" starttime="20161207 14:45:44.953"></status>
</kw>
<msg timestamp="20161207 14:45:45.772" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:45.772" starttime="20161207 14:45:44.952"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:45:45.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:45:45.773" starttime="20161207 14:45:45.772"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:45:45.775" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:45:45.775" starttime="20161207 14:45:45.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:45:45.777" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:45:45.777" starttime="20161207 14:45:45.776"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:45:45.778" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161207 14:45:45.779" starttime="20161207 14:45:45.778"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:45:45.780" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" endtime="20161207 14:45:45.780" starttime="20161207 14:45:45.780"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:45:45.780" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:45:45.780" starttime="20161207 14:45:45.780"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:45.781" starttime="20161207 14:45:45.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:45:45.785" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:45:45.785" starttime="20161207 14:45:45.784"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:45:45.786" level="INFO">URI:https://9.3.23.30/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:45:45.786" starttime="20161207 14:45:45.786"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:45.786" starttime="20161207 14:45:45.785"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:45.786" starttime="20161207 14:45:45.784"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:45.786" starttime="20161207 14:45:45.781"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:45:45.787" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:45:45.788" starttime="20161207 14:45:45.787"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:45:45.788" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:45:45.788" starttime="20161207 14:45:45.788"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:45:45.789" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:45:45.789" starttime="20161207 14:45:45.789"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:45:45.789" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:45:45.789" starttime="20161207 14:45:45.789"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:45:46.118" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:45:46.118" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:46.118" starttime="20161207 14:45:45.790"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:45:46.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:45:46.119" starttime="20161207 14:45:46.119"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:46.119" starttime="20161207 14:45:45.787"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:45:46.377" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:45:46.377" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:46.378" starttime="20161207 14:45:46.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:45:46.384" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:45:46.384" starttime="20161207 14:45:46.383"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:45:46.386" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:45:46.386" starttime="20161207 14:45:46.385"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:46.386" starttime="20161207 14:45:46.384"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:46.386" starttime="20161207 14:45:46.383"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:46.386" starttime="20161207 14:45:46.378"></status>
</kw>
<msg timestamp="20161207 14:45:46.387" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:46.387" starttime="20161207 14:45:45.779"></status>
</kw>
<msg timestamp="20161207 14:45:46.387" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:46.387" starttime="20161207 14:45:45.777"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:45:46.388" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:45:46.388" starttime="20161207 14:45:46.388"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:45:46.389" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:45:46.389" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:45:46.389" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': 0}</msg>
<status status="PASS" endtime="20161207 14:45:46.389" starttime="20161207 14:45:46.389"></status>
</kw>
<msg timestamp="20161207 14:45:46.389" level="INFO">${state} = 0</msg>
<status status="PASS" endtime="20161207 14:45:46.389" starttime="20161207 14:45:45.774"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:46.390" starttime="20161207 14:45:46.389"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:46.390" starttime="20161207 14:45:45.774"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:46.390" starttime="20161207 14:45:45.773"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:46.390" starttime="20161207 14:45:44.950"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20161207 14:45:46.391" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20161207 14:45:46.391" starttime="20161207 14:45:46.391"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:45:46.393" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20161207 14:45:46.393" starttime="20161207 14:45:46.392"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:45:46.394" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20161207 14:45:46.394" starttime="20161207 14:45:46.393"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:45:46.394" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:45:46.394" starttime="20161207 14:45:46.394"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:46.395" starttime="20161207 14:45:46.394"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:45:46.396" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:45:46.396" starttime="20161207 14:45:46.395"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:45:46.397" level="INFO">URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:45:46.397" starttime="20161207 14:45:46.396"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:46.397" starttime="20161207 14:45:46.396"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:46.397" starttime="20161207 14:45:46.395"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:45:46.398" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:45:46.399" starttime="20161207 14:45:46.398"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:45:46.399" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:45:46.399" starttime="20161207 14:45:46.399"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:45:46.400" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:45:46.400" starttime="20161207 14:45:46.399"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:45:46.400" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:45:46.400" starttime="20161207 14:45:46.400"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:45:46.940" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:45:46.940" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:46.940" starttime="20161207 14:45:46.400"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:45:46.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:45:46.941" starttime="20161207 14:45:46.941"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:46.942" starttime="20161207 14:45:46.397"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:45:47.360" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20161207 14:45:47.360" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:47.360" starttime="20161207 14:45:46.942"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:45:47.362" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:45:47.362" starttime="20161207 14:45:47.361"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:45:47.362" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:45:47.363" starttime="20161207 14:45:47.362"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:47.363" starttime="20161207 14:45:47.362"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:47.363" starttime="20161207 14:45:47.361"></status>
</kw>
<msg timestamp="20161207 14:45:47.363" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:47.363" starttime="20161207 14:45:46.393"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:45:47.364" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:45:47.364" starttime="20161207 14:45:47.363"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161207 14:45:47.364" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:45:47.365" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:45:47.365" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20161207 14:45:47.365" starttime="20161207 14:45:47.364"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:47.365" starttime="20161207 14:45:46.391"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:45:47.366" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20161207 14:45:47.366" starttime="20161207 14:45:47.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:45:47.372" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Get, args:{}</msg>
<status status="PASS" endtime="20161207 14:45:47.372" starttime="20161207 14:45:47.371"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:45:47.373" level="INFO">URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Get, args:{}</msg>
<status status="PASS" endtime="20161207 14:45:47.374" starttime="20161207 14:45:47.373"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:47.374" starttime="20161207 14:45:47.372"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:47.374" starttime="20161207 14:45:47.370"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:47.374" starttime="20161207 14:45:47.367"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:45:47.376" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:45:47.377" starttime="20161207 14:45:47.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:45:47.377" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:45:47.378" starttime="20161207 14:45:47.377"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:45:47.379" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:45:47.379" starttime="20161207 14:45:47.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:45:47.379" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:45:47.379" starttime="20161207 14:45:47.379"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:45:48.083" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:45:48.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:48.083" starttime="20161207 14:45:47.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:45:48.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:45:48.084" starttime="20161207 14:45:48.084"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:48.085" starttime="20161207 14:45:47.375"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:45:48.270" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None </msg>
<msg timestamp="20161207 14:45:48.270" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:48.270" starttime="20161207 14:45:48.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:45:48.273" level="INFO">${msg} = Response code:200, Content:{
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:45:48.273" starttime="20161207 14:45:48.273"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:45:48.274" level="INFO">Response code:200, Content:{
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:45:48.274" starttime="20161207 14:45:48.274"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:48.274" starttime="20161207 14:45:48.274"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:48.275" starttime="20161207 14:45:48.273"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:48.275" starttime="20161207 14:45:48.270"></status>
</kw>
<msg timestamp="20161207 14:45:48.275" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:48.275" starttime="20161207 14:45:47.365"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:45:48.275" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:45:48.276" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:45:48.276" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20161207 14:45:48.276" starttime="20161207 14:45:48.275"></status>
</kw>
<msg timestamp="20161207 14:45:48.276" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20161207 14:45:48.276" starttime="20161207 14:45:47.365"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:48.276" starttime="20161207 14:45:48.276"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:48.277" starttime="20161207 14:45:46.390"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:45:48.278" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:45:48.278" starttime="20161207 14:45:48.277"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:45:48.279" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20161207 14:45:48.279" starttime="20161207 14:45:48.279"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:45:48.280" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:45:48.280" starttime="20161207 14:45:48.280"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:48.281" starttime="20161207 14:45:48.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:45:48.289" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc/action/PrepareForUpdate, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:45:48.289" starttime="20161207 14:45:48.287"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:45:48.290" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc/action/PrepareForUpdate, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:45:48.290" starttime="20161207 14:45:48.289"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:48.290" starttime="20161207 14:45:48.289"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:48.290" starttime="20161207 14:45:48.286"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:48.290" starttime="20161207 14:45:48.281"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:45:48.291" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:45:48.291" starttime="20161207 14:45:48.291"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:45:48.292" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:45:48.292" starttime="20161207 14:45:48.292"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:45:48.292" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:45:48.293" starttime="20161207 14:45:48.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:45:48.293" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:45:48.293" starttime="20161207 14:45:48.293"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:45:48.733" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:45:48.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:48.733" starttime="20161207 14:45:48.293"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:45:48.734" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:45:48.734" starttime="20161207 14:45:48.733"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:48.734" starttime="20161207 14:45:48.290"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:45:49.172" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:45:49.172" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:49.172" starttime="20161207 14:45:48.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:45:49.176" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:45:49.176" starttime="20161207 14:45:49.176"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:45:49.177" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:45:49.177" starttime="20161207 14:45:49.177"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:49.177" starttime="20161207 14:45:49.176"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:49.177" starttime="20161207 14:45:49.175"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:49.177" starttime="20161207 14:45:49.173"></status>
</kw>
<msg timestamp="20161207 14:45:49.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:49.178" starttime="20161207 14:45:48.278"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:45:49.178" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:45:49.178" starttime="20161207 14:45:49.178"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:45:49.180" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161207 14:45:49.180" starttime="20161207 14:45:49.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:45:49.185" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161207 14:45:49.185" starttime="20161207 14:45:49.185"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:45:49.186" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161207 14:45:49.186" starttime="20161207 14:45:49.186"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:49.186" starttime="20161207 14:45:49.185"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:49.186" starttime="20161207 14:45:49.184"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:49.187" starttime="20161207 14:45:49.180"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:45:49.188" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:45:49.188" starttime="20161207 14:45:49.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:45:49.189" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:45:49.189" starttime="20161207 14:45:49.188"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:45:49.190" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:45:49.190" starttime="20161207 14:45:49.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:45:49.191" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:45:49.191" starttime="20161207 14:45:49.190"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:45:49.563" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:45:49.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:49.563" starttime="20161207 14:45:49.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:45:49.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:45:49.564" starttime="20161207 14:45:49.564"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:49.564" starttime="20161207 14:45:49.187"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:45:49.689" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None </msg>
<msg timestamp="20161207 14:45:49.690" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:49.690" starttime="20161207 14:45:49.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:45:49.696" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "...</msg>
<status status="PASS" endtime="20161207 14:45:49.696" starttime="20161207 14:45:49.695"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:45:49.697" level="INFO">Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:45:49.698" starttime="20161207 14:45:49.697"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:49.698" starttime="20161207 14:45:49.696"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:49.698" starttime="20161207 14:45:49.694"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:49.698" starttime="20161207 14:45:49.690"></status>
</kw>
<msg timestamp="20161207 14:45:49.698" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:45:49.699" starttime="20161207 14:45:49.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:45:49.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:45:49.699" starttime="20161207 14:45:49.699"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:45:49.700" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:45:49.700" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:45:49.700" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'p...</msg>
<status status="PASS" endtime="20161207 14:45:49.700" starttime="20161207 14:45:49.699"></status>
</kw>
<msg timestamp="20161207 14:45:49.700" level="INFO">${data} = {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application...</msg>
<status status="PASS" endtime="20161207 14:45:49.700" starttime="20161207 14:45:49.178"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>Switch to update mode in progress</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:49.701" starttime="20161207 14:45:49.700"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:49.701" starttime="20161207 14:45:48.277"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161207 14:45:49.703" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161207 14:45:49.703" starttime="20161207 14:45:49.703"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161207 14:45:49.708" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161207 14:45:52.711" level="INFO">${RC} = 0</msg>
<msg timestamp="20161207 14:45:52.712" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.894 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.851 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161207 14:45:52.712" starttime="20161207 14:45:49.703"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161207 14:45:52.715" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.894 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.851 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.775 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.804 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.775/0.831/0.894/0.045 ms</msg>
<status status="PASS" endtime="20161207 14:45:52.715" starttime="20161207 14:45:52.714"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:52.716" starttime="20161207 14:45:52.716"></status>
</kw>
<status status="PASS" endtime="20161207 14:45:52.717" starttime="20161207 14:45:49.703"></status>
</kw>
<msg timestamp="20161207 14:45:52.717" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161207 14:45:52.717" starttime="20161207 14:45:49.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161207 14:45:52.721" starttime="20161207 14:45:52.718"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:45:52.722" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:45:52.723" starttime="20161207 14:45:52.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:45:52.724" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:45:52.724" starttime="20161207 14:45:52.723"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:45:52.724" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:45:52.724" starttime="20161207 14:45:52.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:45:52.725" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:45:52.725" starttime="20161207 14:45:52.725"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:45:58.341" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ProtocolError('Connection aborted.', error(104, 'Connection reset by peer')))</msg>
<status status="FAIL" endtime="20161207 14:45:58.341" starttime="20161207 14:45:52.725"></status>
</kw>
<status status="FAIL" endtime="20161207 14:45:58.342" starttime="20161207 14:45:52.721"></status>
</kw>
<msg timestamp="20161207 14:45:58.342" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161207 14:45:58.342" starttime="20161207 14:45:52.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161207 14:45:58.347" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161207 14:45:58.348" starttime="20161207 14:45:58.347"></status>
</kw>
<status status="FAIL" endtime="20161207 14:45:58.348" starttime="20161207 14:45:58.342"></status>
</kw>
<status status="FAIL" endtime="20161207 14:45:58.348" starttime="20161207 14:45:49.702"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161207 14:46:08.351" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161207 14:46:08.352" starttime="20161207 14:46:08.351"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161207 14:46:08.357" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161207 14:46:11.364" level="INFO">${RC} = 0</msg>
<msg timestamp="20161207 14:46:11.364" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.909 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.739 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161207 14:46:11.365" starttime="20161207 14:46:08.352"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161207 14:46:11.378" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.909 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.739 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.789 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.809 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.739/0.811/0.909/0.068 ms</msg>
<status status="PASS" endtime="20161207 14:46:11.378" starttime="20161207 14:46:11.375"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:46:11.380" starttime="20161207 14:46:11.379"></status>
</kw>
<status status="PASS" endtime="20161207 14:46:11.380" starttime="20161207 14:46:08.350"></status>
</kw>
<msg timestamp="20161207 14:46:11.382" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161207 14:46:11.382" starttime="20161207 14:46:08.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161207 14:46:11.389" starttime="20161207 14:46:11.382"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:46:11.392" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:46:11.396" starttime="20161207 14:46:11.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:46:11.397" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:46:11.397" starttime="20161207 14:46:11.396"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:46:11.398" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:46:11.398" starttime="20161207 14:46:11.398"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:46:11.399" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:46:11.399" starttime="20161207 14:46:11.399"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:46:12.010" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fffaa6ce050&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161207 14:46:12.010" starttime="20161207 14:46:11.399"></status>
</kw>
<status status="FAIL" endtime="20161207 14:46:12.010" starttime="20161207 14:46:11.390"></status>
</kw>
<msg timestamp="20161207 14:46:12.010" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161207 14:46:12.010" starttime="20161207 14:46:11.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161207 14:46:12.014" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161207 14:46:12.014" starttime="20161207 14:46:12.013"></status>
</kw>
<status status="FAIL" endtime="20161207 14:46:12.014" starttime="20161207 14:46:12.011"></status>
</kw>
<status status="FAIL" endtime="20161207 14:46:12.014" starttime="20161207 14:46:08.349"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161207 14:46:22.017" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161207 14:46:22.017" starttime="20161207 14:46:22.017"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161207 14:46:22.022" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161207 14:46:35.049" level="INFO">${RC} = 1</msg>
<msg timestamp="20161207 14:46:35.049" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20161207 14:46:35.049" starttime="20161207 14:46:22.017"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161207 14:46:35.055" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20161207 14:46:35.055" starttime="20161207 14:46:35.052"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161207 14:46:35.056" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161207 14:46:35.056" starttime="20161207 14:46:35.055"></status>
</kw>
<status status="FAIL" endtime="20161207 14:46:35.056" starttime="20161207 14:46:22.016"></status>
</kw>
<msg timestamp="20161207 14:46:35.057" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161207 14:46:35.057" starttime="20161207 14:46:22.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161207 14:46:35.061" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161207 14:46:35.061" starttime="20161207 14:46:35.061"></status>
</kw>
<status status="FAIL" endtime="20161207 14:46:35.061" starttime="20161207 14:46:35.057"></status>
</kw>
<status status="FAIL" endtime="20161207 14:46:35.061" starttime="20161207 14:46:22.014"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161207 14:46:45.065" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161207 14:46:45.065" starttime="20161207 14:46:45.065"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161207 14:46:45.073" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161207 14:46:58.101" level="INFO">${RC} = 1</msg>
<msg timestamp="20161207 14:46:58.101" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20161207 14:46:58.102" starttime="20161207 14:46:45.066"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161207 14:46:58.106" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20161207 14:46:58.106" starttime="20161207 14:46:58.105"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161207 14:46:58.107" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161207 14:46:58.107" starttime="20161207 14:46:58.106"></status>
</kw>
<status status="FAIL" endtime="20161207 14:46:58.108" starttime="20161207 14:46:45.064"></status>
</kw>
<msg timestamp="20161207 14:46:58.108" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161207 14:46:58.108" starttime="20161207 14:46:45.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161207 14:46:58.112" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161207 14:46:58.113" starttime="20161207 14:46:58.112"></status>
</kw>
<status status="FAIL" endtime="20161207 14:46:58.113" starttime="20161207 14:46:58.109"></status>
</kw>
<status status="FAIL" endtime="20161207 14:46:58.113" starttime="20161207 14:46:45.062"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161207 14:47:08.117" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161207 14:47:08.117" starttime="20161207 14:47:08.116"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161207 14:47:08.125" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161207 14:47:21.148" level="INFO">${RC} = 1</msg>
<msg timestamp="20161207 14:47:21.148" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20161207 14:47:21.149" starttime="20161207 14:47:08.117"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161207 14:47:21.152" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20161207 14:47:21.152" starttime="20161207 14:47:21.151"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161207 14:47:21.154" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161207 14:47:21.154" starttime="20161207 14:47:21.153"></status>
</kw>
<status status="FAIL" endtime="20161207 14:47:21.154" starttime="20161207 14:47:08.115"></status>
</kw>
<msg timestamp="20161207 14:47:21.154" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161207 14:47:21.155" starttime="20161207 14:47:08.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161207 14:47:21.160" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161207 14:47:21.160" starttime="20161207 14:47:21.160"></status>
</kw>
<status status="FAIL" endtime="20161207 14:47:21.160" starttime="20161207 14:47:21.155"></status>
</kw>
<status status="FAIL" endtime="20161207 14:47:21.161" starttime="20161207 14:47:08.113"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161207 14:47:31.164" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161207 14:47:31.165" starttime="20161207 14:47:31.164"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161207 14:47:31.170" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161207 14:47:34.180" level="INFO">${RC} = 0</msg>
<msg timestamp="20161207 14:47:34.180" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.67 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.860 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161207 14:47:34.180" starttime="20161207 14:47:31.165"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161207 14:47:34.193" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.67 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.860 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.763 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.804 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.763/1.026/1.677/0.377 ms</msg>
<status status="PASS" endtime="20161207 14:47:34.194" starttime="20161207 14:47:34.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:47:34.195" starttime="20161207 14:47:34.194"></status>
</kw>
<status status="PASS" endtime="20161207 14:47:34.196" starttime="20161207 14:47:31.163"></status>
</kw>
<msg timestamp="20161207 14:47:34.196" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161207 14:47:34.196" starttime="20161207 14:47:31.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161207 14:47:34.201" starttime="20161207 14:47:34.197"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:47:34.207" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:47:34.210" starttime="20161207 14:47:34.205"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:47:34.211" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:47:34.211" starttime="20161207 14:47:34.210"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:47:34.211" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:47:34.211" starttime="20161207 14:47:34.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:47:34.212" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:47:34.212" starttime="20161207 14:47:34.212"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:48:14.868" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ReadTimeoutError("HTTPSConnectionPool(host='9.3.23.30', port=443): Read timed out. (read timeout=10.0)",))</msg>
<status status="FAIL" endtime="20161207 14:48:14.868" starttime="20161207 14:47:34.212"></status>
</kw>
<status status="FAIL" endtime="20161207 14:48:14.869" starttime="20161207 14:47:34.202"></status>
</kw>
<msg timestamp="20161207 14:48:14.869" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161207 14:48:14.869" starttime="20161207 14:47:34.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161207 14:48:14.875" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161207 14:48:14.875" starttime="20161207 14:48:14.874"></status>
</kw>
<status status="FAIL" endtime="20161207 14:48:14.875" starttime="20161207 14:48:14.869"></status>
</kw>
<status status="FAIL" endtime="20161207 14:48:14.875" starttime="20161207 14:47:31.161"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161207 14:48:24.878" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161207 14:48:24.879" starttime="20161207 14:48:24.878"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161207 14:48:24.884" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161207 14:48:27.895" level="INFO">${RC} = 0</msg>
<msg timestamp="20161207 14:48:27.895" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=2.38 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.815 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161207 14:48:27.896" starttime="20161207 14:48:24.879"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161207 14:48:27.907" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=2.38 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.815 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.803 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.790 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.790/1.197/2.382/0.684 ms</msg>
<status status="PASS" endtime="20161207 14:48:27.907" starttime="20161207 14:48:27.905"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:48:27.909" starttime="20161207 14:48:27.909"></status>
</kw>
<status status="PASS" endtime="20161207 14:48:27.909" starttime="20161207 14:48:24.877"></status>
</kw>
<msg timestamp="20161207 14:48:27.909" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161207 14:48:27.909" starttime="20161207 14:48:24.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161207 14:48:27.917" starttime="20161207 14:48:27.910"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:48:27.920" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:48:27.924" starttime="20161207 14:48:27.918"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:48:27.925" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:48:27.925" starttime="20161207 14:48:27.924"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:48:27.926" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:48:27.926" starttime="20161207 14:48:27.926"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:48:27.927" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:48:27.927" starttime="20161207 14:48:27.927"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:48:29.438" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:48:29.439" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:48:29.439" starttime="20161207 14:48:27.928"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:48:29.439" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:48:29.440" starttime="20161207 14:48:29.439"></status>
</kw>
<status status="PASS" endtime="20161207 14:48:29.440" starttime="20161207 14:48:27.918"></status>
</kw>
<msg timestamp="20161207 14:48:29.440" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161207 14:48:29.440" starttime="20161207 14:48:27.917"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161207 14:48:29.445" starttime="20161207 14:48:29.440"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161207 14:48:29.447" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161207 14:48:29.447" starttime="20161207 14:48:29.446"></status>
</kw>
<msg timestamp="20161207 14:48:29.447" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161207 14:48:29.447" starttime="20161207 14:48:29.446"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:48:29.452" starttime="20161207 14:48:29.452"></status>
</kw>
<status status="PASS" endtime="20161207 14:48:29.452" starttime="20161207 14:48:29.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161207 14:48:29.455" starttime="20161207 14:48:29.452"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161207 14:48:29.455" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161207 14:48:29.455" starttime="20161207 14:48:29.455"></status>
</kw>
<msg timestamp="20161207 14:48:29.456" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161207 14:48:29.456" starttime="20161207 14:48:29.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:48:29.459" starttime="20161207 14:48:29.459"></status>
</kw>
<status status="PASS" endtime="20161207 14:48:29.460" starttime="20161207 14:48:29.459"></status>
</kw>
<status status="PASS" endtime="20161207 14:48:29.460" starttime="20161207 14:48:29.456"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161207 14:48:29.460" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161207 14:48:53.302" level="INFO">Read output:</msg>
<status status="PASS" endtime="20161207 14:48:53.303" starttime="20161207 14:48:29.460"></status>
</kw>
<status status="PASS" endtime="20161207 14:48:53.303" starttime="20161207 14:48:29.445"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 14:48:53.304" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161207 14:48:53.762" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 14:48:53.762" level="INFO">${system} = barreleye</msg>
<msg timestamp="20161207 14:48:53.762" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161207 14:48:53.762" starttime="20161207 14:48:53.304"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 14:48:53.763" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161207 14:48:53.763" starttime="20161207 14:48:53.762"></status>
</kw>
<status status="PASS" endtime="20161207 14:48:53.763" starttime="20161207 14:48:24.876"></status>
</kw>
<status status="PASS" endtime="20161207 14:48:53.763" starttime="20161207 14:45:49.701"></status>
</kw>
<status status="PASS" endtime="20161207 14:48:53.763" starttime="20161207 14:45:49.701"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20161207 14:48:53.765" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20161207 14:48:53.765" starttime="20161207 14:48:53.765"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
</arguments>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:48:53.770" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:48:53.770" starttime="20161207 14:48:53.769"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:48:53.771" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:48:53.771" starttime="20161207 14:48:53.770"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:48:53.773" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:48:53.773" starttime="20161207 14:48:53.773"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:48:53.775" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:48:53.775" starttime="20161207 14:48:53.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:48:53.776" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:48:53.776" starttime="20161207 14:48:53.775"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:48:53.777" starttime="20161207 14:48:53.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:48:53.783" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:48:53.783" starttime="20161207 14:48:53.782"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:48:53.783" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:48:53.784" starttime="20161207 14:48:53.783"></status>
</kw>
<status status="PASS" endtime="20161207 14:48:53.784" starttime="20161207 14:48:53.783"></status>
</kw>
<status status="PASS" endtime="20161207 14:48:53.784" starttime="20161207 14:48:53.781"></status>
</kw>
<status status="PASS" endtime="20161207 14:48:53.784" starttime="20161207 14:48:53.777"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:48:53.785" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:48:53.786" starttime="20161207 14:48:53.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:48:53.786" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:48:53.786" starttime="20161207 14:48:53.786"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:48:53.787" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:48:53.787" starttime="20161207 14:48:53.786"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:48:53.787" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:48:53.787" starttime="20161207 14:48:53.787"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:49:04.596" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:49:04.596" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:04.596" starttime="20161207 14:48:53.787"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:49:04.598" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:49:04.598" starttime="20161207 14:49:04.597"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:04.598" starttime="20161207 14:48:53.784"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:49:04.962" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:49:04.962" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:04.963" starttime="20161207 14:49:04.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:49:04.969" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:49:04.969" starttime="20161207 14:49:04.968"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:49:04.970" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:49:04.971" starttime="20161207 14:49:04.970"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:04.971" starttime="20161207 14:49:04.969"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:04.971" starttime="20161207 14:49:04.968"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:04.971" starttime="20161207 14:49:04.963"></status>
</kw>
<msg timestamp="20161207 14:49:04.972" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:04.972" starttime="20161207 14:48:53.773"></status>
</kw>
<msg timestamp="20161207 14:49:04.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:04.973" starttime="20161207 14:48:53.771"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:49:04.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:49:04.974" starttime="20161207 14:49:04.973"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:49:04.975" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:49:04.975" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:49:04.975" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:49:04.975" starttime="20161207 14:49:04.974"></status>
</kw>
<msg timestamp="20161207 14:49:04.975" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:49:04.975" starttime="20161207 14:48:53.768"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:49:04.976" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:49:04.976" starttime="20161207 14:49:04.976"></status>
</kw>
<status status="FAIL" endtime="20161207 14:49:04.977" starttime="20161207 14:48:53.767"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:49:14.979" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:49:14.979" starttime="20161207 14:49:14.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:49:14.980" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:49:14.980" starttime="20161207 14:49:14.980"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:49:14.982" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:49:14.982" starttime="20161207 14:49:14.982"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:49:14.984" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:49:14.985" starttime="20161207 14:49:14.984"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:49:14.985" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:49:14.985" starttime="20161207 14:49:14.985"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:49:14.986" starttime="20161207 14:49:14.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:49:14.992" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:49:14.992" starttime="20161207 14:49:14.992"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:49:14.993" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:49:14.994" starttime="20161207 14:49:14.993"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:14.994" starttime="20161207 14:49:14.992"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:14.994" starttime="20161207 14:49:14.991"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:14.994" starttime="20161207 14:49:14.987"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:49:14.995" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:49:14.995" starttime="20161207 14:49:14.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:49:14.996" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:49:14.996" starttime="20161207 14:49:14.995"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:49:14.996" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:49:14.997" starttime="20161207 14:49:14.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:49:14.997" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:49:14.997" starttime="20161207 14:49:14.997"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:49:15.398" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:49:15.398" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:15.398" starttime="20161207 14:49:14.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:49:15.399" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:49:15.399" starttime="20161207 14:49:15.398"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:15.399" starttime="20161207 14:49:14.994"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:49:15.720" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:49:15.720" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:15.720" starttime="20161207 14:49:15.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:49:15.726" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:49:15.726" starttime="20161207 14:49:15.725"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:49:15.727" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:49:15.727" starttime="20161207 14:49:15.727"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:15.728" starttime="20161207 14:49:15.726"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:15.728" starttime="20161207 14:49:15.725"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:15.728" starttime="20161207 14:49:15.721"></status>
</kw>
<msg timestamp="20161207 14:49:15.728" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:15.728" starttime="20161207 14:49:14.983"></status>
</kw>
<msg timestamp="20161207 14:49:15.728" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:15.729" starttime="20161207 14:49:14.981"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:49:15.730" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:49:15.730" starttime="20161207 14:49:15.729"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:49:15.730" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:49:15.730" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:49:15.731" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:49:15.731" starttime="20161207 14:49:15.730"></status>
</kw>
<msg timestamp="20161207 14:49:15.731" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:49:15.731" starttime="20161207 14:49:14.978"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:49:15.732" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:49:15.732" starttime="20161207 14:49:15.731"></status>
</kw>
<status status="FAIL" endtime="20161207 14:49:15.732" starttime="20161207 14:49:14.977"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:49:25.734" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:49:25.734" starttime="20161207 14:49:25.734"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:49:25.736" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:49:25.736" starttime="20161207 14:49:25.735"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:49:25.738" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:49:25.738" starttime="20161207 14:49:25.737"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:49:25.740" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:49:25.740" starttime="20161207 14:49:25.740"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:49:25.741" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:49:25.741" starttime="20161207 14:49:25.740"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:49:25.742" starttime="20161207 14:49:25.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:49:25.749" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:49:25.749" starttime="20161207 14:49:25.748"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:49:25.751" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:49:25.751" starttime="20161207 14:49:25.750"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:25.751" starttime="20161207 14:49:25.750"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:25.751" starttime="20161207 14:49:25.747"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:25.751" starttime="20161207 14:49:25.742"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:49:25.753" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:49:25.753" starttime="20161207 14:49:25.752"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:49:25.754" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:49:25.754" starttime="20161207 14:49:25.753"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:49:25.754" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:49:25.754" starttime="20161207 14:49:25.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:49:25.755" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:49:25.755" starttime="20161207 14:49:25.755"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:49:26.174" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:49:26.174" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:26.174" starttime="20161207 14:49:25.755"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:49:26.175" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:49:26.175" starttime="20161207 14:49:26.174"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:26.175" starttime="20161207 14:49:25.751"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:49:26.475" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:49:26.475" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:26.475" starttime="20161207 14:49:26.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:49:26.479" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:49:26.479" starttime="20161207 14:49:26.478"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:49:26.480" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:49:26.480" starttime="20161207 14:49:26.480"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:26.480" starttime="20161207 14:49:26.479"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:26.480" starttime="20161207 14:49:26.478"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:26.480" starttime="20161207 14:49:26.475"></status>
</kw>
<msg timestamp="20161207 14:49:26.481" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:26.481" starttime="20161207 14:49:25.738"></status>
</kw>
<msg timestamp="20161207 14:49:26.481" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:26.481" starttime="20161207 14:49:25.736"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:49:26.482" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:49:26.482" starttime="20161207 14:49:26.482"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:49:26.483" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:49:26.483" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:49:26.483" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:49:26.483" starttime="20161207 14:49:26.483"></status>
</kw>
<msg timestamp="20161207 14:49:26.484" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:49:26.484" starttime="20161207 14:49:25.733"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:49:26.485" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:49:26.485" starttime="20161207 14:49:26.484"></status>
</kw>
<status status="FAIL" endtime="20161207 14:49:26.485" starttime="20161207 14:49:25.732"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:49:36.488" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:49:36.488" starttime="20161207 14:49:36.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:49:36.489" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:49:36.489" starttime="20161207 14:49:36.488"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:49:36.491" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:49:36.491" starttime="20161207 14:49:36.490"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:49:36.493" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:49:36.493" starttime="20161207 14:49:36.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:49:36.494" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:49:36.494" starttime="20161207 14:49:36.493"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:49:36.495" starttime="20161207 14:49:36.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:49:36.504" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:49:36.504" starttime="20161207 14:49:36.503"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:49:36.505" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:49:36.505" starttime="20161207 14:49:36.504"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:36.505" starttime="20161207 14:49:36.504"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:36.506" starttime="20161207 14:49:36.502"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:36.506" starttime="20161207 14:49:36.495"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:49:36.507" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:49:36.507" starttime="20161207 14:49:36.506"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:49:36.508" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:49:36.508" starttime="20161207 14:49:36.508"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:49:36.508" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:49:36.508" starttime="20161207 14:49:36.508"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:49:36.509" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:49:36.509" starttime="20161207 14:49:36.509"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:49:36.865" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:49:36.865" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:36.865" starttime="20161207 14:49:36.509"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:49:36.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:49:36.866" starttime="20161207 14:49:36.865"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:36.866" starttime="20161207 14:49:36.506"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:49:37.183" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:49:37.184" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:37.184" starttime="20161207 14:49:36.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:49:37.187" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:49:37.187" starttime="20161207 14:49:37.187"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:49:37.188" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:49:37.188" starttime="20161207 14:49:37.188"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:37.188" starttime="20161207 14:49:37.187"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:37.188" starttime="20161207 14:49:37.186"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:37.188" starttime="20161207 14:49:37.184"></status>
</kw>
<msg timestamp="20161207 14:49:37.189" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:37.189" starttime="20161207 14:49:36.491"></status>
</kw>
<msg timestamp="20161207 14:49:37.189" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:37.189" starttime="20161207 14:49:36.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:49:37.190" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:49:37.190" starttime="20161207 14:49:37.189"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:49:37.190" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:49:37.190" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:49:37.191" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:49:37.191" starttime="20161207 14:49:37.190"></status>
</kw>
<msg timestamp="20161207 14:49:37.191" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:49:37.191" starttime="20161207 14:49:36.487"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:49:37.192" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:49:37.192" starttime="20161207 14:49:37.191"></status>
</kw>
<status status="FAIL" endtime="20161207 14:49:37.192" starttime="20161207 14:49:36.486"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:49:47.196" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:49:47.196" starttime="20161207 14:49:47.194"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:49:47.197" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:49:47.197" starttime="20161207 14:49:47.197"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:49:47.199" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:49:47.199" starttime="20161207 14:49:47.199"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:49:47.201" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:49:47.202" starttime="20161207 14:49:47.201"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:49:47.202" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:49:47.202" starttime="20161207 14:49:47.202"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:49:47.203" starttime="20161207 14:49:47.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:49:47.210" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:49:47.210" starttime="20161207 14:49:47.209"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:49:47.212" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:49:47.212" starttime="20161207 14:49:47.211"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:47.212" starttime="20161207 14:49:47.210"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:47.212" starttime="20161207 14:49:47.208"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:47.212" starttime="20161207 14:49:47.204"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:49:47.214" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:49:47.215" starttime="20161207 14:49:47.214"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:49:47.215" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:49:47.215" starttime="20161207 14:49:47.215"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:49:47.216" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:49:47.216" starttime="20161207 14:49:47.215"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:49:47.217" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:49:47.217" starttime="20161207 14:49:47.217"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:49:47.596" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:49:47.596" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:47.596" starttime="20161207 14:49:47.217"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:49:47.596" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:49:47.597" starttime="20161207 14:49:47.596"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:47.597" starttime="20161207 14:49:47.212"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:49:47.944" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:49:47.944" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:47.944" starttime="20161207 14:49:47.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:49:47.947" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:49:47.947" starttime="20161207 14:49:47.947"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:49:47.948" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:49:47.948" starttime="20161207 14:49:47.948"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:47.948" starttime="20161207 14:49:47.948"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:47.948" starttime="20161207 14:49:47.947"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:47.949" starttime="20161207 14:49:47.944"></status>
</kw>
<msg timestamp="20161207 14:49:47.949" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:47.949" starttime="20161207 14:49:47.200"></status>
</kw>
<msg timestamp="20161207 14:49:47.949" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:47.949" starttime="20161207 14:49:47.198"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:49:47.950" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:49:47.950" starttime="20161207 14:49:47.949"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:49:47.950" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:49:47.950" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:49:47.950" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:49:47.951" starttime="20161207 14:49:47.950"></status>
</kw>
<msg timestamp="20161207 14:49:47.951" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:49:47.951" starttime="20161207 14:49:47.193"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:49:47.951" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:49:47.951" starttime="20161207 14:49:47.951"></status>
</kw>
<status status="FAIL" endtime="20161207 14:49:47.952" starttime="20161207 14:49:47.192"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:49:57.954" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:49:57.954" starttime="20161207 14:49:57.954"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:49:57.955" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:49:57.955" starttime="20161207 14:49:57.954"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:49:57.957" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:49:57.957" starttime="20161207 14:49:57.956"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:49:57.959" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:49:57.959" starttime="20161207 14:49:57.958"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:49:57.960" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:49:57.960" starttime="20161207 14:49:57.959"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:49:57.961" starttime="20161207 14:49:57.960"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:49:57.966" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:49:57.966" starttime="20161207 14:49:57.965"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:49:57.966" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:49:57.966" starttime="20161207 14:49:57.966"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:57.967" starttime="20161207 14:49:57.966"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:57.967" starttime="20161207 14:49:57.964"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:57.967" starttime="20161207 14:49:57.961"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:49:57.968" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:49:57.968" starttime="20161207 14:49:57.967"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:49:57.970" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:49:57.970" starttime="20161207 14:49:57.969"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:49:57.971" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:49:57.971" starttime="20161207 14:49:57.970"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:49:57.973" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:49:57.973" starttime="20161207 14:49:57.972"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:49:58.336" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:49:58.336" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:58.336" starttime="20161207 14:49:57.973"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:49:58.337" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:49:58.337" starttime="20161207 14:49:58.336"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:58.337" starttime="20161207 14:49:57.967"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:49:58.616" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:49:58.616" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:58.616" starttime="20161207 14:49:58.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:49:58.622" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:49:58.622" starttime="20161207 14:49:58.622"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:49:58.624" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:49:58.624" starttime="20161207 14:49:58.623"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:58.624" starttime="20161207 14:49:58.623"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:58.625" starttime="20161207 14:49:58.621"></status>
</kw>
<status status="PASS" endtime="20161207 14:49:58.625" starttime="20161207 14:49:58.616"></status>
</kw>
<msg timestamp="20161207 14:49:58.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:58.626" starttime="20161207 14:49:57.957"></status>
</kw>
<msg timestamp="20161207 14:49:58.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:49:58.626" starttime="20161207 14:49:57.955"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:49:58.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:49:58.627" starttime="20161207 14:49:58.626"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:49:58.628" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:49:58.628" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:49:58.628" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:49:58.628" starttime="20161207 14:49:58.627"></status>
</kw>
<msg timestamp="20161207 14:49:58.629" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:49:58.629" starttime="20161207 14:49:57.953"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:49:58.629" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:49:58.630" starttime="20161207 14:49:58.629"></status>
</kw>
<status status="FAIL" endtime="20161207 14:49:58.630" starttime="20161207 14:49:57.952"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:50:08.633" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:50:08.633" starttime="20161207 14:50:08.632"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:50:08.634" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:50:08.634" starttime="20161207 14:50:08.633"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:50:08.636" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:50:08.636" starttime="20161207 14:50:08.635"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:50:08.638" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:50:08.638" starttime="20161207 14:50:08.637"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:50:08.639" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:50:08.639" starttime="20161207 14:50:08.638"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:50:08.640" starttime="20161207 14:50:08.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:50:08.645" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:50:08.645" starttime="20161207 14:50:08.644"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:50:08.645" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:50:08.645" starttime="20161207 14:50:08.645"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:08.646" starttime="20161207 14:50:08.645"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:08.646" starttime="20161207 14:50:08.643"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:08.646" starttime="20161207 14:50:08.640"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:50:08.647" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:50:08.647" starttime="20161207 14:50:08.646"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:50:08.648" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:50:08.648" starttime="20161207 14:50:08.647"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:50:08.650" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:50:08.650" starttime="20161207 14:50:08.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:50:08.651" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:50:08.651" starttime="20161207 14:50:08.650"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:50:08.982" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:50:08.982" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:08.982" starttime="20161207 14:50:08.651"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:50:08.983" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:50:08.983" starttime="20161207 14:50:08.983"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:08.983" starttime="20161207 14:50:08.646"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:50:09.450" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:50:09.450" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:09.450" starttime="20161207 14:50:08.983"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:50:09.457" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:50:09.457" starttime="20161207 14:50:09.456"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:50:09.459" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:50:09.459" starttime="20161207 14:50:09.458"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:09.459" starttime="20161207 14:50:09.457"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:09.459" starttime="20161207 14:50:09.455"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:09.459" starttime="20161207 14:50:09.450"></status>
</kw>
<msg timestamp="20161207 14:50:09.460" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:09.460" starttime="20161207 14:50:08.636"></status>
</kw>
<msg timestamp="20161207 14:50:09.460" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:09.460" starttime="20161207 14:50:08.634"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:50:09.461" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:50:09.461" starttime="20161207 14:50:09.461"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:50:09.462" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:50:09.462" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:50:09.462" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:50:09.463" starttime="20161207 14:50:09.462"></status>
</kw>
<msg timestamp="20161207 14:50:09.463" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:50:09.463" starttime="20161207 14:50:08.631"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:50:09.463" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:50:09.463" starttime="20161207 14:50:09.463"></status>
</kw>
<status status="FAIL" endtime="20161207 14:50:09.464" starttime="20161207 14:50:08.630"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:50:19.466" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:50:19.466" starttime="20161207 14:50:19.466"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:50:19.467" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:50:19.467" starttime="20161207 14:50:19.466"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:50:19.469" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:50:19.469" starttime="20161207 14:50:19.468"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:50:19.471" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:50:19.471" starttime="20161207 14:50:19.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:50:19.472" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:50:19.472" starttime="20161207 14:50:19.471"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:50:19.473" starttime="20161207 14:50:19.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:50:19.481" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:50:19.481" starttime="20161207 14:50:19.479"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:50:19.482" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:50:19.482" starttime="20161207 14:50:19.482"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:19.483" starttime="20161207 14:50:19.481"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:19.483" starttime="20161207 14:50:19.479"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:19.483" starttime="20161207 14:50:19.474"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:50:19.483" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:50:19.484" starttime="20161207 14:50:19.483"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:50:19.485" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:50:19.485" starttime="20161207 14:50:19.485"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:50:19.485" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:50:19.485" starttime="20161207 14:50:19.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:50:19.486" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:50:19.486" starttime="20161207 14:50:19.486"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:50:20.182" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:50:20.183" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:20.183" starttime="20161207 14:50:19.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:50:20.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:50:20.183" starttime="20161207 14:50:20.183"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:20.183" starttime="20161207 14:50:19.483"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:50:20.543" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:50:20.543" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:20.543" starttime="20161207 14:50:20.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:50:20.547" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:50:20.547" starttime="20161207 14:50:20.547"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:50:20.548" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:50:20.548" starttime="20161207 14:50:20.548"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:20.548" starttime="20161207 14:50:20.547"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:20.548" starttime="20161207 14:50:20.546"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:20.548" starttime="20161207 14:50:20.544"></status>
</kw>
<msg timestamp="20161207 14:50:20.548" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:20.549" starttime="20161207 14:50:19.469"></status>
</kw>
<msg timestamp="20161207 14:50:20.549" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:20.549" starttime="20161207 14:50:19.467"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:50:20.550" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:50:20.550" starttime="20161207 14:50:20.549"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:50:20.550" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:50:20.550" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:50:20.550" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:50:20.550" starttime="20161207 14:50:20.550"></status>
</kw>
<msg timestamp="20161207 14:50:20.551" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:50:20.551" starttime="20161207 14:50:19.465"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:50:20.551" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:50:20.551" starttime="20161207 14:50:20.551"></status>
</kw>
<status status="FAIL" endtime="20161207 14:50:20.551" starttime="20161207 14:50:19.464"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:50:30.554" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:50:30.555" starttime="20161207 14:50:30.554"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:50:30.555" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:50:30.556" starttime="20161207 14:50:30.555"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:50:30.557" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:50:30.557" starttime="20161207 14:50:30.557"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:50:30.559" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:50:30.560" starttime="20161207 14:50:30.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:50:30.560" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:50:30.560" starttime="20161207 14:50:30.560"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:50:30.561" starttime="20161207 14:50:30.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:50:30.566" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:50:30.566" starttime="20161207 14:50:30.565"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:50:30.566" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:50:30.567" starttime="20161207 14:50:30.566"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:30.567" starttime="20161207 14:50:30.566"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:30.567" starttime="20161207 14:50:30.564"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:30.567" starttime="20161207 14:50:30.562"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:50:30.568" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:50:30.568" starttime="20161207 14:50:30.567"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:50:30.569" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:50:30.569" starttime="20161207 14:50:30.569"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:50:30.570" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:50:30.570" starttime="20161207 14:50:30.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:50:30.570" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:50:30.570" starttime="20161207 14:50:30.570"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:50:30.902" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:50:30.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:30.902" starttime="20161207 14:50:30.570"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:50:30.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:50:30.903" starttime="20161207 14:50:30.902"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:30.903" starttime="20161207 14:50:30.567"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:50:31.181" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:50:31.181" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:31.181" starttime="20161207 14:50:30.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:50:31.185" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:50:31.185" starttime="20161207 14:50:31.184"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:50:31.186" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:50:31.186" starttime="20161207 14:50:31.185"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:31.186" starttime="20161207 14:50:31.185"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:31.186" starttime="20161207 14:50:31.184"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:31.186" starttime="20161207 14:50:31.181"></status>
</kw>
<msg timestamp="20161207 14:50:31.186" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:31.186" starttime="20161207 14:50:30.558"></status>
</kw>
<msg timestamp="20161207 14:50:31.186" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:31.186" starttime="20161207 14:50:30.556"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:50:31.187" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:50:31.187" starttime="20161207 14:50:31.187"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:50:31.188" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:50:31.188" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:50:31.188" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:50:31.188" starttime="20161207 14:50:31.188"></status>
</kw>
<msg timestamp="20161207 14:50:31.188" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:50:31.188" starttime="20161207 14:50:30.553"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:50:31.189" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:50:31.189" starttime="20161207 14:50:31.189"></status>
</kw>
<status status="FAIL" endtime="20161207 14:50:31.189" starttime="20161207 14:50:30.552"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:50:41.192" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:50:41.192" starttime="20161207 14:50:41.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:50:41.193" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:50:41.193" starttime="20161207 14:50:41.192"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:50:41.195" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:50:41.195" starttime="20161207 14:50:41.194"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:50:41.197" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:50:41.197" starttime="20161207 14:50:41.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:50:41.198" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:50:41.198" starttime="20161207 14:50:41.197"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:50:41.199" starttime="20161207 14:50:41.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:50:41.205" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:50:41.205" starttime="20161207 14:50:41.204"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:50:41.206" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:50:41.206" starttime="20161207 14:50:41.206"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:41.206" starttime="20161207 14:50:41.205"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:41.206" starttime="20161207 14:50:41.203"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:41.206" starttime="20161207 14:50:41.199"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:50:41.207" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:50:41.208" starttime="20161207 14:50:41.207"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:50:41.208" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:50:41.208" starttime="20161207 14:50:41.208"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:50:41.209" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:50:41.209" starttime="20161207 14:50:41.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:50:41.209" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:50:41.209" starttime="20161207 14:50:41.209"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:50:41.547" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:50:41.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:41.547" starttime="20161207 14:50:41.209"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:50:41.548" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:50:41.548" starttime="20161207 14:50:41.547"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:41.548" starttime="20161207 14:50:41.206"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:50:41.820" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:50:41.820" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:41.820" starttime="20161207 14:50:41.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:50:41.824" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:50:41.824" starttime="20161207 14:50:41.823"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:50:41.825" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:50:41.825" starttime="20161207 14:50:41.824"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:41.825" starttime="20161207 14:50:41.824"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:41.825" starttime="20161207 14:50:41.823"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:41.825" starttime="20161207 14:50:41.820"></status>
</kw>
<msg timestamp="20161207 14:50:41.825" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:41.825" starttime="20161207 14:50:41.195"></status>
</kw>
<msg timestamp="20161207 14:50:41.825" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:41.825" starttime="20161207 14:50:41.193"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:50:41.826" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:50:41.826" starttime="20161207 14:50:41.826"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:50:41.827" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:50:41.827" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:50:41.827" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:50:41.827" starttime="20161207 14:50:41.826"></status>
</kw>
<msg timestamp="20161207 14:50:41.827" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:50:41.827" starttime="20161207 14:50:41.191"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:50:41.828" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:50:41.828" starttime="20161207 14:50:41.827"></status>
</kw>
<status status="FAIL" endtime="20161207 14:50:41.828" starttime="20161207 14:50:41.190"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:50:51.831" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:50:51.831" starttime="20161207 14:50:51.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:50:51.832" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:50:51.832" starttime="20161207 14:50:51.831"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:50:51.834" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:50:51.834" starttime="20161207 14:50:51.833"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:50:51.836" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:50:51.836" starttime="20161207 14:50:51.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:50:51.837" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:50:51.837" starttime="20161207 14:50:51.837"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:50:51.838" starttime="20161207 14:50:51.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:50:51.844" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:50:51.844" starttime="20161207 14:50:51.843"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:50:51.845" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:50:51.845" starttime="20161207 14:50:51.844"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:51.845" starttime="20161207 14:50:51.844"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:51.845" starttime="20161207 14:50:51.843"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:51.845" starttime="20161207 14:50:51.838"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:50:51.846" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:50:51.846" starttime="20161207 14:50:51.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:50:51.847" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:50:51.847" starttime="20161207 14:50:51.847"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:50:51.847" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:50:51.847" starttime="20161207 14:50:51.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:50:51.848" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:50:51.848" starttime="20161207 14:50:51.848"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:50:52.182" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:50:52.182" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:52.182" starttime="20161207 14:50:51.848"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:50:52.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:50:52.183" starttime="20161207 14:50:52.182"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:52.183" starttime="20161207 14:50:51.845"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:50:52.468" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:50:52.468" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:52.468" starttime="20161207 14:50:52.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:50:52.472" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:50:52.472" starttime="20161207 14:50:52.471"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:50:52.473" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:50:52.473" starttime="20161207 14:50:52.473"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:52.474" starttime="20161207 14:50:52.472"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:52.474" starttime="20161207 14:50:52.471"></status>
</kw>
<status status="PASS" endtime="20161207 14:50:52.474" starttime="20161207 14:50:52.468"></status>
</kw>
<msg timestamp="20161207 14:50:52.475" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:52.475" starttime="20161207 14:50:51.834"></status>
</kw>
<msg timestamp="20161207 14:50:52.475" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:50:52.475" starttime="20161207 14:50:51.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:50:52.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:50:52.476" starttime="20161207 14:50:52.476"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:50:52.477" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:50:52.477" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:50:52.477" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:50:52.477" starttime="20161207 14:50:52.477"></status>
</kw>
<msg timestamp="20161207 14:50:52.478" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:50:52.478" starttime="20161207 14:50:51.829"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:50:52.479" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:50:52.479" starttime="20161207 14:50:52.478"></status>
</kw>
<status status="FAIL" endtime="20161207 14:50:52.479" starttime="20161207 14:50:51.828"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:51:02.482" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:51:02.482" starttime="20161207 14:51:02.481"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:51:02.483" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:51:02.483" starttime="20161207 14:51:02.482"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:51:02.485" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:51:02.485" starttime="20161207 14:51:02.484"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:51:02.487" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:51:02.487" starttime="20161207 14:51:02.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:51:02.488" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:51:02.488" starttime="20161207 14:51:02.487"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:51:02.489" starttime="20161207 14:51:02.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:51:02.495" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:51:02.495" starttime="20161207 14:51:02.494"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:51:02.495" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:51:02.496" starttime="20161207 14:51:02.495"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:02.496" starttime="20161207 14:51:02.495"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:02.496" starttime="20161207 14:51:02.493"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:02.496" starttime="20161207 14:51:02.489"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:51:02.497" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:51:02.497" starttime="20161207 14:51:02.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:51:02.498" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:51:02.498" starttime="20161207 14:51:02.498"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:51:02.498" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:51:02.498" starttime="20161207 14:51:02.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:51:02.499" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:51:02.499" starttime="20161207 14:51:02.499"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:51:02.834" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:51:02.834" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:02.834" starttime="20161207 14:51:02.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:51:02.835" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:51:02.835" starttime="20161207 14:51:02.834"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:02.835" starttime="20161207 14:51:02.496"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:51:03.112" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:51:03.112" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:03.112" starttime="20161207 14:51:02.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:51:03.116" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:51:03.116" starttime="20161207 14:51:03.115"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:51:03.117" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:51:03.117" starttime="20161207 14:51:03.116"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:03.117" starttime="20161207 14:51:03.116"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:03.117" starttime="20161207 14:51:03.115"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:03.117" starttime="20161207 14:51:03.112"></status>
</kw>
<msg timestamp="20161207 14:51:03.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:03.117" starttime="20161207 14:51:02.485"></status>
</kw>
<msg timestamp="20161207 14:51:03.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:03.117" starttime="20161207 14:51:02.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:51:03.118" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:51:03.118" starttime="20161207 14:51:03.118"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:51:03.119" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:51:03.119" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:51:03.119" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:51:03.119" starttime="20161207 14:51:03.119"></status>
</kw>
<msg timestamp="20161207 14:51:03.119" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:51:03.119" starttime="20161207 14:51:02.480"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:51:03.120" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:51:03.120" starttime="20161207 14:51:03.119"></status>
</kw>
<status status="FAIL" endtime="20161207 14:51:03.120" starttime="20161207 14:51:02.480"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:51:13.125" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:51:13.125" starttime="20161207 14:51:13.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:51:13.126" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:51:13.126" starttime="20161207 14:51:13.125"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:51:13.128" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:51:13.128" starttime="20161207 14:51:13.127"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:51:13.130" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:51:13.130" starttime="20161207 14:51:13.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:51:13.131" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:51:13.131" starttime="20161207 14:51:13.130"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:51:13.131" starttime="20161207 14:51:13.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:51:13.136" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:51:13.136" starttime="20161207 14:51:13.135"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:51:13.137" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:51:13.137" starttime="20161207 14:51:13.137"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:13.137" starttime="20161207 14:51:13.136"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:13.137" starttime="20161207 14:51:13.135"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:13.137" starttime="20161207 14:51:13.132"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:51:13.138" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:51:13.139" starttime="20161207 14:51:13.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:51:13.139" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:51:13.139" starttime="20161207 14:51:13.139"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:51:13.140" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:51:13.140" starttime="20161207 14:51:13.139"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:51:13.140" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:51:13.140" starttime="20161207 14:51:13.140"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:51:13.502" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:51:13.502" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:13.502" starttime="20161207 14:51:13.140"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:51:13.503" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:51:13.503" starttime="20161207 14:51:13.503"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:13.504" starttime="20161207 14:51:13.137"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:51:13.801" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:51:13.801" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:13.801" starttime="20161207 14:51:13.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:51:13.808" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:51:13.808" starttime="20161207 14:51:13.807"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:51:13.809" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:51:13.809" starttime="20161207 14:51:13.809"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:13.809" starttime="20161207 14:51:13.808"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:13.810" starttime="20161207 14:51:13.806"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:13.810" starttime="20161207 14:51:13.802"></status>
</kw>
<msg timestamp="20161207 14:51:13.810" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:13.810" starttime="20161207 14:51:13.128"></status>
</kw>
<msg timestamp="20161207 14:51:13.811" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:13.811" starttime="20161207 14:51:13.126"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:51:13.812" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:51:13.812" starttime="20161207 14:51:13.811"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:51:13.813" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:51:13.813" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:51:13.813" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:51:13.813" starttime="20161207 14:51:13.812"></status>
</kw>
<msg timestamp="20161207 14:51:13.813" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:51:13.813" starttime="20161207 14:51:13.121"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:51:13.814" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:51:13.814" starttime="20161207 14:51:13.813"></status>
</kw>
<status status="FAIL" endtime="20161207 14:51:13.814" starttime="20161207 14:51:13.120"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:51:23.816" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:51:23.816" starttime="20161207 14:51:23.816"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:51:23.817" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:51:23.817" starttime="20161207 14:51:23.817"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:51:23.819" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:51:23.819" starttime="20161207 14:51:23.819"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:51:23.821" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:51:23.821" starttime="20161207 14:51:23.821"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:51:23.822" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:51:23.822" starttime="20161207 14:51:23.822"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:51:23.823" starttime="20161207 14:51:23.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:51:23.831" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:51:23.831" starttime="20161207 14:51:23.829"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:51:23.832" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:51:23.832" starttime="20161207 14:51:23.832"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:23.832" starttime="20161207 14:51:23.831"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:23.833" starttime="20161207 14:51:23.828"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:23.833" starttime="20161207 14:51:23.824"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:51:23.834" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:51:23.835" starttime="20161207 14:51:23.834"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:51:23.836" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:51:23.836" starttime="20161207 14:51:23.835"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:51:23.836" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:51:23.836" starttime="20161207 14:51:23.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:51:23.837" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:51:23.837" starttime="20161207 14:51:23.837"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:51:24.176" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:51:24.176" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:24.176" starttime="20161207 14:51:23.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:51:24.177" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:51:24.177" starttime="20161207 14:51:24.177"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:24.177" starttime="20161207 14:51:23.833"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:51:24.453" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:51:24.453" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:24.453" starttime="20161207 14:51:24.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:51:24.460" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:51:24.460" starttime="20161207 14:51:24.459"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:51:24.461" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:51:24.461" starttime="20161207 14:51:24.461"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:24.461" starttime="20161207 14:51:24.460"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:24.461" starttime="20161207 14:51:24.458"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:24.462" starttime="20161207 14:51:24.454"></status>
</kw>
<msg timestamp="20161207 14:51:24.462" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:24.462" starttime="20161207 14:51:23.820"></status>
</kw>
<msg timestamp="20161207 14:51:24.463" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:24.463" starttime="20161207 14:51:23.818"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:51:24.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:51:24.464" starttime="20161207 14:51:24.463"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:51:24.465" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:51:24.465" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:51:24.465" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:51:24.465" starttime="20161207 14:51:24.464"></status>
</kw>
<msg timestamp="20161207 14:51:24.466" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:51:24.466" starttime="20161207 14:51:23.815"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:51:24.467" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:51:24.467" starttime="20161207 14:51:24.466"></status>
</kw>
<status status="FAIL" endtime="20161207 14:51:24.467" starttime="20161207 14:51:23.814"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:51:34.469" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:51:34.470" starttime="20161207 14:51:34.469"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:51:34.471" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:51:34.471" starttime="20161207 14:51:34.470"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:51:34.473" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:51:34.473" starttime="20161207 14:51:34.472"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:51:34.475" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:51:34.475" starttime="20161207 14:51:34.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:51:34.476" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:51:34.476" starttime="20161207 14:51:34.476"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:51:34.477" starttime="20161207 14:51:34.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:51:34.484" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:51:34.484" starttime="20161207 14:51:34.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:51:34.486" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:51:34.486" starttime="20161207 14:51:34.485"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:34.486" starttime="20161207 14:51:34.485"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:34.486" starttime="20161207 14:51:34.483"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:34.486" starttime="20161207 14:51:34.477"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:51:34.487" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:51:34.487" starttime="20161207 14:51:34.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:51:34.488" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:51:34.488" starttime="20161207 14:51:34.488"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:51:34.488" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:51:34.488" starttime="20161207 14:51:34.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:51:34.489" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:51:34.489" starttime="20161207 14:51:34.489"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:51:34.820" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:51:34.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:34.820" starttime="20161207 14:51:34.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:51:34.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:51:34.821" starttime="20161207 14:51:34.820"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:34.821" starttime="20161207 14:51:34.486"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:51:35.200" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:51:35.200" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:35.200" starttime="20161207 14:51:34.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:51:35.205" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:51:35.205" starttime="20161207 14:51:35.204"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:51:35.206" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:51:35.206" starttime="20161207 14:51:35.206"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:35.206" starttime="20161207 14:51:35.205"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:35.207" starttime="20161207 14:51:35.203"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:35.207" starttime="20161207 14:51:35.200"></status>
</kw>
<msg timestamp="20161207 14:51:35.207" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:35.207" starttime="20161207 14:51:34.473"></status>
</kw>
<msg timestamp="20161207 14:51:35.208" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:35.208" starttime="20161207 14:51:34.471"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:51:35.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:51:35.209" starttime="20161207 14:51:35.208"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:51:35.210" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:51:35.210" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:51:35.210" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:51:35.210" starttime="20161207 14:51:35.209"></status>
</kw>
<msg timestamp="20161207 14:51:35.210" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:51:35.210" starttime="20161207 14:51:34.468"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:51:35.211" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:51:35.211" starttime="20161207 14:51:35.211"></status>
</kw>
<status status="FAIL" endtime="20161207 14:51:35.212" starttime="20161207 14:51:34.467"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:51:45.214" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:51:45.214" starttime="20161207 14:51:45.214"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:51:45.215" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:51:45.215" starttime="20161207 14:51:45.215"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:51:45.217" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:51:45.217" starttime="20161207 14:51:45.217"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:51:45.220" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:51:45.220" starttime="20161207 14:51:45.219"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:51:45.221" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:51:45.221" starttime="20161207 14:51:45.220"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:51:45.221" starttime="20161207 14:51:45.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:51:45.226" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:51:45.226" starttime="20161207 14:51:45.226"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:51:45.227" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:51:45.227" starttime="20161207 14:51:45.227"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:45.227" starttime="20161207 14:51:45.227"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:45.228" starttime="20161207 14:51:45.225"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:45.228" starttime="20161207 14:51:45.222"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:51:45.228" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:51:45.229" starttime="20161207 14:51:45.228"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:51:45.229" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:51:45.229" starttime="20161207 14:51:45.229"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:51:45.230" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:51:45.230" starttime="20161207 14:51:45.230"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:51:45.230" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:51:45.231" starttime="20161207 14:51:45.230"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:51:45.715" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:51:45.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:45.715" starttime="20161207 14:51:45.231"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:51:45.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:51:45.716" starttime="20161207 14:51:45.715"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:45.716" starttime="20161207 14:51:45.228"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:51:46.018" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:51:46.019" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:46.019" starttime="20161207 14:51:45.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:51:46.022" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:51:46.022" starttime="20161207 14:51:46.022"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:51:46.023" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:51:46.023" starttime="20161207 14:51:46.023"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:46.024" starttime="20161207 14:51:46.023"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:46.024" starttime="20161207 14:51:46.022"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:46.024" starttime="20161207 14:51:46.019"></status>
</kw>
<msg timestamp="20161207 14:51:46.024" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:46.024" starttime="20161207 14:51:45.217"></status>
</kw>
<msg timestamp="20161207 14:51:46.024" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:46.024" starttime="20161207 14:51:45.216"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:51:46.025" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:51:46.025" starttime="20161207 14:51:46.025"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:51:46.026" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:51:46.026" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:51:46.026" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:51:46.026" starttime="20161207 14:51:46.025"></status>
</kw>
<msg timestamp="20161207 14:51:46.026" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:51:46.026" starttime="20161207 14:51:45.213"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:51:46.026" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:51:46.027" starttime="20161207 14:51:46.026"></status>
</kw>
<status status="FAIL" endtime="20161207 14:51:46.027" starttime="20161207 14:51:45.212"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:51:56.030" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:51:56.030" starttime="20161207 14:51:56.029"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:51:56.031" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:51:56.031" starttime="20161207 14:51:56.030"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:51:56.032" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:51:56.033" starttime="20161207 14:51:56.032"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:51:56.035" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:51:56.035" starttime="20161207 14:51:56.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:51:56.036" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:51:56.036" starttime="20161207 14:51:56.035"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:51:56.036" starttime="20161207 14:51:56.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:51:56.043" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:51:56.043" starttime="20161207 14:51:56.042"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:51:56.044" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:51:56.044" starttime="20161207 14:51:56.044"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:56.044" starttime="20161207 14:51:56.043"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:56.044" starttime="20161207 14:51:56.041"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:56.045" starttime="20161207 14:51:56.037"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:51:56.045" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:51:56.046" starttime="20161207 14:51:56.045"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:51:56.046" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:51:56.046" starttime="20161207 14:51:56.046"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:51:56.047" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:51:56.047" starttime="20161207 14:51:56.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:51:56.047" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:51:56.047" starttime="20161207 14:51:56.047"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:51:56.413" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:51:56.413" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:56.413" starttime="20161207 14:51:56.047"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:51:56.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:51:56.414" starttime="20161207 14:51:56.413"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:56.414" starttime="20161207 14:51:56.045"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:51:56.711" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:51:56.711" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:56.711" starttime="20161207 14:51:56.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:51:56.718" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:51:56.718" starttime="20161207 14:51:56.717"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:51:56.720" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:51:56.720" starttime="20161207 14:51:56.719"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:56.720" starttime="20161207 14:51:56.718"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:56.721" starttime="20161207 14:51:56.716"></status>
</kw>
<status status="PASS" endtime="20161207 14:51:56.721" starttime="20161207 14:51:56.712"></status>
</kw>
<msg timestamp="20161207 14:51:56.721" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:56.721" starttime="20161207 14:51:56.033"></status>
</kw>
<msg timestamp="20161207 14:51:56.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:51:56.722" starttime="20161207 14:51:56.031"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:51:56.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:51:56.723" starttime="20161207 14:51:56.722"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:51:56.724" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:51:56.724" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:51:56.724" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:51:56.724" starttime="20161207 14:51:56.723"></status>
</kw>
<msg timestamp="20161207 14:51:56.724" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:51:56.724" starttime="20161207 14:51:56.028"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:51:56.725" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:51:56.725" starttime="20161207 14:51:56.724"></status>
</kw>
<status status="FAIL" endtime="20161207 14:51:56.725" starttime="20161207 14:51:56.027"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:52:06.728" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:52:06.728" starttime="20161207 14:52:06.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:52:06.729" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:52:06.729" starttime="20161207 14:52:06.728"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:52:06.731" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:52:06.731" starttime="20161207 14:52:06.730"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:52:06.733" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:52:06.734" starttime="20161207 14:52:06.733"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:52:06.735" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:52:06.735" starttime="20161207 14:52:06.734"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:52:06.736" starttime="20161207 14:52:06.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:52:06.744" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:52:06.744" starttime="20161207 14:52:06.742"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:52:06.744" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:52:06.745" starttime="20161207 14:52:06.744"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:06.745" starttime="20161207 14:52:06.744"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:06.745" starttime="20161207 14:52:06.741"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:06.745" starttime="20161207 14:52:06.736"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:52:06.746" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:52:06.746" starttime="20161207 14:52:06.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:52:06.747" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:52:06.747" starttime="20161207 14:52:06.747"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:52:06.747" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:52:06.747" starttime="20161207 14:52:06.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:52:06.748" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:52:06.748" starttime="20161207 14:52:06.748"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:52:07.106" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:52:07.106" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:07.106" starttime="20161207 14:52:06.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:52:07.107" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:52:07.107" starttime="20161207 14:52:07.107"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:07.107" starttime="20161207 14:52:06.745"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:52:07.385" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:52:07.386" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:07.386" starttime="20161207 14:52:07.108"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:52:07.389" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:52:07.389" starttime="20161207 14:52:07.389"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:52:07.390" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:52:07.390" starttime="20161207 14:52:07.390"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:07.390" starttime="20161207 14:52:07.390"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:07.390" starttime="20161207 14:52:07.389"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:07.391" starttime="20161207 14:52:07.386"></status>
</kw>
<msg timestamp="20161207 14:52:07.391" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:07.391" starttime="20161207 14:52:06.731"></status>
</kw>
<msg timestamp="20161207 14:52:07.391" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:07.391" starttime="20161207 14:52:06.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:52:07.392" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:52:07.392" starttime="20161207 14:52:07.391"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:52:07.392" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:52:07.392" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:52:07.392" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:52:07.392" starttime="20161207 14:52:07.392"></status>
</kw>
<msg timestamp="20161207 14:52:07.393" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:52:07.393" starttime="20161207 14:52:06.726"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:52:07.393" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:52:07.393" starttime="20161207 14:52:07.393"></status>
</kw>
<status status="FAIL" endtime="20161207 14:52:07.394" starttime="20161207 14:52:06.725"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:52:17.397" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:52:17.397" starttime="20161207 14:52:17.396"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:52:17.398" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:52:17.398" starttime="20161207 14:52:17.397"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:52:17.400" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:52:17.400" starttime="20161207 14:52:17.399"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:52:17.402" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:52:17.402" starttime="20161207 14:52:17.401"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:52:17.403" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:52:17.403" starttime="20161207 14:52:17.402"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:52:17.404" starttime="20161207 14:52:17.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:52:17.411" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:52:17.411" starttime="20161207 14:52:17.410"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:52:17.412" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:52:17.412" starttime="20161207 14:52:17.412"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:17.413" starttime="20161207 14:52:17.411"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:17.413" starttime="20161207 14:52:17.409"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:17.413" starttime="20161207 14:52:17.404"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:52:17.415" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:52:17.416" starttime="20161207 14:52:17.415"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:52:17.416" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:52:17.416" starttime="20161207 14:52:17.416"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:52:17.417" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:52:17.417" starttime="20161207 14:52:17.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:52:17.417" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:52:17.417" starttime="20161207 14:52:17.417"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:52:17.841" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:52:17.841" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:17.841" starttime="20161207 14:52:17.417"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:52:17.842" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:52:17.842" starttime="20161207 14:52:17.841"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:17.842" starttime="20161207 14:52:17.414"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:52:18.186" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:52:18.186" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:18.186" starttime="20161207 14:52:17.842"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:52:18.190" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:52:18.190" starttime="20161207 14:52:18.189"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:52:18.190" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:52:18.191" starttime="20161207 14:52:18.190"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:18.191" starttime="20161207 14:52:18.190"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:18.191" starttime="20161207 14:52:18.189"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:18.191" starttime="20161207 14:52:18.186"></status>
</kw>
<msg timestamp="20161207 14:52:18.191" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:18.191" starttime="20161207 14:52:17.400"></status>
</kw>
<msg timestamp="20161207 14:52:18.191" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:18.191" starttime="20161207 14:52:17.398"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:52:18.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:52:18.192" starttime="20161207 14:52:18.191"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:52:18.193" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:52:18.193" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:52:18.193" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:52:18.193" starttime="20161207 14:52:18.193"></status>
</kw>
<msg timestamp="20161207 14:52:18.193" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:52:18.193" starttime="20161207 14:52:17.395"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:52:18.194" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:52:18.194" starttime="20161207 14:52:18.194"></status>
</kw>
<status status="FAIL" endtime="20161207 14:52:18.195" starttime="20161207 14:52:17.394"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:52:28.197" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:52:28.198" starttime="20161207 14:52:28.197"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:52:28.198" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:52:28.199" starttime="20161207 14:52:28.198"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:52:28.200" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:52:28.200" starttime="20161207 14:52:28.200"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:52:28.202" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:52:28.203" starttime="20161207 14:52:28.202"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:52:28.203" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:52:28.204" starttime="20161207 14:52:28.203"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:52:28.204" starttime="20161207 14:52:28.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:52:28.212" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:52:28.212" starttime="20161207 14:52:28.210"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:52:28.213" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:52:28.213" starttime="20161207 14:52:28.213"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:28.214" starttime="20161207 14:52:28.212"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:28.214" starttime="20161207 14:52:28.209"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:28.214" starttime="20161207 14:52:28.205"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:52:28.215" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:52:28.215" starttime="20161207 14:52:28.214"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:52:28.216" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:52:28.216" starttime="20161207 14:52:28.215"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:52:28.216" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:52:28.217" starttime="20161207 14:52:28.216"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:52:28.217" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:52:28.217" starttime="20161207 14:52:28.217"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:52:28.551" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:52:28.551" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:28.552" starttime="20161207 14:52:28.217"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:52:28.552" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:52:28.552" starttime="20161207 14:52:28.552"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:28.552" starttime="20161207 14:52:28.214"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:52:28.862" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:52:28.863" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:28.863" starttime="20161207 14:52:28.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:52:28.866" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:52:28.866" starttime="20161207 14:52:28.866"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:52:28.867" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:52:28.868" starttime="20161207 14:52:28.867"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:28.868" starttime="20161207 14:52:28.867"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:28.868" starttime="20161207 14:52:28.866"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:28.868" starttime="20161207 14:52:28.863"></status>
</kw>
<msg timestamp="20161207 14:52:28.868" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:28.868" starttime="20161207 14:52:28.201"></status>
</kw>
<msg timestamp="20161207 14:52:28.868" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:28.868" starttime="20161207 14:52:28.199"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:52:28.869" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:52:28.869" starttime="20161207 14:52:28.869"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:52:28.869" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:52:28.870" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:52:28.870" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:52:28.870" starttime="20161207 14:52:28.869"></status>
</kw>
<msg timestamp="20161207 14:52:28.870" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:52:28.870" starttime="20161207 14:52:28.196"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:52:28.870" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:52:28.871" starttime="20161207 14:52:28.870"></status>
</kw>
<status status="FAIL" endtime="20161207 14:52:28.871" starttime="20161207 14:52:28.195"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:52:38.876" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:52:38.876" starttime="20161207 14:52:38.873"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:52:38.877" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:52:38.877" starttime="20161207 14:52:38.877"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:52:38.878" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:52:38.878" starttime="20161207 14:52:38.878"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:52:38.879" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:52:38.880" starttime="20161207 14:52:38.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:52:38.880" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:52:38.880" starttime="20161207 14:52:38.880"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:52:38.881" starttime="20161207 14:52:38.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:52:38.886" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:52:38.886" starttime="20161207 14:52:38.885"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:52:38.887" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:52:38.888" starttime="20161207 14:52:38.887"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:38.888" starttime="20161207 14:52:38.886"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:38.888" starttime="20161207 14:52:38.885"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:38.888" starttime="20161207 14:52:38.881"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:52:38.889" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:52:38.890" starttime="20161207 14:52:38.889"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:52:38.890" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:52:38.890" starttime="20161207 14:52:38.890"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:52:38.891" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:52:38.891" starttime="20161207 14:52:38.890"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:52:38.891" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:52:38.891" starttime="20161207 14:52:38.891"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:52:39.243" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:52:39.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:39.244" starttime="20161207 14:52:38.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:52:39.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:52:39.245" starttime="20161207 14:52:39.244"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:39.245" starttime="20161207 14:52:38.888"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:52:39.519" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:52:39.519" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:39.519" starttime="20161207 14:52:39.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:52:39.526" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:52:39.526" starttime="20161207 14:52:39.525"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:52:39.527" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:52:39.530" starttime="20161207 14:52:39.527"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:39.530" starttime="20161207 14:52:39.526"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:39.530" starttime="20161207 14:52:39.524"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:39.530" starttime="20161207 14:52:39.520"></status>
</kw>
<msg timestamp="20161207 14:52:39.531" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:39.531" starttime="20161207 14:52:38.879"></status>
</kw>
<msg timestamp="20161207 14:52:39.531" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:39.531" starttime="20161207 14:52:38.877"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:52:39.532" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:52:39.532" starttime="20161207 14:52:39.532"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:52:39.533" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:52:39.533" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:52:39.533" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:52:39.533" starttime="20161207 14:52:39.533"></status>
</kw>
<msg timestamp="20161207 14:52:39.534" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:52:39.534" starttime="20161207 14:52:38.873"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:52:39.535" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:52:39.535" starttime="20161207 14:52:39.534"></status>
</kw>
<status status="FAIL" endtime="20161207 14:52:39.535" starttime="20161207 14:52:38.871"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:52:49.537" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:52:49.538" starttime="20161207 14:52:49.537"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:52:49.538" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:52:49.539" starttime="20161207 14:52:49.538"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:52:49.540" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:52:49.540" starttime="20161207 14:52:49.540"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:52:49.542" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:52:49.543" starttime="20161207 14:52:49.542"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:52:49.543" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:52:49.543" starttime="20161207 14:52:49.543"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:52:49.544" starttime="20161207 14:52:49.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:52:49.552" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:52:49.552" starttime="20161207 14:52:49.550"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:52:49.553" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:52:49.554" starttime="20161207 14:52:49.553"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:49.555" starttime="20161207 14:52:49.552"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:49.555" starttime="20161207 14:52:49.549"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:49.555" starttime="20161207 14:52:49.545"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:52:49.556" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:52:49.556" starttime="20161207 14:52:49.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:52:49.557" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:52:49.557" starttime="20161207 14:52:49.557"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:52:49.557" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:52:49.557" starttime="20161207 14:52:49.557"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:52:49.558" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:52:49.558" starttime="20161207 14:52:49.558"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:52:49.968" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:52:49.968" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:49.968" starttime="20161207 14:52:49.558"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:52:49.969" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:52:49.969" starttime="20161207 14:52:49.968"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:49.969" starttime="20161207 14:52:49.555"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:52:50.514" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:52:50.514" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:50.515" starttime="20161207 14:52:49.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:52:50.521" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:52:50.521" starttime="20161207 14:52:50.520"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:52:50.522" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:52:50.523" starttime="20161207 14:52:50.522"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:50.524" starttime="20161207 14:52:50.521"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:50.524" starttime="20161207 14:52:50.520"></status>
</kw>
<status status="PASS" endtime="20161207 14:52:50.524" starttime="20161207 14:52:50.515"></status>
</kw>
<msg timestamp="20161207 14:52:50.525" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:50.525" starttime="20161207 14:52:49.541"></status>
</kw>
<msg timestamp="20161207 14:52:50.525" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:52:50.525" starttime="20161207 14:52:49.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:52:50.525" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:52:50.526" starttime="20161207 14:52:50.525"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:52:50.526" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:52:50.526" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:52:50.526" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:52:50.526" starttime="20161207 14:52:50.526"></status>
</kw>
<msg timestamp="20161207 14:52:50.526" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:52:50.526" starttime="20161207 14:52:49.536"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:52:50.527" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:52:50.527" starttime="20161207 14:52:50.527"></status>
</kw>
<status status="FAIL" endtime="20161207 14:52:50.527" starttime="20161207 14:52:49.535"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:53:00.530" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:53:00.530" starttime="20161207 14:53:00.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:53:00.532" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:53:00.532" starttime="20161207 14:53:00.530"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:53:00.534" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:53:00.534" starttime="20161207 14:53:00.533"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:53:00.536" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:53:00.536" starttime="20161207 14:53:00.535"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:53:00.536" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:53:00.536" starttime="20161207 14:53:00.536"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:53:00.537" starttime="20161207 14:53:00.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:53:00.543" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:53:00.544" starttime="20161207 14:53:00.543"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:53:00.545" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:53:00.545" starttime="20161207 14:53:00.544"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:00.545" starttime="20161207 14:53:00.544"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:00.545" starttime="20161207 14:53:00.542"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:00.545" starttime="20161207 14:53:00.537"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:53:00.546" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:53:00.546" starttime="20161207 14:53:00.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:53:00.547" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:53:00.547" starttime="20161207 14:53:00.547"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:53:00.547" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:53:00.548" starttime="20161207 14:53:00.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:53:00.548" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:53:00.548" starttime="20161207 14:53:00.548"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:53:00.942" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:53:00.942" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:00.942" starttime="20161207 14:53:00.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:53:00.943" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:53:00.943" starttime="20161207 14:53:00.943"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:00.943" starttime="20161207 14:53:00.545"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:53:01.285" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:53:01.285" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:01.285" starttime="20161207 14:53:00.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:53:01.289" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:53:01.289" starttime="20161207 14:53:01.288"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:53:01.290" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:53:01.290" starttime="20161207 14:53:01.289"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:01.290" starttime="20161207 14:53:01.289"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:01.290" starttime="20161207 14:53:01.288"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:01.290" starttime="20161207 14:53:01.285"></status>
</kw>
<msg timestamp="20161207 14:53:01.290" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:01.291" starttime="20161207 14:53:00.534"></status>
</kw>
<msg timestamp="20161207 14:53:01.291" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:01.291" starttime="20161207 14:53:00.532"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:53:01.291" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:53:01.292" starttime="20161207 14:53:01.291"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:53:01.292" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:53:01.292" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:53:01.292" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:53:01.292" starttime="20161207 14:53:01.292"></status>
</kw>
<msg timestamp="20161207 14:53:01.292" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:53:01.292" starttime="20161207 14:53:00.529"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:53:01.293" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:53:01.293" starttime="20161207 14:53:01.293"></status>
</kw>
<status status="FAIL" endtime="20161207 14:53:01.293" starttime="20161207 14:53:00.528"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:53:11.296" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:53:11.296" starttime="20161207 14:53:11.296"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:53:11.297" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:53:11.297" starttime="20161207 14:53:11.297"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:53:11.299" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:53:11.299" starttime="20161207 14:53:11.299"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:53:11.301" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:53:11.301" starttime="20161207 14:53:11.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:53:11.302" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:53:11.302" starttime="20161207 14:53:11.302"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:53:11.303" starttime="20161207 14:53:11.303"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:53:11.308" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:53:11.308" starttime="20161207 14:53:11.307"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:53:11.309" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:53:11.309" starttime="20161207 14:53:11.309"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:11.309" starttime="20161207 14:53:11.308"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:11.309" starttime="20161207 14:53:11.307"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:11.309" starttime="20161207 14:53:11.304"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:53:11.310" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:53:11.311" starttime="20161207 14:53:11.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:53:11.311" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:53:11.311" starttime="20161207 14:53:11.311"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:53:11.312" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:53:11.312" starttime="20161207 14:53:11.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:53:11.312" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:53:11.312" starttime="20161207 14:53:11.312"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:53:11.708" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:53:11.708" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:11.708" starttime="20161207 14:53:11.313"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:53:11.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:53:11.709" starttime="20161207 14:53:11.708"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:11.709" starttime="20161207 14:53:11.309"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:53:11.985" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:53:11.985" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:11.985" starttime="20161207 14:53:11.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:53:11.989" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:53:11.989" starttime="20161207 14:53:11.988"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:53:11.989" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:53:11.990" starttime="20161207 14:53:11.989"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:11.990" starttime="20161207 14:53:11.989"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:11.990" starttime="20161207 14:53:11.988"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:11.990" starttime="20161207 14:53:11.985"></status>
</kw>
<msg timestamp="20161207 14:53:11.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:11.990" starttime="20161207 14:53:11.300"></status>
</kw>
<msg timestamp="20161207 14:53:11.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:11.991" starttime="20161207 14:53:11.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:53:11.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:53:11.991" starttime="20161207 14:53:11.991"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:53:11.992" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:53:11.992" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:53:11.992" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:53:11.992" starttime="20161207 14:53:11.991"></status>
</kw>
<msg timestamp="20161207 14:53:11.992" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:53:11.992" starttime="20161207 14:53:11.295"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:53:11.993" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:53:11.993" starttime="20161207 14:53:11.992"></status>
</kw>
<status status="FAIL" endtime="20161207 14:53:11.993" starttime="20161207 14:53:11.294"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:53:21.996" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:53:21.996" starttime="20161207 14:53:21.995"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:53:21.997" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:53:21.997" starttime="20161207 14:53:21.997"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:53:21.999" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:53:21.999" starttime="20161207 14:53:21.999"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:53:22.001" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:53:22.001" starttime="20161207 14:53:22.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:53:22.002" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:53:22.002" starttime="20161207 14:53:22.002"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:53:22.003" starttime="20161207 14:53:22.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:53:22.008" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:53:22.008" starttime="20161207 14:53:22.007"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:53:22.009" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:53:22.009" starttime="20161207 14:53:22.008"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:22.009" starttime="20161207 14:53:22.008"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:22.009" starttime="20161207 14:53:22.007"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:22.009" starttime="20161207 14:53:22.004"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:53:22.010" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:53:22.011" starttime="20161207 14:53:22.010"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:53:22.012" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:53:22.012" starttime="20161207 14:53:22.011"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:53:22.012" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:53:22.012" starttime="20161207 14:53:22.012"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:53:22.013" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:53:22.013" starttime="20161207 14:53:22.013"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:53:22.410" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:53:22.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:22.411" starttime="20161207 14:53:22.013"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:53:22.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:53:22.412" starttime="20161207 14:53:22.411"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:22.412" starttime="20161207 14:53:22.009"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:53:22.686" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:53:22.687" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:22.687" starttime="20161207 14:53:22.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:53:22.693" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:53:22.693" starttime="20161207 14:53:22.692"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:53:22.695" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:53:22.695" starttime="20161207 14:53:22.694"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:22.695" starttime="20161207 14:53:22.693"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:22.695" starttime="20161207 14:53:22.692"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:22.695" starttime="20161207 14:53:22.687"></status>
</kw>
<msg timestamp="20161207 14:53:22.696" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:22.697" starttime="20161207 14:53:21.999"></status>
</kw>
<msg timestamp="20161207 14:53:22.697" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:22.697" starttime="20161207 14:53:21.998"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:53:22.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:53:22.698" starttime="20161207 14:53:22.697"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:53:22.699" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:53:22.699" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:53:22.699" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:53:22.699" starttime="20161207 14:53:22.698"></status>
</kw>
<msg timestamp="20161207 14:53:22.700" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:53:22.700" starttime="20161207 14:53:21.995"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:53:22.701" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:53:22.701" starttime="20161207 14:53:22.700"></status>
</kw>
<status status="FAIL" endtime="20161207 14:53:22.701" starttime="20161207 14:53:21.993"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:53:32.703" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:53:32.704" starttime="20161207 14:53:32.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:53:32.705" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:53:32.705" starttime="20161207 14:53:32.704"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:53:32.707" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:53:32.707" starttime="20161207 14:53:32.706"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:53:32.709" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:53:32.709" starttime="20161207 14:53:32.708"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:53:32.710" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:53:32.710" starttime="20161207 14:53:32.709"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:53:32.710" starttime="20161207 14:53:32.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:53:32.716" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:53:32.717" starttime="20161207 14:53:32.716"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:53:32.717" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:53:32.717" starttime="20161207 14:53:32.717"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:32.718" starttime="20161207 14:53:32.717"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:32.718" starttime="20161207 14:53:32.715"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:32.718" starttime="20161207 14:53:32.711"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:53:32.718" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:53:32.719" starttime="20161207 14:53:32.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:53:32.720" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:53:32.720" starttime="20161207 14:53:32.719"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:53:32.720" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:53:32.720" starttime="20161207 14:53:32.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:53:32.721" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:53:32.721" starttime="20161207 14:53:32.721"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:53:33.058" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:53:33.058" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:33.058" starttime="20161207 14:53:32.721"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:53:33.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:53:33.059" starttime="20161207 14:53:33.058"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:33.059" starttime="20161207 14:53:32.718"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:53:33.335" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:53:33.335" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:33.335" starttime="20161207 14:53:33.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:53:33.342" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:53:33.342" starttime="20161207 14:53:33.341"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:53:33.343" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:53:33.343" starttime="20161207 14:53:33.343"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:33.343" starttime="20161207 14:53:33.342"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:33.343" starttime="20161207 14:53:33.340"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:33.344" starttime="20161207 14:53:33.336"></status>
</kw>
<msg timestamp="20161207 14:53:33.344" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:33.344" starttime="20161207 14:53:32.707"></status>
</kw>
<msg timestamp="20161207 14:53:33.345" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:33.345" starttime="20161207 14:53:32.705"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:53:33.345" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:53:33.345" starttime="20161207 14:53:33.345"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:53:33.346" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:53:33.346" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:53:33.346" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:53:33.346" starttime="20161207 14:53:33.346"></status>
</kw>
<msg timestamp="20161207 14:53:33.346" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:53:33.346" starttime="20161207 14:53:32.702"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:53:33.347" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:53:33.347" starttime="20161207 14:53:33.347"></status>
</kw>
<status status="FAIL" endtime="20161207 14:53:33.347" starttime="20161207 14:53:32.702"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:53:43.350" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:53:43.350" starttime="20161207 14:53:43.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:53:43.351" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:53:43.351" starttime="20161207 14:53:43.350"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:53:43.353" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:53:43.353" starttime="20161207 14:53:43.352"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:53:43.355" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:53:43.355" starttime="20161207 14:53:43.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:53:43.356" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:53:43.356" starttime="20161207 14:53:43.356"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:53:43.357" starttime="20161207 14:53:43.356"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:53:43.364" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:53:43.364" starttime="20161207 14:53:43.363"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:53:43.365" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:53:43.365" starttime="20161207 14:53:43.365"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:43.366" starttime="20161207 14:53:43.364"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:43.366" starttime="20161207 14:53:43.362"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:43.366" starttime="20161207 14:53:43.357"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:53:43.367" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:53:43.367" starttime="20161207 14:53:43.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:53:43.368" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:53:43.368" starttime="20161207 14:53:43.367"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:53:43.368" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:53:43.368" starttime="20161207 14:53:43.368"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:53:43.369" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:53:43.369" starttime="20161207 14:53:43.368"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:53:43.705" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:53:43.705" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:43.705" starttime="20161207 14:53:43.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:53:43.706" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:53:43.706" starttime="20161207 14:53:43.706"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:43.706" starttime="20161207 14:53:43.366"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:53:43.990" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:53:43.990" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:43.990" starttime="20161207 14:53:43.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:53:43.994" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:53:43.994" starttime="20161207 14:53:43.993"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:53:43.994" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:53:43.995" starttime="20161207 14:53:43.994"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:43.995" starttime="20161207 14:53:43.994"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:43.995" starttime="20161207 14:53:43.993"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:43.995" starttime="20161207 14:53:43.990"></status>
</kw>
<msg timestamp="20161207 14:53:43.995" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:43.995" starttime="20161207 14:53:43.353"></status>
</kw>
<msg timestamp="20161207 14:53:43.995" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:43.996" starttime="20161207 14:53:43.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:53:43.997" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:53:43.997" starttime="20161207 14:53:43.996"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:53:43.997" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:53:43.997" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:53:43.998" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:53:43.998" starttime="20161207 14:53:43.997"></status>
</kw>
<msg timestamp="20161207 14:53:43.998" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:53:43.998" starttime="20161207 14:53:43.348"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:53:43.998" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:53:43.999" starttime="20161207 14:53:43.998"></status>
</kw>
<status status="FAIL" endtime="20161207 14:53:43.999" starttime="20161207 14:53:43.348"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:53:54.002" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:53:54.002" starttime="20161207 14:53:54.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:53:54.003" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:53:54.003" starttime="20161207 14:53:54.002"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:53:54.005" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:53:54.005" starttime="20161207 14:53:54.004"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:53:54.007" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:53:54.007" starttime="20161207 14:53:54.006"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:53:54.008" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:53:54.008" starttime="20161207 14:53:54.007"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:53:54.008" starttime="20161207 14:53:54.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:53:54.016" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:53:54.016" starttime="20161207 14:53:54.015"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:53:54.017" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:53:54.017" starttime="20161207 14:53:54.016"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:54.017" starttime="20161207 14:53:54.016"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:54.017" starttime="20161207 14:53:54.014"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:54.017" starttime="20161207 14:53:54.009"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:53:54.018" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:53:54.019" starttime="20161207 14:53:54.017"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:53:54.020" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:53:54.020" starttime="20161207 14:53:54.019"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:53:54.020" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:53:54.020" starttime="20161207 14:53:54.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:53:54.021" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:53:54.021" starttime="20161207 14:53:54.020"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:53:54.403" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:53:54.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:54.403" starttime="20161207 14:53:54.021"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:53:54.404" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:53:54.404" starttime="20161207 14:53:54.403"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:54.404" starttime="20161207 14:53:54.017"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:53:54.681" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:53:54.681" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:54.682" starttime="20161207 14:53:54.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:53:54.688" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:53:54.688" starttime="20161207 14:53:54.687"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:53:54.690" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:53:54.690" starttime="20161207 14:53:54.689"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:54.690" starttime="20161207 14:53:54.688"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:54.690" starttime="20161207 14:53:54.687"></status>
</kw>
<status status="PASS" endtime="20161207 14:53:54.690" starttime="20161207 14:53:54.682"></status>
</kw>
<msg timestamp="20161207 14:53:54.691" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:54.691" starttime="20161207 14:53:54.005"></status>
</kw>
<msg timestamp="20161207 14:53:54.691" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:53:54.691" starttime="20161207 14:53:54.003"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:53:54.692" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:53:54.693" starttime="20161207 14:53:54.692"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:53:54.694" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:53:54.694" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:53:54.694" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:53:54.694" starttime="20161207 14:53:54.693"></status>
</kw>
<msg timestamp="20161207 14:53:54.695" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:53:54.695" starttime="20161207 14:53:54.000"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:53:54.696" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:53:54.696" starttime="20161207 14:53:54.695"></status>
</kw>
<status status="FAIL" endtime="20161207 14:53:54.696" starttime="20161207 14:53:53.999"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:54:04.701" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:54:04.701" starttime="20161207 14:54:04.698"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:54:04.702" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:54:04.702" starttime="20161207 14:54:04.701"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:54:04.704" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:54:04.704" starttime="20161207 14:54:04.703"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:54:04.706" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:54:04.706" starttime="20161207 14:54:04.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:54:04.707" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:54:04.707" starttime="20161207 14:54:04.706"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:54:04.708" starttime="20161207 14:54:04.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:54:04.716" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:54:04.716" starttime="20161207 14:54:04.716"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:54:04.717" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:54:04.718" starttime="20161207 14:54:04.717"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:04.718" starttime="20161207 14:54:04.717"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:04.718" starttime="20161207 14:54:04.714"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:04.718" starttime="20161207 14:54:04.708"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:54:04.719" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:54:04.719" starttime="20161207 14:54:04.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:54:04.720" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:54:04.720" starttime="20161207 14:54:04.719"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:54:04.720" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:54:04.720" starttime="20161207 14:54:04.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:54:04.721" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:54:04.721" starttime="20161207 14:54:04.720"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:54:05.055" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:54:05.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:05.056" starttime="20161207 14:54:04.721"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:54:05.056" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:54:05.056" starttime="20161207 14:54:05.056"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:05.056" starttime="20161207 14:54:04.718"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:54:05.338" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:54:05.338" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:05.338" starttime="20161207 14:54:05.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:54:05.342" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:54:05.342" starttime="20161207 14:54:05.341"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:54:05.342" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:54:05.342" starttime="20161207 14:54:05.342"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:05.343" starttime="20161207 14:54:05.342"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:05.343" starttime="20161207 14:54:05.341"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:05.343" starttime="20161207 14:54:05.338"></status>
</kw>
<msg timestamp="20161207 14:54:05.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:05.343" starttime="20161207 14:54:04.704"></status>
</kw>
<msg timestamp="20161207 14:54:05.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:05.343" starttime="20161207 14:54:04.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:54:05.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:54:05.344" starttime="20161207 14:54:05.344"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:54:05.345" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:54:05.345" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:54:05.345" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:54:05.345" starttime="20161207 14:54:05.344"></status>
</kw>
<msg timestamp="20161207 14:54:05.345" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:54:05.345" starttime="20161207 14:54:04.697"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:54:05.346" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:54:05.346" starttime="20161207 14:54:05.345"></status>
</kw>
<status status="FAIL" endtime="20161207 14:54:05.346" starttime="20161207 14:54:04.697"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:54:15.349" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:54:15.349" starttime="20161207 14:54:15.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:54:15.350" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:54:15.350" starttime="20161207 14:54:15.349"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:54:15.352" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:54:15.352" starttime="20161207 14:54:15.351"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:54:15.354" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:54:15.354" starttime="20161207 14:54:15.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:54:15.355" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:54:15.355" starttime="20161207 14:54:15.354"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:54:15.356" starttime="20161207 14:54:15.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:54:15.363" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:54:15.364" starttime="20161207 14:54:15.362"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:54:15.365" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:54:15.365" starttime="20161207 14:54:15.364"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:15.365" starttime="20161207 14:54:15.364"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:15.365" starttime="20161207 14:54:15.361"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:15.365" starttime="20161207 14:54:15.356"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:54:15.366" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:54:15.367" starttime="20161207 14:54:15.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:54:15.368" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:54:15.368" starttime="20161207 14:54:15.368"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:54:15.370" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:54:15.370" starttime="20161207 14:54:15.369"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:54:15.371" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:54:15.371" starttime="20161207 14:54:15.370"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:54:15.819" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:54:15.819" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:15.819" starttime="20161207 14:54:15.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:54:15.820" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:54:15.820" starttime="20161207 14:54:15.819"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:15.820" starttime="20161207 14:54:15.366"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:54:16.118" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:54:16.118" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:16.118" starttime="20161207 14:54:15.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:54:16.122" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:54:16.122" starttime="20161207 14:54:16.121"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:54:16.122" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:54:16.123" starttime="20161207 14:54:16.122"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:16.123" starttime="20161207 14:54:16.122"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:16.123" starttime="20161207 14:54:16.121"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:16.123" starttime="20161207 14:54:16.118"></status>
</kw>
<msg timestamp="20161207 14:54:16.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:16.123" starttime="20161207 14:54:15.352"></status>
</kw>
<msg timestamp="20161207 14:54:16.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:16.123" starttime="20161207 14:54:15.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:54:16.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:54:16.124" starttime="20161207 14:54:16.124"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:54:16.125" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:54:16.125" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:54:16.125" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:54:16.125" starttime="20161207 14:54:16.124"></status>
</kw>
<msg timestamp="20161207 14:54:16.125" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:54:16.125" starttime="20161207 14:54:15.348"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:54:16.126" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:54:16.126" starttime="20161207 14:54:16.125"></status>
</kw>
<status status="FAIL" endtime="20161207 14:54:16.126" starttime="20161207 14:54:15.347"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:54:26.128" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:54:26.129" starttime="20161207 14:54:26.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:54:26.130" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:54:26.130" starttime="20161207 14:54:26.129"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:54:26.132" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:54:26.132" starttime="20161207 14:54:26.132"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:54:26.134" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:54:26.134" starttime="20161207 14:54:26.134"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:54:26.135" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:54:26.135" starttime="20161207 14:54:26.135"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:54:26.136" starttime="20161207 14:54:26.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:54:26.143" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:54:26.143" starttime="20161207 14:54:26.142"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:54:26.145" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:54:26.145" starttime="20161207 14:54:26.144"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:26.145" starttime="20161207 14:54:26.143"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:26.145" starttime="20161207 14:54:26.141"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:26.145" starttime="20161207 14:54:26.137"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:54:26.146" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:54:26.147" starttime="20161207 14:54:26.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:54:26.147" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:54:26.147" starttime="20161207 14:54:26.147"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:54:26.148" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:54:26.148" starttime="20161207 14:54:26.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:54:26.149" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:54:26.149" starttime="20161207 14:54:26.148"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:54:26.576" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:54:26.576" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:26.576" starttime="20161207 14:54:26.149"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:54:26.577" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:54:26.577" starttime="20161207 14:54:26.577"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:26.578" starttime="20161207 14:54:26.145"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:54:26.923" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:54:26.923" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:26.923" starttime="20161207 14:54:26.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:54:26.930" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:54:26.930" starttime="20161207 14:54:26.929"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:54:26.931" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:54:26.931" starttime="20161207 14:54:26.931"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:26.931" starttime="20161207 14:54:26.930"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:26.931" starttime="20161207 14:54:26.928"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:26.932" starttime="20161207 14:54:26.923"></status>
</kw>
<msg timestamp="20161207 14:54:26.932" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:26.932" starttime="20161207 14:54:26.133"></status>
</kw>
<msg timestamp="20161207 14:54:26.933" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:26.933" starttime="20161207 14:54:26.131"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:54:26.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:54:26.934" starttime="20161207 14:54:26.933"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:54:26.935" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:54:26.935" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:54:26.935" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:54:26.935" starttime="20161207 14:54:26.934"></status>
</kw>
<msg timestamp="20161207 14:54:26.936" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:54:26.936" starttime="20161207 14:54:26.127"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:54:26.936" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:54:26.936" starttime="20161207 14:54:26.936"></status>
</kw>
<status status="FAIL" endtime="20161207 14:54:26.936" starttime="20161207 14:54:26.126"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:54:36.939" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:54:36.939" starttime="20161207 14:54:36.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:54:36.940" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:54:36.940" starttime="20161207 14:54:36.940"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:54:36.942" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:54:36.942" starttime="20161207 14:54:36.942"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:54:36.944" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:54:36.944" starttime="20161207 14:54:36.944"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:54:36.945" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:54:36.945" starttime="20161207 14:54:36.945"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:54:36.946" starttime="20161207 14:54:36.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:54:36.953" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:54:36.954" starttime="20161207 14:54:36.952"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:54:36.955" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:54:36.955" starttime="20161207 14:54:36.954"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:36.955" starttime="20161207 14:54:36.954"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:36.955" starttime="20161207 14:54:36.951"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:36.956" starttime="20161207 14:54:36.947"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:54:36.957" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:54:36.957" starttime="20161207 14:54:36.956"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:54:36.958" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:54:36.958" starttime="20161207 14:54:36.957"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:54:36.958" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:54:36.958" starttime="20161207 14:54:36.958"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:54:36.959" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:54:36.959" starttime="20161207 14:54:36.958"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:54:37.305" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:54:37.305" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:37.305" starttime="20161207 14:54:36.959"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:54:37.306" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:54:37.307" starttime="20161207 14:54:37.306"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:37.307" starttime="20161207 14:54:36.956"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:54:37.602" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:54:37.603" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:37.603" starttime="20161207 14:54:37.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:54:37.610" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:54:37.610" starttime="20161207 14:54:37.609"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:54:37.611" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:54:37.612" starttime="20161207 14:54:37.611"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:37.612" starttime="20161207 14:54:37.610"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:37.612" starttime="20161207 14:54:37.609"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:37.612" starttime="20161207 14:54:37.603"></status>
</kw>
<msg timestamp="20161207 14:54:37.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:37.614" starttime="20161207 14:54:36.943"></status>
</kw>
<msg timestamp="20161207 14:54:37.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:37.614" starttime="20161207 14:54:36.941"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:54:37.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:54:37.615" starttime="20161207 14:54:37.615"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:54:37.616" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:54:37.616" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:54:37.616" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:54:37.616" starttime="20161207 14:54:37.616"></status>
</kw>
<msg timestamp="20161207 14:54:37.617" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:54:37.617" starttime="20161207 14:54:36.938"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:54:37.617" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:54:37.617" starttime="20161207 14:54:37.617"></status>
</kw>
<status status="FAIL" endtime="20161207 14:54:37.617" starttime="20161207 14:54:36.937"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:54:47.621" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:54:47.621" starttime="20161207 14:54:47.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:54:47.622" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:54:47.622" starttime="20161207 14:54:47.621"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:54:47.624" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:54:47.624" starttime="20161207 14:54:47.623"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:54:47.626" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:54:47.626" starttime="20161207 14:54:47.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:54:47.627" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:54:47.627" starttime="20161207 14:54:47.626"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:54:47.628" starttime="20161207 14:54:47.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:54:47.635" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:54:47.635" starttime="20161207 14:54:47.634"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:54:47.636" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:54:47.637" starttime="20161207 14:54:47.636"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:47.637" starttime="20161207 14:54:47.635"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:47.637" starttime="20161207 14:54:47.633"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:47.637" starttime="20161207 14:54:47.628"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:54:47.638" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:54:47.638" starttime="20161207 14:54:47.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:54:47.639" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:54:47.639" starttime="20161207 14:54:47.638"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:54:47.639" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:54:47.639" starttime="20161207 14:54:47.639"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:54:47.640" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:54:47.640" starttime="20161207 14:54:47.639"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:54:48.070" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:54:48.070" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:48.070" starttime="20161207 14:54:47.640"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:54:48.071" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:54:48.071" starttime="20161207 14:54:48.070"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:48.071" starttime="20161207 14:54:47.637"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:54:48.372" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:54:48.372" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:48.372" starttime="20161207 14:54:48.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:54:48.379" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:54:48.379" starttime="20161207 14:54:48.378"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:54:48.380" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:54:48.381" starttime="20161207 14:54:48.380"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:48.381" starttime="20161207 14:54:48.379"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:48.381" starttime="20161207 14:54:48.378"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:48.381" starttime="20161207 14:54:48.373"></status>
</kw>
<msg timestamp="20161207 14:54:48.381" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:48.382" starttime="20161207 14:54:47.624"></status>
</kw>
<msg timestamp="20161207 14:54:48.382" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:48.382" starttime="20161207 14:54:47.622"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:54:48.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:54:48.383" starttime="20161207 14:54:48.383"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:54:48.384" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:54:48.384" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:54:48.384" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:54:48.384" starttime="20161207 14:54:48.384"></status>
</kw>
<msg timestamp="20161207 14:54:48.385" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:54:48.385" starttime="20161207 14:54:47.619"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:54:48.386" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:54:48.386" starttime="20161207 14:54:48.385"></status>
</kw>
<status status="FAIL" endtime="20161207 14:54:48.386" starttime="20161207 14:54:47.618"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:54:58.389" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:54:58.389" starttime="20161207 14:54:58.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:54:58.390" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:54:58.390" starttime="20161207 14:54:58.389"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:54:58.392" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:54:58.392" starttime="20161207 14:54:58.391"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:54:58.394" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:54:58.394" starttime="20161207 14:54:58.393"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:54:58.395" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:54:58.395" starttime="20161207 14:54:58.394"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:54:58.396" starttime="20161207 14:54:58.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:54:58.403" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:54:58.403" starttime="20161207 14:54:58.402"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:54:58.405" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:54:58.405" starttime="20161207 14:54:58.404"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:58.405" starttime="20161207 14:54:58.404"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:58.405" starttime="20161207 14:54:58.401"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:58.405" starttime="20161207 14:54:58.396"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:54:58.407" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:54:58.407" starttime="20161207 14:54:58.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:54:58.408" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:54:58.408" starttime="20161207 14:54:58.408"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:54:58.408" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:54:58.408" starttime="20161207 14:54:58.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:54:58.409" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:54:58.409" starttime="20161207 14:54:58.409"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:54:58.883" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:54:58.883" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:58.883" starttime="20161207 14:54:58.409"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:54:58.884" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:54:58.884" starttime="20161207 14:54:58.883"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:58.884" starttime="20161207 14:54:58.406"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:54:59.161" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:54:59.161" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:59.161" starttime="20161207 14:54:58.884"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:54:59.165" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:54:59.165" starttime="20161207 14:54:59.164"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:54:59.165" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:54:59.166" starttime="20161207 14:54:59.165"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:59.166" starttime="20161207 14:54:59.165"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:59.166" starttime="20161207 14:54:59.164"></status>
</kw>
<status status="PASS" endtime="20161207 14:54:59.166" starttime="20161207 14:54:59.161"></status>
</kw>
<msg timestamp="20161207 14:54:59.167" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:59.167" starttime="20161207 14:54:58.392"></status>
</kw>
<msg timestamp="20161207 14:54:59.168" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:54:59.168" starttime="20161207 14:54:58.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:54:59.168" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:54:59.168" starttime="20161207 14:54:59.168"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:54:59.169" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:54:59.169" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:54:59.169" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:54:59.169" starttime="20161207 14:54:59.169"></status>
</kw>
<msg timestamp="20161207 14:54:59.169" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:54:59.169" starttime="20161207 14:54:58.388"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:54:59.170" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:54:59.170" starttime="20161207 14:54:59.169"></status>
</kw>
<status status="FAIL" endtime="20161207 14:54:59.170" starttime="20161207 14:54:58.387"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:55:09.174" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:55:09.174" starttime="20161207 14:55:09.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:55:09.175" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:55:09.175" starttime="20161207 14:55:09.174"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:55:09.177" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:55:09.177" starttime="20161207 14:55:09.176"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:55:09.179" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:55:09.179" starttime="20161207 14:55:09.179"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:55:09.180" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:55:09.180" starttime="20161207 14:55:09.180"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:55:09.181" starttime="20161207 14:55:09.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:55:09.187" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:55:09.187" starttime="20161207 14:55:09.187"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:55:09.188" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:55:09.188" starttime="20161207 14:55:09.188"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:09.188" starttime="20161207 14:55:09.187"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:09.188" starttime="20161207 14:55:09.186"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:09.188" starttime="20161207 14:55:09.181"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:55:09.189" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:55:09.190" starttime="20161207 14:55:09.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:55:09.191" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:55:09.191" starttime="20161207 14:55:09.190"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:55:09.191" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:55:09.191" starttime="20161207 14:55:09.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:55:09.192" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:55:09.192" starttime="20161207 14:55:09.191"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:55:09.526" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:55:09.526" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:09.526" starttime="20161207 14:55:09.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:55:09.527" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:55:09.527" starttime="20161207 14:55:09.526"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:09.527" starttime="20161207 14:55:09.189"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:55:09.829" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:55:09.830" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:09.830" starttime="20161207 14:55:09.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:55:09.836" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:55:09.836" starttime="20161207 14:55:09.835"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:55:09.837" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:55:09.837" starttime="20161207 14:55:09.837"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:09.837" starttime="20161207 14:55:09.836"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:09.837" starttime="20161207 14:55:09.835"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:09.838" starttime="20161207 14:55:09.830"></status>
</kw>
<msg timestamp="20161207 14:55:09.838" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:09.838" starttime="20161207 14:55:09.177"></status>
</kw>
<msg timestamp="20161207 14:55:09.838" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:09.838" starttime="20161207 14:55:09.175"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:55:09.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:55:09.839" starttime="20161207 14:55:09.839"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:55:09.840" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:55:09.840" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:55:09.840" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:55:09.840" starttime="20161207 14:55:09.839"></status>
</kw>
<msg timestamp="20161207 14:55:09.840" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:55:09.840" starttime="20161207 14:55:09.172"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:55:09.841" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:55:09.841" starttime="20161207 14:55:09.840"></status>
</kw>
<status status="FAIL" endtime="20161207 14:55:09.841" starttime="20161207 14:55:09.171"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:55:19.844" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:55:19.844" starttime="20161207 14:55:19.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:55:19.845" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:55:19.845" starttime="20161207 14:55:19.844"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:55:19.847" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:55:19.847" starttime="20161207 14:55:19.847"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:55:19.849" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:55:19.849" starttime="20161207 14:55:19.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:55:19.850" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:55:19.850" starttime="20161207 14:55:19.850"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:55:19.851" starttime="20161207 14:55:19.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:55:19.858" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:55:19.858" starttime="20161207 14:55:19.857"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:55:19.859" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:55:19.859" starttime="20161207 14:55:19.859"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:19.859" starttime="20161207 14:55:19.858"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:19.859" starttime="20161207 14:55:19.856"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:19.859" starttime="20161207 14:55:19.852"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:55:19.860" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:55:19.860" starttime="20161207 14:55:19.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:55:19.861" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:55:19.861" starttime="20161207 14:55:19.861"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:55:19.861" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:55:19.862" starttime="20161207 14:55:19.861"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:55:19.862" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:55:19.862" starttime="20161207 14:55:19.862"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:55:20.453" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:55:20.453" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:20.453" starttime="20161207 14:55:19.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:55:20.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:55:20.454" starttime="20161207 14:55:20.454"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:20.455" starttime="20161207 14:55:19.859"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:55:21.021" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:55:21.021" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:21.021" starttime="20161207 14:55:20.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:55:21.028" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:55:21.028" starttime="20161207 14:55:21.028"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:55:21.030" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:55:21.030" starttime="20161207 14:55:21.029"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:21.030" starttime="20161207 14:55:21.029"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:21.030" starttime="20161207 14:55:21.027"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:21.030" starttime="20161207 14:55:21.022"></status>
</kw>
<msg timestamp="20161207 14:55:21.030" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:21.030" starttime="20161207 14:55:19.847"></status>
</kw>
<msg timestamp="20161207 14:55:21.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:21.031" starttime="20161207 14:55:19.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:55:21.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:55:21.032" starttime="20161207 14:55:21.031"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:55:21.032" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:55:21.032" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:55:21.032" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:55:21.032" starttime="20161207 14:55:21.032"></status>
</kw>
<msg timestamp="20161207 14:55:21.033" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:55:21.033" starttime="20161207 14:55:19.843"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:55:21.033" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:55:21.033" starttime="20161207 14:55:21.033"></status>
</kw>
<status status="FAIL" endtime="20161207 14:55:21.034" starttime="20161207 14:55:19.842"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:55:31.039" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:55:31.039" starttime="20161207 14:55:31.036"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:55:31.040" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:55:31.040" starttime="20161207 14:55:31.039"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:55:31.042" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:55:31.042" starttime="20161207 14:55:31.041"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:55:31.044" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:55:31.044" starttime="20161207 14:55:31.043"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:55:31.045" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:55:31.045" starttime="20161207 14:55:31.044"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:55:31.046" starttime="20161207 14:55:31.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:55:31.052" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:55:31.052" starttime="20161207 14:55:31.051"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:55:31.053" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:55:31.053" starttime="20161207 14:55:31.053"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:31.053" starttime="20161207 14:55:31.052"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:31.053" starttime="20161207 14:55:31.050"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:31.053" starttime="20161207 14:55:31.047"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:55:31.054" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:55:31.055" starttime="20161207 14:55:31.054"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:55:31.055" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:55:31.055" starttime="20161207 14:55:31.055"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:55:31.056" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:55:31.056" starttime="20161207 14:55:31.055"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:55:31.056" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:55:31.056" starttime="20161207 14:55:31.056"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:55:31.395" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:55:31.395" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:31.395" starttime="20161207 14:55:31.057"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:55:31.396" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:55:31.396" starttime="20161207 14:55:31.396"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:31.397" starttime="20161207 14:55:31.053"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:55:31.721" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:55:31.721" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:31.721" starttime="20161207 14:55:31.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:55:31.726" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:55:31.726" starttime="20161207 14:55:31.726"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:55:31.728" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:55:31.728" starttime="20161207 14:55:31.727"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:31.728" starttime="20161207 14:55:31.727"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:31.728" starttime="20161207 14:55:31.725"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:31.729" starttime="20161207 14:55:31.721"></status>
</kw>
<msg timestamp="20161207 14:55:31.729" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:31.729" starttime="20161207 14:55:31.042"></status>
</kw>
<msg timestamp="20161207 14:55:31.730" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:31.730" starttime="20161207 14:55:31.040"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:55:31.731" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:55:31.731" starttime="20161207 14:55:31.730"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:55:31.731" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:55:31.732" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:55:31.732" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:55:31.732" starttime="20161207 14:55:31.731"></status>
</kw>
<msg timestamp="20161207 14:55:31.732" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:55:31.732" starttime="20161207 14:55:31.035"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:55:31.733" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:55:31.733" starttime="20161207 14:55:31.733"></status>
</kw>
<status status="FAIL" endtime="20161207 14:55:31.734" starttime="20161207 14:55:31.034"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:55:41.736" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:55:41.737" starttime="20161207 14:55:41.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:55:41.737" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:55:41.738" starttime="20161207 14:55:41.737"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:55:41.739" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:55:41.739" starttime="20161207 14:55:41.739"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:55:41.741" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:55:41.742" starttime="20161207 14:55:41.741"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:55:41.742" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:55:41.742" starttime="20161207 14:55:41.742"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:55:41.743" starttime="20161207 14:55:41.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:55:41.749" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:55:41.749" starttime="20161207 14:55:41.748"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:55:41.750" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:55:41.750" starttime="20161207 14:55:41.750"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:41.750" starttime="20161207 14:55:41.749"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:41.750" starttime="20161207 14:55:41.748"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:41.750" starttime="20161207 14:55:41.744"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:55:41.751" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:55:41.752" starttime="20161207 14:55:41.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:55:41.753" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:55:41.753" starttime="20161207 14:55:41.752"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:55:41.753" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:55:41.753" starttime="20161207 14:55:41.753"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:55:41.754" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:55:41.754" starttime="20161207 14:55:41.753"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:55:42.152" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:55:42.152" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:42.152" starttime="20161207 14:55:41.754"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:55:42.153" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:55:42.153" starttime="20161207 14:55:42.152"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:42.153" starttime="20161207 14:55:41.751"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:55:42.434" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:55:42.434" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:42.434" starttime="20161207 14:55:42.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:55:42.438" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:55:42.438" starttime="20161207 14:55:42.437"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:55:42.439" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:55:42.440" starttime="20161207 14:55:42.439"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:42.440" starttime="20161207 14:55:42.438"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:42.440" starttime="20161207 14:55:42.437"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:42.440" starttime="20161207 14:55:42.434"></status>
</kw>
<msg timestamp="20161207 14:55:42.441" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:42.441" starttime="20161207 14:55:41.740"></status>
</kw>
<msg timestamp="20161207 14:55:42.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:42.442" starttime="20161207 14:55:41.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:55:42.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:55:42.443" starttime="20161207 14:55:42.442"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:55:42.444" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:55:42.444" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:55:42.444" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:55:42.444" starttime="20161207 14:55:42.443"></status>
</kw>
<msg timestamp="20161207 14:55:42.445" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:55:42.445" starttime="20161207 14:55:41.735"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:55:42.445" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:55:42.446" starttime="20161207 14:55:42.445"></status>
</kw>
<status status="FAIL" endtime="20161207 14:55:42.446" starttime="20161207 14:55:41.734"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:55:52.448" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:55:52.449" starttime="20161207 14:55:52.448"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:55:52.450" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:55:52.450" starttime="20161207 14:55:52.449"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:55:52.452" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:55:52.452" starttime="20161207 14:55:52.451"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:55:52.454" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:55:52.454" starttime="20161207 14:55:52.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:55:52.455" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:55:52.455" starttime="20161207 14:55:52.455"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:55:52.456" starttime="20161207 14:55:52.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:55:52.460" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:55:52.460" starttime="20161207 14:55:52.460"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:55:52.461" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:55:52.461" starttime="20161207 14:55:52.461"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:52.461" starttime="20161207 14:55:52.461"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:52.461" starttime="20161207 14:55:52.459"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:52.461" starttime="20161207 14:55:52.456"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:55:52.462" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:55:52.463" starttime="20161207 14:55:52.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:55:52.463" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:55:52.463" starttime="20161207 14:55:52.463"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:55:52.464" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:55:52.464" starttime="20161207 14:55:52.464"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:55:52.465" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:55:52.465" starttime="20161207 14:55:52.464"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:55:52.802" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:55:52.802" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:52.802" starttime="20161207 14:55:52.465"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:55:52.803" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:55:52.803" starttime="20161207 14:55:52.803"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:52.803" starttime="20161207 14:55:52.462"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:55:53.078" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:55:53.078" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:53.078" starttime="20161207 14:55:52.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:55:53.082" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:55:53.082" starttime="20161207 14:55:53.082"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:55:53.083" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:55:53.083" starttime="20161207 14:55:53.083"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:53.083" starttime="20161207 14:55:53.082"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:53.083" starttime="20161207 14:55:53.081"></status>
</kw>
<status status="PASS" endtime="20161207 14:55:53.083" starttime="20161207 14:55:53.078"></status>
</kw>
<msg timestamp="20161207 14:55:53.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:53.083" starttime="20161207 14:55:52.452"></status>
</kw>
<msg timestamp="20161207 14:55:53.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:55:53.084" starttime="20161207 14:55:52.450"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:55:53.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:55:53.085" starttime="20161207 14:55:53.084"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:55:53.085" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:55:53.085" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:55:53.086" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:55:53.086" starttime="20161207 14:55:53.085"></status>
</kw>
<msg timestamp="20161207 14:55:53.086" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:55:53.086" starttime="20161207 14:55:52.447"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:55:53.087" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:55:53.087" starttime="20161207 14:55:53.086"></status>
</kw>
<status status="FAIL" endtime="20161207 14:55:53.087" starttime="20161207 14:55:52.446"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:56:03.090" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:56:03.090" starttime="20161207 14:56:03.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:56:03.091" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:56:03.091" starttime="20161207 14:56:03.090"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:56:03.093" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:56:03.093" starttime="20161207 14:56:03.092"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:56:03.095" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:56:03.095" starttime="20161207 14:56:03.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:56:03.096" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:56:03.096" starttime="20161207 14:56:03.095"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:56:03.097" starttime="20161207 14:56:03.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:56:03.105" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:56:03.105" starttime="20161207 14:56:03.103"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:56:03.107" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:56:03.108" starttime="20161207 14:56:03.107"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:03.108" starttime="20161207 14:56:03.106"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:03.108" starttime="20161207 14:56:03.102"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:03.108" starttime="20161207 14:56:03.097"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:56:03.110" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:56:03.110" starttime="20161207 14:56:03.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:56:03.111" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:56:03.111" starttime="20161207 14:56:03.110"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:56:03.111" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:56:03.111" starttime="20161207 14:56:03.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:56:03.112" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:56:03.112" starttime="20161207 14:56:03.111"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:56:03.445" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:56:03.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:03.445" starttime="20161207 14:56:03.112"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:56:03.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:56:03.446" starttime="20161207 14:56:03.446"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:03.447" starttime="20161207 14:56:03.108"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:56:03.729" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:56:03.729" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:03.729" starttime="20161207 14:56:03.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:56:03.735" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:56:03.735" starttime="20161207 14:56:03.734"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:56:03.736" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:56:03.737" starttime="20161207 14:56:03.736"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:03.738" starttime="20161207 14:56:03.735"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:03.738" starttime="20161207 14:56:03.734"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:03.738" starttime="20161207 14:56:03.729"></status>
</kw>
<msg timestamp="20161207 14:56:03.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:03.739" starttime="20161207 14:56:03.093"></status>
</kw>
<msg timestamp="20161207 14:56:03.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:03.739" starttime="20161207 14:56:03.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:56:03.740" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:56:03.740" starttime="20161207 14:56:03.739"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:56:03.741" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:56:03.741" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:56:03.741" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:56:03.741" starttime="20161207 14:56:03.740"></status>
</kw>
<msg timestamp="20161207 14:56:03.741" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:56:03.742" starttime="20161207 14:56:03.089"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:56:03.742" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:56:03.742" starttime="20161207 14:56:03.742"></status>
</kw>
<status status="FAIL" endtime="20161207 14:56:03.743" starttime="20161207 14:56:03.088"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:56:13.746" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:56:13.746" starttime="20161207 14:56:13.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:56:13.747" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:56:13.747" starttime="20161207 14:56:13.747"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:56:13.749" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:56:13.749" starttime="20161207 14:56:13.749"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:56:13.751" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:56:13.751" starttime="20161207 14:56:13.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:56:13.752" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:56:13.752" starttime="20161207 14:56:13.752"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:56:13.753" starttime="20161207 14:56:13.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:56:13.759" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:56:13.759" starttime="20161207 14:56:13.758"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:56:13.760" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:56:13.760" starttime="20161207 14:56:13.760"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:13.760" starttime="20161207 14:56:13.759"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:13.760" starttime="20161207 14:56:13.758"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:13.760" starttime="20161207 14:56:13.753"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:56:13.761" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:56:13.762" starttime="20161207 14:56:13.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:56:13.762" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:56:13.762" starttime="20161207 14:56:13.762"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:56:13.763" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:56:13.763" starttime="20161207 14:56:13.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:56:13.763" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:56:13.764" starttime="20161207 14:56:13.763"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:56:14.095" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:56:14.095" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:14.095" starttime="20161207 14:56:13.764"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:56:14.096" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:56:14.096" starttime="20161207 14:56:14.095"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:14.096" starttime="20161207 14:56:13.760"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:56:14.372" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:56:14.372" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:14.372" starttime="20161207 14:56:14.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:56:14.376" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:56:14.376" starttime="20161207 14:56:14.375"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:56:14.377" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:56:14.377" starttime="20161207 14:56:14.376"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:14.377" starttime="20161207 14:56:14.376"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:14.377" starttime="20161207 14:56:14.375"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:14.377" starttime="20161207 14:56:14.372"></status>
</kw>
<msg timestamp="20161207 14:56:14.377" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:14.377" starttime="20161207 14:56:13.750"></status>
</kw>
<msg timestamp="20161207 14:56:14.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:14.378" starttime="20161207 14:56:13.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:56:14.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:56:14.379" starttime="20161207 14:56:14.378"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:56:14.380" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:56:14.380" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:56:14.380" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:56:14.380" starttime="20161207 14:56:14.379"></status>
</kw>
<msg timestamp="20161207 14:56:14.381" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:56:14.381" starttime="20161207 14:56:13.744"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:56:14.382" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:56:14.382" starttime="20161207 14:56:14.381"></status>
</kw>
<status status="FAIL" endtime="20161207 14:56:14.382" starttime="20161207 14:56:13.743"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:56:24.385" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:56:24.385" starttime="20161207 14:56:24.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:56:24.386" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:56:24.386" starttime="20161207 14:56:24.385"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:56:24.388" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:56:24.388" starttime="20161207 14:56:24.387"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:56:24.390" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:56:24.390" starttime="20161207 14:56:24.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:56:24.391" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:56:24.391" starttime="20161207 14:56:24.390"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:56:24.392" starttime="20161207 14:56:24.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:56:24.398" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:56:24.398" starttime="20161207 14:56:24.397"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:56:24.399" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:56:24.399" starttime="20161207 14:56:24.399"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:24.399" starttime="20161207 14:56:24.399"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:24.400" starttime="20161207 14:56:24.396"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:24.400" starttime="20161207 14:56:24.392"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:56:24.401" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:56:24.401" starttime="20161207 14:56:24.400"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:56:24.402" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:56:24.402" starttime="20161207 14:56:24.402"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:56:24.402" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:56:24.402" starttime="20161207 14:56:24.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:56:24.403" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:56:24.403" starttime="20161207 14:56:24.403"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:56:24.756" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:56:24.756" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:24.756" starttime="20161207 14:56:24.403"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:56:24.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:56:24.756" starttime="20161207 14:56:24.756"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:24.757" starttime="20161207 14:56:24.400"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:56:25.049" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:56:25.049" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:25.049" starttime="20161207 14:56:24.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:56:25.052" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:56:25.053" starttime="20161207 14:56:25.052"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:56:25.053" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:56:25.053" starttime="20161207 14:56:25.053"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:25.053" starttime="20161207 14:56:25.053"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:25.054" starttime="20161207 14:56:25.052"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:25.054" starttime="20161207 14:56:25.049"></status>
</kw>
<msg timestamp="20161207 14:56:25.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:25.054" starttime="20161207 14:56:24.388"></status>
</kw>
<msg timestamp="20161207 14:56:25.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:25.054" starttime="20161207 14:56:24.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:56:25.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:56:25.055" starttime="20161207 14:56:25.055"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:56:25.056" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:56:25.056" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:56:25.056" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:56:25.056" starttime="20161207 14:56:25.055"></status>
</kw>
<msg timestamp="20161207 14:56:25.056" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:56:25.056" starttime="20161207 14:56:24.384"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:56:25.057" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:56:25.057" starttime="20161207 14:56:25.056"></status>
</kw>
<status status="FAIL" endtime="20161207 14:56:25.057" starttime="20161207 14:56:24.383"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:56:35.060" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:56:35.060" starttime="20161207 14:56:35.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:56:35.061" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:56:35.061" starttime="20161207 14:56:35.060"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:56:35.063" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:56:35.063" starttime="20161207 14:56:35.062"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:56:35.065" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:56:35.065" starttime="20161207 14:56:35.064"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:56:35.066" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:56:35.066" starttime="20161207 14:56:35.065"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:56:35.067" starttime="20161207 14:56:35.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:56:35.071" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:56:35.071" starttime="20161207 14:56:35.071"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:56:35.072" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:56:35.072" starttime="20161207 14:56:35.072"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:35.072" starttime="20161207 14:56:35.072"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:35.073" starttime="20161207 14:56:35.070"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:35.073" starttime="20161207 14:56:35.067"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:56:35.073" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:56:35.074" starttime="20161207 14:56:35.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:56:35.075" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:56:35.075" starttime="20161207 14:56:35.074"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:56:35.075" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:56:35.075" starttime="20161207 14:56:35.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:56:35.076" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:56:35.076" starttime="20161207 14:56:35.076"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:56:35.409" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:56:35.409" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:35.409" starttime="20161207 14:56:35.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:56:35.410" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:56:35.410" starttime="20161207 14:56:35.409"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:35.410" starttime="20161207 14:56:35.073"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:56:35.686" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:56:35.686" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:35.686" starttime="20161207 14:56:35.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:56:35.693" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:56:35.693" starttime="20161207 14:56:35.692"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:56:35.694" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:56:35.694" starttime="20161207 14:56:35.694"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:35.694" starttime="20161207 14:56:35.693"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:35.694" starttime="20161207 14:56:35.691"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:35.695" starttime="20161207 14:56:35.687"></status>
</kw>
<msg timestamp="20161207 14:56:35.695" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:35.695" starttime="20161207 14:56:35.063"></status>
</kw>
<msg timestamp="20161207 14:56:35.696" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:35.696" starttime="20161207 14:56:35.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:56:35.696" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:56:35.697" starttime="20161207 14:56:35.696"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:56:35.697" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:56:35.697" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:56:35.698" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:56:35.698" starttime="20161207 14:56:35.697"></status>
</kw>
<msg timestamp="20161207 14:56:35.698" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:56:35.698" starttime="20161207 14:56:35.058"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:56:35.698" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:56:35.699" starttime="20161207 14:56:35.698"></status>
</kw>
<status status="FAIL" endtime="20161207 14:56:35.699" starttime="20161207 14:56:35.057"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:56:45.701" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:56:45.701" starttime="20161207 14:56:45.701"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:56:45.702" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:56:45.702" starttime="20161207 14:56:45.702"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:56:45.704" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:56:45.704" starttime="20161207 14:56:45.704"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:56:45.707" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:56:45.707" starttime="20161207 14:56:45.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:56:45.708" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:56:45.708" starttime="20161207 14:56:45.707"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:56:45.709" starttime="20161207 14:56:45.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:56:45.716" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:56:45.716" starttime="20161207 14:56:45.714"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:56:45.718" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:56:45.718" starttime="20161207 14:56:45.717"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:45.718" starttime="20161207 14:56:45.716"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:45.718" starttime="20161207 14:56:45.714"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:45.718" starttime="20161207 14:56:45.709"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:56:45.719" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:56:45.719" starttime="20161207 14:56:45.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:56:45.720" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:56:45.720" starttime="20161207 14:56:45.720"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:56:45.720" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:56:45.721" starttime="20161207 14:56:45.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:56:45.721" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:56:45.721" starttime="20161207 14:56:45.721"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:56:46.187" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:56:46.188" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:46.188" starttime="20161207 14:56:45.721"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:56:46.188" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:56:46.188" starttime="20161207 14:56:46.188"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:46.188" starttime="20161207 14:56:45.718"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:56:46.468" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:56:46.468" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:46.468" starttime="20161207 14:56:46.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:56:46.478" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:56:46.478" starttime="20161207 14:56:46.477"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:56:46.479" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:56:46.479" starttime="20161207 14:56:46.478"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:46.479" starttime="20161207 14:56:46.478"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:46.479" starttime="20161207 14:56:46.476"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:46.479" starttime="20161207 14:56:46.469"></status>
</kw>
<msg timestamp="20161207 14:56:46.479" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:46.479" starttime="20161207 14:56:45.705"></status>
</kw>
<msg timestamp="20161207 14:56:46.479" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:46.479" starttime="20161207 14:56:45.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:56:46.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:56:46.481" starttime="20161207 14:56:46.480"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:56:46.481" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:56:46.481" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:56:46.481" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:56:46.481" starttime="20161207 14:56:46.481"></status>
</kw>
<msg timestamp="20161207 14:56:46.481" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:56:46.481" starttime="20161207 14:56:45.700"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:56:46.482" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:56:46.482" starttime="20161207 14:56:46.482"></status>
</kw>
<status status="FAIL" endtime="20161207 14:56:46.482" starttime="20161207 14:56:45.699"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:56:56.487" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:56:56.487" starttime="20161207 14:56:56.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:56:56.488" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:56:56.488" starttime="20161207 14:56:56.488"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:56:56.490" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:56:56.490" starttime="20161207 14:56:56.489"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:56:56.491" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:56:56.491" starttime="20161207 14:56:56.491"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:56:56.492" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:56:56.492" starttime="20161207 14:56:56.491"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:56:56.493" starttime="20161207 14:56:56.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:56:56.500" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:56:56.500" starttime="20161207 14:56:56.499"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:56:56.501" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:56:56.502" starttime="20161207 14:56:56.501"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:56.502" starttime="20161207 14:56:56.500"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:56.502" starttime="20161207 14:56:56.498"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:56.502" starttime="20161207 14:56:56.493"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:56:56.503" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:56:56.503" starttime="20161207 14:56:56.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:56:56.504" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:56:56.504" starttime="20161207 14:56:56.504"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:56:56.504" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:56:56.504" starttime="20161207 14:56:56.504"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:56:56.505" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:56:56.505" starttime="20161207 14:56:56.505"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:56:56.888" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:56:56.888" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:56.888" starttime="20161207 14:56:56.505"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:56:56.889" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:56:56.889" starttime="20161207 14:56:56.889"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:56.889" starttime="20161207 14:56:56.502"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:56:57.220" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:56:57.220" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:57.220" starttime="20161207 14:56:56.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:56:57.224" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:56:57.224" starttime="20161207 14:56:57.223"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:56:57.224" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:56:57.225" starttime="20161207 14:56:57.224"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:57.225" starttime="20161207 14:56:57.224"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:57.225" starttime="20161207 14:56:57.223"></status>
</kw>
<status status="PASS" endtime="20161207 14:56:57.225" starttime="20161207 14:56:57.220"></status>
</kw>
<msg timestamp="20161207 14:56:57.226" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:57.226" starttime="20161207 14:56:56.490"></status>
</kw>
<msg timestamp="20161207 14:56:57.226" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:56:57.226" starttime="20161207 14:56:56.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:56:57.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:56:57.227" starttime="20161207 14:56:57.226"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:56:57.227" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:56:57.227" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:56:57.227" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:56:57.227" starttime="20161207 14:56:57.227"></status>
</kw>
<msg timestamp="20161207 14:56:57.227" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:56:57.228" starttime="20161207 14:56:56.484"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:56:57.228" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:56:57.228" starttime="20161207 14:56:57.228"></status>
</kw>
<status status="FAIL" endtime="20161207 14:56:57.229" starttime="20161207 14:56:56.483"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:57:07.231" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:57:07.231" starttime="20161207 14:57:07.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:57:07.232" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:57:07.232" starttime="20161207 14:57:07.232"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:57:07.234" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:57:07.234" starttime="20161207 14:57:07.234"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:57:07.236" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:57:07.236" starttime="20161207 14:57:07.236"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:57:07.237" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:57:07.237" starttime="20161207 14:57:07.237"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:57:07.238" starttime="20161207 14:57:07.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:57:07.245" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:57:07.245" starttime="20161207 14:57:07.244"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:57:07.247" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:57:07.247" starttime="20161207 14:57:07.246"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:07.247" starttime="20161207 14:57:07.246"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:07.247" starttime="20161207 14:57:07.243"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:07.247" starttime="20161207 14:57:07.238"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:57:07.249" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:57:07.249" starttime="20161207 14:57:07.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:57:07.250" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:57:07.250" starttime="20161207 14:57:07.249"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:57:07.250" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:57:07.250" starttime="20161207 14:57:07.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:57:07.251" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:57:07.251" starttime="20161207 14:57:07.250"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:57:07.670" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:57:07.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:07.670" starttime="20161207 14:57:07.251"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:57:07.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:57:07.671" starttime="20161207 14:57:07.671"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:07.671" starttime="20161207 14:57:07.248"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:57:07.977" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:57:07.977" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:07.977" starttime="20161207 14:57:07.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:57:07.981" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:57:07.981" starttime="20161207 14:57:07.980"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:57:07.982" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:57:07.982" starttime="20161207 14:57:07.981"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:07.982" starttime="20161207 14:57:07.981"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:07.982" starttime="20161207 14:57:07.980"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:07.982" starttime="20161207 14:57:07.977"></status>
</kw>
<msg timestamp="20161207 14:57:07.982" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:07.982" starttime="20161207 14:57:07.235"></status>
</kw>
<msg timestamp="20161207 14:57:07.982" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:07.982" starttime="20161207 14:57:07.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:57:07.983" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:57:07.983" starttime="20161207 14:57:07.983"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:57:07.984" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:57:07.984" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:57:07.984" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:57:07.984" starttime="20161207 14:57:07.984"></status>
</kw>
<msg timestamp="20161207 14:57:07.984" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:57:07.984" starttime="20161207 14:57:07.230"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:57:07.985" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:57:07.985" starttime="20161207 14:57:07.984"></status>
</kw>
<status status="FAIL" endtime="20161207 14:57:07.985" starttime="20161207 14:57:07.229"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:57:17.988" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:57:17.988" starttime="20161207 14:57:17.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:57:17.989" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:57:17.989" starttime="20161207 14:57:17.988"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:57:17.991" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:57:17.991" starttime="20161207 14:57:17.990"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:57:17.992" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:57:17.992" starttime="20161207 14:57:17.992"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:57:17.993" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:57:17.993" starttime="20161207 14:57:17.993"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:57:17.994" starttime="20161207 14:57:17.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:57:17.999" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:57:17.999" starttime="20161207 14:57:17.999"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:57:18.000" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:57:18.000" starttime="20161207 14:57:18.000"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:18.000" starttime="20161207 14:57:17.999"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:18.001" starttime="20161207 14:57:17.998"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:18.001" starttime="20161207 14:57:17.994"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:57:18.002" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:57:18.002" starttime="20161207 14:57:18.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:57:18.003" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:57:18.003" starttime="20161207 14:57:18.002"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:57:18.003" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:57:18.003" starttime="20161207 14:57:18.003"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:57:18.004" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:57:18.004" starttime="20161207 14:57:18.003"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:57:18.456" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:57:18.457" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:18.457" starttime="20161207 14:57:18.004"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:57:18.458" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:57:18.458" starttime="20161207 14:57:18.457"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:18.458" starttime="20161207 14:57:18.001"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:57:18.777" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:57:18.777" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:18.777" starttime="20161207 14:57:18.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:57:18.784" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:57:18.784" starttime="20161207 14:57:18.783"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:57:18.785" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:57:18.786" starttime="20161207 14:57:18.785"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:18.786" starttime="20161207 14:57:18.784"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:18.786" starttime="20161207 14:57:18.783"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:18.786" starttime="20161207 14:57:18.778"></status>
</kw>
<msg timestamp="20161207 14:57:18.786" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:18.786" starttime="20161207 14:57:17.991"></status>
</kw>
<msg timestamp="20161207 14:57:18.787" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:18.787" starttime="20161207 14:57:17.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:57:18.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:57:18.788" starttime="20161207 14:57:18.788"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:57:18.789" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:57:18.789" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:57:18.789" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:57:18.789" starttime="20161207 14:57:18.789"></status>
</kw>
<msg timestamp="20161207 14:57:18.789" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:57:18.789" starttime="20161207 14:57:17.986"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:57:18.790" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:57:18.790" starttime="20161207 14:57:18.789"></status>
</kw>
<status status="FAIL" endtime="20161207 14:57:18.790" starttime="20161207 14:57:17.986"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:57:28.793" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:57:28.793" starttime="20161207 14:57:28.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:57:28.794" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:57:28.794" starttime="20161207 14:57:28.793"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:57:28.796" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:57:28.796" starttime="20161207 14:57:28.795"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:57:28.798" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:57:28.798" starttime="20161207 14:57:28.797"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:57:28.799" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:57:28.799" starttime="20161207 14:57:28.798"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:57:28.800" starttime="20161207 14:57:28.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:57:28.807" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:57:28.807" starttime="20161207 14:57:28.805"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:57:28.809" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:57:28.809" starttime="20161207 14:57:28.808"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:28.809" starttime="20161207 14:57:28.808"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:28.810" starttime="20161207 14:57:28.805"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:28.810" starttime="20161207 14:57:28.800"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:57:28.811" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:57:28.811" starttime="20161207 14:57:28.811"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:57:28.812" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:57:28.812" starttime="20161207 14:57:28.811"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:57:28.812" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:57:28.812" starttime="20161207 14:57:28.812"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:57:28.813" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:57:28.813" starttime="20161207 14:57:28.813"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:57:29.142" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:57:29.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:29.142" starttime="20161207 14:57:28.813"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:57:29.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:57:29.143" starttime="20161207 14:57:29.143"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:29.143" starttime="20161207 14:57:28.810"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:57:29.417" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:57:29.417" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:29.417" starttime="20161207 14:57:29.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:57:29.422" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:57:29.422" starttime="20161207 14:57:29.421"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:57:29.424" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:57:29.425" starttime="20161207 14:57:29.423"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:29.425" starttime="20161207 14:57:29.423"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:29.425" starttime="20161207 14:57:29.421"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:29.426" starttime="20161207 14:57:29.417"></status>
</kw>
<msg timestamp="20161207 14:57:29.426" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:29.426" starttime="20161207 14:57:28.796"></status>
</kw>
<msg timestamp="20161207 14:57:29.426" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:29.426" starttime="20161207 14:57:28.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:57:29.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:57:29.427" starttime="20161207 14:57:29.427"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:57:29.428" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:57:29.428" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:57:29.429" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:57:29.429" starttime="20161207 14:57:29.428"></status>
</kw>
<msg timestamp="20161207 14:57:29.429" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:57:29.429" starttime="20161207 14:57:28.792"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:57:29.429" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:57:29.429" starttime="20161207 14:57:29.429"></status>
</kw>
<status status="FAIL" endtime="20161207 14:57:29.430" starttime="20161207 14:57:28.791"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:57:39.433" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:57:39.433" starttime="20161207 14:57:39.432"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:57:39.434" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:57:39.434" starttime="20161207 14:57:39.433"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:57:39.436" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:57:39.436" starttime="20161207 14:57:39.435"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:57:39.438" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:57:39.438" starttime="20161207 14:57:39.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:57:39.439" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:57:39.439" starttime="20161207 14:57:39.438"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:57:39.440" starttime="20161207 14:57:39.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:57:39.447" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:57:39.447" starttime="20161207 14:57:39.446"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:57:39.449" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:57:39.449" starttime="20161207 14:57:39.448"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:39.449" starttime="20161207 14:57:39.447"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:39.449" starttime="20161207 14:57:39.445"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:39.449" starttime="20161207 14:57:39.440"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:57:39.451" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:57:39.451" starttime="20161207 14:57:39.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:57:39.451" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:57:39.452" starttime="20161207 14:57:39.451"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:57:39.452" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:57:39.452" starttime="20161207 14:57:39.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:57:39.453" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:57:39.453" starttime="20161207 14:57:39.452"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:57:39.791" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:57:39.791" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:39.791" starttime="20161207 14:57:39.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:57:39.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:57:39.792" starttime="20161207 14:57:39.791"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:39.792" starttime="20161207 14:57:39.450"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:57:40.065" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:57:40.066" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:40.066" starttime="20161207 14:57:39.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:57:40.070" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:57:40.070" starttime="20161207 14:57:40.069"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:57:40.071" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:57:40.071" starttime="20161207 14:57:40.070"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:40.071" starttime="20161207 14:57:40.070"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:40.072" starttime="20161207 14:57:40.069"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:40.072" starttime="20161207 14:57:40.066"></status>
</kw>
<msg timestamp="20161207 14:57:40.072" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:40.072" starttime="20161207 14:57:39.436"></status>
</kw>
<msg timestamp="20161207 14:57:40.072" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:40.072" starttime="20161207 14:57:39.434"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:57:40.073" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:57:40.073" starttime="20161207 14:57:40.072"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:57:40.073" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:57:40.073" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:57:40.073" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:57:40.074" starttime="20161207 14:57:40.073"></status>
</kw>
<msg timestamp="20161207 14:57:40.074" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:57:40.074" starttime="20161207 14:57:39.431"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:57:40.074" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:57:40.074" starttime="20161207 14:57:40.074"></status>
</kw>
<status status="FAIL" endtime="20161207 14:57:40.075" starttime="20161207 14:57:39.430"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:57:50.078" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:57:50.078" starttime="20161207 14:57:50.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:57:50.079" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:57:50.079" starttime="20161207 14:57:50.079"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:57:50.082" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:57:50.082" starttime="20161207 14:57:50.081"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:57:50.088" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:57:50.088" starttime="20161207 14:57:50.087"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:57:50.089" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:57:50.089" starttime="20161207 14:57:50.088"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:57:50.089" starttime="20161207 14:57:50.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:57:50.096" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:57:50.096" starttime="20161207 14:57:50.094"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:57:50.097" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:57:50.097" starttime="20161207 14:57:50.097"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:50.097" starttime="20161207 14:57:50.096"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:50.097" starttime="20161207 14:57:50.094"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:50.097" starttime="20161207 14:57:50.090"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:57:50.098" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:57:50.099" starttime="20161207 14:57:50.098"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:57:50.099" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:57:50.099" starttime="20161207 14:57:50.099"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:57:50.100" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:57:50.100" starttime="20161207 14:57:50.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:57:50.100" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:57:50.101" starttime="20161207 14:57:50.100"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:57:50.461" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:57:50.461" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:50.461" starttime="20161207 14:57:50.101"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:57:50.461" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:57:50.461" starttime="20161207 14:57:50.461"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:50.462" starttime="20161207 14:57:50.098"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:57:50.989" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:57:50.989" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:50.990" starttime="20161207 14:57:50.462"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:57:50.996" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:57:50.996" starttime="20161207 14:57:50.995"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:57:50.997" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:57:50.998" starttime="20161207 14:57:50.997"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:50.998" starttime="20161207 14:57:50.996"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:50.998" starttime="20161207 14:57:50.995"></status>
</kw>
<status status="PASS" endtime="20161207 14:57:50.998" starttime="20161207 14:57:50.990"></status>
</kw>
<msg timestamp="20161207 14:57:50.999" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:50.999" starttime="20161207 14:57:50.083"></status>
</kw>
<msg timestamp="20161207 14:57:51.000" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:57:51.000" starttime="20161207 14:57:50.080"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:57:51.001" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:57:51.001" starttime="20161207 14:57:51.000"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:57:51.002" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:57:51.002" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:57:51.002" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:57:51.002" starttime="20161207 14:57:51.001"></status>
</kw>
<msg timestamp="20161207 14:57:51.003" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:57:51.003" starttime="20161207 14:57:50.076"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:57:51.004" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:57:51.004" starttime="20161207 14:57:51.003"></status>
</kw>
<status status="FAIL" endtime="20161207 14:57:51.004" starttime="20161207 14:57:50.075"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:58:01.008" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:58:01.008" starttime="20161207 14:58:01.007"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:58:01.009" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:58:01.009" starttime="20161207 14:58:01.008"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:58:01.010" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:58:01.010" starttime="20161207 14:58:01.010"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:58:01.012" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:58:01.012" starttime="20161207 14:58:01.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:58:01.013" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:58:01.013" starttime="20161207 14:58:01.012"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:58:01.013" starttime="20161207 14:58:01.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:58:01.019" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:58:01.019" starttime="20161207 14:58:01.018"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:58:01.020" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:58:01.021" starttime="20161207 14:58:01.020"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:01.021" starttime="20161207 14:58:01.019"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:01.021" starttime="20161207 14:58:01.017"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:01.021" starttime="20161207 14:58:01.014"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:58:01.030" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:58:01.031" starttime="20161207 14:58:01.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:58:01.032" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:58:01.032" starttime="20161207 14:58:01.031"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:58:01.033" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:58:01.033" starttime="20161207 14:58:01.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:58:01.034" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:58:01.034" starttime="20161207 14:58:01.033"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:58:01.561" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:58:01.561" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:01.561" starttime="20161207 14:58:01.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:58:01.562" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:58:01.562" starttime="20161207 14:58:01.561"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:01.562" starttime="20161207 14:58:01.029"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:58:01.875" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:58:01.875" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:01.875" starttime="20161207 14:58:01.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:58:01.882" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:58:01.882" starttime="20161207 14:58:01.881"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:58:01.883" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:58:01.884" starttime="20161207 14:58:01.883"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:01.884" starttime="20161207 14:58:01.882"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:01.884" starttime="20161207 14:58:01.880"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:01.884" starttime="20161207 14:58:01.876"></status>
</kw>
<msg timestamp="20161207 14:58:01.884" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:01.885" starttime="20161207 14:58:01.011"></status>
</kw>
<msg timestamp="20161207 14:58:01.885" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:01.885" starttime="20161207 14:58:01.009"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:58:01.886" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:58:01.886" starttime="20161207 14:58:01.885"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:58:01.887" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:58:01.887" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:58:01.887" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:58:01.887" starttime="20161207 14:58:01.886"></status>
</kw>
<msg timestamp="20161207 14:58:01.888" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:58:01.888" starttime="20161207 14:58:01.006"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:58:01.889" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:58:01.889" starttime="20161207 14:58:01.888"></status>
</kw>
<status status="FAIL" endtime="20161207 14:58:01.889" starttime="20161207 14:58:01.005"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:58:11.892" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:58:11.892" starttime="20161207 14:58:11.891"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:58:11.893" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:58:11.893" starttime="20161207 14:58:11.892"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:58:11.895" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:58:11.895" starttime="20161207 14:58:11.894"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:58:11.897" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:58:11.897" starttime="20161207 14:58:11.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:58:11.898" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:58:11.898" starttime="20161207 14:58:11.897"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:58:11.899" starttime="20161207 14:58:11.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:58:11.906" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:58:11.906" starttime="20161207 14:58:11.905"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:58:11.908" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:58:11.908" starttime="20161207 14:58:11.907"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:11.908" starttime="20161207 14:58:11.907"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:11.908" starttime="20161207 14:58:11.904"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:11.908" starttime="20161207 14:58:11.899"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:58:11.910" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:58:11.910" starttime="20161207 14:58:11.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:58:11.911" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:58:11.911" starttime="20161207 14:58:11.910"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:58:11.911" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:58:11.911" starttime="20161207 14:58:11.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:58:11.912" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:58:11.912" starttime="20161207 14:58:11.912"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:58:12.258" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:58:12.258" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:12.258" starttime="20161207 14:58:11.912"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:58:12.259" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:58:12.259" starttime="20161207 14:58:12.258"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:12.259" starttime="20161207 14:58:11.909"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:58:12.592" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:58:12.592" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:12.592" starttime="20161207 14:58:12.259"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:58:12.599" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:58:12.599" starttime="20161207 14:58:12.598"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:58:12.600" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:58:12.600" starttime="20161207 14:58:12.600"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:12.600" starttime="20161207 14:58:12.599"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:12.601" starttime="20161207 14:58:12.597"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:12.601" starttime="20161207 14:58:12.593"></status>
</kw>
<msg timestamp="20161207 14:58:12.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:12.602" starttime="20161207 14:58:11.895"></status>
</kw>
<msg timestamp="20161207 14:58:12.602" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:12.602" starttime="20161207 14:58:11.893"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:58:12.603" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:58:12.603" starttime="20161207 14:58:12.602"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:58:12.604" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:58:12.604" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:58:12.604" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:58:12.604" starttime="20161207 14:58:12.603"></status>
</kw>
<msg timestamp="20161207 14:58:12.604" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:58:12.605" starttime="20161207 14:58:11.890"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:58:12.605" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:58:12.606" starttime="20161207 14:58:12.605"></status>
</kw>
<status status="FAIL" endtime="20161207 14:58:12.606" starttime="20161207 14:58:11.890"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:58:22.611" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:58:22.611" starttime="20161207 14:58:22.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:58:22.612" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:58:22.612" starttime="20161207 14:58:22.611"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:58:22.614" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:58:22.614" starttime="20161207 14:58:22.613"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:58:22.616" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:58:22.616" starttime="20161207 14:58:22.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:58:22.617" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:58:22.617" starttime="20161207 14:58:22.616"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:58:22.618" starttime="20161207 14:58:22.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:58:22.622" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:58:22.622" starttime="20161207 14:58:22.622"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:58:22.623" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:58:22.623" starttime="20161207 14:58:22.623"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:22.623" starttime="20161207 14:58:22.623"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:22.624" starttime="20161207 14:58:22.621"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:22.624" starttime="20161207 14:58:22.618"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:58:22.625" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:58:22.625" starttime="20161207 14:58:22.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:58:22.626" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:58:22.626" starttime="20161207 14:58:22.625"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:58:22.626" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:58:22.626" starttime="20161207 14:58:22.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:58:22.627" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:58:22.627" starttime="20161207 14:58:22.627"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:58:22.996" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:58:22.996" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:22.996" starttime="20161207 14:58:22.627"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:58:22.997" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:58:22.997" starttime="20161207 14:58:22.997"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:22.997" starttime="20161207 14:58:22.624"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:58:23.318" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:58:23.318" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:23.318" starttime="20161207 14:58:22.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:58:23.324" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:58:23.324" starttime="20161207 14:58:23.323"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:58:23.326" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:58:23.326" starttime="20161207 14:58:23.325"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:23.326" starttime="20161207 14:58:23.325"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:23.326" starttime="20161207 14:58:23.323"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:23.326" starttime="20161207 14:58:23.319"></status>
</kw>
<msg timestamp="20161207 14:58:23.327" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:23.327" starttime="20161207 14:58:22.614"></status>
</kw>
<msg timestamp="20161207 14:58:23.327" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:23.327" starttime="20161207 14:58:22.612"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:58:23.328" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:58:23.328" starttime="20161207 14:58:23.328"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:58:23.329" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:58:23.329" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:58:23.330" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:58:23.330" starttime="20161207 14:58:23.329"></status>
</kw>
<msg timestamp="20161207 14:58:23.330" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:58:23.330" starttime="20161207 14:58:22.607"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:58:23.330" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:58:23.330" starttime="20161207 14:58:23.330"></status>
</kw>
<status status="FAIL" endtime="20161207 14:58:23.331" starttime="20161207 14:58:22.606"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:58:33.333" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:58:33.334" starttime="20161207 14:58:33.333"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:58:33.334" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:58:33.335" starttime="20161207 14:58:33.334"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:58:33.337" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:58:33.337" starttime="20161207 14:58:33.336"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:58:33.339" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:58:33.339" starttime="20161207 14:58:33.338"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:58:33.340" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:58:33.340" starttime="20161207 14:58:33.339"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:58:33.340" starttime="20161207 14:58:33.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:58:33.348" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:58:33.348" starttime="20161207 14:58:33.346"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:58:33.349" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:58:33.350" starttime="20161207 14:58:33.349"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:33.350" starttime="20161207 14:58:33.348"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:33.350" starttime="20161207 14:58:33.345"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:33.350" starttime="20161207 14:58:33.341"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:58:33.351" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:58:33.351" starttime="20161207 14:58:33.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:58:33.352" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:58:33.352" starttime="20161207 14:58:33.352"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:58:33.353" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:58:33.353" starttime="20161207 14:58:33.352"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:58:33.354" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:58:33.354" starttime="20161207 14:58:33.354"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:58:33.692" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:58:33.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:33.692" starttime="20161207 14:58:33.355"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:58:33.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:58:33.693" starttime="20161207 14:58:33.693"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:33.693" starttime="20161207 14:58:33.350"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:58:33.968" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:58:33.968" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:33.969" starttime="20161207 14:58:33.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:58:33.972" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:58:33.972" starttime="20161207 14:58:33.972"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:58:33.973" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:58:33.973" starttime="20161207 14:58:33.973"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:33.973" starttime="20161207 14:58:33.973"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:33.974" starttime="20161207 14:58:33.972"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:33.974" starttime="20161207 14:58:33.969"></status>
</kw>
<msg timestamp="20161207 14:58:33.974" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:33.974" starttime="20161207 14:58:33.337"></status>
</kw>
<msg timestamp="20161207 14:58:33.974" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:33.974" starttime="20161207 14:58:33.335"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:58:33.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:58:33.975" starttime="20161207 14:58:33.974"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:58:33.975" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:58:33.975" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:58:33.975" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:58:33.976" starttime="20161207 14:58:33.975"></status>
</kw>
<msg timestamp="20161207 14:58:33.976" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:58:33.976" starttime="20161207 14:58:33.332"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:58:33.976" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:58:33.976" starttime="20161207 14:58:33.976"></status>
</kw>
<status status="FAIL" endtime="20161207 14:58:33.977" starttime="20161207 14:58:33.331"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:58:43.980" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:58:43.980" starttime="20161207 14:58:43.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:58:43.981" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:58:43.982" starttime="20161207 14:58:43.980"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:58:43.984" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:58:43.984" starttime="20161207 14:58:43.983"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:58:43.987" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:58:43.987" starttime="20161207 14:58:43.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:58:43.988" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:58:43.988" starttime="20161207 14:58:43.988"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:58:43.990" starttime="20161207 14:58:43.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:58:43.997" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:58:43.997" starttime="20161207 14:58:43.996"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:58:43.998" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:58:43.999" starttime="20161207 14:58:43.998"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:43.999" starttime="20161207 14:58:43.997"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:43.999" starttime="20161207 14:58:43.995"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:43.999" starttime="20161207 14:58:43.990"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:58:44.000" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:58:44.000" starttime="20161207 14:58:44.000"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:58:44.001" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:58:44.001" starttime="20161207 14:58:44.001"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:58:44.002" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:58:44.002" starttime="20161207 14:58:44.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:58:44.002" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:58:44.002" starttime="20161207 14:58:44.002"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:58:44.338" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:58:44.338" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:44.338" starttime="20161207 14:58:44.002"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:58:44.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:58:44.339" starttime="20161207 14:58:44.338"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:44.339" starttime="20161207 14:58:43.999"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:58:44.618" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:58:44.618" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:44.618" starttime="20161207 14:58:44.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:58:44.625" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:58:44.625" starttime="20161207 14:58:44.624"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:58:44.626" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:58:44.626" starttime="20161207 14:58:44.626"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:44.626" starttime="20161207 14:58:44.625"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:44.627" starttime="20161207 14:58:44.623"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:44.627" starttime="20161207 14:58:44.618"></status>
</kw>
<msg timestamp="20161207 14:58:44.627" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:44.627" starttime="20161207 14:58:43.985"></status>
</kw>
<msg timestamp="20161207 14:58:44.628" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:44.628" starttime="20161207 14:58:43.982"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:58:44.629" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:58:44.629" starttime="20161207 14:58:44.628"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:58:44.630" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:58:44.630" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:58:44.630" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:58:44.630" starttime="20161207 14:58:44.629"></status>
</kw>
<msg timestamp="20161207 14:58:44.630" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:58:44.630" starttime="20161207 14:58:43.978"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:58:44.631" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:58:44.631" starttime="20161207 14:58:44.631"></status>
</kw>
<status status="FAIL" endtime="20161207 14:58:44.632" starttime="20161207 14:58:43.977"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 14:58:54.634" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161207 14:58:54.634" starttime="20161207 14:58:54.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 14:58:54.635" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161207 14:58:54.635" starttime="20161207 14:58:54.635"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:58:54.637" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161207 14:58:54.637" starttime="20161207 14:58:54.637"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 14:58:54.640" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161207 14:58:54.640" starttime="20161207 14:58:54.639"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:58:54.641" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:58:54.641" starttime="20161207 14:58:54.640"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161207 14:58:54.641" starttime="20161207 14:58:54.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:58:54.649" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:58:54.649" starttime="20161207 14:58:54.647"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:58:54.650" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161207 14:58:54.650" starttime="20161207 14:58:54.650"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:54.650" starttime="20161207 14:58:54.649"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:54.651" starttime="20161207 14:58:54.646"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:54.651" starttime="20161207 14:58:54.642"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 14:58:54.652" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161207 14:58:54.652" starttime="20161207 14:58:54.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 14:58:54.653" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161207 14:58:54.653" starttime="20161207 14:58:54.652"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 14:58:54.653" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161207 14:58:54.653" starttime="20161207 14:58:54.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 14:58:54.654" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161207 14:58:54.654" starttime="20161207 14:58:54.653"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 14:58:55.009" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:58:55.010" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:55.010" starttime="20161207 14:58:54.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:58:55.010" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:58:55.010" starttime="20161207 14:58:55.010"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:55.010" starttime="20161207 14:58:54.651"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 14:58:55.285" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 14:58:55.285" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:55.285" starttime="20161207 14:58:55.011"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 14:58:55.292" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:58:55.292" starttime="20161207 14:58:55.291"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 14:58:55.293" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161207 14:58:55.294" starttime="20161207 14:58:55.293"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:55.294" starttime="20161207 14:58:55.292"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:55.294" starttime="20161207 14:58:55.291"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:55.294" starttime="20161207 14:58:55.286"></status>
</kw>
<msg timestamp="20161207 14:58:55.295" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:55.295" starttime="20161207 14:58:54.638"></status>
</kw>
<msg timestamp="20161207 14:58:55.295" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161207 14:58:55.295" starttime="20161207 14:58:54.636"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 14:58:55.296" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161207 14:58:55.296" starttime="20161207 14:58:55.296"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 14:58:55.297" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 14:58:55.297" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 14:58:55.297" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161207 14:58:55.297" starttime="20161207 14:58:55.297"></status>
</kw>
<msg timestamp="20161207 14:58:55.298" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161207 14:58:55.298" starttime="20161207 14:58:54.633"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161207 14:58:55.299" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:58:55.299" starttime="20161207 14:58:55.298"></status>
</kw>
<status status="FAIL" endtime="20161207 14:58:55.299" starttime="20161207 14:58:54.632"></status>
</kw>
<msg timestamp="20161207 14:58:55.299" level="FAIL">Keyword 'Verify BMC State' failed after retrying for 10 minutes. The last error was: '[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161207 14:58:55.300" starttime="20161207 14:48:53.766"></status>
</kw>
<doc>BMC code update process initiation</doc>
<status status="FAIL" endtime="20161207 14:58:55.300" critical="yes" starttime="20161207 14:45:21.375">Keyword 'Verify BMC State' failed after retrying for 10 minutes. The last error was: '[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</status>
</test>
<test id="s1-t2" name="Test BMC CPU Mem Performance at Ready State">
<kw name="Check BMC CPU Performance" library="utils">
<doc>Minimal 10% of proc should be free in 3 sample</doc>
<kw type="for" name="${var} IN RANGE [ 1 | 4 ]">
<kw type="foritem" name="${var} = 1">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 14:58:55.303" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161207 14:58:55.674" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 14:58:55.674" level="INFO">${bmc_cpu_usage_output} =  0%</msg>
<msg timestamp="20161207 14:58:55.674" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161207 14:58:55.674" starttime="20161207 14:58:55.303"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 14:58:55.674" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161207 14:58:55.674" starttime="20161207 14:58:55.674"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161207 14:58:55.675" level="INFO">${bmc_cpu_percentage} =  0</msg>
<status status="PASS" endtime="20161207 14:58:55.675" starttime="20161207 14:58:55.675"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161207 14:58:55.678" starttime="20161207 14:58:55.675"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:55.678" starttime="20161207 14:58:55.302"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:55.678" starttime="20161207 14:58:55.302"></status>
</kw>
<kw type="foritem" name="${var} = 2">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 14:58:55.679" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161207 14:58:56.107" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 14:58:56.107" level="INFO">${bmc_cpu_usage_output} =  5%</msg>
<msg timestamp="20161207 14:58:56.107" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161207 14:58:56.107" starttime="20161207 14:58:55.678"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 14:58:56.108" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161207 14:58:56.108" starttime="20161207 14:58:56.108"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161207 14:58:56.108" level="INFO">${bmc_cpu_percentage} =  5</msg>
<status status="PASS" endtime="20161207 14:58:56.108" starttime="20161207 14:58:56.108"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161207 14:58:56.111" starttime="20161207 14:58:56.109"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:56.111" starttime="20161207 14:58:55.678"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:56.111" starttime="20161207 14:58:55.678"></status>
</kw>
<kw type="foritem" name="${var} = 3">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 14:58:56.112" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161207 14:58:56.583" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 14:58:56.584" level="INFO">${bmc_cpu_usage_output} =  0%</msg>
<msg timestamp="20161207 14:58:56.584" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161207 14:58:56.584" starttime="20161207 14:58:56.112"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 14:58:56.584" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161207 14:58:56.585" starttime="20161207 14:58:56.584"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161207 14:58:56.585" level="INFO">${bmc_cpu_percentage} =  0</msg>
<status status="PASS" endtime="20161207 14:58:56.585" starttime="20161207 14:58:56.585"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161207 14:58:56.590" starttime="20161207 14:58:56.586"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:56.590" starttime="20161207 14:58:56.112"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:56.590" starttime="20161207 14:58:56.111"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:56.590" starttime="20161207 14:58:55.302"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:56.591" starttime="20161207 14:58:55.301"></status>
</kw>
<kw name="Check BMC Mem Performance" library="utils">
<doc>Minimal 10% of memory should be free</doc>
<kw type="for" name="${var} IN RANGE [ 1 | 4 ]">
<kw type="foritem" name="${var} = 1">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 14:58:56.594" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161207 14:58:56.751" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 14:58:56.751" level="INFO">${bmc_mem_free_output} = 344704</msg>
<msg timestamp="20161207 14:58:56.752" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161207 14:58:56.752" starttime="20161207 14:58:56.594"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 14:58:56.752" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161207 14:58:56.752" starttime="20161207 14:58:56.752"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 14:58:56.753" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161207 14:58:56.942" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 14:58:56.942" level="INFO">${bmc_mem_total_output} = 499020</msg>
<msg timestamp="20161207 14:58:56.942" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161207 14:58:56.942" starttime="20161207 14:58:56.753"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 14:58:56.943" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161207 14:58:56.943" starttime="20161207 14:58:56.942"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161207 14:58:56.947" level="INFO">${bmc_mem_percentage} = 34470400</msg>
<status status="PASS" endtime="20161207 14:58:56.947" starttime="20161207 14:58:56.943"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161207 14:58:56.951" level="INFO">${bmc_mem_percentage} = 69</msg>
<status status="PASS" endtime="20161207 14:58:56.951" starttime="20161207 14:58:56.947"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161207 14:58:56.955" starttime="20161207 14:58:56.951"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:56.955" starttime="20161207 14:58:56.592"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:56.955" starttime="20161207 14:58:56.592"></status>
</kw>
<kw type="foritem" name="${var} = 2">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 14:58:56.956" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161207 14:58:57.144" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 14:58:57.144" level="INFO">${bmc_mem_free_output} = 344508</msg>
<msg timestamp="20161207 14:58:57.144" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161207 14:58:57.145" starttime="20161207 14:58:56.956"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 14:58:57.145" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161207 14:58:57.145" starttime="20161207 14:58:57.145"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 14:58:57.146" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161207 14:58:57.336" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 14:58:57.336" level="INFO">${bmc_mem_total_output} = 499020</msg>
<msg timestamp="20161207 14:58:57.336" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161207 14:58:57.336" starttime="20161207 14:58:57.146"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 14:58:57.337" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161207 14:58:57.337" starttime="20161207 14:58:57.336"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161207 14:58:57.342" level="INFO">${bmc_mem_percentage} = 34450800</msg>
<status status="PASS" endtime="20161207 14:58:57.342" starttime="20161207 14:58:57.337"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161207 14:58:57.346" level="INFO">${bmc_mem_percentage} = 69</msg>
<status status="PASS" endtime="20161207 14:58:57.346" starttime="20161207 14:58:57.342"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161207 14:58:57.350" starttime="20161207 14:58:57.346"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:57.350" starttime="20161207 14:58:56.955"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:57.350" starttime="20161207 14:58:56.955"></status>
</kw>
<kw type="foritem" name="${var} = 3">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 14:58:57.351" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161207 14:58:57.540" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 14:58:57.540" level="INFO">${bmc_mem_free_output} = 344508</msg>
<msg timestamp="20161207 14:58:57.540" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161207 14:58:57.540" starttime="20161207 14:58:57.351"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 14:58:57.540" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161207 14:58:57.540" starttime="20161207 14:58:57.540"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 14:58:57.541" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161207 14:58:57.800" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 14:58:57.800" level="INFO">${bmc_mem_total_output} = 499020</msg>
<msg timestamp="20161207 14:58:57.800" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161207 14:58:57.800" starttime="20161207 14:58:57.541"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 14:58:57.801" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161207 14:58:57.801" starttime="20161207 14:58:57.801"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161207 14:58:57.803" level="INFO">${bmc_mem_percentage} = 34450800</msg>
<status status="PASS" endtime="20161207 14:58:57.803" starttime="20161207 14:58:57.801"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161207 14:58:57.806" level="INFO">${bmc_mem_percentage} = 69</msg>
<status status="PASS" endtime="20161207 14:58:57.806" starttime="20161207 14:58:57.804"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161207 14:58:57.809" starttime="20161207 14:58:57.806"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:57.809" starttime="20161207 14:58:57.351"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:57.809" starttime="20161207 14:58:57.350"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:57.809" starttime="20161207 14:58:56.591"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:57.809" starttime="20161207 14:58:56.591"></status>
</kw>
<status status="PASS" endtime="20161207 14:58:57.809" critical="yes" starttime="20161207 14:58:55.300"></status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update</doc>
<status status="FAIL" endtime="20161207 14:58:57.811" starttime="20161207 14:45:20.944"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="1">Update Bmc</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
