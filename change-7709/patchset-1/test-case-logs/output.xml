<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20171031 19:20:58.749">
<suite id="s1" name="Tests" source="/tmp/fspcibld/2550/obmc-robot/tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Clear System Entry From Knownhosts</arg>
</arguments>
<kw library="connection_client" name="Clear System Entry From Knownhosts">
<doc>Delete OPENBMC_HOST entry from known_hosts file.</doc>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>sed '/${OPENBMC_HOST}/d' -i ~/.ssh/known_hosts</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20171031 19:21:00.349" level="INFO">${cmd} = sed '/9.3.86.161/d' -i ~/.ssh/known_hosts</msg>
<status status="PASS" starttime="20171031 19:21:00.348" endtime="20171031 19:21:00.349"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:21:00.352" level="INFO">Running command 'sed '/9.3.86.161/d' -i ~/.ssh/known_hosts 2&gt;&amp;1'.</msg>
<msg timestamp="20171031 19:21:00.355" level="INFO">${rc} = 2</msg>
<msg timestamp="20171031 19:21:00.355" level="INFO">${output} = sed: can't read /home/fspcibld/.ssh/known_hosts: No such file or directory</msg>
<status status="PASS" starttime="20171031 19:21:00.349" endtime="20171031 19:21:00.355"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:00.348" endtime="20171031 19:21:00.356"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:00.348" endtime="20171031 19:21:00.356"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171031 19:21:00.360" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20171031 19:21:00.359" endtime="20171031 19:21:00.360"></status>
</kw>
<msg timestamp="20171031 19:21:00.360" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20171031 19:21:00.359" endtime="20171031 19:21:00.360"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:00.361" endtime="20171031 19:21:00.362"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:00.361" endtime="20171031 19:21:00.362"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20171031 19:21:00.363" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20171031 19:21:00.363" endtime="20171031 19:21:00.364"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20171031 19:21:00.364" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20171031 19:21:00.364" endtime="20171031 19:21:00.364"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20171031 19:21:00.365" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20171031 19:21:00.364" endtime="20171031 19:21:00.365"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20171031 19:21:00.366" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" starttime="20171031 19:21:00.365" endtime="20171031 19:21:00.366"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:00.363" endtime="20171031 19:21:00.366"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:00.362" endtime="20171031 19:21:00.366"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171031 19:21:00.367" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20171031 19:21:00.367" endtime="20171031 19:21:00.367"></status>
</kw>
<msg timestamp="20171031 19:21:00.367" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20171031 19:21:00.366" endtime="20171031 19:21:00.367"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:00.369" endtime="20171031 19:21:00.369"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:00.370" endtime="20171031 19:21:00.370"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:00.368" endtime="20171031 19:21:00.371"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:00.368" endtime="20171031 19:21:00.371"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171031 19:21:00.371" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171031 19:21:02.150" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20171031 19:21:00.371" endtime="20171031 19:21:02.151"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:00.357" endtime="20171031 19:21:02.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:21:02.152" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20171031 19:21:02.229" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171031 19:21:02.229" level="INFO">${output} = VERSION_ID="v1.99.10-237-gf81c61c"</msg>
<msg timestamp="20171031 19:21:02.229" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171031 19:21:02.152" endtime="20171031 19:21:02.229"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171031 19:21:02.230" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20171031 19:21:02.230" endtime="20171031 19:21:02.230"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171031 19:21:02.231" level="INFO">VERSION_ID="v1.99.10-237-gf81c61c"</msg>
<status status="PASS" starttime="20171031 19:21:02.231" endtime="20171031 19:21:02.231"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.152" endtime="20171031 19:21:02.231"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.151" endtime="20171031 19:21:02.231"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="code_update_utils" name="Get Host Software Objects Details">
<doc>Return software object details as a list of dictionaries.</doc>
<assign>
<var>${software}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${software}</var>
</assign>
<msg timestamp="20171031 19:21:02.233" level="INFO">${software} = []</msg>
<status status="PASS" starttime="20171031 19:21:02.233" endtime="20171031 19:21:02.233"></status>
</kw>
<kw library="code_update_utils" name="Get Software Objects">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>${VERSION_PURPOSE_HOST}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg timestamp="20171031 19:21:02.234" level="INFO">${host_list} = []</msg>
<status status="PASS" starttime="20171031 19:21:02.234" endtime="20171031 19:21:02.234"></status>
</kw>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:02.238" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:02.237" endtime="20171031 19:21:02.238"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:02.239" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:02.239" endtime="20171031 19:21:02.239"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:02.240" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:02.239" endtime="20171031 19:21:02.240"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:02.240" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:02.240" endtime="20171031 19:21:02.240"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:02.431" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:02.241" endtime="20171031 19:21:02.431"></status>
</kw>
<msg timestamp="20171031 19:21:02.431" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:02.432" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:02.241" endtime="20171031 19:21:02.432"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:02.432" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:02.432" endtime="20171031 19:21:02.662"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:02.664" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:02.663" endtime="20171031 19:21:02.664"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.237" endtime="20171031 19:21:02.664"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.236" endtime="20171031 19:21:02.664"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.236" endtime="20171031 19:21:02.664"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:02.665" level="INFO">${base_uri} = /xyz/openbmc_project/software/</msg>
<status status="PASS" starttime="20171031 19:21:02.664" endtime="20171031 19:21:02.665"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:02.667" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:02.666" endtime="20171031 19:21:02.667"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:02.668" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:02.668" endtime="20171031 19:21:02.668"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.667" endtime="20171031 19:21:02.668"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.666" endtime="20171031 19:21:02.668"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.665" endtime="20171031 19:21:02.668"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:02.764" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg timestamp="20171031 19:21:02.765" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:02.669" endtime="20171031 19:21:02.765"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:02.767" level="INFO">${msg} = Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/28496194", 
    "/xyz/openbmc_project/software/7a0199e0", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_pr...</msg>
<status status="PASS" starttime="20171031 19:21:02.766" endtime="20171031 19:21:02.767"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:02.768" level="INFO">Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/28496194", 
    "/xyz/openbmc_project/software/7a0199e0", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:02.767" endtime="20171031 19:21:02.768"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.767" endtime="20171031 19:21:02.768"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.766" endtime="20171031 19:21:02.768"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.765" endtime="20171031 19:21:02.768"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:02.769" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:02.769" endtime="20171031 19:21:02.769"></status>
</kw>
<msg timestamp="20171031 19:21:02.769" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:02.235" endtime="20171031 19:21:02.769"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:02.770" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:02.769" endtime="20171031 19:21:02.770"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:21:02.771" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/28496194", 
    "/xyz/openbmc_project/software/7a0199e0", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:02.771" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:02.771" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/xyz/openbmc_project/software/28496194', u'/xyz/openbmc_project/software/7a0199e0', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_projec...</msg>
<status status="PASS" starttime="20171031 19:21:02.770" endtime="20171031 19:21:02.771"></status>
</kw>
<msg timestamp="20171031 19:21:02.771" level="INFO">${sw_list} = [u'/xyz/openbmc_project/software/28496194', u'/xyz/openbmc_project/software/7a0199e0', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/softwa...</msg>
<status status="PASS" starttime="20171031 19:21:02.234" endtime="20171031 19:21:02.771"></status>
</kw>
<kw type="for" name="${index} IN [ @{sw_list} ]">
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/28496194">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:02.775" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:02.775" endtime="20171031 19:21:02.775"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:02.776" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:02.776" endtime="20171031 19:21:02.776"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:02.777" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:02.776" endtime="20171031 19:21:02.777"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:02.777" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:02.777" endtime="20171031 19:21:02.777"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:02.976" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:02.778" endtime="20171031 19:21:02.976"></status>
</kw>
<msg timestamp="20171031 19:21:02.976" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:02.976" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:02.778" endtime="20171031 19:21:02.976"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:02.977" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:02.977" endtime="20171031 19:21:02.977"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:02.978" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:02.978" endtime="20171031 19:21:02.978"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.774" endtime="20171031 19:21:02.978"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.774" endtime="20171031 19:21:02.978"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.773" endtime="20171031 19:21:02.978"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:02.979" level="INFO">${base_uri} = /xyz/openbmc_project/software/28496194/attr/Purpose</msg>
<status status="PASS" starttime="20171031 19:21:02.979" endtime="20171031 19:21:02.979"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:02.980" endtime="20171031 19:21:02.980"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:03.128" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/28496194/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171031 19:21:03.129" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:02.980" endtime="20171031 19:21:03.129"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:03.129" endtime="20171031 19:21:03.129"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:03.130" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:03.130" endtime="20171031 19:21:03.130"></status>
</kw>
<msg timestamp="20171031 19:21:03.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:02.772" endtime="20171031 19:21:03.130"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:03.131" endtime="20171031 19:21:03.131"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:21:03.132" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:03.132" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:03.132" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC'}</msg>
<status status="PASS" starttime="20171031 19:21:03.131" endtime="20171031 19:21:03.132"></status>
</kw>
<msg timestamp="20171031 19:21:03.132" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status status="PASS" starttime="20171031 19:21:02.772" endtime="20171031 19:21:03.132"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171031 19:21:03.133" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171031 19:21:03.132" endtime="20171031 19:21:03.133"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.772" endtime="20171031 19:21:03.133"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/7a0199e0">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:03.136" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:03.136" endtime="20171031 19:21:03.136"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:03.137" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:03.137" endtime="20171031 19:21:03.137"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:03.138" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:03.137" endtime="20171031 19:21:03.138"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:03.138" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:03.138" endtime="20171031 19:21:03.139"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:03.325" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:03.139" endtime="20171031 19:21:03.325"></status>
</kw>
<msg timestamp="20171031 19:21:03.325" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:03.325" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:03.139" endtime="20171031 19:21:03.325"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:03.326" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:03.326" endtime="20171031 19:21:03.326"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:03.327" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:03.327" endtime="20171031 19:21:03.327"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:03.135" endtime="20171031 19:21:03.328"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:03.135" endtime="20171031 19:21:03.328"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:03.134" endtime="20171031 19:21:03.328"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:03.329" level="INFO">${base_uri} = /xyz/openbmc_project/software/7a0199e0/attr/Purpose</msg>
<status status="PASS" starttime="20171031 19:21:03.328" endtime="20171031 19:21:03.329"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:03.329" endtime="20171031 19:21:03.330"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:03.428" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a0199e0/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171031 19:21:03.429" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:03.330" endtime="20171031 19:21:03.429"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:03.429" endtime="20171031 19:21:03.430"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:03.430" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:03.430" endtime="20171031 19:21:03.430"></status>
</kw>
<msg timestamp="20171031 19:21:03.430" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:03.134" endtime="20171031 19:21:03.430"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:03.431" endtime="20171031 19:21:03.431"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:21:03.432" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:03.432" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:03.432" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC'}</msg>
<status status="PASS" starttime="20171031 19:21:03.431" endtime="20171031 19:21:03.432"></status>
</kw>
<msg timestamp="20171031 19:21:03.432" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status status="PASS" starttime="20171031 19:21:03.133" endtime="20171031 19:21:03.432"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171031 19:21:03.433" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171031 19:21:03.433" endtime="20171031 19:21:03.434"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:03.133" endtime="20171031 19:21:03.434"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/active">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:03.438" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:03.438" endtime="20171031 19:21:03.439"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:03.440" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:03.439" endtime="20171031 19:21:03.440"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:03.441" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:03.440" endtime="20171031 19:21:03.441"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:03.442" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:03.441" endtime="20171031 19:21:03.442"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:03.636" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:03.443" endtime="20171031 19:21:03.636"></status>
</kw>
<msg timestamp="20171031 19:21:03.637" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:03.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:03.442" endtime="20171031 19:21:03.637"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:03.637" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:03.637" endtime="20171031 19:21:03.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:03.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:03.638" endtime="20171031 19:21:03.638"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:03.437" endtime="20171031 19:21:03.639"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:03.436" endtime="20171031 19:21:03.639"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:03.436" endtime="20171031 19:21:03.639"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:03.639" level="INFO">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status status="PASS" starttime="20171031 19:21:03.639" endtime="20171031 19:21:03.640"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:03.640" endtime="20171031 19:21:03.640"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:03.699" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171031 19:21:03.699" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:03.641" endtime="20171031 19:21:03.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:03.699" endtime="20171031 19:21:03.700"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:03.700" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:03.700" endtime="20171031 19:21:03.700"></status>
</kw>
<msg timestamp="20171031 19:21:03.700" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:03.435" endtime="20171031 19:21:03.701"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:03.701" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171031 19:21:03.701" endtime="20171031 19:21:03.701"></status>
</kw>
<msg timestamp="20171031 19:21:03.701" level="INFO">${attr_purpose} = None</msg>
<status status="PASS" starttime="20171031 19:21:03.434" endtime="20171031 19:21:03.702"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171031 19:21:03.702" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171031 19:21:03.702" endtime="20171031 19:21:03.702"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:03.434" endtime="20171031 19:21:03.702"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/7a9ef57c">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:03.705" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:03.705" endtime="20171031 19:21:03.706"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:03.706" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:03.706" endtime="20171031 19:21:03.706"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:03.707" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:03.707" endtime="20171031 19:21:03.707"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:03.708" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:03.707" endtime="20171031 19:21:03.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:03.907" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:03.709" endtime="20171031 19:21:03.907"></status>
</kw>
<msg timestamp="20171031 19:21:03.907" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:03.907" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:03.708" endtime="20171031 19:21:03.907"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:03.908" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:03.907" endtime="20171031 19:21:03.908"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:03.909" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:03.908" endtime="20171031 19:21:03.909"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:03.705" endtime="20171031 19:21:03.909"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:03.704" endtime="20171031 19:21:03.909"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:03.704" endtime="20171031 19:21:03.909"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:03.910" level="INFO">${base_uri} = /xyz/openbmc_project/software/7a9ef57c/attr/Purpose</msg>
<status status="PASS" starttime="20171031 19:21:03.910" endtime="20171031 19:21:03.910"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:03.910" endtime="20171031 19:21:03.911"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:04.061" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171031 19:21:04.062" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:03.911" endtime="20171031 19:21:04.062"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:04.062" endtime="20171031 19:21:04.062"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:04.063" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:04.063" endtime="20171031 19:21:04.063"></status>
</kw>
<msg timestamp="20171031 19:21:04.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:03.703" endtime="20171031 19:21:04.063"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:04.064" endtime="20171031 19:21:04.064"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:21:04.064" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:04.065" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:04.065" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host'}</msg>
<status status="PASS" starttime="20171031 19:21:04.064" endtime="20171031 19:21:04.065"></status>
</kw>
<msg timestamp="20171031 19:21:04.065" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status status="PASS" starttime="20171031 19:21:03.703" endtime="20171031 19:21:04.065"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:04.065" endtime="20171031 19:21:04.066"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:04.066" endtime="20171031 19:21:04.066"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:03.702" endtime="20171031 19:21:04.066"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/8764baa3">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:04.069" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:04.069" endtime="20171031 19:21:04.070"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:04.070" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:04.070" endtime="20171031 19:21:04.070"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:04.071" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:04.071" endtime="20171031 19:21:04.071"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:04.072" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:04.071" endtime="20171031 19:21:04.072"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:04.268" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:04.073" endtime="20171031 19:21:04.269"></status>
</kw>
<msg timestamp="20171031 19:21:04.269" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:04.269" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.072" endtime="20171031 19:21:04.269"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:04.270" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.269" endtime="20171031 19:21:04.270"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:04.270" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.270" endtime="20171031 19:21:04.270"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.069" endtime="20171031 19:21:04.271"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.068" endtime="20171031 19:21:04.271"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.067" endtime="20171031 19:21:04.271"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:04.271" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Purpose</msg>
<status status="PASS" starttime="20171031 19:21:04.271" endtime="20171031 19:21:04.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:04.272" endtime="20171031 19:21:04.272"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:04.389" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171031 19:21:04.389" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.272" endtime="20171031 19:21:04.389"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:04.390" endtime="20171031 19:21:04.390"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:04.391" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:04.391" endtime="20171031 19:21:04.391"></status>
</kw>
<msg timestamp="20171031 19:21:04.391" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.067" endtime="20171031 19:21:04.391"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:04.391" endtime="20171031 19:21:04.392"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:21:04.392" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:04.392" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:04.393" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host'}</msg>
<status status="PASS" starttime="20171031 19:21:04.392" endtime="20171031 19:21:04.393"></status>
</kw>
<msg timestamp="20171031 19:21:04.393" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status status="PASS" starttime="20171031 19:21:04.067" endtime="20171031 19:21:04.393"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:04.393" endtime="20171031 19:21:04.394"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:04.394" endtime="20171031 19:21:04.394"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.066" endtime="20171031 19:21:04.394"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/functional">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:04.397" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:04.397" endtime="20171031 19:21:04.398"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:04.398" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:04.398" endtime="20171031 19:21:04.398"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:04.399" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:04.399" endtime="20171031 19:21:04.399"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:04.400" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:04.400" endtime="20171031 19:21:04.400"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:04.598" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:04.401" endtime="20171031 19:21:04.598"></status>
</kw>
<msg timestamp="20171031 19:21:04.598" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:04.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.400" endtime="20171031 19:21:04.599"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:04.599" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.599" endtime="20171031 19:21:04.599"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:04.600" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.600" endtime="20171031 19:21:04.600"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.396" endtime="20171031 19:21:04.600"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.396" endtime="20171031 19:21:04.600"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.395" endtime="20171031 19:21:04.600"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:04.601" level="INFO">${base_uri} = /xyz/openbmc_project/software/functional/attr/Purpose</msg>
<status status="PASS" starttime="20171031 19:21:04.601" endtime="20171031 19:21:04.601"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:04.601" endtime="20171031 19:21:04.602"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:04.668" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/functional/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171031 19:21:04.668" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.602" endtime="20171031 19:21:04.668"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:04.668" endtime="20171031 19:21:04.669"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:04.669" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:04.669" endtime="20171031 19:21:04.669"></status>
</kw>
<msg timestamp="20171031 19:21:04.669" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.395" endtime="20171031 19:21:04.669"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:04.670" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171031 19:21:04.670" endtime="20171031 19:21:04.670"></status>
</kw>
<msg timestamp="20171031 19:21:04.670" level="INFO">${attr_purpose} = None</msg>
<status status="PASS" starttime="20171031 19:21:04.394" endtime="20171031 19:21:04.670"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171031 19:21:04.671" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171031 19:21:04.671" endtime="20171031 19:21:04.671"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.394" endtime="20171031 19:21:04.671"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.772" endtime="20171031 19:21:04.671"></status>
</kw>
<msg timestamp="20171031 19:21:04.671" level="INFO">${pnor_details} = [u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/software/8764baa3']</msg>
<status status="PASS" starttime="20171031 19:21:02.233" endtime="20171031 19:21:04.671"></status>
</kw>
<kw type="for" name="${pnor} IN [ @{pnor_details} ]">
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/7a9ef57c">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:04.674" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:04.674" endtime="20171031 19:21:04.675"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:04.675" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:04.675" endtime="20171031 19:21:04.675"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:04.676" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:04.676" endtime="20171031 19:21:04.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:04.677" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:04.676" endtime="20171031 19:21:04.677"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:04.862" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:04.677" endtime="20171031 19:21:04.862"></status>
</kw>
<msg timestamp="20171031 19:21:04.862" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:04.862" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.677" endtime="20171031 19:21:04.862"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:04.863" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.862" endtime="20171031 19:21:04.863"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:04.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.863" endtime="20171031 19:21:04.864"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.673" endtime="20171031 19:21:04.864"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.673" endtime="20171031 19:21:04.864"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.672" endtime="20171031 19:21:04.864"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:04.865" level="INFO">${base_uri} = /xyz/openbmc_project/software/7a9ef57c</msg>
<status status="PASS" starttime="20171031 19:21:04.864" endtime="20171031 19:21:04.865"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:04.865" endtime="20171031 19:21:04.865"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:04.987" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c, headers=None json=None</msg>
<msg timestamp="20171031 19:21:04.987" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.866" endtime="20171031 19:21:04.987"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:04.987" endtime="20171031 19:21:04.988"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:04.988" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:04.988" endtime="20171031 19:21:04.988"></status>
</kw>
<msg timestamp="20171031 19:21:04.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.672" endtime="20171031 19:21:04.988"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171031 19:21:04.989" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
    "Path": "", 
    "Priority": 1, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:04.989" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:04.989" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.Requ...</msg>
<status status="PASS" starttime="20171031 19:21:04.989" endtime="20171031 19:21:04.989"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:04.990" endtime="20171031 19:21:04.990"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.672" endtime="20171031 19:21:04.990"></status>
</kw>
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/8764baa3">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:04.995" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:04.995" endtime="20171031 19:21:04.996"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:04.996" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:04.996" endtime="20171031 19:21:04.996"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:04.997" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:04.997" endtime="20171031 19:21:04.997"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:04.998" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:04.997" endtime="20171031 19:21:04.998"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:05.231" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:04.999" endtime="20171031 19:21:05.231"></status>
</kw>
<msg timestamp="20171031 19:21:05.231" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:05.231" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.998" endtime="20171031 19:21:05.231"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:05.232" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:05.232" endtime="20171031 19:21:05.232"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:05.233" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:05.232" endtime="20171031 19:21:05.233"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.994" endtime="20171031 19:21:05.233"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.994" endtime="20171031 19:21:05.233"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.991" endtime="20171031 19:21:05.233"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:05.234" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status status="PASS" starttime="20171031 19:21:05.234" endtime="20171031 19:21:05.234"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:05.234" endtime="20171031 19:21:05.235"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:05.383" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg timestamp="20171031 19:21:05.383" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:05.235" endtime="20171031 19:21:05.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:05.384" endtime="20171031 19:21:05.384"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:05.385" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:05.385" endtime="20171031 19:21:05.385"></status>
</kw>
<msg timestamp="20171031 19:21:05.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:04.990" endtime="20171031 19:21:05.385"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171031 19:21:05.386" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:05.386" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:05.386" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.Requ...</msg>
<status status="PASS" starttime="20171031 19:21:05.385" endtime="20171031 19:21:05.386"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:05.386" endtime="20171031 19:21:05.387"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.990" endtime="20171031 19:21:05.387"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:04.671" endtime="20171031 19:21:05.387"></status>
</kw>
<msg timestamp="20171031 19:21:05.387" level="INFO">${software} = [{u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'associations': [[u'inven...</msg>
<status status="PASS" starttime="20171031 19:21:02.232" endtime="20171031 19:21:05.387"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${software}</arg>
</arguments>
<msg timestamp="20171031 19:21:05.388" level="INFO">[{u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Path': u'', u'Priority': 1, u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'ExtendedVersion': u'op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2'}, {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Path': u'', u'Priority': 0, u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a'}]</msg>
<status status="PASS" starttime="20171031 19:21:05.387" endtime="20171031 19:21:05.388"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.232" endtime="20171031 19:21:05.388"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:02.231" endtime="20171031 19:21:05.388"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171031 19:21:05.403" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:21:05.404" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171031 19:21:06.127" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171031 19:21:06.127" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171031 19:21:06.244" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171031 19:21:06.255" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171031 19:21:06.256" level="INFO">${stderr} = </msg>
<msg timestamp="20171031 19:21:06.256" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20171031 19:21:05.390" endtime="20171031 19:21:06.256"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171031 19:21:06.256" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20171031 19:21:06.256" endtime="20171031 19:21:06.256"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171031 19:21:06.257" level="INFO">Length is 11</msg>
<status status="PASS" starttime="20171031 19:21:06.257" endtime="20171031 19:21:06.257"></status>
</kw>
<msg timestamp="20171031 19:21:06.257" level="INFO">${bmc_model} = Witherspoon</msg>
<status status="PASS" starttime="20171031 19:21:05.389" endtime="20171031 19:21:06.257"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20171031 19:21:06.258" level="INFO">BMC Model=Witherspoon</msg>
<status status="PASS" starttime="20171031 19:21:06.258" endtime="20171031 19:21:06.258"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:05.389" endtime="20171031 19:21:06.258"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:05.389" endtime="20171031 19:21:06.258"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171031 19:21:06.262" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20171031 19:21:06.261" endtime="20171031 19:21:06.262"></status>
</kw>
<msg timestamp="20171031 19:21:06.262" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20171031 19:21:06.260" endtime="20171031 19:21:06.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:06.263" endtime="20171031 19:21:06.263"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:06.262" endtime="20171031 19:21:06.263"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20171031 19:21:06.265" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20171031 19:21:06.265" endtime="20171031 19:21:06.265"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20171031 19:21:06.266" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20171031 19:21:06.265" endtime="20171031 19:21:06.266"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20171031 19:21:06.266" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20171031 19:21:06.266" endtime="20171031 19:21:06.266"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20171031 19:21:06.267" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" starttime="20171031 19:21:06.267" endtime="20171031 19:21:06.267"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:06.264" endtime="20171031 19:21:06.267"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:06.264" endtime="20171031 19:21:06.267"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171031 19:21:06.269" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20171031 19:21:06.269" endtime="20171031 19:21:06.270"></status>
</kw>
<msg timestamp="20171031 19:21:06.270" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20171031 19:21:06.268" endtime="20171031 19:21:06.270"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:06.271" endtime="20171031 19:21:06.272"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:06.272" endtime="20171031 19:21:06.273"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:06.271" endtime="20171031 19:21:06.273"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:06.270" endtime="20171031 19:21:06.273"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171031 19:21:06.273" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171031 19:21:08.488" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20171031 19:21:06.273" endtime="20171031 19:21:08.488"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:06.259" endtime="20171031 19:21:08.488"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:21:08.489" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20171031 19:21:08.556" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171031 19:21:08.556" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20171031 19:21:08.556" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171031 19:21:08.489" endtime="20171031 19:21:08.556"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171031 19:21:08.557" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20171031 19:21:08.557" endtime="20171031 19:21:08.557"></status>
</kw>
<msg timestamp="20171031 19:21:08.557" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" starttime="20171031 19:21:08.488" endtime="20171031 19:21:08.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:08.558" endtime="20171031 19:21:08.558"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:06.259" endtime="20171031 19:21:08.558"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:06.258" endtime="20171031 19:21:08.558"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Set Boot Defaults</arg>
</arguments>
<kw name="Set Boot Defaults">
<kw library="utils" name="Set Control Boot Mode">
<doc>Set given boot mode on the boot object path attribute.</doc>
<arguments>
<arg>${CONTROL_HOST_URI}/boot</arg>
<arg>${BOOT_MODE_REGULAR}</arg>
</arguments>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${boot_mode}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171031 19:21:08.560" level="INFO">${valueDict} = {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}</msg>
<status status="PASS" starttime="20171031 19:21:08.560" endtime="20171031 19:21:08.560"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${boot_path}</arg>
<arg>BootMode</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:08.562" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0//boot</msg>
<status status="PASS" starttime="20171031 19:21:08.561" endtime="20171031 19:21:08.562"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:08.565" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:08.564" endtime="20171031 19:21:08.565"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:08.566" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:08.565" endtime="20171031 19:21:08.566"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:08.566" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:08.566" endtime="20171031 19:21:08.566"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:08.567" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:08.567" endtime="20171031 19:21:08.567"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:08.754" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:08.568" endtime="20171031 19:21:08.755"></status>
</kw>
<msg timestamp="20171031 19:21:08.755" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:08.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:08.567" endtime="20171031 19:21:08.755"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:08.756" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:08.755" endtime="20171031 19:21:08.756"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:08.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:08.756" endtime="20171031 19:21:08.756"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:08.564" endtime="20171031 19:21:08.757"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:08.563" endtime="20171031 19:21:08.757"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:08.563" endtime="20171031 19:21:08.757"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:08.757" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0//boot/attr/BootMode</msg>
<status status="PASS" starttime="20171031 19:21:08.757" endtime="20171031 19:21:08.757"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:08.758" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:08.758" endtime="20171031 19:21:08.758"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:08.758" endtime="20171031 19:21:08.759"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:08.760" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/control/host0//boot/attr/BootMode, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}, u'headers': {u'Content-Ty...</msg>
<status status="PASS" starttime="20171031 19:21:08.760" endtime="20171031 19:21:08.760"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:08.761" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/control/host0//boot/attr/BootMode, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20171031 19:21:08.761" endtime="20171031 19:21:08.761"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:08.760" endtime="20171031 19:21:08.762"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:08.759" endtime="20171031 19:21:08.762"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:09.004" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0//boot/attr/BootMode, data={"data": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171031 19:21:09.004" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:08.762" endtime="20171031 19:21:09.004"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:09.005" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:09.005" endtime="20171031 19:21:09.005"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:09.007" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:09.006" endtime="20171031 19:21:09.007"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.005" endtime="20171031 19:21:09.007"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.004" endtime="20171031 19:21:09.007"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:09.007" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:09.007" endtime="20171031 19:21:09.007"></status>
</kw>
<msg timestamp="20171031 19:21:09.008" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:08.562" endtime="20171031 19:21:09.008"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:09.009" endtime="20171031 19:21:09.009"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.010" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171031 19:21:09.009" endtime="20171031 19:21:09.010"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:08.561" endtime="20171031 19:21:09.010"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:08.559" endtime="20171031 19:21:09.010"></status>
</kw>
<kw library="utils" name="Set Control Boot Mode">
<doc>Set given boot mode on the boot object path attribute.</doc>
<arguments>
<arg>${CONTROL_HOST_URI}/boot/one_time</arg>
<arg>${BOOT_MODE_REGULAR}</arg>
</arguments>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${boot_mode}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171031 19:21:09.011" level="INFO">${valueDict} = {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}</msg>
<status status="PASS" starttime="20171031 19:21:09.011" endtime="20171031 19:21:09.011"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${boot_path}</arg>
<arg>BootMode</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:09.013" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0//boot/one_time</msg>
<status status="PASS" starttime="20171031 19:21:09.012" endtime="20171031 19:21:09.013"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:09.015" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:09.015" endtime="20171031 19:21:09.016"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:09.016" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:09.016" endtime="20171031 19:21:09.016"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:09.017" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:09.017" endtime="20171031 19:21:09.017"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:09.018" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:09.017" endtime="20171031 19:21:09.018"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.197" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:09.019" endtime="20171031 19:21:09.197"></status>
</kw>
<msg timestamp="20171031 19:21:09.197" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:09.197" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:09.018" endtime="20171031 19:21:09.197"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.198" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:09.198" endtime="20171031 19:21:09.198"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.199" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:09.199" endtime="20171031 19:21:09.200"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.014" endtime="20171031 19:21:09.200"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.014" endtime="20171031 19:21:09.200"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.013" endtime="20171031 19:21:09.200"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:09.200" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0//boot/one_time/attr/BootMode</msg>
<status status="PASS" starttime="20171031 19:21:09.200" endtime="20171031 19:21:09.201"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:09.201" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:09.201" endtime="20171031 19:21:09.201"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.201" endtime="20171031 19:21:09.202"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:09.203" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/control/host0//boot/one_time/attr/BootMode, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}, u'headers': {u'C...</msg>
<status status="PASS" starttime="20171031 19:21:09.203" endtime="20171031 19:21:09.203"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:09.204" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/control/host0//boot/one_time/attr/BootMode, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20171031 19:21:09.204" endtime="20171031 19:21:09.204"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.204" endtime="20171031 19:21:09.205"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.202" endtime="20171031 19:21:09.205"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:09.405" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0//boot/one_time/attr/BootMode, data={"data": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171031 19:21:09.406" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:09.205" endtime="20171031 19:21:09.406"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:09.407" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:09.407" endtime="20171031 19:21:09.407"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:09.408" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:09.408" endtime="20171031 19:21:09.408"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.407" endtime="20171031 19:21:09.408"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.406" endtime="20171031 19:21:09.408"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:09.409" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:09.409" endtime="20171031 19:21:09.409"></status>
</kw>
<msg timestamp="20171031 19:21:09.409" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:09.013" endtime="20171031 19:21:09.409"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.410" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:09.409" endtime="20171031 19:21:09.410"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.411" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171031 19:21:09.410" endtime="20171031 19:21:09.411"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.011" endtime="20171031 19:21:09.411"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.010" endtime="20171031 19:21:09.411"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:08.559" endtime="20171031 19:21:09.412"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:08.559" endtime="20171031 19:21:09.412"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:00.347" endtime="20171031 19:21:09.412"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/2550/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/2550/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:09.458" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:09.457" endtime="20171031 19:21:09.458"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:09.459" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:09.458" endtime="20171031 19:21:09.459"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:09.459" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:09.459" endtime="20171031 19:21:09.459"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:09.460" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:09.460" endtime="20171031 19:21:09.460"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.649" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:09.461" endtime="20171031 19:21:09.649"></status>
</kw>
<msg timestamp="20171031 19:21:09.649" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:09.649" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:09.460" endtime="20171031 19:21:09.650"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.650" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:09.650" endtime="20171031 19:21:09.650"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:09.651" endtime="20171031 19:21:09.651"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.457" endtime="20171031 19:21:09.651"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.456" endtime="20171031 19:21:09.651"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.456" endtime="20171031 19:21:09.651"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.652" endtime="20171031 19:21:09.653"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171031 19:21:09.664" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20171031 19:21:09.653" endtime="20171031 19:21:09.664"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171031 19:21:09.674" level="INFO">${FFDC_DIR_PATH} = </msg>
<status status="PASS" starttime="20171031 19:21:09.665" endtime="20171031 19:21:09.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171031 19:21:09.676" level="INFO">${cur_time} = 2017-10-31 19:21:09:676141</msg>
<status status="PASS" starttime="20171031 19:21:09.676" endtime="20171031 19:21:09.676"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171031 19:21:09.677" level="INFO">${cur_time} = 20171031192109676141</msg>
<status status="PASS" starttime="20171031 19:21:09.677" endtime="20171031 19:21:09.677"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.676" endtime="20171031 19:21:09.677"></status>
</kw>
<msg timestamp="20171031 19:21:09.682" level="INFO">${FFDC_TIME} = 20171031192109676141</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171031 19:21:09.683" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20171031 19:21:09.683" endtime="20171031 19:21:09.684"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171031 19:21:09.684" level="INFO">${suite_name} = 20171031192109676141_TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20171031 19:21:09.684" endtime="20171031 19:21:09.684"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171031 19:21:09.685" level="INFO">${test_name} = TestSSLConnection</msg>
<status status="PASS" starttime="20171031 19:21:09.684" endtime="20171031 19:21:09.685"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171031 19:21:09.685" level="INFO">${test_name} = 20171031192109676141_TestSSLConnection</msg>
<status status="PASS" starttime="20171031 19:21:09.685" endtime="20171031 19:21:09.685"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.683" endtime="20171031 19:21:09.686"></status>
</kw>
<msg timestamp="20171031 19:21:09.686" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/2550/obmc-robot/logs/20171031192109676141_TestsSecurityTestSsl/20171031192109676141_TestSSLConnection/</msg>
<msg timestamp="20171031 19:21:09.691" level="INFO">${FFDC_PREFIX} = 20171031192109676141_</msg>
<status status="PASS" starttime="20171031 19:21:09.675" endtime="20171031 19:21:09.691"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.675" endtime="20171031 19:21:09.691"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.691" endtime="20171031 19:21:09.692"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.693" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs"&gt;/tmp/fspcibld/2550/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:21:09.692" endtime="20171031 19:21:09.693"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.694" level="FAIL">File '/tmp/fspcibld/2550/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" starttime="20171031 19:21:09.693" endtime="20171031 19:21:09.694"></status>
</kw>
<msg timestamp="20171031 19:21:09.694" level="INFO">${exist} = False</msg>
<status status="PASS" starttime="20171031 19:21:09.693" endtime="20171031 19:21:09.694"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.695" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:21:09.695" endtime="20171031 19:21:09.695"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.694" endtime="20171031 19:21:09.695"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.695" endtime="20171031 19:21:09.696"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171031 19:21:09.697" level="INFO">${cur_time} = 2017-10-31 19:21:09:696601</msg>
<status status="PASS" starttime="20171031 19:21:09.696" endtime="20171031 19:21:09.697"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171031 19:21:09.697" level="INFO">${cur_time} = 20171031192109696601</msg>
<status status="PASS" starttime="20171031 19:21:09.697" endtime="20171031 19:21:09.697"></status>
</kw>
<msg timestamp="20171031 19:21:09.698" level="INFO">${cur_time} = 20171031192109696601</msg>
<status status="PASS" starttime="20171031 19:21:09.696" endtime="20171031 19:21:09.698"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.698" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:21:09.698" endtime="20171031 19:21:09.699"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.653" endtime="20171031 19:21:09.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.699" endtime="20171031 19:21:09.699"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.652" endtime="20171031 19:21:09.699"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" starttime="20171031 19:21:09.455" endtime="20171031 19:21:09.700" critical="yes"></status>
</test>
<kw type="teardown" library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:09.700" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:09.700" endtime="20171031 19:21:09.701"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" starttime="20171031 19:21:09.414" endtime="20171031 19:21:09.701"></status>
</suite>
<status status="PASS" starttime="20171031 19:21:09.412" endtime="20171031 19:21:09.702"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/2550/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" library="utils" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171031 19:21:09.782" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:21:09.782" endtime="20171031 19:21:09.782"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171031 19:21:09.783" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:21:09.782" endtime="20171031 19:21:09.783"></status>
</kw>
<msg timestamp="20171031 19:21:09.783" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:21:09.781" endtime="20171031 19:21:09.783"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171031 19:21:09.785" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:21:09.784" endtime="20171031 19:21:09.785"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171031 19:21:09.785" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:21:09.785" endtime="20171031 19:21:09.786"></status>
</kw>
<msg timestamp="20171031 19:21:09.786" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:21:09.784" endtime="20171031 19:21:09.786"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:21:09.787" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw'</msg>
<status status="PASS" starttime="20171031 19:21:09.787" endtime="20171031 19:21:09.787"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.787" endtime="20171031 19:21:09.788"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:21:09.792" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171031 19:21:09.796" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:21:09.796" level="INFO">${output} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:21:09.788" endtime="20171031 19:21:09.796"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.799" endtime="20171031 19:21:09.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171031 19:21:09.800" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:09.800" endtime="20171031 19:21:09.801"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171031 19:21:09.801" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:21:09.801" endtime="20171031 19:21:09.801"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:21:09.803" level="INFO">${cmd_buf} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:21:09.802" endtime="20171031 19:21:09.803"></status>
</kw>
<msg timestamp="20171031 19:21:09.803" level="INFO">${search_string} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:21:09.786" endtime="20171031 19:21:09.803"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171031 19:21:09.805" level="INFO">${search_string} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:21:09.803" endtime="20171031 19:21:09.805"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:21:09.805" level="INFO">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20171031 19:21:09.805" endtime="20171031 19:21:09.805"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.806" endtime="20171031 19:21:09.806"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171031 19:21:09.810" level="INFO">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171031 19:21:09.819" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:21:09.819" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20171031 19:21:09.806" endtime="20171031 19:21:09.820"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.822" endtime="20171031 19:21:09.823"></status>
</kw>
<msg timestamp="20171031 19:21:09.823" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20171031 19:21:09.786" endtime="20171031 19:21:09.823"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:21:09.824" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20171031 19:21:09.823" endtime="20171031 19:21:09.824"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.824" endtime="20171031 19:21:09.827"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:21:09.827" level="INFO">${rc} = None</msg>
<msg timestamp="20171031 19:21:09.828" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20171031 19:21:09.827" endtime="20171031 19:21:09.828"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.828" endtime="20171031 19:21:09.828"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.830" level="FAIL">Source file '/tmp/9.3.86.161_os_console.txt' does not exist.</msg>
<status status="FAIL" starttime="20171031 19:21:09.830" endtime="20171031 19:21:09.831"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.829" endtime="20171031 19:21:09.831"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.829" endtime="20171031 19:21:09.831"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:21:09.831" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171031 19:21:09.831" endtime="20171031 19:21:09.831"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171031 19:21:09.832" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20171031 19:21:09.832" endtime="20171031 19:21:09.832"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.833" endtime="20171031 19:21:09.884"></status>
</kw>
<msg timestamp="20171031 19:21:09.885" level="INFO">${rc} = 1</msg>
<msg timestamp="20171031 19:21:09.885" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171031 19:21:09.832" endtime="20171031 19:21:09.885"></status>
</kw>
<msg timestamp="20171031 19:21:09.886" level="INFO">${log_output} = </msg>
<status status="PASS" starttime="20171031 19:21:09.783" endtime="20171031 19:21:09.886"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20171031 19:21:09.888" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:21:09.888" endtime="20171031 19:21:09.888"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:21:09.890" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw'</msg>
<status status="PASS" starttime="20171031 19:21:09.889" endtime="20171031 19:21:09.890"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.890" endtime="20171031 19:21:09.891"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:21:09.901" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171031 19:21:09.921" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:21:09.921" level="INFO">${output} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:21:09.891" endtime="20171031 19:21:09.922"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.935" endtime="20171031 19:21:09.938"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171031 19:21:09.941" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:09.939" endtime="20171031 19:21:09.941"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171031 19:21:09.943" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:21:09.942" endtime="20171031 19:21:09.943"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:21:09.946" level="INFO">${cmd_buf} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:21:09.943" endtime="20171031 19:21:09.946"></status>
</kw>
<msg timestamp="20171031 19:21:09.948" level="INFO">${sub_cmd_buf} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:21:09.889" endtime="20171031 19:21:09.948"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:21:09.950" level="INFO">${cmd_buf} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status status="PASS" starttime="20171031 19:21:09.948" endtime="20171031 19:21:09.950"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.950" endtime="20171031 19:21:09.951"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:21:09.963" level="INFO">Running command '/tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20171031 19:21:09.975" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:21:09.975" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171031 19:21:09.952" endtime="20171031 19:21:09.975"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:09.977" endtime="20171031 19:21:09.978"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20171031 19:21:10.979" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20171031 19:21:09.978" endtime="20171031 19:21:10.979"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:21:10.981" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw'</msg>
<status status="PASS" starttime="20171031 19:21:10.981" endtime="20171031 19:21:10.981"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:10.981" endtime="20171031 19:21:10.983"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:21:10.986" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171031 19:21:10.990" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:21:10.990" level="INFO">${output} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:21:10.983" endtime="20171031 19:21:10.990"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:10.992" endtime="20171031 19:21:10.993"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171031 19:21:10.994" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:10.994" endtime="20171031 19:21:10.994"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171031 19:21:10.995" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:21:10.994" endtime="20171031 19:21:10.995"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:21:10.996" level="INFO">${cmd_buf} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:21:10.995" endtime="20171031 19:21:10.996"></status>
</kw>
<msg timestamp="20171031 19:21:10.997" level="INFO">${search_string} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:21:10.980" endtime="20171031 19:21:10.997"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171031 19:21:10.997" level="INFO">${search_string} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:21:10.997" endtime="20171031 19:21:10.997"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:21:10.998" level="INFO">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20171031 19:21:10.998" endtime="20171031 19:21:10.998"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:10.998" endtime="20171031 19:21:10.999"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171031 19:21:11.002" level="INFO">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171031 19:21:11.009" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:21:11.010" level="INFO">${os_con_pid} = 201</msg>
<status status="PASS" starttime="20171031 19:21:10.999" endtime="20171031 19:21:11.010"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:11.012" endtime="20171031 19:21:11.013"></status>
</kw>
<msg timestamp="20171031 19:21:11.014" level="INFO">${os_con_pid} = 201</msg>
<status status="PASS" starttime="20171031 19:21:10.979" endtime="20171031 19:21:11.014"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg timestamp="20171031 19:21:11.015" level="INFO">Length is 3</msg>
<status status="PASS" starttime="20171031 19:21:11.014" endtime="20171031 19:21:11.015"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:09.781" endtime="20171031 19:21:11.015"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20171031 19:21:11.016" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171031 19:21:11.018" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20171031 19:21:11.018" endtime="20171031 19:21:11.019"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:11.020" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20171031 19:21:11.020" endtime="20171031 19:21:11.020"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:11.024" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:11.023" endtime="20171031 19:21:11.025"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:11.026" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:11.026" endtime="20171031 19:21:11.026"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:11.027" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:11.026" endtime="20171031 19:21:11.027"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:11.027" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:11.027" endtime="20171031 19:21:11.027"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:11.210" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:11.028" endtime="20171031 19:21:11.211"></status>
</kw>
<msg timestamp="20171031 19:21:11.211" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:11.211" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:11.028" endtime="20171031 19:21:11.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:11.211" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:11.211" endtime="20171031 19:21:11.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:11.212" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:11.212" endtime="20171031 19:21:11.212"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.023" endtime="20171031 19:21:11.212"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.022" endtime="20171031 19:21:11.213"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.022" endtime="20171031 19:21:11.213"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:11.213" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20171031 19:21:11.213" endtime="20171031 19:21:11.213"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:11.214" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:11.214" endtime="20171031 19:21:11.214"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:11.214" endtime="20171031 19:21:11.215"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:11.216" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" starttime="20171031 19:21:11.215" endtime="20171031 19:21:11.216"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:11.217" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20171031 19:21:11.217" endtime="20171031 19:21:11.217"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.216" endtime="20171031 19:21:11.217"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.215" endtime="20171031 19:21:11.217"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:11.728" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171031 19:21:11.728" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:11.218" endtime="20171031 19:21:11.728"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:11.729" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:11.729" endtime="20171031 19:21:11.729"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:11.730" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:11.730" endtime="20171031 19:21:11.730"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.729" endtime="20171031 19:21:11.730"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.728" endtime="20171031 19:21:11.730"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:11.731" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:11.731" endtime="20171031 19:21:11.731"></status>
</kw>
<msg timestamp="20171031 19:21:11.731" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:11.021" endtime="20171031 19:21:11.731"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:11.732" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:11.731" endtime="20171031 19:21:11.732"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171031 19:21:11.732" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171031 19:21:11.732" endtime="20171031 19:21:11.733"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.019" endtime="20171031 19:21:11.733"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:11.733" endtime="20171031 19:21:11.733"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:11.739" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:11.739" endtime="20171031 19:21:11.739"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:11.740" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:11.740" endtime="20171031 19:21:11.740"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:11.741" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:11.740" endtime="20171031 19:21:11.741"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:11.741" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:11.741" endtime="20171031 19:21:11.741"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:12.331" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:11.742" endtime="20171031 19:21:12.331"></status>
</kw>
<msg timestamp="20171031 19:21:12.331" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:12.331" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:11.742" endtime="20171031 19:21:12.331"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:12.332" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:12.332" endtime="20171031 19:21:12.332"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:12.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:12.332" endtime="20171031 19:21:12.333"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.738" endtime="20171031 19:21:12.333"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.738" endtime="20171031 19:21:12.333"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.737" endtime="20171031 19:21:12.333"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:12.334" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171031 19:21:12.333" endtime="20171031 19:21:12.334"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:12.336" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:12.335" endtime="20171031 19:21:12.336"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:12.337" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:12.336" endtime="20171031 19:21:12.337"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:12.336" endtime="20171031 19:21:12.337"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:12.334" endtime="20171031 19:21:12.337"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:12.334" endtime="20171031 19:21:12.337"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:12.799" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171031 19:21:12.800" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:12.337" endtime="20171031 19:21:12.800"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:12.801" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:12.801" endtime="20171031 19:21:12.801"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:12.802" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:12.802" endtime="20171031 19:21:12.802"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:12.801" endtime="20171031 19:21:12.802"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:12.800" endtime="20171031 19:21:12.803"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:12.800" endtime="20171031 19:21:12.803"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:12.803" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:12.803" endtime="20171031 19:21:12.803"></status>
</kw>
<msg timestamp="20171031 19:21:12.803" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:11.737" endtime="20171031 19:21:12.803"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:12.804" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:12.804" endtime="20171031 19:21:12.804"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:21:12.805" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:12.805" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:12.805" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" starttime="20171031 19:21:12.804" endtime="20171031 19:21:12.805"></status>
</kw>
<msg timestamp="20171031 19:21:12.805" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171031 19:21:11.736" endtime="20171031 19:21:12.805"></status>
</kw>
<msg timestamp="20171031 19:21:12.805" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171031 19:21:11.736" endtime="20171031 19:21:12.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:12.806" endtime="20171031 19:21:12.806"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.735" endtime="20171031 19:21:12.806"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:12.810" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:12.810" endtime="20171031 19:21:12.810"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:12.811" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:12.811" endtime="20171031 19:21:12.811"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:12.812" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:12.811" endtime="20171031 19:21:12.812"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:12.812" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:12.812" endtime="20171031 19:21:12.812"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:13.188" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:12.813" endtime="20171031 19:21:13.188"></status>
</kw>
<msg timestamp="20171031 19:21:13.188" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:13.188" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:12.813" endtime="20171031 19:21:13.188"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:13.189" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:13.189" endtime="20171031 19:21:13.189"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:13.190" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:13.189" endtime="20171031 19:21:13.190"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:12.809" endtime="20171031 19:21:13.190"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:12.808" endtime="20171031 19:21:13.190"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:12.808" endtime="20171031 19:21:13.190"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:13.191" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20171031 19:21:13.190" endtime="20171031 19:21:13.191"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:13.193" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:13.192" endtime="20171031 19:21:13.193"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:13.194" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:13.193" endtime="20171031 19:21:13.194"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:13.193" endtime="20171031 19:21:13.194"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:13.191" endtime="20171031 19:21:13.194"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:13.191" endtime="20171031 19:21:13.194"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:13.368" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171031 19:21:13.369" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:13.194" endtime="20171031 19:21:13.369"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:13.371" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:13.370" endtime="20171031 19:21:13.371"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:13.372" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:13.371" endtime="20171031 19:21:13.372"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:13.371" endtime="20171031 19:21:13.372"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:13.370" endtime="20171031 19:21:13.372"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:13.369" endtime="20171031 19:21:13.372"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:13.372" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:13.372" endtime="20171031 19:21:13.372"></status>
</kw>
<msg timestamp="20171031 19:21:13.373" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:12.807" endtime="20171031 19:21:13.373"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:13.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:13.373" endtime="20171031 19:21:13.374"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:21:13.374" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:13.374" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:13.374" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" starttime="20171031 19:21:13.374" endtime="20171031 19:21:13.374"></status>
</kw>
<msg timestamp="20171031 19:21:13.375" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20171031 19:21:12.807" endtime="20171031 19:21:13.375"></status>
</kw>
<msg timestamp="20171031 19:21:13.375" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20171031 19:21:12.806" endtime="20171031 19:21:13.375"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:13.375" endtime="20171031 19:21:13.376"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.735" endtime="20171031 19:21:13.376"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.735" endtime="20171031 19:21:13.376"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.734" endtime="20171031 19:21:13.376"></status>
</kw>
<msg timestamp="20171031 19:21:13.376" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171031 19:21:11.734" endtime="20171031 19:21:13.376"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:13.376" endtime="20171031 19:21:13.377"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.017" endtime="20171031 19:21:13.377"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171031 19:21:13.378" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" starttime="20171031 19:21:13.377" endtime="20171031 19:21:13.378"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:13.380" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20171031 19:21:13.379" endtime="20171031 19:21:13.380"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:13.384" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:13.384" endtime="20171031 19:21:13.384"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:13.385" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:13.385" endtime="20171031 19:21:13.385"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:13.386" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:13.385" endtime="20171031 19:21:13.386"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:13.386" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:13.386" endtime="20171031 19:21:13.387"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:13.599" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:13.387" endtime="20171031 19:21:13.599"></status>
</kw>
<msg timestamp="20171031 19:21:13.600" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:13.600" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:13.387" endtime="20171031 19:21:13.600"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:13.600" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:13.600" endtime="20171031 19:21:13.601"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:13.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:13.601" endtime="20171031 19:21:13.602"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:13.383" endtime="20171031 19:21:13.602"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:13.382" endtime="20171031 19:21:13.602"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:13.381" endtime="20171031 19:21:13.602"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:13.603" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20171031 19:21:13.602" endtime="20171031 19:21:13.603"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:13.603" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:13.603" endtime="20171031 19:21:13.603"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:13.604" endtime="20171031 19:21:13.604"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:13.606" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status status="PASS" starttime="20171031 19:21:13.605" endtime="20171031 19:21:13.606"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:13.607" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20171031 19:21:13.606" endtime="20171031 19:21:13.607"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:13.606" endtime="20171031 19:21:13.607"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:13.604" endtime="20171031 19:21:13.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:14.138" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171031 19:21:14.138" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:13.607" endtime="20171031 19:21:14.138"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:14.140" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:14.139" endtime="20171031 19:21:14.140"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:14.141" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:14.140" endtime="20171031 19:21:14.141"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:14.140" endtime="20171031 19:21:14.141"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:14.138" endtime="20171031 19:21:14.141"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:14.141" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:14.141" endtime="20171031 19:21:14.142"></status>
</kw>
<msg timestamp="20171031 19:21:14.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:13.380" endtime="20171031 19:21:14.142"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:14.142" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:14.142" endtime="20171031 19:21:14.142"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171031 19:21:14.143" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171031 19:21:14.143" endtime="20171031 19:21:14.143"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:13.378" endtime="20171031 19:21:14.143"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:14.144" endtime="20171031 19:21:14.144"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:14.149" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:14.149" endtime="20171031 19:21:14.149"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:14.150" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:14.149" endtime="20171031 19:21:14.150"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:14.150" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:14.150" endtime="20171031 19:21:14.151"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:14.151" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:14.151" endtime="20171031 19:21:14.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:16.745" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:14.152" endtime="20171031 19:21:16.745"></status>
</kw>
<msg timestamp="20171031 19:21:16.745" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:16.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:14.151" endtime="20171031 19:21:16.745"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:16.746" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:16.746" endtime="20171031 19:21:16.746"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:16.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:16.746" endtime="20171031 19:21:16.747"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:14.148" endtime="20171031 19:21:16.747"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:14.148" endtime="20171031 19:21:16.747"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:14.147" endtime="20171031 19:21:16.747"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:16.748" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171031 19:21:16.747" endtime="20171031 19:21:16.748"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:16.750" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:16.749" endtime="20171031 19:21:16.750"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:16.751" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:16.751" endtime="20171031 19:21:16.752"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:16.750" endtime="20171031 19:21:16.752"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:16.749" endtime="20171031 19:21:16.752"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:16.748" endtime="20171031 19:21:16.752"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:26.765" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg timestamp="20171031 19:21:34.187" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171031 19:21:34.187" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:16.752" endtime="20171031 19:21:34.188"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:34.190" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:34.189" endtime="20171031 19:21:34.190"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:34.191" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:34.190" endtime="20171031 19:21:34.191"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:34.190" endtime="20171031 19:21:34.191"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:34.189" endtime="20171031 19:21:34.191"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:34.188" endtime="20171031 19:21:34.191"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:34.191" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:34.191" endtime="20171031 19:21:34.192"></status>
</kw>
<msg timestamp="20171031 19:21:34.192" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:14.146" endtime="20171031 19:21:34.192"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:34.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:34.192" endtime="20171031 19:21:34.193"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:21:34.193" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:34.193" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:34.193" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" starttime="20171031 19:21:34.193" endtime="20171031 19:21:34.193"></status>
</kw>
<msg timestamp="20171031 19:21:34.194" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171031 19:21:14.146" endtime="20171031 19:21:34.194"></status>
</kw>
<msg timestamp="20171031 19:21:34.194" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171031 19:21:14.145" endtime="20171031 19:21:34.194"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171031 19:21:34.195" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171031 19:21:34.194" endtime="20171031 19:21:34.195"></status>
</kw>
<status status="FAIL" starttime="20171031 19:21:14.145" endtime="20171031 19:21:34.195"></status>
</kw>
<status status="FAIL" starttime="20171031 19:21:14.145" endtime="20171031 19:21:34.195"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:44.201" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:44.201" endtime="20171031 19:21:44.201"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:44.202" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:44.202" endtime="20171031 19:21:44.202"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:44.203" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:44.202" endtime="20171031 19:21:44.203"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:44.203" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:44.203" endtime="20171031 19:21:44.203"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:44.400" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:44.204" endtime="20171031 19:21:44.400"></status>
</kw>
<msg timestamp="20171031 19:21:44.400" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:44.400" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:44.204" endtime="20171031 19:21:44.400"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:44.401" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:44.400" endtime="20171031 19:21:44.401"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:44.401" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:44.401" endtime="20171031 19:21:44.402"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.200" endtime="20171031 19:21:44.402"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.200" endtime="20171031 19:21:44.402"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.198" endtime="20171031 19:21:44.402"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:44.402" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171031 19:21:44.402" endtime="20171031 19:21:44.402"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:44.405" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:44.404" endtime="20171031 19:21:44.405"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:44.406" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:44.405" endtime="20171031 19:21:44.406"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.405" endtime="20171031 19:21:44.406"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.403" endtime="20171031 19:21:44.406"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.403" endtime="20171031 19:21:44.406"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:44.485" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171031 19:21:44.485" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:44.406" endtime="20171031 19:21:44.485"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:44.487" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:44.487" endtime="20171031 19:21:44.487"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:44.488" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:44.488" endtime="20171031 19:21:44.489"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.488" endtime="20171031 19:21:44.489"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.486" endtime="20171031 19:21:44.489"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.486" endtime="20171031 19:21:44.489"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:44.489" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:44.489" endtime="20171031 19:21:44.489"></status>
</kw>
<msg timestamp="20171031 19:21:44.490" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:44.198" endtime="20171031 19:21:44.490"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:44.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:44.490" endtime="20171031 19:21:44.490"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:21:44.491" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:44.491" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:44.491" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" starttime="20171031 19:21:44.491" endtime="20171031 19:21:44.491"></status>
</kw>
<msg timestamp="20171031 19:21:44.491" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20171031 19:21:44.197" endtime="20171031 19:21:44.491"></status>
</kw>
<msg timestamp="20171031 19:21:44.492" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20171031 19:21:44.197" endtime="20171031 19:21:44.492"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:44.492" endtime="20171031 19:21:44.493"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.196" endtime="20171031 19:21:44.493"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:44.497" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:44.497" endtime="20171031 19:21:44.497"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:44.498" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:44.497" endtime="20171031 19:21:44.498"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:44.498" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:44.498" endtime="20171031 19:21:44.499"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:44.499" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:44.499" endtime="20171031 19:21:44.499"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:44.695" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:44.500" endtime="20171031 19:21:44.696"></status>
</kw>
<msg timestamp="20171031 19:21:44.696" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:44.696" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:44.500" endtime="20171031 19:21:44.696"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:44.697" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:44.696" endtime="20171031 19:21:44.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:44.697" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:44.697" endtime="20171031 19:21:44.698"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.496" endtime="20171031 19:21:44.698"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.496" endtime="20171031 19:21:44.698"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.495" endtime="20171031 19:21:44.698"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:44.698" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20171031 19:21:44.698" endtime="20171031 19:21:44.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:44.701" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:44.700" endtime="20171031 19:21:44.701"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:44.702" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:44.702" endtime="20171031 19:21:44.703"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.702" endtime="20171031 19:21:44.703"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.699" endtime="20171031 19:21:44.703"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.699" endtime="20171031 19:21:44.703"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:44.792" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171031 19:21:44.792" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:44.703" endtime="20171031 19:21:44.792"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:44.794" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:44.793" endtime="20171031 19:21:44.794"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:44.795" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:44.795" endtime="20171031 19:21:44.795"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.794" endtime="20171031 19:21:44.795"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.793" endtime="20171031 19:21:44.795"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.792" endtime="20171031 19:21:44.795"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:44.796" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:44.796" endtime="20171031 19:21:44.796"></status>
</kw>
<msg timestamp="20171031 19:21:44.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:44.494" endtime="20171031 19:21:44.796"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:44.797" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:44.797" endtime="20171031 19:21:44.797"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:21:44.798" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:44.798" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:44.798" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20171031 19:21:44.797" endtime="20171031 19:21:44.798"></status>
</kw>
<msg timestamp="20171031 19:21:44.798" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20171031 19:21:44.494" endtime="20171031 19:21:44.798"></status>
</kw>
<msg timestamp="20171031 19:21:44.798" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20171031 19:21:44.493" endtime="20171031 19:21:44.798"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:44.799" endtime="20171031 19:21:44.799"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:44.803" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:44.803" endtime="20171031 19:21:44.803"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:44.804" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:44.804" endtime="20171031 19:21:44.804"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:44.805" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:44.804" endtime="20171031 19:21:44.805"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:44.806" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:44.805" endtime="20171031 19:21:44.806"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:45.082" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:44.807" endtime="20171031 19:21:45.082"></status>
</kw>
<msg timestamp="20171031 19:21:45.083" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:45.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:44.806" endtime="20171031 19:21:45.083"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:45.083" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:45.083" endtime="20171031 19:21:45.083"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:45.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:45.084" endtime="20171031 19:21:45.084"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.802" endtime="20171031 19:21:45.084"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.802" endtime="20171031 19:21:45.084"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:44.801" endtime="20171031 19:21:45.084"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:45.085" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20171031 19:21:45.085" endtime="20171031 19:21:45.085"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:45.087" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:45.086" endtime="20171031 19:21:45.087"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:45.088" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:45.088" endtime="20171031 19:21:45.088"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:45.087" endtime="20171031 19:21:45.088"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:45.086" endtime="20171031 19:21:45.088"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:45.085" endtime="20171031 19:21:45.088"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:45.193" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171031 19:21:45.193" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:45.089" endtime="20171031 19:21:45.193"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:45.195" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:45.195" endtime="20171031 19:21:45.195"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:45.196" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:45.196" endtime="20171031 19:21:45.196"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:45.195" endtime="20171031 19:21:45.196"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:45.194" endtime="20171031 19:21:45.196"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:45.194" endtime="20171031 19:21:45.196"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:45.197" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:45.197" endtime="20171031 19:21:45.197"></status>
</kw>
<msg timestamp="20171031 19:21:45.197" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:44.801" endtime="20171031 19:21:45.197"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:45.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:45.197" endtime="20171031 19:21:45.198"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:21:45.199" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:45.199" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:45.199" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status status="PASS" starttime="20171031 19:21:45.198" endtime="20171031 19:21:45.199"></status>
</kw>
<msg timestamp="20171031 19:21:45.199" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20171031 19:21:44.800" endtime="20171031 19:21:45.199"></status>
</kw>
<msg timestamp="20171031 19:21:45.200" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20171031 19:21:44.800" endtime="20171031 19:21:45.200"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171031 19:21:45.200" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:21:45.200" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20171031 19:21:45.200" endtime="20171031 19:21:45.200"></status>
</kw>
<status status="FAIL" starttime="20171031 19:21:44.799" endtime="20171031 19:21:45.201"></status>
</kw>
<status status="FAIL" starttime="20171031 19:21:44.196" endtime="20171031 19:21:45.201"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:55.207" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:55.206" endtime="20171031 19:21:55.207"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:55.208" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:55.207" endtime="20171031 19:21:55.208"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:55.208" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:55.208" endtime="20171031 19:21:55.208"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:55.209" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:55.209" endtime="20171031 19:21:55.209"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:55.471" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:55.210" endtime="20171031 19:21:55.471"></status>
</kw>
<msg timestamp="20171031 19:21:55.471" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:55.472" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:55.209" endtime="20171031 19:21:55.472"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:55.472" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:55.472" endtime="20171031 19:21:55.472"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:55.473" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:55.473" endtime="20171031 19:21:55.473"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:55.206" endtime="20171031 19:21:55.473"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:55.205" endtime="20171031 19:21:55.473"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:55.204" endtime="20171031 19:21:55.473"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:55.474" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171031 19:21:55.474" endtime="20171031 19:21:55.474"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:55.476" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:55.476" endtime="20171031 19:21:55.476"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:55.477" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:55.477" endtime="20171031 19:21:55.477"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:55.477" endtime="20171031 19:21:55.478"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:55.475" endtime="20171031 19:21:55.478"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:55.475" endtime="20171031 19:21:55.478"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:55.570" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171031 19:21:55.571" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:55.478" endtime="20171031 19:21:55.571"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:55.573" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:55.572" endtime="20171031 19:21:55.573"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:55.574" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:55.574" endtime="20171031 19:21:55.574"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:55.573" endtime="20171031 19:21:55.574"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:55.572" endtime="20171031 19:21:55.575"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:55.571" endtime="20171031 19:21:55.575"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:55.575" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:55.575" endtime="20171031 19:21:55.575"></status>
</kw>
<msg timestamp="20171031 19:21:55.575" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:55.203" endtime="20171031 19:21:55.575"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:55.576" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:55.576" endtime="20171031 19:21:55.576"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:21:55.577" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:55.577" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:55.577" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" starttime="20171031 19:21:55.576" endtime="20171031 19:21:55.577"></status>
</kw>
<msg timestamp="20171031 19:21:55.577" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20171031 19:21:55.203" endtime="20171031 19:21:55.577"></status>
</kw>
<msg timestamp="20171031 19:21:55.577" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20171031 19:21:55.202" endtime="20171031 19:21:55.577"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:55.578" endtime="20171031 19:21:55.578"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:55.202" endtime="20171031 19:21:55.578"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:55.582" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:55.582" endtime="20171031 19:21:55.583"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:55.583" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:55.583" endtime="20171031 19:21:55.583"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:55.584" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:55.584" endtime="20171031 19:21:55.584"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:55.585" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:55.584" endtime="20171031 19:21:55.585"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:56.116" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:55.586" endtime="20171031 19:21:56.116"></status>
</kw>
<msg timestamp="20171031 19:21:56.116" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:56.116" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:55.585" endtime="20171031 19:21:56.116"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:56.117" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:56.117" endtime="20171031 19:21:56.117"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:56.118" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:56.117" endtime="20171031 19:21:56.118"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:55.581" endtime="20171031 19:21:56.118"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:55.581" endtime="20171031 19:21:56.118"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:55.580" endtime="20171031 19:21:56.118"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:56.119" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20171031 19:21:56.119" endtime="20171031 19:21:56.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:56.122" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:56.120" endtime="20171031 19:21:56.122"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:56.122" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:56.122" endtime="20171031 19:21:56.123"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:56.122" endtime="20171031 19:21:56.123"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:56.120" endtime="20171031 19:21:56.123"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:56.119" endtime="20171031 19:21:56.123"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:56.248" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171031 19:21:56.248" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:56.123" endtime="20171031 19:21:56.248"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:56.250" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:56.250" endtime="20171031 19:21:56.251"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:56.251" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:56.251" endtime="20171031 19:21:56.252"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:56.251" endtime="20171031 19:21:56.252"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:56.249" endtime="20171031 19:21:56.252"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:56.249" endtime="20171031 19:21:56.252"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:56.252" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:56.252" endtime="20171031 19:21:56.252"></status>
</kw>
<msg timestamp="20171031 19:21:56.253" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:55.579" endtime="20171031 19:21:56.253"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:56.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:56.253" endtime="20171031 19:21:56.253"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:21:56.254" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:56.254" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:56.254" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20171031 19:21:56.254" endtime="20171031 19:21:56.254"></status>
</kw>
<msg timestamp="20171031 19:21:56.254" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20171031 19:21:55.579" endtime="20171031 19:21:56.254"></status>
</kw>
<msg timestamp="20171031 19:21:56.255" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20171031 19:21:55.578" endtime="20171031 19:21:56.255"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:21:56.255" endtime="20171031 19:21:56.255"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:21:56.259" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:21:56.259" endtime="20171031 19:21:56.260"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:21:56.260" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:21:56.260" endtime="20171031 19:21:56.260"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:21:56.261" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:21:56.261" endtime="20171031 19:21:56.261"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:21:56.262" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:21:56.261" endtime="20171031 19:21:56.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:21:56.685" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:21:56.263" endtime="20171031 19:21:56.685"></status>
</kw>
<msg timestamp="20171031 19:21:56.685" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:21:56.685" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:56.262" endtime="20171031 19:21:56.685"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:21:56.686" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:56.686" endtime="20171031 19:21:56.686"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:56.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:56.686" endtime="20171031 19:21:56.687"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:56.258" endtime="20171031 19:21:56.687"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:56.258" endtime="20171031 19:21:56.687"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:56.257" endtime="20171031 19:21:56.687"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:21:56.688" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20171031 19:21:56.687" endtime="20171031 19:21:56.688"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:56.690" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:56.689" endtime="20171031 19:21:56.690"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:56.691" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:21:56.691" endtime="20171031 19:21:56.691"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:56.690" endtime="20171031 19:21:56.691"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:56.689" endtime="20171031 19:21:56.691"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:56.688" endtime="20171031 19:21:56.691"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:21:56.914" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171031 19:21:56.914" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:56.692" endtime="20171031 19:21:56.914"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:21:56.916" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:56.916" endtime="20171031 19:21:56.916"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:21:56.917" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:21:56.917" endtime="20171031 19:21:56.917"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:56.916" endtime="20171031 19:21:56.917"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:56.915" endtime="20171031 19:21:56.917"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:56.914" endtime="20171031 19:21:56.917"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:21:56.918" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:21:56.918" endtime="20171031 19:21:56.918"></status>
</kw>
<msg timestamp="20171031 19:21:56.918" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:21:56.257" endtime="20171031 19:21:56.918"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:21:56.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:21:56.918" endtime="20171031 19:21:56.919"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:21:56.920" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:21:56.920" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:21:56.920" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status status="PASS" starttime="20171031 19:21:56.919" endtime="20171031 19:21:56.920"></status>
</kw>
<msg timestamp="20171031 19:21:56.920" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20171031 19:21:56.256" endtime="20171031 19:21:56.920"></status>
</kw>
<msg timestamp="20171031 19:21:56.920" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20171031 19:21:56.256" endtime="20171031 19:21:56.920"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171031 19:21:56.921" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:21:56.921" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20171031 19:21:56.921" endtime="20171031 19:21:56.921"></status>
</kw>
<status status="FAIL" starttime="20171031 19:21:56.255" endtime="20171031 19:21:56.922"></status>
</kw>
<status status="FAIL" starttime="20171031 19:21:55.201" endtime="20171031 19:21:56.922"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:22:06.928" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:22:06.927" endtime="20171031 19:22:06.928"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:22:06.929" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:22:06.928" endtime="20171031 19:22:06.929"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:22:06.929" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:22:06.929" endtime="20171031 19:22:06.929"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:22:06.930" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:22:06.930" endtime="20171031 19:22:06.930"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:22:07.508" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:22:06.931" endtime="20171031 19:22:07.508"></status>
</kw>
<msg timestamp="20171031 19:22:07.509" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:22:07.509" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:06.930" endtime="20171031 19:22:07.509"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:22:07.509" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:07.509" endtime="20171031 19:22:07.510"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:07.510" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:07.510" endtime="20171031 19:22:07.510"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:06.927" endtime="20171031 19:22:07.511"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:06.926" endtime="20171031 19:22:07.511"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:06.925" endtime="20171031 19:22:07.511"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:22:07.511" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171031 19:22:07.511" endtime="20171031 19:22:07.511"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:07.514" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:07.513" endtime="20171031 19:22:07.514"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:07.515" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:07.514" endtime="20171031 19:22:07.515"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:07.514" endtime="20171031 19:22:07.515"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:07.512" endtime="20171031 19:22:07.515"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:07.512" endtime="20171031 19:22:07.515"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:22:07.635" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171031 19:22:07.636" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:07.515" endtime="20171031 19:22:07.636"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:07.638" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:07.637" endtime="20171031 19:22:07.638"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:07.639" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:07.639" endtime="20171031 19:22:07.639"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:07.638" endtime="20171031 19:22:07.639"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:07.637" endtime="20171031 19:22:07.639"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:07.636" endtime="20171031 19:22:07.639"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:22:07.640" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:22:07.640" endtime="20171031 19:22:07.640"></status>
</kw>
<msg timestamp="20171031 19:22:07.640" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:06.924" endtime="20171031 19:22:07.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:07.641" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:07.640" endtime="20171031 19:22:07.641"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:22:07.642" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:22:07.642" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:22:07.642" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" starttime="20171031 19:22:07.642" endtime="20171031 19:22:07.642"></status>
</kw>
<msg timestamp="20171031 19:22:07.642" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20171031 19:22:06.924" endtime="20171031 19:22:07.642"></status>
</kw>
<msg timestamp="20171031 19:22:07.643" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20171031 19:22:06.923" endtime="20171031 19:22:07.643"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:22:07.643" endtime="20171031 19:22:07.643"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:06.923" endtime="20171031 19:22:07.644"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:22:07.647" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:22:07.647" endtime="20171031 19:22:07.648"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:22:07.648" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:22:07.648" endtime="20171031 19:22:07.648"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:22:07.649" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:22:07.648" endtime="20171031 19:22:07.649"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:22:07.649" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:22:07.649" endtime="20171031 19:22:07.650"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:22:07.985" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:22:07.650" endtime="20171031 19:22:07.985"></status>
</kw>
<msg timestamp="20171031 19:22:07.985" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:22:07.985" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:07.650" endtime="20171031 19:22:07.985"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:22:07.986" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:07.985" endtime="20171031 19:22:07.986"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:07.987" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:07.986" endtime="20171031 19:22:07.987"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:07.646" endtime="20171031 19:22:07.987"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:07.646" endtime="20171031 19:22:07.987"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:07.645" endtime="20171031 19:22:07.987"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:22:07.988" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20171031 19:22:07.987" endtime="20171031 19:22:07.988"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:07.990" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:07.989" endtime="20171031 19:22:07.990"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:07.991" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:07.991" endtime="20171031 19:22:07.991"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:07.990" endtime="20171031 19:22:07.991"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:07.988" endtime="20171031 19:22:07.992"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:07.988" endtime="20171031 19:22:07.992"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:22:08.080" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171031 19:22:08.080" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:07.992" endtime="20171031 19:22:08.080"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:08.082" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:08.082" endtime="20171031 19:22:08.082"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:08.083" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:08.083" endtime="20171031 19:22:08.083"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:08.082" endtime="20171031 19:22:08.083"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:08.081" endtime="20171031 19:22:08.083"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:08.081" endtime="20171031 19:22:08.083"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:22:08.084" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:22:08.084" endtime="20171031 19:22:08.084"></status>
</kw>
<msg timestamp="20171031 19:22:08.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:07.645" endtime="20171031 19:22:08.084"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:08.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:08.085" endtime="20171031 19:22:08.085"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:22:08.085" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:22:08.086" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:22:08.086" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20171031 19:22:08.085" endtime="20171031 19:22:08.086"></status>
</kw>
<msg timestamp="20171031 19:22:08.086" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20171031 19:22:07.644" endtime="20171031 19:22:08.086"></status>
</kw>
<msg timestamp="20171031 19:22:08.086" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20171031 19:22:07.644" endtime="20171031 19:22:08.086"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:22:08.087" endtime="20171031 19:22:08.087"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:22:08.091" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:22:08.091" endtime="20171031 19:22:08.091"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:22:08.092" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:22:08.092" endtime="20171031 19:22:08.092"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:22:08.093" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:22:08.092" endtime="20171031 19:22:08.093"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:22:08.094" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:22:08.093" endtime="20171031 19:22:08.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:22:08.333" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:22:08.097" endtime="20171031 19:22:08.333"></status>
</kw>
<msg timestamp="20171031 19:22:08.334" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:22:08.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:08.094" endtime="20171031 19:22:08.334"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:22:08.334" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:08.334" endtime="20171031 19:22:08.334"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:08.335" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:08.335" endtime="20171031 19:22:08.335"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:08.090" endtime="20171031 19:22:08.335"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:08.090" endtime="20171031 19:22:08.335"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:08.089" endtime="20171031 19:22:08.336"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:22:08.336" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20171031 19:22:08.336" endtime="20171031 19:22:08.336"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:08.338" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:08.338" endtime="20171031 19:22:08.338"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:08.339" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:08.339" endtime="20171031 19:22:08.340"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:08.338" endtime="20171031 19:22:08.340"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:08.337" endtime="20171031 19:22:08.340"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:08.336" endtime="20171031 19:22:08.340"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:22:08.483" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171031 19:22:08.484" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:08.340" endtime="20171031 19:22:08.484"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:08.486" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:08.485" endtime="20171031 19:22:08.486"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:08.487" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:08.486" endtime="20171031 19:22:08.487"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:08.486" endtime="20171031 19:22:08.487"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:08.485" endtime="20171031 19:22:08.487"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:08.484" endtime="20171031 19:22:08.487"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:22:08.487" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:22:08.487" endtime="20171031 19:22:08.487"></status>
</kw>
<msg timestamp="20171031 19:22:08.488" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:08.088" endtime="20171031 19:22:08.488"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:08.488" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:08.488" endtime="20171031 19:22:08.488"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:22:08.489" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:22:08.489" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:22:08.489" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status status="PASS" starttime="20171031 19:22:08.489" endtime="20171031 19:22:08.489"></status>
</kw>
<msg timestamp="20171031 19:22:08.489" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20171031 19:22:08.088" endtime="20171031 19:22:08.490"></status>
</kw>
<msg timestamp="20171031 19:22:08.490" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20171031 19:22:08.087" endtime="20171031 19:22:08.490"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171031 19:22:08.490" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:22:08.491" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20171031 19:22:08.490" endtime="20171031 19:22:08.491"></status>
</kw>
<status status="FAIL" starttime="20171031 19:22:08.087" endtime="20171031 19:22:08.491"></status>
</kw>
<status status="FAIL" starttime="20171031 19:22:06.922" endtime="20171031 19:22:08.491"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:22:18.497" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:22:18.497" endtime="20171031 19:22:18.497"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:22:18.498" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:22:18.498" endtime="20171031 19:22:18.498"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:22:18.499" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:22:18.498" endtime="20171031 19:22:18.499"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:22:18.500" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:22:18.499" endtime="20171031 19:22:18.500"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:22:18.826" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:22:18.500" endtime="20171031 19:22:18.826"></status>
</kw>
<msg timestamp="20171031 19:22:18.827" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:22:18.827" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:18.500" endtime="20171031 19:22:18.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:22:18.827" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:18.827" endtime="20171031 19:22:18.828"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:18.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:18.828" endtime="20171031 19:22:18.828"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:18.496" endtime="20171031 19:22:18.828"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:18.496" endtime="20171031 19:22:18.828"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:18.494" endtime="20171031 19:22:18.829"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:22:18.829" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171031 19:22:18.829" endtime="20171031 19:22:18.829"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:18.831" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:18.831" endtime="20171031 19:22:18.831"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:18.832" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:18.832" endtime="20171031 19:22:18.833"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:18.832" endtime="20171031 19:22:18.833"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:18.830" endtime="20171031 19:22:18.833"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:18.830" endtime="20171031 19:22:18.833"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:22:18.897" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171031 19:22:18.897" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:18.833" endtime="20171031 19:22:18.897"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:18.899" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:18.898" endtime="20171031 19:22:18.899"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:18.900" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:18.900" endtime="20171031 19:22:18.900"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:18.899" endtime="20171031 19:22:18.901"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:18.898" endtime="20171031 19:22:18.901"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:18.897" endtime="20171031 19:22:18.901"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:22:18.901" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:22:18.901" endtime="20171031 19:22:18.901"></status>
</kw>
<msg timestamp="20171031 19:22:18.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:18.494" endtime="20171031 19:22:18.902"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:18.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:18.902" endtime="20171031 19:22:18.902"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:22:18.903" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:22:18.903" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:22:18.903" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" starttime="20171031 19:22:18.902" endtime="20171031 19:22:18.903"></status>
</kw>
<msg timestamp="20171031 19:22:18.903" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20171031 19:22:18.493" endtime="20171031 19:22:18.903"></status>
</kw>
<msg timestamp="20171031 19:22:18.904" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20171031 19:22:18.493" endtime="20171031 19:22:18.904"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:22:18.904" endtime="20171031 19:22:18.904"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:18.492" endtime="20171031 19:22:18.904"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:22:18.908" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:22:18.908" endtime="20171031 19:22:18.908"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:22:18.909" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:22:18.909" endtime="20171031 19:22:18.909"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:22:18.910" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:22:18.909" endtime="20171031 19:22:18.910"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:22:18.910" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:22:18.910" endtime="20171031 19:22:18.910"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:22:19.102" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:22:18.911" endtime="20171031 19:22:19.102"></status>
</kw>
<msg timestamp="20171031 19:22:19.102" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:22:19.103" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:18.911" endtime="20171031 19:22:19.103"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:22:19.103" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:19.103" endtime="20171031 19:22:19.103"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:19.104" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:19.104" endtime="20171031 19:22:19.104"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:18.907" endtime="20171031 19:22:19.104"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:18.907" endtime="20171031 19:22:19.104"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:18.906" endtime="20171031 19:22:19.104"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:22:19.105" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20171031 19:22:19.105" endtime="20171031 19:22:19.105"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:19.108" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:19.107" endtime="20171031 19:22:19.108"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:19.109" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:19.108" endtime="20171031 19:22:19.109"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:19.108" endtime="20171031 19:22:19.109"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:19.106" endtime="20171031 19:22:19.109"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:19.105" endtime="20171031 19:22:19.109"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:22:19.205" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171031 19:22:19.205" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:19.110" endtime="20171031 19:22:19.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:19.207" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:19.207" endtime="20171031 19:22:19.207"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:19.208" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:19.208" endtime="20171031 19:22:19.209"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:19.208" endtime="20171031 19:22:19.209"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:19.206" endtime="20171031 19:22:19.209"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:19.206" endtime="20171031 19:22:19.209"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:22:19.209" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:22:19.209" endtime="20171031 19:22:19.210"></status>
</kw>
<msg timestamp="20171031 19:22:19.210" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:18.905" endtime="20171031 19:22:19.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:19.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:19.210" endtime="20171031 19:22:19.211"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:22:19.211" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:22:19.211" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:22:19.211" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20171031 19:22:19.211" endtime="20171031 19:22:19.211"></status>
</kw>
<msg timestamp="20171031 19:22:19.212" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20171031 19:22:18.905" endtime="20171031 19:22:19.212"></status>
</kw>
<msg timestamp="20171031 19:22:19.212" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20171031 19:22:18.904" endtime="20171031 19:22:19.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:22:19.212" endtime="20171031 19:22:19.212"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:22:19.217" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:22:19.216" endtime="20171031 19:22:19.217"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:22:19.218" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:22:19.217" endtime="20171031 19:22:19.218"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:22:19.218" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:22:19.218" endtime="20171031 19:22:19.218"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:22:19.219" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:22:19.218" endtime="20171031 19:22:19.219"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:22:19.424" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:22:19.220" endtime="20171031 19:22:19.424"></status>
</kw>
<msg timestamp="20171031 19:22:19.424" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:22:19.424" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:19.219" endtime="20171031 19:22:19.424"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:22:19.425" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:19.424" endtime="20171031 19:22:19.425"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:19.426" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:19.425" endtime="20171031 19:22:19.426"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:19.216" endtime="20171031 19:22:19.426"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:19.215" endtime="20171031 19:22:19.426"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:19.215" endtime="20171031 19:22:19.426"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:22:19.427" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20171031 19:22:19.426" endtime="20171031 19:22:19.427"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:19.429" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:19.428" endtime="20171031 19:22:19.429"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:19.430" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:19.429" endtime="20171031 19:22:19.430"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:19.429" endtime="20171031 19:22:19.430"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:19.427" endtime="20171031 19:22:19.430"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:19.427" endtime="20171031 19:22:19.430"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:22:19.540" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171031 19:22:19.540" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:19.430" endtime="20171031 19:22:19.540"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:19.542" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:19.542" endtime="20171031 19:22:19.543"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:19.543" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:19.543" endtime="20171031 19:22:19.544"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:19.543" endtime="20171031 19:22:19.544"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:19.541" endtime="20171031 19:22:19.544"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:19.541" endtime="20171031 19:22:19.544"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:22:19.544" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:22:19.544" endtime="20171031 19:22:19.544"></status>
</kw>
<msg timestamp="20171031 19:22:19.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:19.214" endtime="20171031 19:22:19.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:19.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:19.545" endtime="20171031 19:22:19.545"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:22:19.546" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:22:19.546" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:22:19.546" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status status="PASS" starttime="20171031 19:22:19.546" endtime="20171031 19:22:19.546"></status>
</kw>
<msg timestamp="20171031 19:22:19.546" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20171031 19:22:19.213" endtime="20171031 19:22:19.546"></status>
</kw>
<msg timestamp="20171031 19:22:19.547" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20171031 19:22:19.213" endtime="20171031 19:22:19.547"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171031 19:22:19.547" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:22:19.547" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20171031 19:22:19.547" endtime="20171031 19:22:19.547"></status>
</kw>
<status status="FAIL" starttime="20171031 19:22:19.213" endtime="20171031 19:22:19.548"></status>
</kw>
<status status="FAIL" starttime="20171031 19:22:18.491" endtime="20171031 19:22:19.548"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:22:29.554" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:22:29.553" endtime="20171031 19:22:29.554"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:22:29.555" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:22:29.554" endtime="20171031 19:22:29.555"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:22:29.555" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:22:29.555" endtime="20171031 19:22:29.555"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:22:29.556" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:22:29.556" endtime="20171031 19:22:29.556"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:22:29.860" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:22:29.557" endtime="20171031 19:22:29.860"></status>
</kw>
<msg timestamp="20171031 19:22:29.860" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:22:29.860" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:29.556" endtime="20171031 19:22:29.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:22:29.861" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:29.861" endtime="20171031 19:22:29.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:29.862" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:29.862" endtime="20171031 19:22:29.862"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:29.553" endtime="20171031 19:22:29.862"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:29.552" endtime="20171031 19:22:29.862"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:29.551" endtime="20171031 19:22:29.863"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:22:29.863" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171031 19:22:29.863" endtime="20171031 19:22:29.863"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:29.865" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:29.865" endtime="20171031 19:22:29.865"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:29.866" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:29.866" endtime="20171031 19:22:29.866"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:29.865" endtime="20171031 19:22:29.866"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:29.864" endtime="20171031 19:22:29.867"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:29.863" endtime="20171031 19:22:29.867"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:22:29.970" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171031 19:22:29.970" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:29.867" endtime="20171031 19:22:29.970"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:29.973" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:29.972" endtime="20171031 19:22:29.973"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:29.974" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:29.973" endtime="20171031 19:22:29.974"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:29.973" endtime="20171031 19:22:29.974"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:29.971" endtime="20171031 19:22:29.974"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:29.971" endtime="20171031 19:22:29.974"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:22:29.974" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:22:29.974" endtime="20171031 19:22:29.975"></status>
</kw>
<msg timestamp="20171031 19:22:29.975" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:29.550" endtime="20171031 19:22:29.975"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:29.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:29.975" endtime="20171031 19:22:29.975"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:22:29.976" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:22:29.976" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:22:29.976" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" starttime="20171031 19:22:29.976" endtime="20171031 19:22:29.976"></status>
</kw>
<msg timestamp="20171031 19:22:29.977" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20171031 19:22:29.550" endtime="20171031 19:22:29.977"></status>
</kw>
<msg timestamp="20171031 19:22:29.977" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20171031 19:22:29.549" endtime="20171031 19:22:29.977"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:22:29.977" endtime="20171031 19:22:29.978"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:29.549" endtime="20171031 19:22:29.978"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:22:29.981" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:22:29.981" endtime="20171031 19:22:29.982"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:22:29.982" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:22:29.982" endtime="20171031 19:22:29.982"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:22:29.983" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:22:29.983" endtime="20171031 19:22:29.983"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:22:29.984" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:22:29.983" endtime="20171031 19:22:29.984"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:22:30.183" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:22:29.985" endtime="20171031 19:22:30.183"></status>
</kw>
<msg timestamp="20171031 19:22:30.183" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:22:30.183" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:29.984" endtime="20171031 19:22:30.184"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:22:30.184" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.184" endtime="20171031 19:22:30.184"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:30.185" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.185" endtime="20171031 19:22:30.185"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:29.981" endtime="20171031 19:22:30.185"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:29.980" endtime="20171031 19:22:30.185"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:29.980" endtime="20171031 19:22:30.185"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:22:30.186" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20171031 19:22:30.186" endtime="20171031 19:22:30.186"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:30.189" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:30.187" endtime="20171031 19:22:30.189"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:30.190" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:30.189" endtime="20171031 19:22:30.190"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.189" endtime="20171031 19:22:30.190"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.187" endtime="20171031 19:22:30.190"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.186" endtime="20171031 19:22:30.190"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:22:30.291" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171031 19:22:30.291" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.190" endtime="20171031 19:22:30.291"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:30.293" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:30.292" endtime="20171031 19:22:30.293"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:30.294" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:30.294" endtime="20171031 19:22:30.294"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.293" endtime="20171031 19:22:30.295"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.292" endtime="20171031 19:22:30.295"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.291" endtime="20171031 19:22:30.295"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:22:30.295" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:22:30.295" endtime="20171031 19:22:30.296"></status>
</kw>
<msg timestamp="20171031 19:22:30.296" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:29.979" endtime="20171031 19:22:30.296"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:30.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.296" endtime="20171031 19:22:30.297"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:22:30.298" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:22:30.298" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:22:30.298" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20171031 19:22:30.297" endtime="20171031 19:22:30.298"></status>
</kw>
<msg timestamp="20171031 19:22:30.298" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20171031 19:22:29.978" endtime="20171031 19:22:30.298"></status>
</kw>
<msg timestamp="20171031 19:22:30.299" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20171031 19:22:29.978" endtime="20171031 19:22:30.299"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:22:30.299" endtime="20171031 19:22:30.300"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:22:30.306" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:22:30.305" endtime="20171031 19:22:30.306"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:22:30.307" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:22:30.307" endtime="20171031 19:22:30.307"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:22:30.308" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:22:30.307" endtime="20171031 19:22:30.308"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:22:30.309" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:22:30.308" endtime="20171031 19:22:30.309"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:22:30.539" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:22:30.310" endtime="20171031 19:22:30.539"></status>
</kw>
<msg timestamp="20171031 19:22:30.539" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:22:30.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.309" endtime="20171031 19:22:30.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:22:30.540" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.540" endtime="20171031 19:22:30.540"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:30.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.541" endtime="20171031 19:22:30.541"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.304" endtime="20171031 19:22:30.541"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.304" endtime="20171031 19:22:30.541"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.303" endtime="20171031 19:22:30.541"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:22:30.542" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20171031 19:22:30.542" endtime="20171031 19:22:30.542"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:30.544" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:30.543" endtime="20171031 19:22:30.544"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:30.545" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:30.545" endtime="20171031 19:22:30.545"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.544" endtime="20171031 19:22:30.545"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.543" endtime="20171031 19:22:30.545"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.542" endtime="20171031 19:22:30.545"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:22:30.635" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171031 19:22:30.635" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.546" endtime="20171031 19:22:30.635"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:30.637" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:30.637" endtime="20171031 19:22:30.637"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:30.638" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:30.638" endtime="20171031 19:22:30.638"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.637" endtime="20171031 19:22:30.638"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.636" endtime="20171031 19:22:30.639"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.636" endtime="20171031 19:22:30.639"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:22:30.639" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:22:30.639" endtime="20171031 19:22:30.639"></status>
</kw>
<msg timestamp="20171031 19:22:30.639" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.302" endtime="20171031 19:22:30.639"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:30.640" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.640" endtime="20171031 19:22:30.640"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:22:30.641" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:22:30.641" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:22:30.641" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status status="PASS" starttime="20171031 19:22:30.640" endtime="20171031 19:22:30.641"></status>
</kw>
<msg timestamp="20171031 19:22:30.641" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" starttime="20171031 19:22:30.301" endtime="20171031 19:22:30.641"></status>
</kw>
<msg timestamp="20171031 19:22:30.642" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" starttime="20171031 19:22:30.300" endtime="20171031 19:22:30.642"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171031 19:22:30.642" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.642" endtime="20171031 19:22:30.642"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:22:30.646" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:22:30.646" endtime="20171031 19:22:30.647"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:22:30.647" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:22:30.647" endtime="20171031 19:22:30.647"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:22:30.648" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:22:30.647" endtime="20171031 19:22:30.648"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:22:30.649" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:22:30.648" endtime="20171031 19:22:30.649"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:22:30.864" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:22:30.649" endtime="20171031 19:22:30.864"></status>
</kw>
<msg timestamp="20171031 19:22:30.865" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:22:30.865" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.649" endtime="20171031 19:22:30.865"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:22:30.865" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.865" endtime="20171031 19:22:30.865"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:30.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.866" endtime="20171031 19:22:30.866"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.645" endtime="20171031 19:22:30.866"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.645" endtime="20171031 19:22:30.866"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.644" endtime="20171031 19:22:30.867"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:22:30.867" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" starttime="20171031 19:22:30.867" endtime="20171031 19:22:30.867"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:30.869" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:30.869" endtime="20171031 19:22:30.869"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:30.870" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:30.870" endtime="20171031 19:22:30.871"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.870" endtime="20171031 19:22:30.871"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.868" endtime="20171031 19:22:30.871"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:30.867" endtime="20171031 19:22:30.871"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:22:31.035" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171031 19:22:31.035" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.871" endtime="20171031 19:22:31.035"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:31.037" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:31.037" endtime="20171031 19:22:31.037"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:31.038" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:31.038" endtime="20171031 19:22:31.039"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:31.037" endtime="20171031 19:22:31.039"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:31.036" endtime="20171031 19:22:31.039"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:31.036" endtime="20171031 19:22:31.039"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:22:31.039" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:22:31.039" endtime="20171031 19:22:31.039"></status>
</kw>
<msg timestamp="20171031 19:22:31.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:30.643" endtime="20171031 19:22:31.040"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:31.040" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:31.040" endtime="20171031 19:22:31.040"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:22:31.041" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:22:31.041" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:22:31.041" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status status="PASS" starttime="20171031 19:22:31.041" endtime="20171031 19:22:31.041"></status>
</kw>
<msg timestamp="20171031 19:22:31.041" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" starttime="20171031 19:22:30.643" endtime="20171031 19:22:31.041"></status>
</kw>
<msg timestamp="20171031 19:22:31.042" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" starttime="20171031 19:22:30.642" endtime="20171031 19:22:31.042"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171031 19:22:31.042" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:22:31.042" level="FAIL">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" starttime="20171031 19:22:31.042" endtime="20171031 19:22:31.043"></status>
</kw>
<status status="FAIL" starttime="20171031 19:22:30.300" endtime="20171031 19:22:31.043"></status>
</kw>
<status status="FAIL" starttime="20171031 19:22:29.548" endtime="20171031 19:22:31.043"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:22:41.048" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:22:41.048" endtime="20171031 19:22:41.049"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:22:41.049" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:22:41.049" endtime="20171031 19:22:41.049"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:22:41.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:22:41.050" endtime="20171031 19:22:41.050"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:22:41.051" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:22:41.050" endtime="20171031 19:22:41.051"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:22:42.685" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:22:41.051" endtime="20171031 19:22:42.685"></status>
</kw>
<msg timestamp="20171031 19:22:42.685" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:22:42.685" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:41.051" endtime="20171031 19:22:42.685"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:22:42.686" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:42.686" endtime="20171031 19:22:42.686"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:42.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:42.686" endtime="20171031 19:22:42.687"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:41.047" endtime="20171031 19:22:42.687"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:41.047" endtime="20171031 19:22:42.687"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:41.046" endtime="20171031 19:22:42.687"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:22:42.688" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171031 19:22:42.687" endtime="20171031 19:22:42.688"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:42.690" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:42.689" endtime="20171031 19:22:42.690"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:42.691" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:42.691" endtime="20171031 19:22:42.691"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:42.690" endtime="20171031 19:22:42.691"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:42.689" endtime="20171031 19:22:42.691"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:42.688" endtime="20171031 19:22:42.691"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:22:47.291" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171031 19:22:47.291" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:42.692" endtime="20171031 19:22:47.291"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:47.293" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:47.293" endtime="20171031 19:22:47.293"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:47.294" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:47.294" endtime="20171031 19:22:47.294"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:47.294" endtime="20171031 19:22:47.295"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:47.292" endtime="20171031 19:22:47.295"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:47.292" endtime="20171031 19:22:47.295"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:22:47.296" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:22:47.295" endtime="20171031 19:22:47.296"></status>
</kw>
<msg timestamp="20171031 19:22:47.296" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:41.045" endtime="20171031 19:22:47.296"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:47.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:47.296" endtime="20171031 19:22:47.297"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:22:47.298" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:22:47.298" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:22:47.298" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" starttime="20171031 19:22:47.297" endtime="20171031 19:22:47.298"></status>
</kw>
<msg timestamp="20171031 19:22:47.298" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20171031 19:22:41.045" endtime="20171031 19:22:47.298"></status>
</kw>
<msg timestamp="20171031 19:22:47.299" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20171031 19:22:41.044" endtime="20171031 19:22:47.299"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:22:47.299" endtime="20171031 19:22:47.299"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:41.044" endtime="20171031 19:22:47.299"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:22:47.303" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:22:47.303" endtime="20171031 19:22:47.306"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:22:47.307" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:22:47.307" endtime="20171031 19:22:47.307"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:22:47.308" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:22:47.307" endtime="20171031 19:22:47.308"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:22:47.309" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:22:47.308" endtime="20171031 19:22:47.309"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:22:48.669" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:22:47.309" endtime="20171031 19:22:48.670"></status>
</kw>
<msg timestamp="20171031 19:22:48.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:22:48.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:47.309" endtime="20171031 19:22:48.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:22:48.671" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:48.670" endtime="20171031 19:22:48.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:48.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:48.671" endtime="20171031 19:22:48.671"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:47.302" endtime="20171031 19:22:48.672"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:47.302" endtime="20171031 19:22:48.672"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:47.301" endtime="20171031 19:22:48.672"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:22:48.672" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20171031 19:22:48.672" endtime="20171031 19:22:48.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:48.675" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:48.674" endtime="20171031 19:22:48.675"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:48.676" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:48.675" endtime="20171031 19:22:48.676"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:48.675" endtime="20171031 19:22:48.676"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:48.673" endtime="20171031 19:22:48.676"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:48.673" endtime="20171031 19:22:48.676"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:22:51.906" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171031 19:22:51.907" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:48.676" endtime="20171031 19:22:51.907"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:51.909" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:51.909" endtime="20171031 19:22:51.909"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:51.910" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:51.910" endtime="20171031 19:22:51.910"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:51.909" endtime="20171031 19:22:51.911"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:51.908" endtime="20171031 19:22:51.911"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:51.907" endtime="20171031 19:22:51.911"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:22:51.911" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:22:51.911" endtime="20171031 19:22:51.911"></status>
</kw>
<msg timestamp="20171031 19:22:51.911" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:47.300" endtime="20171031 19:22:51.911"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:51.912" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:51.912" endtime="20171031 19:22:51.912"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:22:51.913" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:22:51.913" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:22:51.913" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20171031 19:22:51.912" endtime="20171031 19:22:51.913"></status>
</kw>
<msg timestamp="20171031 19:22:51.913" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20171031 19:22:47.300" endtime="20171031 19:22:51.913"></status>
</kw>
<msg timestamp="20171031 19:22:51.914" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20171031 19:22:47.299" endtime="20171031 19:22:51.914"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:22:51.914" endtime="20171031 19:22:51.914"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:22:51.919" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:22:51.918" endtime="20171031 19:22:51.919"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:22:51.920" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:22:51.919" endtime="20171031 19:22:51.920"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:22:51.921" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:22:51.920" endtime="20171031 19:22:51.921"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:22:51.922" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:22:51.921" endtime="20171031 19:22:51.922"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:22:52.597" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:22:51.922" endtime="20171031 19:22:52.597"></status>
</kw>
<msg timestamp="20171031 19:22:52.598" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:22:52.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:51.922" endtime="20171031 19:22:52.598"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:22:52.598" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:52.598" endtime="20171031 19:22:52.598"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:52.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:52.599" endtime="20171031 19:22:52.599"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:51.918" endtime="20171031 19:22:52.599"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:51.917" endtime="20171031 19:22:52.599"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:51.917" endtime="20171031 19:22:52.600"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:22:52.600" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20171031 19:22:52.600" endtime="20171031 19:22:52.600"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:52.602" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:52.602" endtime="20171031 19:22:52.602"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:52.603" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:52.603" endtime="20171031 19:22:52.604"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:52.603" endtime="20171031 19:22:52.604"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:52.601" endtime="20171031 19:22:52.604"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:52.601" endtime="20171031 19:22:52.604"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:22:53.723" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171031 19:22:53.723" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:52.604" endtime="20171031 19:22:53.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:53.725" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:53.725" endtime="20171031 19:22:53.725"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:53.726" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:53.726" endtime="20171031 19:22:53.726"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:53.726" endtime="20171031 19:22:53.727"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:53.724" endtime="20171031 19:22:53.727"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:53.724" endtime="20171031 19:22:53.727"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:22:53.727" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:22:53.727" endtime="20171031 19:22:53.727"></status>
</kw>
<msg timestamp="20171031 19:22:53.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:51.916" endtime="20171031 19:22:53.727"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:53.728" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:53.728" endtime="20171031 19:22:53.728"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:22:53.729" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:22:53.729" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:22:53.729" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status status="PASS" starttime="20171031 19:22:53.729" endtime="20171031 19:22:53.729"></status>
</kw>
<msg timestamp="20171031 19:22:53.730" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" starttime="20171031 19:22:51.915" endtime="20171031 19:22:53.730"></status>
</kw>
<msg timestamp="20171031 19:22:53.730" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" starttime="20171031 19:22:51.915" endtime="20171031 19:22:53.730"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171031 19:22:53.731" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:53.730" endtime="20171031 19:22:53.731"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:22:53.734" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:22:53.734" endtime="20171031 19:22:53.735"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:22:53.735" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:22:53.735" endtime="20171031 19:22:53.736"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:22:53.736" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:22:53.736" endtime="20171031 19:22:53.736"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:22:53.737" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:22:53.736" endtime="20171031 19:22:53.737"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:22:54.612" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:22:53.738" endtime="20171031 19:22:54.613"></status>
</kw>
<msg timestamp="20171031 19:22:54.613" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:22:54.613" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:53.737" endtime="20171031 19:22:54.613"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:22:54.614" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:54.613" endtime="20171031 19:22:54.614"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:54.614" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:54.614" endtime="20171031 19:22:54.614"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:53.734" endtime="20171031 19:22:54.615"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:53.733" endtime="20171031 19:22:54.615"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:53.733" endtime="20171031 19:22:54.615"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:22:54.615" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" starttime="20171031 19:22:54.615" endtime="20171031 19:22:54.615"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:54.618" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:54.617" endtime="20171031 19:22:54.618"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:54.618" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:22:54.618" endtime="20171031 19:22:54.619"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:54.618" endtime="20171031 19:22:54.619"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:54.616" endtime="20171031 19:22:54.619"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:54.616" endtime="20171031 19:22:54.619"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:22:55.049" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171031 19:22:55.049" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:54.619" endtime="20171031 19:22:55.049"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:22:55.052" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:55.051" endtime="20171031 19:22:55.052"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:22:55.053" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:22:55.052" endtime="20171031 19:22:55.053"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:55.052" endtime="20171031 19:22:55.053"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:55.050" endtime="20171031 19:22:55.053"></status>
</kw>
<status status="PASS" starttime="20171031 19:22:55.050" endtime="20171031 19:22:55.053"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:22:55.053" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:22:55.053" endtime="20171031 19:22:55.053"></status>
</kw>
<msg timestamp="20171031 19:22:55.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:22:53.732" endtime="20171031 19:22:55.054"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:22:55.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:22:55.054" endtime="20171031 19:22:55.054"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:22:55.055" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:22:55.055" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:22:55.055" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status status="PASS" starttime="20171031 19:22:55.055" endtime="20171031 19:22:55.055"></status>
</kw>
<msg timestamp="20171031 19:22:55.055" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" starttime="20171031 19:22:53.731" endtime="20171031 19:22:55.055"></status>
</kw>
<msg timestamp="20171031 19:22:55.056" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" starttime="20171031 19:22:53.731" endtime="20171031 19:22:55.056"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171031 19:22:55.056" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:22:55.057" level="FAIL">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" starttime="20171031 19:22:55.056" endtime="20171031 19:22:55.057"></status>
</kw>
<status status="FAIL" starttime="20171031 19:22:51.914" endtime="20171031 19:22:55.057"></status>
</kw>
<status status="FAIL" starttime="20171031 19:22:41.043" endtime="20171031 19:22:55.057"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:23:05.063" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:23:05.063" endtime="20171031 19:23:05.063"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:23:05.064" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:23:05.064" endtime="20171031 19:23:05.064"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:23:05.065" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:23:05.064" endtime="20171031 19:23:05.065"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:23:05.065" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:23:05.065" endtime="20171031 19:23:05.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:23:05.270" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:23:05.066" endtime="20171031 19:23:05.270"></status>
</kw>
<msg timestamp="20171031 19:23:05.270" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:23:05.270" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:05.066" endtime="20171031 19:23:05.270"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:23:05.271" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:05.271" endtime="20171031 19:23:05.271"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:05.272" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:05.271" endtime="20171031 19:23:05.272"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.062" endtime="20171031 19:23:05.272"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.061" endtime="20171031 19:23:05.272"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.060" endtime="20171031 19:23:05.272"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:23:05.273" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171031 19:23:05.273" endtime="20171031 19:23:05.273"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:05.275" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:05.274" endtime="20171031 19:23:05.275"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:05.276" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:05.276" endtime="20171031 19:23:05.276"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.275" endtime="20171031 19:23:05.276"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.274" endtime="20171031 19:23:05.276"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.273" endtime="20171031 19:23:05.276"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:23:05.446" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171031 19:23:05.447" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:05.277" endtime="20171031 19:23:05.447"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:05.449" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:05.448" endtime="20171031 19:23:05.449"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:05.450" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:05.449" endtime="20171031 19:23:05.450"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.449" endtime="20171031 19:23:05.450"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.448" endtime="20171031 19:23:05.451"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.447" endtime="20171031 19:23:05.451"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:23:05.451" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:23:05.451" endtime="20171031 19:23:05.451"></status>
</kw>
<msg timestamp="20171031 19:23:05.451" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:05.060" endtime="20171031 19:23:05.451"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:05.452" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:05.452" endtime="20171031 19:23:05.452"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:23:05.453" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:23:05.453" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:23:05.453" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" starttime="20171031 19:23:05.452" endtime="20171031 19:23:05.453"></status>
</kw>
<msg timestamp="20171031 19:23:05.453" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20171031 19:23:05.059" endtime="20171031 19:23:05.453"></status>
</kw>
<msg timestamp="20171031 19:23:05.453" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20171031 19:23:05.059" endtime="20171031 19:23:05.453"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:23:05.454" endtime="20171031 19:23:05.454"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.058" endtime="20171031 19:23:05.454"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:23:05.459" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:23:05.458" endtime="20171031 19:23:05.459"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:23:05.460" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:23:05.460" endtime="20171031 19:23:05.460"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:23:05.461" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:23:05.461" endtime="20171031 19:23:05.461"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:23:05.462" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:23:05.462" endtime="20171031 19:23:05.462"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:23:05.655" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:23:05.463" endtime="20171031 19:23:05.655"></status>
</kw>
<msg timestamp="20171031 19:23:05.655" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:23:05.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:05.463" endtime="20171031 19:23:05.655"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:23:05.656" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:05.656" endtime="20171031 19:23:05.656"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:05.657" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:05.656" endtime="20171031 19:23:05.657"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.458" endtime="20171031 19:23:05.657"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.457" endtime="20171031 19:23:05.657"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.456" endtime="20171031 19:23:05.657"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:23:05.658" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20171031 19:23:05.657" endtime="20171031 19:23:05.658"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:05.660" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:05.659" endtime="20171031 19:23:05.660"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:05.661" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:05.661" endtime="20171031 19:23:05.661"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.661" endtime="20171031 19:23:05.662"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.659" endtime="20171031 19:23:05.662"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.658" endtime="20171031 19:23:05.662"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:23:05.833" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171031 19:23:05.834" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:05.662" endtime="20171031 19:23:05.834"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:05.836" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:05.835" endtime="20171031 19:23:05.836"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:05.837" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:05.836" endtime="20171031 19:23:05.837"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.836" endtime="20171031 19:23:05.837"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.835" endtime="20171031 19:23:05.837"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.834" endtime="20171031 19:23:05.837"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:23:05.837" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:23:05.837" endtime="20171031 19:23:05.838"></status>
</kw>
<msg timestamp="20171031 19:23:05.838" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:05.455" endtime="20171031 19:23:05.838"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:05.838" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:05.838" endtime="20171031 19:23:05.838"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:23:05.839" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:23:05.839" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:23:05.839" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20171031 19:23:05.839" endtime="20171031 19:23:05.839"></status>
</kw>
<msg timestamp="20171031 19:23:05.840" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20171031 19:23:05.455" endtime="20171031 19:23:05.840"></status>
</kw>
<msg timestamp="20171031 19:23:05.840" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20171031 19:23:05.454" endtime="20171031 19:23:05.840"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:23:05.840" endtime="20171031 19:23:05.841"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:23:05.845" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:23:05.844" endtime="20171031 19:23:05.845"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:23:05.846" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:23:05.846" endtime="20171031 19:23:05.846"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:23:05.847" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:23:05.847" endtime="20171031 19:23:05.847"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:23:05.848" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:23:05.848" endtime="20171031 19:23:05.848"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:23:06.047" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:23:05.849" endtime="20171031 19:23:06.047"></status>
</kw>
<msg timestamp="20171031 19:23:06.047" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:23:06.047" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:05.849" endtime="20171031 19:23:06.047"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:23:06.048" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:06.047" endtime="20171031 19:23:06.048"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:06.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:06.048" endtime="20171031 19:23:06.049"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.844" endtime="20171031 19:23:06.049"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.843" endtime="20171031 19:23:06.049"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:05.843" endtime="20171031 19:23:06.049"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:23:06.050" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20171031 19:23:06.050" endtime="20171031 19:23:06.050"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:06.054" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:06.053" endtime="20171031 19:23:06.054"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:06.055" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:06.054" endtime="20171031 19:23:06.055"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:06.054" endtime="20171031 19:23:06.055"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:06.051" endtime="20171031 19:23:06.055"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:06.051" endtime="20171031 19:23:06.055"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:23:06.345" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171031 19:23:06.345" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:06.055" endtime="20171031 19:23:06.345"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:06.347" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:06.347" endtime="20171031 19:23:06.347"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:06.348" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:06.348" endtime="20171031 19:23:06.348"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:06.347" endtime="20171031 19:23:06.348"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:06.346" endtime="20171031 19:23:06.349"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:06.346" endtime="20171031 19:23:06.349"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:23:06.349" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:23:06.349" endtime="20171031 19:23:06.349"></status>
</kw>
<msg timestamp="20171031 19:23:06.349" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:05.842" endtime="20171031 19:23:06.349"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:06.350" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:06.350" endtime="20171031 19:23:06.350"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:23:06.351" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:23:06.351" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:23:06.351" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit'}</msg>
<status status="PASS" starttime="20171031 19:23:06.350" endtime="20171031 19:23:06.351"></status>
</kw>
<msg timestamp="20171031 19:23:06.351" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit</msg>
<status status="PASS" starttime="20171031 19:23:05.842" endtime="20171031 19:23:06.351"></status>
</kw>
<msg timestamp="20171031 19:23:06.351" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit</msg>
<status status="PASS" starttime="20171031 19:23:05.841" endtime="20171031 19:23:06.351"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171031 19:23:06.352" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:23:06.352" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit</msg>
<status status="FAIL" starttime="20171031 19:23:06.352" endtime="20171031 19:23:06.352"></status>
</kw>
<status status="FAIL" starttime="20171031 19:23:05.841" endtime="20171031 19:23:06.352"></status>
</kw>
<status status="FAIL" starttime="20171031 19:23:05.058" endtime="20171031 19:23:06.353"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:23:16.358" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:23:16.358" endtime="20171031 19:23:16.359"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:23:16.359" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:23:16.359" endtime="20171031 19:23:16.359"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:23:16.360" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:23:16.360" endtime="20171031 19:23:16.360"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:23:16.361" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:23:16.360" endtime="20171031 19:23:16.361"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:23:16.559" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:23:16.362" endtime="20171031 19:23:16.560"></status>
</kw>
<msg timestamp="20171031 19:23:16.560" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:23:16.560" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:16.361" endtime="20171031 19:23:16.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:23:16.561" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:16.560" endtime="20171031 19:23:16.561"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:16.561" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:16.561" endtime="20171031 19:23:16.562"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.357" endtime="20171031 19:23:16.562"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.356" endtime="20171031 19:23:16.562"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.356" endtime="20171031 19:23:16.562"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:23:16.562" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171031 19:23:16.562" endtime="20171031 19:23:16.563"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:16.565" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:16.564" endtime="20171031 19:23:16.565"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:16.566" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:16.565" endtime="20171031 19:23:16.566"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.565" endtime="20171031 19:23:16.566"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.563" endtime="20171031 19:23:16.566"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.563" endtime="20171031 19:23:16.566"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:23:16.740" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171031 19:23:16.740" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:16.566" endtime="20171031 19:23:16.740"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:16.743" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:16.742" endtime="20171031 19:23:16.743"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:16.743" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:16.743" endtime="20171031 19:23:16.744"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.743" endtime="20171031 19:23:16.744"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.741" endtime="20171031 19:23:16.744"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.741" endtime="20171031 19:23:16.744"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:23:16.744" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:23:16.744" endtime="20171031 19:23:16.745"></status>
</kw>
<msg timestamp="20171031 19:23:16.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:16.355" endtime="20171031 19:23:16.745"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:16.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:16.745" endtime="20171031 19:23:16.746"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:23:16.746" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:23:16.746" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:23:16.746" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" starttime="20171031 19:23:16.746" endtime="20171031 19:23:16.746"></status>
</kw>
<msg timestamp="20171031 19:23:16.747" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20171031 19:23:16.355" endtime="20171031 19:23:16.747"></status>
</kw>
<msg timestamp="20171031 19:23:16.747" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20171031 19:23:16.354" endtime="20171031 19:23:16.747"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:23:16.747" endtime="20171031 19:23:16.748"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.354" endtime="20171031 19:23:16.748"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:23:16.751" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:23:16.751" endtime="20171031 19:23:16.752"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:23:16.752" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:23:16.752" endtime="20171031 19:23:16.752"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:23:16.753" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:23:16.753" endtime="20171031 19:23:16.753"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:23:16.754" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:23:16.753" endtime="20171031 19:23:16.754"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:23:16.933" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:23:16.755" endtime="20171031 19:23:16.933"></status>
</kw>
<msg timestamp="20171031 19:23:16.933" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:23:16.933" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:16.755" endtime="20171031 19:23:16.933"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:23:16.934" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:16.934" endtime="20171031 19:23:16.934"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:16.935" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:16.934" endtime="20171031 19:23:16.935"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.750" endtime="20171031 19:23:16.935"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.750" endtime="20171031 19:23:16.935"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.749" endtime="20171031 19:23:16.935"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:23:16.936" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20171031 19:23:16.935" endtime="20171031 19:23:16.936"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:16.939" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:16.938" endtime="20171031 19:23:16.939"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:16.940" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:16.940" endtime="20171031 19:23:16.940"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.939" endtime="20171031 19:23:16.940"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.937" endtime="20171031 19:23:16.940"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:16.936" endtime="20171031 19:23:16.940"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:23:17.233" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171031 19:23:17.233" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:16.941" endtime="20171031 19:23:17.233"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:17.235" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:17.235" endtime="20171031 19:23:17.236"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:17.236" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:17.236" endtime="20171031 19:23:17.237"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:17.236" endtime="20171031 19:23:17.237"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:17.234" endtime="20171031 19:23:17.237"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:17.234" endtime="20171031 19:23:17.237"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:23:17.237" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:23:17.237" endtime="20171031 19:23:17.237"></status>
</kw>
<msg timestamp="20171031 19:23:17.238" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:16.749" endtime="20171031 19:23:17.238"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:17.238" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:17.238" endtime="20171031 19:23:17.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:23:17.239" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:23:17.239" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:23:17.239" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20171031 19:23:17.239" endtime="20171031 19:23:17.239"></status>
</kw>
<msg timestamp="20171031 19:23:17.239" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20171031 19:23:16.748" endtime="20171031 19:23:17.239"></status>
</kw>
<msg timestamp="20171031 19:23:17.240" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20171031 19:23:16.748" endtime="20171031 19:23:17.240"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:23:17.240" endtime="20171031 19:23:17.240"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:23:17.244" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:23:17.244" endtime="20171031 19:23:17.245"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:23:17.245" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:23:17.245" endtime="20171031 19:23:17.245"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:23:17.246" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:23:17.246" endtime="20171031 19:23:17.246"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:23:17.247" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:23:17.246" endtime="20171031 19:23:17.247"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:23:17.438" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:23:17.248" endtime="20171031 19:23:17.438"></status>
</kw>
<msg timestamp="20171031 19:23:17.438" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:23:17.438" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:17.247" endtime="20171031 19:23:17.438"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:23:17.439" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:17.439" endtime="20171031 19:23:17.439"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:17.440" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:17.440" endtime="20171031 19:23:17.440"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:17.244" endtime="20171031 19:23:17.440"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:17.243" endtime="20171031 19:23:17.440"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:17.242" endtime="20171031 19:23:17.440"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:23:17.441" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20171031 19:23:17.441" endtime="20171031 19:23:17.441"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:17.443" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:17.443" endtime="20171031 19:23:17.443"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:17.444" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:17.444" endtime="20171031 19:23:17.444"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:17.443" endtime="20171031 19:23:17.444"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:17.442" endtime="20171031 19:23:17.445"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:17.441" endtime="20171031 19:23:17.445"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:23:17.655" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171031 19:23:17.655" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:17.445" endtime="20171031 19:23:17.655"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:17.657" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:17.656" endtime="20171031 19:23:17.657"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:17.658" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:17.658" endtime="20171031 19:23:17.658"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:17.657" endtime="20171031 19:23:17.658"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:17.656" endtime="20171031 19:23:17.658"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:17.655" endtime="20171031 19:23:17.658"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:23:17.659" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:23:17.659" endtime="20171031 19:23:17.659"></status>
</kw>
<msg timestamp="20171031 19:23:17.659" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:17.242" endtime="20171031 19:23:17.659"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:17.660" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:17.659" endtime="20171031 19:23:17.660"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:23:17.660" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:23:17.660" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:23:17.661" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status status="PASS" starttime="20171031 19:23:17.660" endtime="20171031 19:23:17.661"></status>
</kw>
<msg timestamp="20171031 19:23:17.661" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" starttime="20171031 19:23:17.241" endtime="20171031 19:23:17.661"></status>
</kw>
<msg timestamp="20171031 19:23:17.661" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" starttime="20171031 19:23:17.241" endtime="20171031 19:23:17.662"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171031 19:23:17.662" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:17.662" endtime="20171031 19:23:17.662"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:23:17.669" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:23:17.669" endtime="20171031 19:23:17.670"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:23:17.670" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:23:17.670" endtime="20171031 19:23:17.670"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:23:17.671" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:23:17.670" endtime="20171031 19:23:17.671"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:23:17.672" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:23:17.672" endtime="20171031 19:23:17.672"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:23:17.999" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:23:17.674" endtime="20171031 19:23:17.999"></status>
</kw>
<msg timestamp="20171031 19:23:17.999" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:23:17.999" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:17.673" endtime="20171031 19:23:17.999"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:23:18.000" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:18.000" endtime="20171031 19:23:18.000"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:18.001" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:18.001" endtime="20171031 19:23:18.001"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:17.665" endtime="20171031 19:23:18.001"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:17.665" endtime="20171031 19:23:18.001"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:17.664" endtime="20171031 19:23:18.002"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:23:18.002" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" starttime="20171031 19:23:18.002" endtime="20171031 19:23:18.002"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:18.004" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:18.004" endtime="20171031 19:23:18.005"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:18.006" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:18.006" endtime="20171031 19:23:18.006"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:18.005" endtime="20171031 19:23:18.006"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:18.003" endtime="20171031 19:23:18.006"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:18.002" endtime="20171031 19:23:18.006"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:23:18.094" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171031 19:23:18.094" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:18.006" endtime="20171031 19:23:18.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:18.096" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:18.095" endtime="20171031 19:23:18.096"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:18.097" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:18.096" endtime="20171031 19:23:18.097"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:18.096" endtime="20171031 19:23:18.097"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:18.095" endtime="20171031 19:23:18.097"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:18.094" endtime="20171031 19:23:18.098"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:23:18.098" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:23:18.098" endtime="20171031 19:23:18.098"></status>
</kw>
<msg timestamp="20171031 19:23:18.098" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:17.663" endtime="20171031 19:23:18.098"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:18.099" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:18.099" endtime="20171031 19:23:18.099"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:23:18.099" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:23:18.100" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:23:18.100" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status status="PASS" starttime="20171031 19:23:18.099" endtime="20171031 19:23:18.100"></status>
</kw>
<msg timestamp="20171031 19:23:18.100" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" starttime="20171031 19:23:17.663" endtime="20171031 19:23:18.100"></status>
</kw>
<msg timestamp="20171031 19:23:18.100" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" starttime="20171031 19:23:17.662" endtime="20171031 19:23:18.100"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171031 19:23:18.101" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:23:18.101" level="FAIL">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" starttime="20171031 19:23:18.100" endtime="20171031 19:23:18.101"></status>
</kw>
<status status="FAIL" starttime="20171031 19:23:17.240" endtime="20171031 19:23:18.101"></status>
</kw>
<status status="FAIL" starttime="20171031 19:23:16.353" endtime="20171031 19:23:18.102"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:23:28.107" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:23:28.107" endtime="20171031 19:23:28.107"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:23:28.108" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:23:28.108" endtime="20171031 19:23:28.108"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:23:28.109" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:23:28.108" endtime="20171031 19:23:28.109"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:23:28.109" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:23:28.109" endtime="20171031 19:23:28.109"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:23:28.299" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:23:28.110" endtime="20171031 19:23:28.299"></status>
</kw>
<msg timestamp="20171031 19:23:28.299" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:23:28.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:28.110" endtime="20171031 19:23:28.300"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:23:28.300" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:28.300" endtime="20171031 19:23:28.300"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:28.301" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:28.301" endtime="20171031 19:23:28.301"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:28.106" endtime="20171031 19:23:28.301"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:28.106" endtime="20171031 19:23:28.301"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:28.105" endtime="20171031 19:23:28.301"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:23:28.302" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171031 19:23:28.302" endtime="20171031 19:23:28.302"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:28.304" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:28.304" endtime="20171031 19:23:28.304"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:28.305" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:28.305" endtime="20171031 19:23:28.306"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:28.304" endtime="20171031 19:23:28.306"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:28.303" endtime="20171031 19:23:28.306"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:28.302" endtime="20171031 19:23:28.306"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:23:28.701" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171031 19:23:28.702" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:28.306" endtime="20171031 19:23:28.702"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:28.704" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:28.703" endtime="20171031 19:23:28.704"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:28.705" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:28.704" endtime="20171031 19:23:28.705"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:28.704" endtime="20171031 19:23:28.705"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:28.703" endtime="20171031 19:23:28.705"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:28.702" endtime="20171031 19:23:28.705"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:23:28.706" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:23:28.706" endtime="20171031 19:23:28.706"></status>
</kw>
<msg timestamp="20171031 19:23:28.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:28.104" endtime="20171031 19:23:28.706"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:28.707" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:28.706" endtime="20171031 19:23:28.707"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:23:28.707" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:23:28.707" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:23:28.708" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" starttime="20171031 19:23:28.707" endtime="20171031 19:23:28.708"></status>
</kw>
<msg timestamp="20171031 19:23:28.708" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20171031 19:23:28.104" endtime="20171031 19:23:28.708"></status>
</kw>
<msg timestamp="20171031 19:23:28.708" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20171031 19:23:28.103" endtime="20171031 19:23:28.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:23:28.708" endtime="20171031 19:23:28.709"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:28.103" endtime="20171031 19:23:28.709"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:23:28.713" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:23:28.712" endtime="20171031 19:23:28.713"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:23:28.714" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:23:28.714" endtime="20171031 19:23:28.714"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:23:28.715" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:23:28.714" endtime="20171031 19:23:28.715"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:23:28.715" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:23:28.715" endtime="20171031 19:23:28.715"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:23:29.648" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:23:28.716" endtime="20171031 19:23:29.648"></status>
</kw>
<msg timestamp="20171031 19:23:29.648" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:23:29.648" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:28.716" endtime="20171031 19:23:29.648"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:23:29.649" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:29.649" endtime="20171031 19:23:29.649"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:29.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:29.649" endtime="20171031 19:23:29.650"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:28.712" endtime="20171031 19:23:29.650"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:28.711" endtime="20171031 19:23:29.650"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:28.711" endtime="20171031 19:23:29.650"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:23:29.651" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20171031 19:23:29.650" endtime="20171031 19:23:29.651"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:29.653" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:29.652" endtime="20171031 19:23:29.653"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:29.654" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:29.654" endtime="20171031 19:23:29.654"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:29.653" endtime="20171031 19:23:29.654"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:29.652" endtime="20171031 19:23:29.655"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:29.651" endtime="20171031 19:23:29.655"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:23:30.375" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171031 19:23:30.376" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:29.655" endtime="20171031 19:23:30.376"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:30.378" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:30.377" endtime="20171031 19:23:30.378"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:30.379" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:30.378" endtime="20171031 19:23:30.379"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:30.378" endtime="20171031 19:23:30.379"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:30.377" endtime="20171031 19:23:30.379"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:30.376" endtime="20171031 19:23:30.379"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:23:30.379" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:23:30.379" endtime="20171031 19:23:30.380"></status>
</kw>
<msg timestamp="20171031 19:23:30.380" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:28.710" endtime="20171031 19:23:30.380"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:30.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:30.380" endtime="20171031 19:23:30.381"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:23:30.381" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:23:30.381" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:23:30.381" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20171031 19:23:30.381" endtime="20171031 19:23:30.381"></status>
</kw>
<msg timestamp="20171031 19:23:30.382" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20171031 19:23:28.709" endtime="20171031 19:23:30.382"></status>
</kw>
<msg timestamp="20171031 19:23:30.382" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20171031 19:23:28.709" endtime="20171031 19:23:30.382"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:23:30.382" endtime="20171031 19:23:30.383"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:23:30.387" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:23:30.387" endtime="20171031 19:23:30.387"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:23:30.388" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:23:30.388" endtime="20171031 19:23:30.388"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:23:30.389" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:23:30.388" endtime="20171031 19:23:30.389"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:23:30.389" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:23:30.389" endtime="20171031 19:23:30.389"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:23:30.575" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:23:30.390" endtime="20171031 19:23:30.575"></status>
</kw>
<msg timestamp="20171031 19:23:30.575" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:23:30.575" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:30.390" endtime="20171031 19:23:30.575"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:23:30.576" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:30.576" endtime="20171031 19:23:30.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:30.577" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:30.576" endtime="20171031 19:23:30.577"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:30.386" endtime="20171031 19:23:30.577"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:30.386" endtime="20171031 19:23:30.577"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:30.385" endtime="20171031 19:23:30.577"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:23:30.578" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20171031 19:23:30.577" endtime="20171031 19:23:30.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:30.580" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:30.579" endtime="20171031 19:23:30.580"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:30.581" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:30.581" endtime="20171031 19:23:30.581"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:30.580" endtime="20171031 19:23:30.581"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:30.579" endtime="20171031 19:23:30.581"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:30.578" endtime="20171031 19:23:30.581"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:23:30.800" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171031 19:23:30.800" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:30.582" endtime="20171031 19:23:30.800"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:30.802" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:30.802" endtime="20171031 19:23:30.802"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:30.803" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:30.803" endtime="20171031 19:23:30.803"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:30.803" endtime="20171031 19:23:30.803"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:30.801" endtime="20171031 19:23:30.804"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:30.801" endtime="20171031 19:23:30.804"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:23:30.804" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:23:30.804" endtime="20171031 19:23:30.804"></status>
</kw>
<msg timestamp="20171031 19:23:30.805" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:30.384" endtime="20171031 19:23:30.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:30.805" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:30.805" endtime="20171031 19:23:30.805"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:23:30.806" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:23:30.806" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:23:30.806" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status status="PASS" starttime="20171031 19:23:30.806" endtime="20171031 19:23:30.806"></status>
</kw>
<msg timestamp="20171031 19:23:30.806" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" starttime="20171031 19:23:30.384" endtime="20171031 19:23:30.806"></status>
</kw>
<msg timestamp="20171031 19:23:30.807" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" starttime="20171031 19:23:30.383" endtime="20171031 19:23:30.807"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171031 19:23:30.807" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:30.807" endtime="20171031 19:23:30.807"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:23:30.811" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:23:30.811" endtime="20171031 19:23:30.811"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:23:30.812" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:23:30.812" endtime="20171031 19:23:30.812"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:23:30.813" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:23:30.812" endtime="20171031 19:23:30.813"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:23:30.813" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:23:30.813" endtime="20171031 19:23:30.813"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:23:31.004" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:23:30.814" endtime="20171031 19:23:31.004"></status>
</kw>
<msg timestamp="20171031 19:23:31.004" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:23:31.004" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:30.814" endtime="20171031 19:23:31.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:23:31.005" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:31.004" endtime="20171031 19:23:31.005"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:31.005" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:31.005" endtime="20171031 19:23:31.006"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:30.810" endtime="20171031 19:23:31.006"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:30.810" endtime="20171031 19:23:31.006"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:30.809" endtime="20171031 19:23:31.006"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:23:31.006" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" starttime="20171031 19:23:31.006" endtime="20171031 19:23:31.006"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:31.009" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:31.008" endtime="20171031 19:23:31.009"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:31.009" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:31.009" endtime="20171031 19:23:31.010"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:31.009" endtime="20171031 19:23:31.010"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:31.007" endtime="20171031 19:23:31.010"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:31.007" endtime="20171031 19:23:31.010"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:23:31.123" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171031 19:23:31.124" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:31.010" endtime="20171031 19:23:31.124"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:31.126" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:31.125" endtime="20171031 19:23:31.126"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:31.126" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:31.126" endtime="20171031 19:23:31.127"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:31.126" endtime="20171031 19:23:31.127"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:31.125" endtime="20171031 19:23:31.127"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:31.124" endtime="20171031 19:23:31.127"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:23:31.127" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:23:31.127" endtime="20171031 19:23:31.127"></status>
</kw>
<msg timestamp="20171031 19:23:31.128" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:30.808" endtime="20171031 19:23:31.128"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:31.128" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:31.128" endtime="20171031 19:23:31.128"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:23:31.129" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:23:31.129" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:23:31.129" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status status="PASS" starttime="20171031 19:23:31.129" endtime="20171031 19:23:31.129"></status>
</kw>
<msg timestamp="20171031 19:23:31.129" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" starttime="20171031 19:23:30.808" endtime="20171031 19:23:31.130"></status>
</kw>
<msg timestamp="20171031 19:23:31.130" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" starttime="20171031 19:23:30.807" endtime="20171031 19:23:31.130"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171031 19:23:31.130" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:23:31.130" level="FAIL">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" starttime="20171031 19:23:31.130" endtime="20171031 19:23:31.131"></status>
</kw>
<status status="FAIL" starttime="20171031 19:23:30.383" endtime="20171031 19:23:31.131"></status>
</kw>
<status status="FAIL" starttime="20171031 19:23:28.102" endtime="20171031 19:23:31.131"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:23:41.137" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:23:41.136" endtime="20171031 19:23:41.137"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:23:41.138" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:23:41.137" endtime="20171031 19:23:41.138"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:23:41.138" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:23:41.138" endtime="20171031 19:23:41.138"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:23:41.139" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:23:41.139" endtime="20171031 19:23:41.139"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:23:41.458" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:23:41.140" endtime="20171031 19:23:41.458"></status>
</kw>
<msg timestamp="20171031 19:23:41.458" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:23:41.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:41.139" endtime="20171031 19:23:41.458"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:23:41.459" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:41.459" endtime="20171031 19:23:41.459"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:41.460" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:41.459" endtime="20171031 19:23:41.460"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.135" endtime="20171031 19:23:41.460"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.135" endtime="20171031 19:23:41.460"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.134" endtime="20171031 19:23:41.460"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:23:41.461" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171031 19:23:41.461" endtime="20171031 19:23:41.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:41.463" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:41.463" endtime="20171031 19:23:41.463"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:41.464" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:41.464" endtime="20171031 19:23:41.464"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.464" endtime="20171031 19:23:41.465"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.462" endtime="20171031 19:23:41.465"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.461" endtime="20171031 19:23:41.465"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:23:41.542" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171031 19:23:41.543" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:41.465" endtime="20171031 19:23:41.543"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:41.545" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:41.544" endtime="20171031 19:23:41.545"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:41.546" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:41.545" endtime="20171031 19:23:41.546"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.545" endtime="20171031 19:23:41.546"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.543" endtime="20171031 19:23:41.546"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.543" endtime="20171031 19:23:41.546"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:23:41.547" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:23:41.547" endtime="20171031 19:23:41.547"></status>
</kw>
<msg timestamp="20171031 19:23:41.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:41.133" endtime="20171031 19:23:41.547"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:41.548" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:41.547" endtime="20171031 19:23:41.548"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:23:41.548" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:23:41.548" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:23:41.548" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" starttime="20171031 19:23:41.548" endtime="20171031 19:23:41.548"></status>
</kw>
<msg timestamp="20171031 19:23:41.549" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20171031 19:23:41.133" endtime="20171031 19:23:41.549"></status>
</kw>
<msg timestamp="20171031 19:23:41.549" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20171031 19:23:41.132" endtime="20171031 19:23:41.549"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:23:41.549" endtime="20171031 19:23:41.550"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.132" endtime="20171031 19:23:41.550"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:23:41.553" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:23:41.553" endtime="20171031 19:23:41.554"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:23:41.554" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:23:41.554" endtime="20171031 19:23:41.554"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:23:41.555" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:23:41.555" endtime="20171031 19:23:41.555"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:23:41.556" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:23:41.555" endtime="20171031 19:23:41.556"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:23:41.753" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:23:41.557" endtime="20171031 19:23:41.753"></status>
</kw>
<msg timestamp="20171031 19:23:41.753" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:23:41.753" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:41.556" endtime="20171031 19:23:41.753"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:23:41.754" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:41.754" endtime="20171031 19:23:41.754"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:41.755" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:41.755" endtime="20171031 19:23:41.755"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.553" endtime="20171031 19:23:41.755"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.552" endtime="20171031 19:23:41.755"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.552" endtime="20171031 19:23:41.755"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:23:41.756" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20171031 19:23:41.756" endtime="20171031 19:23:41.756"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:41.759" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:41.758" endtime="20171031 19:23:41.759"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:41.760" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:41.759" endtime="20171031 19:23:41.760"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.759" endtime="20171031 19:23:41.760"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.757" endtime="20171031 19:23:41.760"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.756" endtime="20171031 19:23:41.760"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:23:43.398" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171031 19:23:43.398" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:41.760" endtime="20171031 19:23:43.398"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:43.401" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:43.400" endtime="20171031 19:23:43.401"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:43.402" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:43.401" endtime="20171031 19:23:43.402"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:43.401" endtime="20171031 19:23:43.402"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:43.399" endtime="20171031 19:23:43.402"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:43.399" endtime="20171031 19:23:43.402"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:23:43.403" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:23:43.402" endtime="20171031 19:23:43.403"></status>
</kw>
<msg timestamp="20171031 19:23:43.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:41.551" endtime="20171031 19:23:43.403"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:43.403" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:43.403" endtime="20171031 19:23:43.404"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:23:43.404" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:23:43.405" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:23:43.405" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20171031 19:23:43.404" endtime="20171031 19:23:43.405"></status>
</kw>
<msg timestamp="20171031 19:23:43.405" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20171031 19:23:41.550" endtime="20171031 19:23:43.405"></status>
</kw>
<msg timestamp="20171031 19:23:43.405" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20171031 19:23:41.550" endtime="20171031 19:23:43.405"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:23:43.406" endtime="20171031 19:23:43.406"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:23:43.410" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:23:43.410" endtime="20171031 19:23:43.410"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:23:43.411" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:23:43.411" endtime="20171031 19:23:43.411"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:23:43.412" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:23:43.411" endtime="20171031 19:23:43.412"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:23:43.412" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:23:43.412" endtime="20171031 19:23:43.412"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:23:43.618" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:23:43.413" endtime="20171031 19:23:43.618"></status>
</kw>
<msg timestamp="20171031 19:23:43.618" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:23:43.618" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:43.413" endtime="20171031 19:23:43.618"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:23:43.619" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:43.618" endtime="20171031 19:23:43.619"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:43.620" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:43.619" endtime="20171031 19:23:43.620"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:43.409" endtime="20171031 19:23:43.620"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:43.409" endtime="20171031 19:23:43.620"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:43.408" endtime="20171031 19:23:43.620"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:23:43.621" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20171031 19:23:43.620" endtime="20171031 19:23:43.621"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:43.623" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:43.622" endtime="20171031 19:23:43.623"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:43.624" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:43.624" endtime="20171031 19:23:43.624"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:43.623" endtime="20171031 19:23:43.624"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:43.621" endtime="20171031 19:23:43.624"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:43.621" endtime="20171031 19:23:43.624"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:23:44.836" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171031 19:23:44.836" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:43.624" endtime="20171031 19:23:44.836"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:44.839" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:44.838" endtime="20171031 19:23:44.839"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:44.840" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:44.839" endtime="20171031 19:23:44.840"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:44.839" endtime="20171031 19:23:44.840"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:44.838" endtime="20171031 19:23:44.840"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:44.837" endtime="20171031 19:23:44.840"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:23:44.840" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:23:44.840" endtime="20171031 19:23:44.840"></status>
</kw>
<msg timestamp="20171031 19:23:44.841" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:43.407" endtime="20171031 19:23:44.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:44.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:44.841" endtime="20171031 19:23:44.841"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:23:44.842" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:23:44.842" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:23:44.842" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status status="PASS" starttime="20171031 19:23:44.842" endtime="20171031 19:23:44.842"></status>
</kw>
<msg timestamp="20171031 19:23:44.843" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" starttime="20171031 19:23:43.407" endtime="20171031 19:23:44.843"></status>
</kw>
<msg timestamp="20171031 19:23:44.843" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" starttime="20171031 19:23:43.406" endtime="20171031 19:23:44.843"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171031 19:23:44.843" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:44.843" endtime="20171031 19:23:44.844"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:23:44.848" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:23:44.848" endtime="20171031 19:23:44.848"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:23:44.849" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:23:44.848" endtime="20171031 19:23:44.849"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:23:44.849" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:23:44.849" endtime="20171031 19:23:44.849"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:23:44.850" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:23:44.850" endtime="20171031 19:23:44.850"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:23:45.972" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:23:44.851" endtime="20171031 19:23:45.972"></status>
</kw>
<msg timestamp="20171031 19:23:45.972" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:23:45.972" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:44.850" endtime="20171031 19:23:45.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:23:45.973" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:45.972" endtime="20171031 19:23:45.973"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:45.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:45.973" endtime="20171031 19:23:45.974"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:44.847" endtime="20171031 19:23:45.974"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:44.846" endtime="20171031 19:23:45.974"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:44.846" endtime="20171031 19:23:45.974"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:23:45.975" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" starttime="20171031 19:23:45.974" endtime="20171031 19:23:45.975"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:45.977" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:45.976" endtime="20171031 19:23:45.977"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:45.978" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:23:45.978" endtime="20171031 19:23:45.978"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:45.977" endtime="20171031 19:23:45.978"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:45.976" endtime="20171031 19:23:45.978"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:45.975" endtime="20171031 19:23:45.978"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:23:46.158" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171031 19:23:46.158" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:45.979" endtime="20171031 19:23:46.158"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:23:46.160" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:46.160" endtime="20171031 19:23:46.160"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:23:46.164" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:23:46.164" endtime="20171031 19:23:46.164"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:46.160" endtime="20171031 19:23:46.164"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:46.159" endtime="20171031 19:23:46.165"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:46.159" endtime="20171031 19:23:46.165"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:23:46.165" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:23:46.165" endtime="20171031 19:23:46.165"></status>
</kw>
<msg timestamp="20171031 19:23:46.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:23:44.845" endtime="20171031 19:23:46.165"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:23:46.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:46.166" endtime="20171031 19:23:46.166"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:23:46.167" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:23:46.167" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:23:46.167" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete'}</msg>
<status status="PASS" starttime="20171031 19:23:46.167" endtime="20171031 19:23:46.167"></status>
</kw>
<msg timestamp="20171031 19:23:46.167" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete</msg>
<status status="PASS" starttime="20171031 19:23:44.844" endtime="20171031 19:23:46.167"></status>
</kw>
<msg timestamp="20171031 19:23:46.168" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete</msg>
<status status="PASS" starttime="20171031 19:23:44.844" endtime="20171031 19:23:46.168"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171031 19:23:46.168" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:23:46.168" endtime="20171031 19:23:46.168"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:43.406" endtime="20171031 19:23:46.168"></status>
</kw>
<status status="PASS" starttime="20171031 19:23:41.131" endtime="20171031 19:23:46.169"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:14.144" endtime="20171031 19:23:46.169"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:13.377" endtime="20171031 19:23:46.169"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
</arguments>
<msg timestamp="20171031 19:24:16.170" level="INFO">Slept 30 seconds</msg>
<status status="PASS" starttime="20171031 19:23:46.169" endtime="20171031 19:24:16.170"></status>
</kw>
<status status="PASS" starttime="20171031 19:21:11.016" endtime="20171031 19:24:16.170"></status>
</kw>
<msg timestamp="20171031 19:24:16.170" level="INFO">Repeating keyword, round 2/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171031 19:24:16.172" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20171031 19:24:16.172" endtime="20171031 19:24:16.172"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:24:16.173" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20171031 19:24:16.173" endtime="20171031 19:24:16.174"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:24:16.176" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:24:16.176" endtime="20171031 19:24:16.177"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:24:16.177" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:24:16.177" endtime="20171031 19:24:16.177"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:24:16.178" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:24:16.178" endtime="20171031 19:24:16.178"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:24:16.179" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:24:16.178" endtime="20171031 19:24:16.179"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:24:16.458" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:24:16.179" endtime="20171031 19:24:16.459"></status>
</kw>
<msg timestamp="20171031 19:24:16.459" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:24:16.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:24:16.179" endtime="20171031 19:24:16.459"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:24:16.460" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:24:16.459" endtime="20171031 19:24:16.460"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:24:16.461" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:24:16.460" endtime="20171031 19:24:16.461"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:16.175" endtime="20171031 19:24:16.461"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:16.175" endtime="20171031 19:24:16.461"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:16.174" endtime="20171031 19:24:16.462"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:24:16.462" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20171031 19:24:16.462" endtime="20171031 19:24:16.463"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:24:16.463" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:24:16.463" endtime="20171031 19:24:16.463"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:24:16.464" endtime="20171031 19:24:16.464"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:24:16.467" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" starttime="20171031 19:24:16.466" endtime="20171031 19:24:16.467"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:24:16.468" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20171031 19:24:16.468" endtime="20171031 19:24:16.468"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:16.467" endtime="20171031 19:24:16.468"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:16.465" endtime="20171031 19:24:16.468"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:24:22.410" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171031 19:24:22.410" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:24:16.469" endtime="20171031 19:24:22.410"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:24:22.411" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:24:22.411" endtime="20171031 19:24:22.411"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:24:22.413" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:24:22.412" endtime="20171031 19:24:22.413"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:22.412" endtime="20171031 19:24:22.413"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:22.410" endtime="20171031 19:24:22.413"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:24:22.413" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:24:22.413" endtime="20171031 19:24:22.413"></status>
</kw>
<msg timestamp="20171031 19:24:22.414" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:24:16.174" endtime="20171031 19:24:22.414"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:24:22.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:24:22.414" endtime="20171031 19:24:22.414"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171031 19:24:22.415" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171031 19:24:22.415" endtime="20171031 19:24:22.415"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:16.172" endtime="20171031 19:24:22.415"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20171031 19:24:22.415" endtime="20171031 19:24:22.416"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:24:22.422" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:24:22.421" endtime="20171031 19:24:22.422"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:24:22.423" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:24:22.422" endtime="20171031 19:24:22.423"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:24:22.423" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:24:22.423" endtime="20171031 19:24:22.423"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:24:22.424" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:24:22.424" endtime="20171031 19:24:22.424"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:24:25.329" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:24:22.425" endtime="20171031 19:24:25.329"></status>
</kw>
<msg timestamp="20171031 19:24:25.329" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:24:25.329" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:24:22.424" endtime="20171031 19:24:25.329"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:24:25.330" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:24:25.330" endtime="20171031 19:24:25.330"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:24:25.331" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:24:25.331" endtime="20171031 19:24:25.331"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:22.421" endtime="20171031 19:24:25.331"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:22.420" endtime="20171031 19:24:25.331"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:22.420" endtime="20171031 19:24:25.331"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:24:25.332" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171031 19:24:25.332" endtime="20171031 19:24:25.332"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:24:25.334" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:24:25.334" endtime="20171031 19:24:25.334"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:24:25.335" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:24:25.335" endtime="20171031 19:24:25.335"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:25.334" endtime="20171031 19:24:25.335"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:25.333" endtime="20171031 19:24:25.336"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:25.332" endtime="20171031 19:24:25.336"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:24:31.277" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171031 19:24:31.277" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:24:25.336" endtime="20171031 19:24:31.277"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:24:31.280" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:24:31.279" endtime="20171031 19:24:31.280"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:24:31.281" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:24:31.280" endtime="20171031 19:24:31.281"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:31.280" endtime="20171031 19:24:31.281"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:31.279" endtime="20171031 19:24:31.281"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:31.278" endtime="20171031 19:24:31.281"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:24:31.281" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:24:31.281" endtime="20171031 19:24:31.282"></status>
</kw>
<msg timestamp="20171031 19:24:31.282" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:24:22.419" endtime="20171031 19:24:31.282"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:24:31.282" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:24:31.282" endtime="20171031 19:24:31.282"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:24:31.283" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:24:31.283" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:24:31.283" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" starttime="20171031 19:24:31.283" endtime="20171031 19:24:31.283"></status>
</kw>
<msg timestamp="20171031 19:24:31.283" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20171031 19:24:22.418" endtime="20171031 19:24:31.284"></status>
</kw>
<msg timestamp="20171031 19:24:31.284" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20171031 19:24:22.418" endtime="20171031 19:24:31.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171031 19:24:31.285" level="FAIL">Off != On</msg>
<status status="FAIL" starttime="20171031 19:24:31.284" endtime="20171031 19:24:31.285"></status>
</kw>
<status status="FAIL" starttime="20171031 19:24:22.418" endtime="20171031 19:24:31.285"></status>
</kw>
<status status="FAIL" starttime="20171031 19:24:22.417" endtime="20171031 19:24:31.285"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:24:41.291" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:24:41.290" endtime="20171031 19:24:41.291"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:24:41.292" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:24:41.292" endtime="20171031 19:24:41.292"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:24:41.293" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:24:41.292" endtime="20171031 19:24:41.293"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:24:41.293" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:24:41.293" endtime="20171031 19:24:41.293"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:24:41.487" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:24:41.294" endtime="20171031 19:24:41.487"></status>
</kw>
<msg timestamp="20171031 19:24:41.487" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:24:41.487" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:24:41.294" endtime="20171031 19:24:41.487"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:24:41.488" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:24:41.488" endtime="20171031 19:24:41.488"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:24:41.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:24:41.488" endtime="20171031 19:24:41.489"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:41.290" endtime="20171031 19:24:41.489"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:41.289" endtime="20171031 19:24:41.489"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:41.288" endtime="20171031 19:24:41.489"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:24:41.490" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171031 19:24:41.489" endtime="20171031 19:24:41.490"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:24:41.492" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:24:41.491" endtime="20171031 19:24:41.492"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:24:41.493" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171031 19:24:41.493" endtime="20171031 19:24:41.493"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:41.492" endtime="20171031 19:24:41.493"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:41.490" endtime="20171031 19:24:41.493"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:41.490" endtime="20171031 19:24:41.493"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:24:41.560" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171031 19:24:41.560" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:24:41.493" endtime="20171031 19:24:41.560"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:24:41.562" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:24:41.562" endtime="20171031 19:24:41.562"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:24:41.563" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:24:41.563" endtime="20171031 19:24:41.563"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:41.563" endtime="20171031 19:24:41.564"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:41.561" endtime="20171031 19:24:41.564"></status>
</kw>
<status status="PASS" starttime="20171031 19:24:41.561" endtime="20171031 19:24:41.564"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:24:41.564" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:24:41.564" endtime="20171031 19:24:41.564"></status>
</kw>
<msg timestamp="20171031 19:24:41.564" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:24:41.288" endtime="20171031 19:24:41.564"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:24:41.565" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:24:41.565" endtime="20171031 19:24:41.565"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:24:41.566" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:24:41.566" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:24:41.566" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" starttime="20171031 19:24:41.565" endtime="20171031 19:24:41.566"></status>
</kw>
<msg timestamp="20171031 19:24:41.566" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20171031 19:24:41.287" endtime="20171031 19:24:41.566"></status>
</kw>
<msg timestamp="20171031 19:24:41.566" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20171031 19:24:41.286" endtime="20171031 19:24:41.567"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171031 19:24:41.568" level="FAIL">Off != On</msg>
<status status="FAIL" starttime="20171031 19:24:41.568" endtime="20171031 19:24:41.568"></status>
</kw>
<status status="FAIL" starttime="20171031 19:24:41.286" endtime="20171031 19:24:41.569"></status>
</kw>
<status status="FAIL" starttime="20171031 19:24:41.285" endtime="20171031 19:24:41.569"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:24:51.575" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:24:51.574" endtime="20171031 19:24:51.575"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:24:51.576" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:24:51.575" endtime="20171031 19:24:51.576"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:24:51.576" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:24:51.576" endtime="20171031 19:24:51.576"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:24:51.577" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:24:51.577" endtime="20171031 19:24:51.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:25:01.595" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:24:51.578" endtime="20171031 19:25:01.595"></status>
</kw>
<msg timestamp="20171031 19:25:01.596" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:25:01.596" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:24:51.577" endtime="20171031 19:25:01.596"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:25:01.597" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:25:01.597" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:25:01.596" endtime="20171031 19:25:01.597"></status>
</kw>
<status status="FAIL" starttime="20171031 19:24:51.573" endtime="20171031 19:25:01.597"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:25:21.599" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:25:21.599" endtime="20171031 19:25:21.599"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:25:21.600" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:25:21.600" endtime="20171031 19:25:21.600"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:25:21.601" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:25:21.600" endtime="20171031 19:25:21.601"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:25:21.601" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:25:21.601" endtime="20171031 19:25:21.601"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:25:31.610" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:25:21.602" endtime="20171031 19:25:31.610"></status>
</kw>
<msg timestamp="20171031 19:25:31.610" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:25:31.610" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:25:21.602" endtime="20171031 19:25:31.610"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:25:31.611" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:25:31.611" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:25:31.611" endtime="20171031 19:25:31.611"></status>
</kw>
<status status="FAIL" starttime="20171031 19:25:21.598" endtime="20171031 19:25:31.611"></status>
</kw>
<msg timestamp="20171031 19:25:31.612" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:24:51.573" endtime="20171031 19:25:31.612"></status>
</kw>
<status status="FAIL" starttime="20171031 19:24:51.572" endtime="20171031 19:25:31.612"></status>
</kw>
<status status="FAIL" starttime="20171031 19:24:51.571" endtime="20171031 19:25:31.612"></status>
</kw>
<status status="FAIL" starttime="20171031 19:24:51.571" endtime="20171031 19:25:31.612"></status>
</kw>
<status status="FAIL" starttime="20171031 19:24:51.570" endtime="20171031 19:25:31.612"></status>
</kw>
<status status="FAIL" starttime="20171031 19:24:51.570" endtime="20171031 19:25:31.612"></status>
</kw>
<status status="FAIL" starttime="20171031 19:24:51.569" endtime="20171031 19:25:31.613"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:25:41.618" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:25:41.618" endtime="20171031 19:25:41.619"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:25:41.619" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:25:41.619" endtime="20171031 19:25:41.619"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:25:41.620" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:25:41.620" endtime="20171031 19:25:41.620"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:25:41.621" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:25:41.620" endtime="20171031 19:25:41.621"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:25:51.634" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:25:41.621" endtime="20171031 19:25:51.634"></status>
</kw>
<msg timestamp="20171031 19:25:51.634" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:25:51.634" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:25:41.621" endtime="20171031 19:25:51.634"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:25:51.635" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:25:51.635" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:25:51.634" endtime="20171031 19:25:51.635"></status>
</kw>
<status status="FAIL" starttime="20171031 19:25:41.617" endtime="20171031 19:25:51.635"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:26:11.637" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:26:11.637" endtime="20171031 19:26:11.637"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:26:11.638" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:26:11.638" endtime="20171031 19:26:11.638"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:26:11.639" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:26:11.638" endtime="20171031 19:26:11.639"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:26:11.639" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:26:11.639" endtime="20171031 19:26:11.639"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:26:21.646" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:26:11.640" endtime="20171031 19:26:21.646"></status>
</kw>
<msg timestamp="20171031 19:26:21.646" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:26:21.646" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:26:11.640" endtime="20171031 19:26:21.646"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:26:21.647" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:26:21.647" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:26:21.647" endtime="20171031 19:26:21.647"></status>
</kw>
<status status="FAIL" starttime="20171031 19:26:11.636" endtime="20171031 19:26:21.647"></status>
</kw>
<msg timestamp="20171031 19:26:21.648" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:25:41.617" endtime="20171031 19:26:21.648"></status>
</kw>
<status status="FAIL" starttime="20171031 19:25:41.616" endtime="20171031 19:26:21.648"></status>
</kw>
<status status="FAIL" starttime="20171031 19:25:41.615" endtime="20171031 19:26:21.648"></status>
</kw>
<status status="FAIL" starttime="20171031 19:25:41.615" endtime="20171031 19:26:21.648"></status>
</kw>
<status status="FAIL" starttime="20171031 19:25:41.614" endtime="20171031 19:26:21.648"></status>
</kw>
<status status="FAIL" starttime="20171031 19:25:41.614" endtime="20171031 19:26:21.648"></status>
</kw>
<status status="FAIL" starttime="20171031 19:25:41.613" endtime="20171031 19:26:21.649"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:26:31.655" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:26:31.655" endtime="20171031 19:26:31.656"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:26:31.657" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:26:31.656" endtime="20171031 19:26:31.657"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:26:31.657" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:26:31.657" endtime="20171031 19:26:31.657"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:26:31.658" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:26:31.658" endtime="20171031 19:26:31.658"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:26:41.670" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:26:31.659" endtime="20171031 19:26:41.670"></status>
</kw>
<msg timestamp="20171031 19:26:41.670" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:26:41.670" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:26:31.658" endtime="20171031 19:26:41.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:26:41.671" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:26:41.671" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:26:41.671" endtime="20171031 19:26:41.671"></status>
</kw>
<status status="FAIL" starttime="20171031 19:26:31.654" endtime="20171031 19:26:41.671"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:27:01.675" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:27:01.674" endtime="20171031 19:27:01.675"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:27:01.676" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:27:01.675" endtime="20171031 19:27:01.676"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:27:01.676" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:27:01.676" endtime="20171031 19:27:01.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:27:01.677" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:27:01.677" endtime="20171031 19:27:01.677"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:27:11.690" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:27:01.678" endtime="20171031 19:27:11.690"></status>
</kw>
<msg timestamp="20171031 19:27:11.691" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:27:11.691" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:27:01.677" endtime="20171031 19:27:11.691"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:27:11.691" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:27:11.692" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:27:11.691" endtime="20171031 19:27:11.692"></status>
</kw>
<status status="FAIL" starttime="20171031 19:27:01.672" endtime="20171031 19:27:11.692"></status>
</kw>
<msg timestamp="20171031 19:27:11.692" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:26:31.653" endtime="20171031 19:27:11.692"></status>
</kw>
<status status="FAIL" starttime="20171031 19:26:31.652" endtime="20171031 19:27:11.692"></status>
</kw>
<status status="FAIL" starttime="20171031 19:26:31.651" endtime="20171031 19:27:11.692"></status>
</kw>
<status status="FAIL" starttime="20171031 19:26:31.651" endtime="20171031 19:27:11.693"></status>
</kw>
<status status="FAIL" starttime="20171031 19:26:31.650" endtime="20171031 19:27:11.693"></status>
</kw>
<status status="FAIL" starttime="20171031 19:26:31.650" endtime="20171031 19:27:11.693"></status>
</kw>
<status status="FAIL" starttime="20171031 19:26:31.649" endtime="20171031 19:27:11.693"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:27:21.698" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:27:21.698" endtime="20171031 19:27:21.699"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:27:21.699" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:27:21.699" endtime="20171031 19:27:21.699"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:27:21.700" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:27:21.700" endtime="20171031 19:27:21.700"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:27:21.701" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:27:21.700" endtime="20171031 19:27:21.701"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:27:31.714" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:27:21.702" endtime="20171031 19:27:31.714"></status>
</kw>
<msg timestamp="20171031 19:27:31.714" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:27:31.714" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:27:21.701" endtime="20171031 19:27:31.714"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:27:31.715" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:27:31.715" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:27:31.715" endtime="20171031 19:27:31.715"></status>
</kw>
<status status="FAIL" starttime="20171031 19:27:21.698" endtime="20171031 19:27:31.715"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:27:51.718" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:27:51.717" endtime="20171031 19:27:51.718"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:27:51.719" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:27:51.719" endtime="20171031 19:27:51.719"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:27:51.720" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:27:51.719" endtime="20171031 19:27:51.720"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:27:51.721" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:27:51.720" endtime="20171031 19:27:51.721"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:28:01.737" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:27:51.721" endtime="20171031 19:28:01.737"></status>
</kw>
<msg timestamp="20171031 19:28:01.737" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:28:01.737" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:27:51.721" endtime="20171031 19:28:01.737"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:28:01.738" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:28:01.738" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:28:01.737" endtime="20171031 19:28:01.738"></status>
</kw>
<status status="FAIL" starttime="20171031 19:27:51.716" endtime="20171031 19:28:01.738"></status>
</kw>
<msg timestamp="20171031 19:28:01.738" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:27:21.697" endtime="20171031 19:28:01.738"></status>
</kw>
<status status="FAIL" starttime="20171031 19:27:21.697" endtime="20171031 19:28:01.739"></status>
</kw>
<status status="FAIL" starttime="20171031 19:27:21.695" endtime="20171031 19:28:01.739"></status>
</kw>
<status status="FAIL" starttime="20171031 19:27:21.695" endtime="20171031 19:28:01.739"></status>
</kw>
<status status="FAIL" starttime="20171031 19:27:21.694" endtime="20171031 19:28:01.739"></status>
</kw>
<status status="FAIL" starttime="20171031 19:27:21.694" endtime="20171031 19:28:01.739"></status>
</kw>
<status status="FAIL" starttime="20171031 19:27:21.694" endtime="20171031 19:28:01.739"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:28:11.745" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:28:11.744" endtime="20171031 19:28:11.745"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:28:11.746" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:28:11.745" endtime="20171031 19:28:11.746"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:28:11.746" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:28:11.746" endtime="20171031 19:28:11.746"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:28:11.747" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:28:11.747" endtime="20171031 19:28:11.747"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:28:21.761" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:28:11.748" endtime="20171031 19:28:21.762"></status>
</kw>
<msg timestamp="20171031 19:28:21.762" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:28:21.762" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:28:11.747" endtime="20171031 19:28:21.762"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:28:21.763" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:28:21.763" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:28:21.762" endtime="20171031 19:28:21.763"></status>
</kw>
<status status="FAIL" starttime="20171031 19:28:11.744" endtime="20171031 19:28:21.763"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:28:41.766" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:28:41.765" endtime="20171031 19:28:41.766"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:28:41.767" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:28:41.766" endtime="20171031 19:28:41.767"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:28:41.767" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:28:41.767" endtime="20171031 19:28:41.767"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:28:41.768" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:28:41.768" endtime="20171031 19:28:41.768"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:28:51.785" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:28:41.769" endtime="20171031 19:28:51.785"></status>
</kw>
<msg timestamp="20171031 19:28:51.785" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:28:51.785" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:28:41.768" endtime="20171031 19:28:51.785"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:28:51.786" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:28:51.786" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:28:51.786" endtime="20171031 19:28:51.786"></status>
</kw>
<status status="FAIL" starttime="20171031 19:28:41.764" endtime="20171031 19:28:51.786"></status>
</kw>
<msg timestamp="20171031 19:28:51.787" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:28:11.743" endtime="20171031 19:28:51.787"></status>
</kw>
<status status="FAIL" starttime="20171031 19:28:11.743" endtime="20171031 19:28:51.787"></status>
</kw>
<status status="FAIL" starttime="20171031 19:28:11.742" endtime="20171031 19:28:51.787"></status>
</kw>
<status status="FAIL" starttime="20171031 19:28:11.741" endtime="20171031 19:28:51.787"></status>
</kw>
<status status="FAIL" starttime="20171031 19:28:11.741" endtime="20171031 19:28:51.787"></status>
</kw>
<status status="FAIL" starttime="20171031 19:28:11.741" endtime="20171031 19:28:51.788"></status>
</kw>
<status status="FAIL" starttime="20171031 19:28:11.740" endtime="20171031 19:28:51.788"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:29:01.793" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:29:01.792" endtime="20171031 19:29:01.793"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:29:01.794" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:29:01.793" endtime="20171031 19:29:01.794"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:29:01.794" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:29:01.794" endtime="20171031 19:29:01.794"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:29:01.795" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:29:01.795" endtime="20171031 19:29:01.795"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:29:11.810" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:29:01.796" endtime="20171031 19:29:11.810"></status>
</kw>
<msg timestamp="20171031 19:29:11.811" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:29:11.811" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:29:01.795" endtime="20171031 19:29:11.811"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:29:11.812" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:29:11.812" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:29:11.811" endtime="20171031 19:29:11.812"></status>
</kw>
<status status="FAIL" starttime="20171031 19:29:01.792" endtime="20171031 19:29:11.812"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:29:31.814" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:29:31.814" endtime="20171031 19:29:31.815"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:29:31.815" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:29:31.815" endtime="20171031 19:29:31.815"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:29:31.816" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:29:31.815" endtime="20171031 19:29:31.816"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:29:31.816" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:29:31.816" endtime="20171031 19:29:31.817"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:29:41.832" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:29:31.817" endtime="20171031 19:29:41.832"></status>
</kw>
<msg timestamp="20171031 19:29:41.832" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:29:41.832" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:29:31.817" endtime="20171031 19:29:41.832"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:29:41.833" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:29:41.833" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:29:41.833" endtime="20171031 19:29:41.833"></status>
</kw>
<status status="FAIL" starttime="20171031 19:29:31.813" endtime="20171031 19:29:41.834"></status>
</kw>
<msg timestamp="20171031 19:29:41.834" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:29:01.791" endtime="20171031 19:29:41.834"></status>
</kw>
<status status="FAIL" starttime="20171031 19:29:01.791" endtime="20171031 19:29:41.834"></status>
</kw>
<status status="FAIL" starttime="20171031 19:29:01.790" endtime="20171031 19:29:41.834"></status>
</kw>
<status status="FAIL" starttime="20171031 19:29:01.789" endtime="20171031 19:29:41.834"></status>
</kw>
<status status="FAIL" starttime="20171031 19:29:01.789" endtime="20171031 19:29:41.834"></status>
</kw>
<status status="FAIL" starttime="20171031 19:29:01.789" endtime="20171031 19:29:41.835"></status>
</kw>
<status status="FAIL" starttime="20171031 19:29:01.788" endtime="20171031 19:29:41.835"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:29:51.840" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:29:51.839" endtime="20171031 19:29:51.840"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:29:51.841" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:29:51.841" endtime="20171031 19:29:51.841"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:29:51.842" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:29:51.841" endtime="20171031 19:29:51.842"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:29:51.845" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:29:51.842" endtime="20171031 19:29:51.845"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:30:01.860" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:29:51.846" endtime="20171031 19:30:01.861"></status>
</kw>
<msg timestamp="20171031 19:30:01.861" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:30:01.861" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:29:51.846" endtime="20171031 19:30:01.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:30:01.862" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:30:01.862" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:30:01.861" endtime="20171031 19:30:01.862"></status>
</kw>
<status status="FAIL" starttime="20171031 19:29:51.839" endtime="20171031 19:30:01.862"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:30:21.864" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:30:21.863" endtime="20171031 19:30:21.864"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:30:21.865" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:30:21.865" endtime="20171031 19:30:21.865"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:30:21.866" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:30:21.865" endtime="20171031 19:30:21.866"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:30:21.866" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:30:21.866" endtime="20171031 19:30:21.866"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:30:31.882" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:30:21.867" endtime="20171031 19:30:31.882"></status>
</kw>
<msg timestamp="20171031 19:30:31.882" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:30:31.882" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:30:21.867" endtime="20171031 19:30:31.882"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:30:31.883" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:30:31.883" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:30:31.883" endtime="20171031 19:30:31.883"></status>
</kw>
<status status="FAIL" starttime="20171031 19:30:21.863" endtime="20171031 19:30:31.883"></status>
</kw>
<msg timestamp="20171031 19:30:31.884" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:29:51.838" endtime="20171031 19:30:31.884"></status>
</kw>
<status status="FAIL" starttime="20171031 19:29:51.838" endtime="20171031 19:30:31.884"></status>
</kw>
<status status="FAIL" starttime="20171031 19:29:51.837" endtime="20171031 19:30:31.884"></status>
</kw>
<status status="FAIL" starttime="20171031 19:29:51.837" endtime="20171031 19:30:31.884"></status>
</kw>
<status status="FAIL" starttime="20171031 19:29:51.836" endtime="20171031 19:30:31.884"></status>
</kw>
<status status="FAIL" starttime="20171031 19:29:51.836" endtime="20171031 19:30:31.884"></status>
</kw>
<status status="FAIL" starttime="20171031 19:29:51.835" endtime="20171031 19:30:31.885"></status>
</kw>
<msg timestamp="20171031 19:30:31.885" level="FAIL">Keyword 'Is Host Off' failed after retrying for 6 minutes. The last error was: Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:24:22.417" endtime="20171031 19:30:31.885"></status>
</kw>
<status status="FAIL" starttime="20171031 19:24:22.416" endtime="20171031 19:30:31.885"></status>
</kw>
<msg timestamp="20171031 19:30:31.885" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20171031 19:24:22.416" endtime="20171031 19:30:31.885"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<kw library="state_manager" name="Hard Power Off">
<doc>Do a hard power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${CHASSIS_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171031 19:30:31.887" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Chassis.Transition.Off'}</msg>
<status status="PASS" starttime="20171031 19:30:31.886" endtime="20171031 19:30:31.887"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>RequestedPowerTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:30:31.889" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0/</msg>
<status status="PASS" starttime="20171031 19:30:31.888" endtime="20171031 19:30:31.889"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:30:31.891" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:30:31.891" endtime="20171031 19:30:31.892"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:30:31.892" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:30:31.892" endtime="20171031 19:30:31.892"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:30:31.893" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:30:31.893" endtime="20171031 19:30:31.893"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:30:31.894" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:30:31.893" endtime="20171031 19:30:31.894"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:30:41.909" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:30:31.894" endtime="20171031 19:30:41.909"></status>
</kw>
<msg timestamp="20171031 19:30:41.909" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:30:41.909" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:30:31.894" endtime="20171031 19:30:41.909"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:30:41.910" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:30:41.910" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:30:41.910" endtime="20171031 19:30:41.910"></status>
</kw>
<status status="FAIL" starttime="20171031 19:30:31.890" endtime="20171031 19:30:41.911"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:31:01.912" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:31:01.912" endtime="20171031 19:31:01.913"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:31:01.913" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:31:01.913" endtime="20171031 19:31:01.913"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:31:01.914" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:31:01.914" endtime="20171031 19:31:01.914"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:31:01.915" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:31:01.914" endtime="20171031 19:31:01.915"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:31:11.930" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:31:01.916" endtime="20171031 19:31:11.930"></status>
</kw>
<msg timestamp="20171031 19:31:11.930" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:31:11.930" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:31:01.915" endtime="20171031 19:31:11.930"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:31:11.931" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:31:11.931" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:31:11.931" endtime="20171031 19:31:11.931"></status>
</kw>
<status status="FAIL" starttime="20171031 19:31:01.911" endtime="20171031 19:31:11.932"></status>
</kw>
<msg timestamp="20171031 19:31:11.932" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:30:31.890" endtime="20171031 19:31:11.932"></status>
</kw>
<status status="FAIL" starttime="20171031 19:30:31.889" endtime="20171031 19:31:11.932"></status>
</kw>
<status status="FAIL" starttime="20171031 19:30:31.889" endtime="20171031 19:31:11.932"></status>
</kw>
<status status="FAIL" starttime="20171031 19:30:31.887" endtime="20171031 19:31:11.932"></status>
</kw>
<status status="FAIL" starttime="20171031 19:30:31.886" endtime="20171031 19:31:11.932"></status>
</kw>
<status status="FAIL" starttime="20171031 19:30:31.885" endtime="20171031 19:31:11.932"></status>
</kw>
<status status="FAIL" starttime="20171031 19:24:16.171" endtime="20171031 19:31:11.933"></status>
</kw>
<status status="FAIL" starttime="20171031 19:24:16.171" endtime="20171031 19:31:11.933"></status>
</kw>
<status status="FAIL" starttime="20171031 19:21:11.016" endtime="20171031 19:31:11.933"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171031 19:31:11.968" level="INFO">Length is 10</msg>
<status status="PASS" starttime="20171031 19:31:11.968" endtime="20171031 19:31:11.968"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:31:11.990" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20171031 19:31:14.987" level="INFO">${RC} = 0</msg>
<msg timestamp="20171031 19:31:14.987" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.60 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.600 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" starttime="20171031 19:31:11.968" endtime="20171031 19:31:14.987"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171031 19:31:14.990" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.60 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.600 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.560 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.591 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.560/0.838/1.603/0.442 ms</msg>
<status status="PASS" starttime="20171031 19:31:14.989" endtime="20171031 19:31:14.990"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:31:14.991" endtime="20171031 19:31:14.991"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:11.967" endtime="20171031 19:31:14.991"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171031 19:31:15.047" level="INFO">${cur_time} = 2017-10-31 19:31:15:046624</msg>
<status status="PASS" starttime="20171031 19:31:15.046" endtime="20171031 19:31:15.047"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171031 19:31:15.047" level="INFO">${cur_time} = 20171031193115046624</msg>
<status status="PASS" starttime="20171031 19:31:15.047" endtime="20171031 19:31:15.048"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.046" endtime="20171031 19:31:15.048"></status>
</kw>
<msg timestamp="20171031 19:31:15.048" level="INFO">${FFDC_TIME} = 20171031193115046624</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171031 19:31:15.063" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20171031 19:31:15.063" endtime="20171031 19:31:15.063"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171031 19:31:15.064" level="INFO">${suite_name} = 20171031193115046624_TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20171031 19:31:15.063" endtime="20171031 19:31:15.064"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171031 19:31:15.065" level="INFO">${test_name} = PowerOnTest</msg>
<status status="PASS" starttime="20171031 19:31:15.064" endtime="20171031 19:31:15.065"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171031 19:31:15.065" level="INFO">${test_name} = 20171031193115046624_PowerOnTest</msg>
<status status="PASS" starttime="20171031 19:31:15.065" endtime="20171031 19:31:15.065"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.062" endtime="20171031 19:31:15.065"></status>
</kw>
<msg timestamp="20171031 19:31:15.066" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/</msg>
<msg timestamp="20171031 19:31:15.066" level="INFO">${FFDC_PREFIX} = 20171031193115046624_</msg>
<msg timestamp="20171031 19:31:15.099" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/</arg>
</arguments>
<msg timestamp="20171031 19:31:15.101" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.100" endtime="20171031 19:31:15.101"></status>
</kw>
<msg timestamp="20171031 19:31:15.108" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.147" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.146" endtime="20171031 19:31:15.147"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.146" endtime="20171031 19:31:15.147"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.148" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.148" endtime="20171031 19:31:15.149"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.147" endtime="20171031 19:31:15.149"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.150" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.149" endtime="20171031 19:31:15.150"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.149" endtime="20171031 19:31:15.150"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.151" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.151" endtime="20171031 19:31:15.151"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.150" endtime="20171031 19:31:15.151"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.154" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.154" endtime="20171031 19:31:15.155"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.152" endtime="20171031 19:31:15.155"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.156" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.156" endtime="20171031 19:31:15.156"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.155" endtime="20171031 19:31:15.156"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.157" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.157" endtime="20171031 19:31:15.158"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.156" endtime="20171031 19:31:15.158"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.159" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.159" endtime="20171031 19:31:15.159"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.158" endtime="20171031 19:31:15.159"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.161" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.160" endtime="20171031 19:31:15.161"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.160" endtime="20171031 19:31:15.161"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.162" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.162" endtime="20171031 19:31:15.162"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.161" endtime="20171031 19:31:15.162"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.164" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.163" endtime="20171031 19:31:15.164"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.163" endtime="20171031 19:31:15.164"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.165" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.165" endtime="20171031 19:31:15.165"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.164" endtime="20171031 19:31:15.165"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.166" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.166" endtime="20171031 19:31:15.166"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.165" endtime="20171031 19:31:15.167"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171031 19:31:15.185" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:31:15.186" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171031 19:31:15.254" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171031 19:31:15.271" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171031 19:31:15.271" level="INFO">${stderr} = </msg>
<msg timestamp="20171031 19:31:15.272" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20171031 19:31:15.167" endtime="20171031 19:31:15.272"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.272" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20171031 19:31:15.272" endtime="20171031 19:31:15.273"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.273" level="INFO">Length is 11</msg>
<status status="PASS" starttime="20171031 19:31:15.273" endtime="20171031 19:31:15.273"></status>
</kw>
<msg timestamp="20171031 19:31:15.273" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" starttime="20171031 19:31:15.167" endtime="20171031 19:31:15.273"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.275" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.274" endtime="20171031 19:31:15.275"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.274" endtime="20171031 19:31:15.275"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.161" endtime="20171031 19:31:15.275"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.276" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.276" endtime="20171031 19:31:15.276"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.275" endtime="20171031 19:31:15.276"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171031 19:31:15.277" level="INFO">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20171031 19:31:15.277" endtime="20171031 19:31:15.277"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.279" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.278" endtime="20171031 19:31:15.279"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.277" endtime="20171031 19:31:15.279"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.280" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.280" endtime="20171031 19:31:15.280"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.279" endtime="20171031 19:31:15.280"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.277" endtime="20171031 19:31:15.281"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.282" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.281" endtime="20171031 19:31:15.282"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.281" endtime="20171031 19:31:15.282"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.283" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.283" endtime="20171031 19:31:15.283"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.282" endtime="20171031 19:31:15.283"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.281" endtime="20171031 19:31:15.283"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.288" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.287" endtime="20171031 19:31:15.288"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.284" endtime="20171031 19:31:15.288"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.289" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.289" endtime="20171031 19:31:15.290"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.288" endtime="20171031 19:31:15.290"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.284" endtime="20171031 19:31:15.290"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.277" endtime="20171031 19:31:15.290"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.291" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.290" endtime="20171031 19:31:15.291"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.290" endtime="20171031 19:31:15.291"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.145" endtime="20171031 19:31:15.291"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171031 19:31:15.302" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" starttime="20171031 19:31:15.302" endtime="20171031 19:31:15.302"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20171031 19:31:15.304" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Req...</msg>
<status status="PASS" starttime="20171031 19:31:15.303" endtime="20171031 19:31:15.304"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:31:15.305" endtime="20171031 19:31:15.305"></status>
</kw>
<msg timestamp="20171031 19:31:15.305" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Core Files | OS FFDC | BMC Specific Files | Get Request FFDC | Sys Inventory Files | SEL Log ]</msg>
<status status="PASS" starttime="20171031 19:31:15.304" endtime="20171031 19:31:15.305"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:31:15.307" endtime="20171031 19:31:15.307"></status>
</kw>
<msg timestamp="20171031 19:31:15.307" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:31:15.307" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171031 19:31:15.306" endtime="20171031 19:31:15.307"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171031 19:31:15.308" endtime="20171031 19:31:15.308"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171031 19:31:15.365" level="INFO">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20171031 19:31:15.365" endtime="20171031 19:31:15.365"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171031 19:31:15.366" level="INFO">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" starttime="20171031 19:31:15.366" endtime="20171031 19:31:15.366"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.372" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" starttime="20171031 19:31:15.367" endtime="20171031 19:31:15.372"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.375" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.375" endtime="20171031 19:31:15.376"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.374" endtime="20171031 19:31:15.376"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.377" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.377" endtime="20171031 19:31:15.377"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.376" endtime="20171031 19:31:15.377"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.378" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.378" endtime="20171031 19:31:15.379"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.377" endtime="20171031 19:31:15.379"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.380" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.379" endtime="20171031 19:31:15.380"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.379" endtime="20171031 19:31:15.380"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.374" endtime="20171031 19:31:15.380"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.374" endtime="20171031 19:31:15.380"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:31:15.381" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" starttime="20171031 19:31:15.381" endtime="20171031 19:31:15.381"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171031 19:31:15.520" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:31:15.527" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20171031 19:31:15.584" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171031 19:31:15.443" endtime="20171031 19:31:15.584"></status>
</kw>
<msg timestamp="20171031 19:31:15.584" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:31:15.585" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.4M     14.4M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" starttime="20171031 19:31:15.381" endtime="20171031 19:31:15.585"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171031 19:31:15.585" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.4M     14.4M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" starttime="20171031 19:31:15.585" endtime="20171031 19:31:15.585"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:31:15.586" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171031 19:31:15.586" endtime="20171031 19:31:15.586"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.594" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.594" endtime="20171031 19:31:15.594"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.593" endtime="20171031 19:31:15.594"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.586" endtime="20171031 19:31:15.594"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.373" endtime="20171031 19:31:15.595"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.373" endtime="20171031 19:31:15.595"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.598" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.597" endtime="20171031 19:31:15.598"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.597" endtime="20171031 19:31:15.598"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.599" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.599" endtime="20171031 19:31:15.599"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.598" endtime="20171031 19:31:15.599"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.600" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.600" endtime="20171031 19:31:15.601"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.599" endtime="20171031 19:31:15.601"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.602" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.601" endtime="20171031 19:31:15.602"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.601" endtime="20171031 19:31:15.602"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.596" endtime="20171031 19:31:15.602"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.596" endtime="20171031 19:31:15.602"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:31:15.603" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" starttime="20171031 19:31:15.602" endtime="20171031 19:31:15.603"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171031 19:31:15.720" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:31:15.720" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20171031 19:31:15.785" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171031 19:31:15.659" endtime="20171031 19:31:15.785"></status>
</kw>
<msg timestamp="20171031 19:31:15.785" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:31:15.785" level="INFO">${ret_values} = (u' 19:31:35 up 14 min,  load average: 0.37, 1.26, 1.45', u'', 0)</msg>
<status status="PASS" starttime="20171031 19:31:15.603" endtime="20171031 19:31:15.785"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171031 19:31:15.786" level="INFO">${stdout} =  19:31:35 up 14 min,  load average: 0.37, 1.26, 1.45</msg>
<status status="PASS" starttime="20171031 19:31:15.786" endtime="20171031 19:31:15.786"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:31:15.787" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171031 19:31:15.786" endtime="20171031 19:31:15.787"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.795" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.794" endtime="20171031 19:31:15.795"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.793" endtime="20171031 19:31:15.795"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.787" endtime="20171031 19:31:15.795"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.595" endtime="20171031 19:31:15.795"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.595" endtime="20171031 19:31:15.795"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.798" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.798" endtime="20171031 19:31:15.798"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.797" endtime="20171031 19:31:15.798"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.799" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.799" endtime="20171031 19:31:15.800"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.798" endtime="20171031 19:31:15.800"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.801" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.800" endtime="20171031 19:31:15.801"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.800" endtime="20171031 19:31:15.801"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.802" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.802" endtime="20171031 19:31:15.802"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.801" endtime="20171031 19:31:15.802"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.797" endtime="20171031 19:31:15.802"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.796" endtime="20171031 19:31:15.803"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:31:15.803" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" starttime="20171031 19:31:15.803" endtime="20171031 19:31:15.803"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171031 19:31:15.925" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:31:15.925" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20171031 19:31:15.984" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171031 19:31:15.861" endtime="20171031 19:31:15.984"></status>
</kw>
<msg timestamp="20171031 19:31:15.984" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:31:15.984" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-6b6e0a3593d3efba15eda8d2d824d63daf30fed4 #1 Tue Oct 31 02:39:49 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" starttime="20171031 19:31:15.804" endtime="20171031 19:31:15.984"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171031 19:31:15.985" level="INFO">${stdout} = Linux witherspoon 4.10.17-6b6e0a3593d3efba15eda8d2d824d63daf30fed4 #1 Tue Oct 31 02:39:49 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" starttime="20171031 19:31:15.984" endtime="20171031 19:31:15.985"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:31:15.985" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171031 19:31:15.985" endtime="20171031 19:31:15.985"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.993" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.992" endtime="20171031 19:31:15.993"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.992" endtime="20171031 19:31:15.993"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.986" endtime="20171031 19:31:15.993"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.795" endtime="20171031 19:31:15.993"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.795" endtime="20171031 19:31:15.994"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.372" endtime="20171031 19:31:15.994"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.365" endtime="20171031 19:31:15.994"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.365" endtime="20171031 19:31:15.994"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171031 19:31:15.995" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" starttime="20171031 19:31:15.995" endtime="20171031 19:31:15.995"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.996" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" starttime="20171031 19:31:15.995" endtime="20171031 19:31:15.996"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:15.999" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:15.998" endtime="20171031 19:31:15.999"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.998" endtime="20171031 19:31:15.999"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:16.000" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:16.000" endtime="20171031 19:31:16.001"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.999" endtime="20171031 19:31:16.001"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:16.002" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:16.001" endtime="20171031 19:31:16.002"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:16.001" endtime="20171031 19:31:16.002"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:16.003" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:16.003" endtime="20171031 19:31:16.003"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:16.002" endtime="20171031 19:31:16.003"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.997" endtime="20171031 19:31:16.003"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.997" endtime="20171031 19:31:16.003"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:31:16.004" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" starttime="20171031 19:31:16.004" endtime="20171031 19:31:16.004"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171031 19:31:16.128" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:31:16.128" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20171031 19:31:17.968" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171031 19:31:16.054" endtime="20171031 19:31:17.968"></status>
</kw>
<msg timestamp="20171031 19:31:17.968" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:31:17.969" level="INFO">${ret_values} = (u'CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState    : xyz.openbmc_project.State.Host.Host...</msg>
<status status="PASS" starttime="20171031 19:31:16.005" endtime="20171031 19:31:17.969"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171031 19:31:17.969" level="INFO">${stdout} = CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState    : xyz.openbmc_project.State.Host.HostState...</msg>
<status status="PASS" starttime="20171031 19:31:17.969" endtime="20171031 19:31:17.969"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:31:17.970" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171031 19:31:17.970" endtime="20171031 19:31:17.970"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:17.977" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:17.977" endtime="20171031 19:31:17.977"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:17.976" endtime="20171031 19:31:17.977"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:17.970" endtime="20171031 19:31:17.977"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.996" endtime="20171031 19:31:17.978"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.996" endtime="20171031 19:31:17.978"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.996" endtime="20171031 19:31:17.978"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.994" endtime="20171031 19:31:17.978"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.994" endtime="20171031 19:31:17.978"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171031 19:31:17.979" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('FW Timestamp', 'cat /etc/timestamp') ]</msg>
<status status="PASS" starttime="20171031 19:31:17.979" endtime="20171031 19:31:17.979"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171031 19:31:17.980" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" starttime="20171031 19:31:17.979" endtime="20171031 19:31:17.980"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:17.983" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:17.983" endtime="20171031 19:31:17.983"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:17.982" endtime="20171031 19:31:17.983"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:17.985" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:17.984" endtime="20171031 19:31:17.985"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:17.984" endtime="20171031 19:31:17.985"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:17.986" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:17.986" endtime="20171031 19:31:17.986"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:17.985" endtime="20171031 19:31:17.986"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:17.987" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:17.987" endtime="20171031 19:31:17.988"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:17.986" endtime="20171031 19:31:17.988"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:17.981" endtime="20171031 19:31:17.988"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:17.981" endtime="20171031 19:31:17.988"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:31:17.989" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" starttime="20171031 19:31:17.988" endtime="20171031 19:31:17.989"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171031 19:31:18.119" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:31:18.120" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20171031 19:31:18.197" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171031 19:31:18.053" endtime="20171031 19:31:18.197"></status>
</kw>
<msg timestamp="20171031 19:31:18.197" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:31:18.197" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-237"\nVERSION_ID="v1.99.10-237-gf81c61c"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenB...</msg>
<status status="PASS" starttime="20171031 19:31:17.989" endtime="20171031 19:31:18.198"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171031 19:31:18.198" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-237"
VERSION_ID="v1.99.10-237-gf81c61c"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Proj...</msg>
<status status="PASS" starttime="20171031 19:31:18.198" endtime="20171031 19:31:18.198"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:31:18.199" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171031 19:31:18.199" endtime="20171031 19:31:18.199"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:18.207" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:18.206" endtime="20171031 19:31:18.207"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:18.205" endtime="20171031 19:31:18.207"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:18.199" endtime="20171031 19:31:18.207"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:17.980" endtime="20171031 19:31:18.207"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:17.980" endtime="20171031 19:31:18.207"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:18.210" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:18.210" endtime="20171031 19:31:18.210"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:18.209" endtime="20171031 19:31:18.210"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:18.211" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:18.211" endtime="20171031 19:31:18.212"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:18.210" endtime="20171031 19:31:18.212"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:18.213" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:18.212" endtime="20171031 19:31:18.213"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:18.212" endtime="20171031 19:31:18.213"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:18.214" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:18.214" endtime="20171031 19:31:18.214"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:18.213" endtime="20171031 19:31:18.214"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:18.209" endtime="20171031 19:31:18.214"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:18.208" endtime="20171031 19:31:18.215"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:31:18.215" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" starttime="20171031 19:31:18.215" endtime="20171031 19:31:18.215"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171031 19:31:18.347" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:31:18.348" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20171031 19:31:18.395" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171031 19:31:18.281" endtime="20171031 19:31:18.395"></status>
</kw>
<msg timestamp="20171031 19:31:18.396" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:31:18.396" level="INFO">${ret_values} = (u'20171031171354', u'', 0)</msg>
<status status="PASS" starttime="20171031 19:31:18.216" endtime="20171031 19:31:18.396"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171031 19:31:18.397" level="INFO">${stdout} = 20171031171354</msg>
<status status="PASS" starttime="20171031 19:31:18.396" endtime="20171031 19:31:18.397"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:31:18.397" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171031 19:31:18.397" endtime="20171031 19:31:18.397"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:31:18.404" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:31:18.404" endtime="20171031 19:31:18.404"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:18.403" endtime="20171031 19:31:18.405"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:18.397" endtime="20171031 19:31:18.405"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:18.207" endtime="20171031 19:31:18.405"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:18.207" endtime="20171031 19:31:18.405"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:17.980" endtime="20171031 19:31:18.405"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:17.978" endtime="20171031 19:31:18.405"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:17.978" endtime="20171031 19:31:18.405"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.365" endtime="20171031 19:31:18.405"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.364" endtime="20171031 19:31:18.405"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.308" endtime="20171031 19:31:18.405"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.306" endtime="20171031 19:31:18.405"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.305" endtime="20171031 19:31:18.405"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:31:18.407" endtime="20171031 19:31:18.408"></status>
</kw>
<msg timestamp="20171031 19:31:18.408" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:31:18.408" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171031 19:31:18.407" endtime="20171031 19:31:18.408"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171031 19:31:18.408" endtime="20171031 19:31:18.408"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171031 19:31:18.511" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:31:18.511" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20171031 19:31:18.568" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20171031 19:31:18.587" level="INFO">${core_files} = None</msg>
<msg timestamp="20171031 19:31:18.587" level="INFO">${stderr} = None</msg>
<msg timestamp="20171031 19:31:18.587" level="INFO">${rc} = None</msg>
<msg timestamp="20171031 19:31:18.587" level="FAIL">#(UTC) 2017/10/31 19:31:18.585408 -    0.074967 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" starttime="20171031 19:31:18.452" endtime="20171031 19:31:18.587"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20171031 19:31:18.589" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20171031 19:31:18.589" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" starttime="20171031 19:31:18.588" endtime="20171031 19:31:18.590"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" starttime="20171031 19:31:18.606" endtime="20171031 19:31:18.607"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<msg timestamp="20171031 19:36:18.938" level="FAIL">EOFError</msg>
<status status="FAIL" starttime="20171031 19:31:18.610" endtime="20171031 19:36:18.938"></status>
</kw>
<status status="FAIL" starttime="20171031 19:31:18.610" endtime="20171031 19:36:18.938"></status>
</kw>
<status status="FAIL" starttime="20171031 19:31:18.608" endtime="20171031 19:36:18.938"></status>
</kw>
<status status="FAIL" starttime="20171031 19:31:18.605" endtime="20171031 19:36:18.939"></status>
</kw>
<msg timestamp="20171031 19:36:18.939" level="FAIL">EOFError</msg>
<status status="FAIL" starttime="20171031 19:31:18.590" endtime="20171031 19:36:18.939"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" starttime="20171031 19:36:18.939" endtime="20171031 19:36:18.940"></status>
</kw>
<status status="FAIL" starttime="20171031 19:31:18.451" endtime="20171031 19:36:18.940"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:18.409" endtime="20171031 19:36:18.940"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:18.406" endtime="20171031 19:36:18.940"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:18.405" endtime="20171031 19:36:18.940"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:36:18.943" endtime="20171031 19:36:18.943"></status>
</kw>
<msg timestamp="20171031 19:36:18.943" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:36:18.944" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171031 19:36:18.942" endtime="20171031 19:36:18.944"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171031 19:36:18.944" endtime="20171031 19:36:18.944"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20171031 19:36:18.996" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171031 19:36:18.995" endtime="20171031 19:36:18.996"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:18.995" endtime="20171031 19:36:18.996"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:18.945" endtime="20171031 19:36:18.996"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:18.941" endtime="20171031 19:36:18.996"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:18.940" endtime="20171031 19:36:18.996"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:36:18.998" endtime="20171031 19:36:18.998"></status>
</kw>
<msg timestamp="20171031 19:36:18.998" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:36:18.998" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171031 19:36:18.997" endtime="20171031 19:36:18.998"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171031 19:36:18.999" endtime="20171031 19:36:18.999"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171031 19:36:19.042" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" starttime="20171031 19:36:19.042" endtime="20171031 19:36:19.042"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171031 19:36:19.043" level="INFO">@{cmd_list} = [ ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC...</msg>
<status status="PASS" starttime="20171031 19:36:19.043" endtime="20171031 19:36:19.043"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171031 19:36:19.044" level="INFO">${logpath} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_journalctl_nopager.txt</msg>
<status status="PASS" starttime="20171031 19:36:19.044" endtime="20171031 19:36:19.044"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:36:19.046" endtime="20171031 19:36:19.046"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:36:19.047" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" starttime="20171031 19:36:19.047" endtime="20171031 19:36:19.047"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171031 19:36:19.165" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:36:19.165" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20171031 19:36:21.849" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171031 19:36:19.102" endtime="20171031 19:36:21.850"></status>
</kw>
<msg timestamp="20171031 19:36:21.850" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:36:21.854" level="INFO">${ret_values} = (u'-- Logs begin at Tue 2017-10-31 19:07:54 UTC, end at Tue 2017-10-31 19:36:38 UTC. --\nOct 31 19:07:54 witherspoon phosphor-fan-control[2504]: Unable to find property\nOct 31 19:07:54 witherspoon ph...</msg>
<status status="PASS" starttime="20171031 19:36:19.047" endtime="20171031 19:36:21.854"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171031 19:36:21.856" level="INFO">${stdout} = -- Logs begin at Tue 2017-10-31 19:07:54 UTC, end at Tue 2017-10-31 19:36:38 UTC. --
Oct 31 19:07:54 witherspoon phosphor-fan-control[2504]: Unable to find property
Oct 31 19:07:54 witherspoon phospho...</msg>
<status status="PASS" starttime="20171031 19:36:21.854" endtime="20171031 19:36:21.856"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:36:21.856" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171031 19:36:21.856" endtime="20171031 19:36:21.856"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:36:21.866" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_journalctl_nopager.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:36:21.864" endtime="20171031 19:36:21.866"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:21.862" endtime="20171031 19:36:21.866"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:21.856" endtime="20171031 19:36:21.866"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:19.045" endtime="20171031 19:36:21.866"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:19.044" endtime="20171031 19:36:21.866"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171031 19:36:21.867" level="INFO">${logpath} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_meminfo.txt</msg>
<status status="PASS" starttime="20171031 19:36:21.867" endtime="20171031 19:36:21.867"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:36:21.868" endtime="20171031 19:36:21.868"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:36:21.869" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" starttime="20171031 19:36:21.869" endtime="20171031 19:36:21.869"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171031 19:36:21.985" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:36:21.986" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20171031 19:36:22.034" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171031 19:36:21.922" endtime="20171031 19:36:22.035"></status>
</kw>
<msg timestamp="20171031 19:36:22.035" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:36:22.035" level="INFO">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          225488 kB\nMemAvailable:     332492 kB\nBuffers:           31956 kB\nCached:            77232 kB\nSwapCached:            0 kB\nActive:           13290...</msg>
<status status="PASS" starttime="20171031 19:36:21.870" endtime="20171031 19:36:22.035"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171031 19:36:22.036" level="INFO">${stdout} = MemTotal:         432252 kB
MemFree:          225488 kB
MemAvailable:     332492 kB
Buffers:           31956 kB
Cached:            77232 kB
SwapCached:            0 kB
Active:           132900 kB
Inac...</msg>
<status status="PASS" starttime="20171031 19:36:22.035" endtime="20171031 19:36:22.036"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:36:22.036" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171031 19:36:22.036" endtime="20171031 19:36:22.036"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:36:22.044" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_meminfo.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:36:22.043" endtime="20171031 19:36:22.044"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.042" endtime="20171031 19:36:22.044"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.037" endtime="20171031 19:36:22.044"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:21.867" endtime="20171031 19:36:22.044"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:21.866" endtime="20171031 19:36:22.044"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171031 19:36:22.045" level="INFO">${logpath} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_dmesg.txt</msg>
<status status="PASS" starttime="20171031 19:36:22.044" endtime="20171031 19:36:22.045"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:36:22.046" endtime="20171031 19:36:22.046"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:36:22.047" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" starttime="20171031 19:36:22.046" endtime="20171031 19:36:22.047"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171031 19:36:22.170" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:36:22.170" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20171031 19:36:22.229" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171031 19:36:22.106" endtime="20171031 19:36:22.229"></status>
</kw>
<msg timestamp="20171031 19:36:22.229" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:36:22.230" level="INFO">${ret_values} = (u'[    1.050000] aspeed-smc 1e630000.flash-controller: CE0 window resized to 120MB (AST2500 HW quirk)\n[    1.050000] aspeed-smc 1e630000.flash-controller: CE0 window [ 0x30000000 - 0x37800000 ] 120M...</msg>
<status status="PASS" starttime="20171031 19:36:22.047" endtime="20171031 19:36:22.230"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171031 19:36:22.231" level="INFO">${stdout} = [    1.050000] aspeed-smc 1e630000.flash-controller: CE0 window resized to 120MB (AST2500 HW quirk)
[    1.050000] aspeed-smc 1e630000.flash-controller: CE0 window [ 0x30000000 - 0x37800000 ] 120MB
[ ...</msg>
<status status="PASS" starttime="20171031 19:36:22.230" endtime="20171031 19:36:22.231"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:36:22.231" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171031 19:36:22.231" endtime="20171031 19:36:22.231"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:36:22.239" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_dmesg.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:36:22.238" endtime="20171031 19:36:22.239"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.237" endtime="20171031 19:36:22.239"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.231" endtime="20171031 19:36:22.239"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.045" endtime="20171031 19:36:22.239"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.044" endtime="20171031 19:36:22.239"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171031 19:36:22.240" level="INFO">${logpath} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_proc_list.txt</msg>
<status status="PASS" starttime="20171031 19:36:22.239" endtime="20171031 19:36:22.240"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:36:22.241" endtime="20171031 19:36:22.241"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:36:22.242" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" starttime="20171031 19:36:22.242" endtime="20171031 19:36:22.242"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171031 19:36:22.364" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:36:22.365" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20171031 19:36:22.664" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171031 19:36:22.290" endtime="20171031 19:36:22.664"></status>
</kw>
<msg timestamp="20171031 19:36:22.664" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:36:22.665" level="INFO">${ret_values} = (u'Mem: 206764K used, 225488K free, 764K shrd, 31956K buff, 77236K cached\nCPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 0.54 0.69 1.13 1/163 2023\n  PID  PPID US...</msg>
<status status="PASS" starttime="20171031 19:36:22.242" endtime="20171031 19:36:22.665"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171031 19:36:22.665" level="INFO">${stdout} = Mem: 206764K used, 225488K free, 764K shrd, 31956K buff, 77236K cached
CPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.54 0.69 1.13 1/163 2023
  PID  PPID USER    ...</msg>
<status status="PASS" starttime="20171031 19:36:22.665" endtime="20171031 19:36:22.665"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:36:22.666" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171031 19:36:22.666" endtime="20171031 19:36:22.666"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:36:22.674" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_proc_list.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:36:22.673" endtime="20171031 19:36:22.674"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.672" endtime="20171031 19:36:22.674"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.666" endtime="20171031 19:36:22.674"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.240" endtime="20171031 19:36:22.674"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.239" endtime="20171031 19:36:22.674"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171031 19:36:22.675" level="INFO">${logpath} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_procinfo.txt</msg>
<status status="PASS" starttime="20171031 19:36:22.675" endtime="20171031 19:36:22.675"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:36:22.676" endtime="20171031 19:36:22.676"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:36:22.677" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" starttime="20171031 19:36:22.677" endtime="20171031 19:36:22.677"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171031 19:36:22.795" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:36:22.796" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20171031 19:36:22.861" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171031 19:36:22.732" endtime="20171031 19:36:22.861"></status>
</kw>
<msg timestamp="20171031 19:36:22.862" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:36:22.862" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" starttime="20171031 19:36:22.677" endtime="20171031 19:36:22.862"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171031 19:36:22.862" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" starttime="20171031 19:36:22.862" endtime="20171031 19:36:22.863"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:36:22.863" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171031 19:36:22.863" endtime="20171031 19:36:22.863"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:36:22.871" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_procinfo.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:36:22.870" endtime="20171031 19:36:22.871"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.869" endtime="20171031 19:36:22.871"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.863" endtime="20171031 19:36:22.871"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.675" endtime="20171031 19:36:22.871"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.674" endtime="20171031 19:36:22.871"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171031 19:36:22.872" level="INFO">${logpath} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_journalctl_pretty.txt</msg>
<status status="PASS" starttime="20171031 19:36:22.872" endtime="20171031 19:36:22.872"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:36:22.873" endtime="20171031 19:36:22.873"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:36:22.874" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" starttime="20171031 19:36:22.874" endtime="20171031 19:36:22.875"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171031 19:36:22.993" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:36:22.994" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20171031 19:36:31.188" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171031 19:36:22.927" endtime="20171031 19:36:31.233"></status>
</kw>
<msg timestamp="20171031 19:36:31.233" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:36:31.299" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=bb6c874358ba4841b2a9ddd3c368f315;i=e76d;b=8ed3e71400a94985a33526eae23cf7d1;m=242c9e52;t=55cdc78e36e8a;x=852ecac7af0936f",\n\t"__REALTIME_TIMESTAMP" : "1509476874284682",\n\t"__...</msg>
<status status="PASS" starttime="20171031 19:36:22.875" endtime="20171031 19:36:31.300"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171031 19:36:31.310" level="INFO">${stdout} = {
	"__CURSOR" : "s=bb6c874358ba4841b2a9ddd3c368f315;i=e76d;b=8ed3e71400a94985a33526eae23cf7d1;m=242c9e52;t=55cdc78e36e8a;x=852ecac7af0936f",
	"__REALTIME_TIMESTAMP" : "1509476874284682",
	"__MONOTONIC...</msg>
<status status="PASS" starttime="20171031 19:36:31.300" endtime="20171031 19:36:31.310"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:36:31.311" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171031 19:36:31.310" endtime="20171031 19:36:31.311"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:36:31.341" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_journalctl_pretty.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:36:31.329" endtime="20171031 19:36:31.341"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:31.317" endtime="20171031 19:36:31.341"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:31.311" endtime="20171031 19:36:31.341"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.872" endtime="20171031 19:36:31.342"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:22.871" endtime="20171031 19:36:31.342"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171031 19:36:31.342" level="INFO">${logpath} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" starttime="20171031 19:36:31.342" endtime="20171031 19:36:31.342"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:36:31.343" endtime="20171031 19:36:31.344"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:36:31.345" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" starttime="20171031 19:36:31.344" endtime="20171031 19:36:31.345"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171031 19:36:31.466" level="INFO">newline=

index=1
host=9.3.86.161
alias=bmc_connection
prompt=# 
path_separator=/
encoding=UTF-8
port=22
width=80
height=24
term_type=vt100
timeout=25 seconds</msg>
<msg timestamp="20171031 19:36:31.466" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20171031 19:36:32.079" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171031 19:36:31.400" endtime="20171031 19:36:32.079"></status>
</kw>
<msg timestamp="20171031 19:36:32.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:36:32.080" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct 31 19:36 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct 31 19:36 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" starttime="20171031 19:36:31.345" endtime="20171031 19:36:32.080"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171031 19:36:32.081" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct 31 19:36 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct 31 19:36 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" starttime="20171031 19:36:32.081" endtime="20171031 19:36:32.081"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:36:32.082" level="INFO">${stderr} = ls: /proc/2026/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" starttime="20171031 19:36:32.082" endtime="20171031 19:36:32.082"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:36:32.090" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:36:32.089" endtime="20171031 19:36:32.090"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:32.088" endtime="20171031 19:36:32.090"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:32.082" endtime="20171031 19:36:32.090"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:31.343" endtime="20171031 19:36:32.090"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:31.342" endtime="20171031 19:36:32.090"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:19.044" endtime="20171031 19:36:32.090"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:19.043" endtime="20171031 19:36:32.091"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:19.042" endtime="20171031 19:36:32.091"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:19.042" endtime="20171031 19:36:32.091"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:19.041" endtime="20171031 19:36:32.091"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:18.999" endtime="20171031 19:36:32.091"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:18.996" endtime="20171031 19:36:32.091"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:18.996" endtime="20171031 19:36:32.091"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:36:32.093" endtime="20171031 19:36:32.093"></status>
</kw>
<msg timestamp="20171031 19:36:32.093" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:36:32.093" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171031 19:36:32.092" endtime="20171031 19:36:32.093"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171031 19:36:32.093" endtime="20171031 19:36:32.094"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171031 19:36:32.135" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" starttime="20171031 19:36:32.135" endtime="20171031 19:36:32.135"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171031 19:36:32.136" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('FIRM...</msg>
<status status="PASS" starttime="20171031 19:36:32.136" endtime="20171031 19:36:32.136"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171031 19:36:32.137" level="INFO">${logpath} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_elog.txt</msg>
<status status="PASS" starttime="20171031 19:36:32.137" endtime="20171031 19:36:32.137"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:36:32.140" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:36:32.140" endtime="20171031 19:36:32.144"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:36:32.145" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:36:32.144" endtime="20171031 19:36:32.145"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:36:32.145" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:36:32.145" endtime="20171031 19:36:32.145"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:36:32.146" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:36:32.146" endtime="20171031 19:36:32.146"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:36:42.161" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:36:32.147" endtime="20171031 19:36:42.162"></status>
</kw>
<msg timestamp="20171031 19:36:42.162" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:36:42.162" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:36:32.146" endtime="20171031 19:36:42.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:36:42.163" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:36:42.163" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:36:42.162" endtime="20171031 19:36:42.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:36:42.164" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" starttime="20171031 19:36:42.163" endtime="20171031 19:36:42.164"></status>
</kw>
<status status="FAIL" starttime="20171031 19:36:32.139" endtime="20171031 19:36:42.164"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:37:02.166" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:37:02.165" endtime="20171031 19:37:02.166"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:37:02.167" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:37:02.166" endtime="20171031 19:37:02.167"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:37:02.167" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:37:02.167" endtime="20171031 19:37:02.167"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:37:02.168" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:37:02.168" endtime="20171031 19:37:02.168"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:37:12.183" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:37:02.169" endtime="20171031 19:37:12.184"></status>
</kw>
<msg timestamp="20171031 19:37:12.184" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:37:12.184" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:37:02.168" endtime="20171031 19:37:12.184"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:37:12.185" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:37:12.185" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:37:12.184" endtime="20171031 19:37:12.185"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:37:12.186" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" starttime="20171031 19:37:12.185" endtime="20171031 19:37:12.186"></status>
</kw>
<status status="FAIL" starttime="20171031 19:37:02.164" endtime="20171031 19:37:12.186"></status>
</kw>
<msg timestamp="20171031 19:37:12.186" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: Several failures occurred:

1) ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" starttime="20171031 19:36:32.139" endtime="20171031 19:37:12.186"></status>
</kw>
<status status="FAIL" starttime="20171031 19:36:32.138" endtime="20171031 19:37:12.186"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:37:12.187" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" starttime="20171031 19:37:12.187" endtime="20171031 19:37:12.187"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:37:12.187" endtime="20171031 19:37:12.188"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:37:22.192" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/logging/entry/enumerate</msg>
<msg timestamp="20171031 19:37:32.405" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/logging/entry/enumerate</msg>
<msg timestamp="20171031 19:37:42.817" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/logging/entry/enumerate</msg>
<msg timestamp="20171031 19:37:52.831" level="INFO">${ret} = None</msg>
<msg timestamp="20171031 19:37:52.831" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /xyz/openbmc_project/logging/entry/enumerate (Caused by ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",))</msg>
<status status="FAIL" starttime="20171031 19:37:12.188" endtime="20171031 19:37:52.832"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:37:52.832" endtime="20171031 19:37:52.832"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:37:52.833" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:37:52.833" endtime="20171031 19:37:52.833"></status>
</kw>
<msg timestamp="20171031 19:37:52.834" level="INFO">${resp} = None</msg>
<status status="FAIL" starttime="20171031 19:36:32.137" endtime="20171031 19:37:52.834"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:37:52.835" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status status="FAIL" starttime="20171031 19:37:52.834" endtime="20171031 19:37:52.835"></status>
</kw>
<msg timestamp="20171031 19:37:52.835" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20171031 19:37:52.834" endtime="20171031 19:37:52.835"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20171031 19:37:52.836" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171031 19:37:52.836" endtime="20171031 19:37:52.836"></status>
</kw>
<status status="PASS" starttime="20171031 19:37:52.835" endtime="20171031 19:37:52.836"></status>
</kw>
<status status="FAIL" starttime="20171031 19:36:32.136" endtime="20171031 19:37:52.836"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171031 19:37:52.837" level="INFO">${logpath} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_control_list.txt</msg>
<status status="PASS" starttime="20171031 19:37:52.836" endtime="20171031 19:37:52.837"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:37:52.840" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:37:52.839" endtime="20171031 19:37:52.840"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:37:52.841" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:37:52.841" endtime="20171031 19:37:52.841"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:37:52.842" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:37:52.841" endtime="20171031 19:37:52.842"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:37:52.842" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:37:52.842" endtime="20171031 19:37:52.842"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:38:02.854" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:37:52.843" endtime="20171031 19:38:02.854"></status>
</kw>
<msg timestamp="20171031 19:38:02.854" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:38:02.854" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:37:52.843" endtime="20171031 19:38:02.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:38:02.855" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:38:02.855" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:38:02.854" endtime="20171031 19:38:02.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:38:02.856" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" starttime="20171031 19:38:02.855" endtime="20171031 19:38:02.856"></status>
</kw>
<status status="FAIL" starttime="20171031 19:37:52.839" endtime="20171031 19:38:02.856"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:38:22.858" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:38:22.858" endtime="20171031 19:38:22.859"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:38:22.860" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:38:22.860" endtime="20171031 19:38:22.860"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:38:22.861" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:38:22.861" endtime="20171031 19:38:22.861"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:38:22.862" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:38:22.862" endtime="20171031 19:38:22.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:38:32.879" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:38:22.864" endtime="20171031 19:38:32.879"></status>
</kw>
<msg timestamp="20171031 19:38:32.879" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:38:32.879" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:38:22.863" endtime="20171031 19:38:32.879"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:38:32.880" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:38:32.880" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:38:32.880" endtime="20171031 19:38:32.880"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:38:32.881" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" starttime="20171031 19:38:32.880" endtime="20171031 19:38:32.881"></status>
</kw>
<status status="FAIL" starttime="20171031 19:38:22.857" endtime="20171031 19:38:32.881"></status>
</kw>
<msg timestamp="20171031 19:38:32.881" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: Several failures occurred:

1) ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" starttime="20171031 19:37:52.838" endtime="20171031 19:38:32.881"></status>
</kw>
<status status="FAIL" starttime="20171031 19:37:52.838" endtime="20171031 19:38:32.882"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:38:32.882" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" starttime="20171031 19:38:32.882" endtime="20171031 19:38:32.882"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:38:32.883" endtime="20171031 19:38:32.883"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:38:42.889" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/control/enumerate</msg>
<msg timestamp="20171031 19:38:53.101" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/control/enumerate</msg>
<msg timestamp="20171031 19:39:03.513" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/control/enumerate</msg>
<msg timestamp="20171031 19:39:13.526" level="INFO">${ret} = None</msg>
<msg timestamp="20171031 19:39:13.527" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /xyz/openbmc_project/control/enumerate (Caused by ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",))</msg>
<status status="FAIL" starttime="20171031 19:38:32.883" endtime="20171031 19:39:13.527"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:39:13.527" endtime="20171031 19:39:13.528"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:39:13.528" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:39:13.528" endtime="20171031 19:39:13.528"></status>
</kw>
<msg timestamp="20171031 19:39:13.529" level="INFO">${resp} = None</msg>
<status status="FAIL" starttime="20171031 19:37:52.837" endtime="20171031 19:39:13.529"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:39:13.530" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status status="FAIL" starttime="20171031 19:39:13.529" endtime="20171031 19:39:13.530"></status>
</kw>
<msg timestamp="20171031 19:39:13.530" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20171031 19:39:13.529" endtime="20171031 19:39:13.530"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20171031 19:39:13.531" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171031 19:39:13.531" endtime="20171031 19:39:13.531"></status>
</kw>
<status status="PASS" starttime="20171031 19:39:13.530" endtime="20171031 19:39:13.531"></status>
</kw>
<status status="FAIL" starttime="20171031 19:37:52.836" endtime="20171031 19:39:13.531"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171031 19:39:13.533" level="INFO">${logpath} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_inventory.txt</msg>
<status status="PASS" starttime="20171031 19:39:13.532" endtime="20171031 19:39:13.533"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:39:13.537" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:39:13.536" endtime="20171031 19:39:13.537"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:39:13.538" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:39:13.538" endtime="20171031 19:39:13.538"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:39:13.539" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:39:13.539" endtime="20171031 19:39:13.539"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:39:13.540" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:39:13.540" endtime="20171031 19:39:13.540"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:39:23.557" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:39:13.542" endtime="20171031 19:39:23.557"></status>
</kw>
<msg timestamp="20171031 19:39:23.557" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:39:23.557" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:39:13.541" endtime="20171031 19:39:23.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:39:23.558" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:39:23.558" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:39:23.558" endtime="20171031 19:39:23.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:39:23.559" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" starttime="20171031 19:39:23.559" endtime="20171031 19:39:23.559"></status>
</kw>
<status status="FAIL" starttime="20171031 19:39:13.535" endtime="20171031 19:39:23.559"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:39:43.561" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:39:43.561" endtime="20171031 19:39:43.562"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:39:43.563" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:39:43.562" endtime="20171031 19:39:43.563"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:39:43.564" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:39:43.563" endtime="20171031 19:39:43.564"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:39:43.564" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:39:43.564" endtime="20171031 19:39:43.564"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:39:53.579" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" starttime="20171031 19:39:43.565" endtime="20171031 19:39:53.579"></status>
</kw>
<msg timestamp="20171031 19:39:53.579" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171031 19:39:53.580" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" starttime="20171031 19:39:43.565" endtime="20171031 19:39:53.580"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:39:53.581" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171031 19:39:53.581" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" starttime="20171031 19:39:53.580" endtime="20171031 19:39:53.581"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:39:53.582" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" starttime="20171031 19:39:53.581" endtime="20171031 19:39:53.582"></status>
</kw>
<status status="FAIL" starttime="20171031 19:39:43.560" endtime="20171031 19:39:53.582"></status>
</kw>
<msg timestamp="20171031 19:39:53.582" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: Several failures occurred:

1) ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" starttime="20171031 19:39:13.535" endtime="20171031 19:39:53.582"></status>
</kw>
<status status="FAIL" starttime="20171031 19:39:13.534" endtime="20171031 19:39:53.582"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:39:53.583" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" starttime="20171031 19:39:53.583" endtime="20171031 19:39:53.583"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:39:53.583" endtime="20171031 19:39:53.584"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:40:03.589" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/inventory/enumerate</msg>
<msg timestamp="20171031 19:40:13.801" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/inventory/enumerate</msg>
<msg timestamp="20171031 19:40:24.213" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/inventory/enumerate</msg>
<msg timestamp="20171031 19:40:34.225" level="INFO">${ret} = None</msg>
<msg timestamp="20171031 19:40:34.226" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /xyz/openbmc_project/inventory/enumerate (Caused by ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",))</msg>
<status status="FAIL" starttime="20171031 19:39:53.584" endtime="20171031 19:40:34.226"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:34.226" endtime="20171031 19:40:34.227"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:40:34.227" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:40:34.227" endtime="20171031 19:40:34.227"></status>
</kw>
<msg timestamp="20171031 19:40:34.228" level="INFO">${resp} = None</msg>
<status status="FAIL" starttime="20171031 19:39:13.533" endtime="20171031 19:40:34.228"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:34.229" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status status="FAIL" starttime="20171031 19:40:34.229" endtime="20171031 19:40:34.229"></status>
</kw>
<msg timestamp="20171031 19:40:34.229" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20171031 19:40:34.228" endtime="20171031 19:40:34.229"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20171031 19:40:34.230" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171031 19:40:34.230" endtime="20171031 19:40:34.230"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:34.229" endtime="20171031 19:40:34.230"></status>
</kw>
<status status="FAIL" starttime="20171031 19:39:13.532" endtime="20171031 19:40:34.230"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171031 19:40:34.231" level="INFO">${logpath} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_FIRMWARE_list.txt</msg>
<status status="PASS" starttime="20171031 19:40:34.231" endtime="20171031 19:40:34.231"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:40:34.234" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:40:34.234" endtime="20171031 19:40:34.234"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:40:34.235" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:40:34.235" endtime="20171031 19:40:34.235"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:40:34.236" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:40:34.235" endtime="20171031 19:40:34.236"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:34.236" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:40:34.236" endtime="20171031 19:40:34.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:40:34.565" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:40:34.237" endtime="20171031 19:40:34.565"></status>
</kw>
<msg timestamp="20171031 19:40:34.565" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:34.565" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:34.237" endtime="20171031 19:40:34.565"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:40:34.566" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:34.565" endtime="20171031 19:40:34.566"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:34.566" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:34.566" endtime="20171031 19:40:34.566"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:34.233" endtime="20171031 19:40:34.567"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:34.233" endtime="20171031 19:40:34.567"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:34.232" endtime="20171031 19:40:34.567"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:40:34.567" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" starttime="20171031 19:40:34.567" endtime="20171031 19:40:34.567"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:34.568" endtime="20171031 19:40:34.568"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:40:34.962" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20171031 19:40:34.963" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:34.568" endtime="20171031 19:40:34.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:34.963" endtime="20171031 19:40:34.963"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:40:34.964" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:40:34.964" endtime="20171031 19:40:34.964"></status>
</kw>
<msg timestamp="20171031 19:40:34.964" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:34.231" endtime="20171031 19:40:34.964"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:34.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:34.965" endtime="20171031 19:40:34.965"></status>
</kw>
<msg timestamp="20171031 19:40:34.965" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171031 19:40:34.965" endtime="20171031 19:40:34.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:34.966" endtime="20171031 19:40:34.966"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171031 19:40:34.967" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/28496194": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-237-g432ed94", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/28496194/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/28496194/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/7a0199e0": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-237-gf81c61c", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a0199e0/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/7a0199e0/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/28496194", 
        "/xyz/openbmc_project/software/7a0199e0", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a0199e0"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:40:34.967" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171031 19:40:34.968" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/28496194": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" starttime="20171031 19:40:34.966" endtime="20171031 19:40:34.968"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:40:34.969" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_FIRMWARE_list.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:40:34.969" endtime="20171031 19:40:34.969"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:34.968" endtime="20171031 19:40:34.970"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:34.231" endtime="20171031 19:40:34.970"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171031 19:40:34.970" level="INFO">${logpath} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_OCC_state.txt</msg>
<status status="PASS" starttime="20171031 19:40:34.970" endtime="20171031 19:40:34.970"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:40:34.973" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:40:34.973" endtime="20171031 19:40:34.973"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:40:34.974" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:40:34.974" endtime="20171031 19:40:34.974"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:40:34.975" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:40:34.974" endtime="20171031 19:40:34.975"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:34.975" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:40:34.975" endtime="20171031 19:40:34.975"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:40:35.155" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:40:34.976" endtime="20171031 19:40:35.155"></status>
</kw>
<msg timestamp="20171031 19:40:35.155" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:35.155" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:34.976" endtime="20171031 19:40:35.155"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:40:35.156" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:35.156" endtime="20171031 19:40:35.156"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:35.157" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:35.156" endtime="20171031 19:40:35.157"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:34.972" endtime="20171031 19:40:35.157"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:34.972" endtime="20171031 19:40:35.157"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:34.971" endtime="20171031 19:40:35.158"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:40:35.158" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" starttime="20171031 19:40:35.158" endtime="20171031 19:40:35.158"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:35.158" endtime="20171031 19:40:35.159"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:40:35.358" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171031 19:40:35.358" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:35.159" endtime="20171031 19:40:35.358"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:35.359" endtime="20171031 19:40:35.359"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:40:35.360" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:40:35.359" endtime="20171031 19:40:35.360"></status>
</kw>
<msg timestamp="20171031 19:40:35.360" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:34.971" endtime="20171031 19:40:35.360"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:35.361" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:35.361" endtime="20171031 19:40:35.361"></status>
</kw>
<msg timestamp="20171031 19:40:35.361" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171031 19:40:35.360" endtime="20171031 19:40:35.361"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:35.361" endtime="20171031 19:40:35.362"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171031 19:40:35.363" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:40:35.363" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171031 19:40:35.363" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0,
            "ThrottleMemTemp": 0,
            "ThrottleProcPower": 0,...</msg>
<status status="PASS" starttime="20171031 19:40:35.362" endtime="20171031 19:40:35.363"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:40:35.364" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_OCC_state.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:40:35.364" endtime="20171031 19:40:35.364"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:35.363" endtime="20171031 19:40:35.364"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:34.970" endtime="20171031 19:40:35.364"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171031 19:40:35.365" level="INFO">${logpath} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_sensor_list.txt</msg>
<status status="PASS" starttime="20171031 19:40:35.365" endtime="20171031 19:40:35.365"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:40:35.368" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:40:35.368" endtime="20171031 19:40:35.368"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:40:35.369" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:40:35.369" endtime="20171031 19:40:35.369"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:40:35.370" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:40:35.369" endtime="20171031 19:40:35.370"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:35.370" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:40:35.370" endtime="20171031 19:40:35.370"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:40:35.558" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:40:35.371" endtime="20171031 19:40:35.558"></status>
</kw>
<msg timestamp="20171031 19:40:35.558" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:35.558" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:35.371" endtime="20171031 19:40:35.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:40:35.559" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:35.558" endtime="20171031 19:40:35.559"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:35.559" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:35.559" endtime="20171031 19:40:35.559"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:35.367" endtime="20171031 19:40:35.560"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:35.367" endtime="20171031 19:40:35.560"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:35.366" endtime="20171031 19:40:35.560"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:40:35.560" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" starttime="20171031 19:40:35.560" endtime="20171031 19:40:35.560"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:35.561" endtime="20171031 19:40:35.561"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:40:36.301" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20171031 19:40:36.302" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:35.561" endtime="20171031 19:40:36.302"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:36.302" endtime="20171031 19:40:36.303"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:40:36.303" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:40:36.303" endtime="20171031 19:40:36.303"></status>
</kw>
<msg timestamp="20171031 19:40:36.303" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:35.365" endtime="20171031 19:40:36.303"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:36.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:36.304" endtime="20171031 19:40:36.305"></status>
</kw>
<msg timestamp="20171031 19:40:36.305" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171031 19:40:36.304" endtime="20171031 19:40:36.305"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:36.305" endtime="20171031 19:40:36.305"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171031 19:40:36.307" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 9638, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 9638, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 9638, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 9638, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 35000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 25320, 
      "WarningAlarmHigh": 1, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 25000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 209500, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 312, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 1, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 1, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:40:36.307" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171031 19:40:36.308" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "CriticalAlarmHigh": 0,
            "CriticalAlarmLow": 0,
            "CriticalHigh": 180000,
        ...</msg>
<status status="PASS" starttime="20171031 19:40:36.306" endtime="20171031 19:40:36.308"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:40:36.309" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_sensor_list.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:40:36.309" endtime="20171031 19:40:36.309"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:36.308" endtime="20171031 19:40:36.310"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:35.365" endtime="20171031 19:40:36.310"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171031 19:40:36.310" level="INFO">${logpath} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_led.txt</msg>
<status status="PASS" starttime="20171031 19:40:36.310" endtime="20171031 19:40:36.310"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:40:36.314" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:40:36.313" endtime="20171031 19:40:36.314"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:40:36.315" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:40:36.314" endtime="20171031 19:40:36.315"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:40:36.315" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:40:36.315" endtime="20171031 19:40:36.315"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:36.316" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:40:36.315" endtime="20171031 19:40:36.316"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:40:36.502" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:40:36.317" endtime="20171031 19:40:36.503"></status>
</kw>
<msg timestamp="20171031 19:40:36.503" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:36.503" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:36.316" endtime="20171031 19:40:36.503"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:40:36.503" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:36.503" endtime="20171031 19:40:36.504"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:36.504" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:36.504" endtime="20171031 19:40:36.504"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:36.312" endtime="20171031 19:40:36.504"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:36.312" endtime="20171031 19:40:36.505"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:36.311" endtime="20171031 19:40:36.505"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:40:36.505" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" starttime="20171031 19:40:36.505" endtime="20171031 19:40:36.505"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:36.506" endtime="20171031 19:40:36.506"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:40:38.180" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20171031 19:40:38.180" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:36.506" endtime="20171031 19:40:38.180"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:38.180" endtime="20171031 19:40:38.181"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:40:38.181" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:40:38.181" endtime="20171031 19:40:38.181"></status>
</kw>
<msg timestamp="20171031 19:40:38.182" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:36.311" endtime="20171031 19:40:38.182"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:38.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:38.183" endtime="20171031 19:40:38.183"></status>
</kw>
<msg timestamp="20171031 19:40:38.183" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171031 19:40:38.182" endtime="20171031 19:40:38.183"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:38.184" endtime="20171031 19:40:38.184"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171031 19:40:38.186" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:40:38.186" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171031 19:40:38.186" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" starttime="20171031 19:40:38.184" endtime="20171031 19:40:38.186"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171031 19:40:38.188" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_led.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:40:38.188" endtime="20171031 19:40:38.189"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.187" endtime="20171031 19:40:38.189"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:36.310" endtime="20171031 19:40:38.189"></status>
</kw>
<status status="FAIL" starttime="20171031 19:36:32.136" endtime="20171031 19:40:38.189"></status>
</kw>
<status status="FAIL" starttime="20171031 19:36:32.135" endtime="20171031 19:40:38.189"></status>
</kw>
<status status="FAIL" starttime="20171031 19:36:32.135" endtime="20171031 19:40:38.189"></status>
</kw>
<status status="FAIL" starttime="20171031 19:36:32.135" endtime="20171031 19:40:38.189"></status>
</kw>
<status status="FAIL" starttime="20171031 19:36:32.134" endtime="20171031 19:40:38.190"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:32.094" endtime="20171031 19:40:38.190"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:32.091" endtime="20171031 19:40:38.190"></status>
</kw>
<status status="PASS" starttime="20171031 19:36:32.091" endtime="20171031 19:40:38.190"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:38.192" endtime="20171031 19:40:38.192"></status>
</kw>
<msg timestamp="20171031 19:40:38.192" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:38.192" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171031 19:40:38.191" endtime="20171031 19:40:38.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:38.193" endtime="20171031 19:40:38.193"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="System Inventory Files">
<doc>Copy systest os_inventory files.</doc>
<kw library="OperatingSystem" name="Copy Files">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:38.237" endtime="20171031 19:40:38.238"></status>
</kw>
<kw library="OperatingSystem" name="Remove Files">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20171031 19:40:38.238" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/2550/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20171031 19:40:38.238" endtime="20171031 19:40:38.238"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.236" endtime="20171031 19:40:38.238"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.193" endtime="20171031 19:40:38.239"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.190" endtime="20171031 19:40:38.239"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.190" endtime="20171031 19:40:38.239"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:38.240" endtime="20171031 19:40:38.241"></status>
</kw>
<msg timestamp="20171031 19:40:38.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:38.241" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171031 19:40:38.240" endtime="20171031 19:40:38.241"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:38.241" endtime="20171031 19:40:38.241"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:40:38.288" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:40:38.287" endtime="20171031 19:40:38.296"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:40:38.297" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:40:38.296" endtime="20171031 19:40:38.297"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:40:38.298" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:40:38.297" endtime="20171031 19:40:38.298"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:38.299" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:40:38.298" endtime="20171031 19:40:38.299"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:40:38.593" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:40:38.300" endtime="20171031 19:40:38.593"></status>
</kw>
<msg timestamp="20171031 19:40:38.593" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:38.593" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:38.299" endtime="20171031 19:40:38.593"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:40:38.594" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:38.594" endtime="20171031 19:40:38.594"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:38.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:38.594" endtime="20171031 19:40:38.595"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.286" endtime="20171031 19:40:38.595"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.286" endtime="20171031 19:40:38.595"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.285" endtime="20171031 19:40:38.595"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:40:38.596" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" starttime="20171031 19:40:38.595" endtime="20171031 19:40:38.596"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:38.596" endtime="20171031 19:40:38.596"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:40:38.748" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20171031 19:40:38.748" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:38.597" endtime="20171031 19:40:38.748"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:38.748" endtime="20171031 19:40:38.749"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:40:38.749" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:40:38.749" endtime="20171031 19:40:38.749"></status>
</kw>
<msg timestamp="20171031 19:40:38.749" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:38.285" endtime="20171031 19:40:38.749"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:38.751" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:38.750" endtime="20171031 19:40:38.751"></status>
</kw>
<msg timestamp="20171031 19:40:38.751" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171031 19:40:38.750" endtime="20171031 19:40:38.751"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:38.751" endtime="20171031 19:40:38.751"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:40:38.752" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "_PID=1312"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Witherspoon.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1509477582515, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "_PID=1312"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Witherspoon.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1509477715761, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "_PID=1312"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Witherspoon.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1509477719784, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:40:38.752" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:40:38.752" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/3': {u'Resolved': 0, u'Message': u'org.open_power.Witherspoon.Fault.Error.PowerSupplyShouldBeOn', u'Id': 3, u'a...</msg>
<status status="PASS" starttime="20171031 19:40:38.752" endtime="20171031 19:40:38.752"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20171031 19:40:38.753" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3']</msg>
<status status="PASS" starttime="20171031 19:40:38.753" endtime="20171031 19:40:38.753"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_prefix_path}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171031 19:40:38.754" level="INFO">${logpath} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_esel</msg>
<status status="PASS" starttime="20171031 19:40:38.753" endtime="20171031 19:40:38.754"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20171031 19:40:38.754" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_esel"&gt;/tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/20171031193115046624_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:40:38.754" endtime="20171031 19:40:38.754"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:38.755" endtime="20171031 19:40:38.755"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:40:38.761" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:40:38.760" endtime="20171031 19:40:38.761"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:40:38.762" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:40:38.762" endtime="20171031 19:40:38.762"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:40:38.763" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:40:38.763" endtime="20171031 19:40:38.763"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:38.764" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:40:38.764" endtime="20171031 19:40:38.764"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:40:38.945" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:40:38.765" endtime="20171031 19:40:38.945"></status>
</kw>
<msg timestamp="20171031 19:40:38.946" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:38.946" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:38.765" endtime="20171031 19:40:38.946"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:40:38.946" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:38.946" endtime="20171031 19:40:38.946"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:38.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:38.947" endtime="20171031 19:40:38.947"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.759" endtime="20171031 19:40:38.947"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.759" endtime="20171031 19:40:38.947"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.757" endtime="20171031 19:40:38.948"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:40:38.948" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" starttime="20171031 19:40:38.948" endtime="20171031 19:40:38.948"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:38.949" endtime="20171031 19:40:38.949"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:40:39.030" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20171031 19:40:39.030" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:38.949" endtime="20171031 19:40:39.030"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:39.031" endtime="20171031 19:40:39.031"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:40:39.031" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:40:39.031" endtime="20171031 19:40:39.032"></status>
</kw>
<msg timestamp="20171031 19:40:39.032" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:38.756" endtime="20171031 19:40:39.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:39.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:39.032" endtime="20171031 19:40:39.033"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:40:39.033" level="INFO">To JSON using : content={
  "data": [
    "_PID=1312"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:40:39.033" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:40:39.033" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'_PID=1312']}</msg>
<status status="PASS" starttime="20171031 19:40:39.033" endtime="20171031 19:40:39.033"></status>
</kw>
<msg timestamp="20171031 19:40:39.034" level="INFO">${esel_data} = [u'_PID=1312']</msg>
<status status="PASS" starttime="20171031 19:40:38.756" endtime="20171031 19:40:39.034"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20171031 19:40:39.035" level="FAIL">[ _PID=1312 ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" starttime="20171031 19:40:39.034" endtime="20171031 19:40:39.035"></status>
</kw>
<msg timestamp="20171031 19:40:39.035" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20171031 19:40:39.034" endtime="20171031 19:40:39.035"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20171031 19:40:39.036" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171031 19:40:39.035" endtime="20171031 19:40:39.036"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.755" endtime="20171031 19:40:39.036"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:39.036" endtime="20171031 19:40:39.037"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:40:39.041" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:40:39.040" endtime="20171031 19:40:39.041"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:40:39.041" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:40:39.041" endtime="20171031 19:40:39.042"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:40:39.042" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:40:39.042" endtime="20171031 19:40:39.042"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:39.043" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:40:39.043" endtime="20171031 19:40:39.043"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:40:39.227" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:40:39.044" endtime="20171031 19:40:39.227"></status>
</kw>
<msg timestamp="20171031 19:40:39.228" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:39.228" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:39.043" endtime="20171031 19:40:39.228"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:40:39.228" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:39.228" endtime="20171031 19:40:39.229"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:39.229" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:39.229" endtime="20171031 19:40:39.229"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.040" endtime="20171031 19:40:39.229"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.039" endtime="20171031 19:40:39.230"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.039" endtime="20171031 19:40:39.230"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:40:39.230" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" starttime="20171031 19:40:39.230" endtime="20171031 19:40:39.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:39.231" endtime="20171031 19:40:39.231"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:40:39.364" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20171031 19:40:39.364" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:39.231" endtime="20171031 19:40:39.364"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:39.365" endtime="20171031 19:40:39.365"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:40:39.365" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:40:39.365" endtime="20171031 19:40:39.365"></status>
</kw>
<msg timestamp="20171031 19:40:39.366" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:39.038" endtime="20171031 19:40:39.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:39.366" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:39.366" endtime="20171031 19:40:39.366"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:40:39.367" level="INFO">To JSON using : content={
  "data": [
    "_PID=1312"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:40:39.367" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:40:39.367" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'_PID=1312']}</msg>
<status status="PASS" starttime="20171031 19:40:39.367" endtime="20171031 19:40:39.367"></status>
</kw>
<msg timestamp="20171031 19:40:39.368" level="INFO">${esel_data} = [u'_PID=1312']</msg>
<status status="PASS" starttime="20171031 19:40:39.037" endtime="20171031 19:40:39.368"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20171031 19:40:39.369" level="FAIL">[ _PID=1312 ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" starttime="20171031 19:40:39.369" endtime="20171031 19:40:39.369"></status>
</kw>
<msg timestamp="20171031 19:40:39.370" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20171031 19:40:39.368" endtime="20171031 19:40:39.370"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20171031 19:40:39.371" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171031 19:40:39.370" endtime="20171031 19:40:39.371"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.036" endtime="20171031 19:40:39.371"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:39.371" endtime="20171031 19:40:39.372"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:40:39.377" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:40:39.377" endtime="20171031 19:40:39.377"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:40:39.378" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:40:39.378" endtime="20171031 19:40:39.378"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:40:39.378" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:40:39.378" endtime="20171031 19:40:39.379"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:39.379" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:40:39.379" endtime="20171031 19:40:39.379"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:40:39.599" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:40:39.380" endtime="20171031 19:40:39.599"></status>
</kw>
<msg timestamp="20171031 19:40:39.599" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:39.599" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:39.379" endtime="20171031 19:40:39.599"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:40:39.600" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:39.600" endtime="20171031 19:40:39.600"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:39.601" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:39.600" endtime="20171031 19:40:39.601"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.376" endtime="20171031 19:40:39.601"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.375" endtime="20171031 19:40:39.601"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.374" endtime="20171031 19:40:39.601"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:40:39.602" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" starttime="20171031 19:40:39.602" endtime="20171031 19:40:39.602"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:39.602" endtime="20171031 19:40:39.603"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:40:39.848" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20171031 19:40:39.848" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:39.603" endtime="20171031 19:40:39.848"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:39.848" endtime="20171031 19:40:39.849"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:40:39.849" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:40:39.849" endtime="20171031 19:40:39.849"></status>
</kw>
<msg timestamp="20171031 19:40:39.849" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:39.373" endtime="20171031 19:40:39.849"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:39.850" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:39.850" endtime="20171031 19:40:39.850"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:40:39.851" level="INFO">To JSON using : content={
  "data": [
    "_PID=1312"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:40:39.851" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:40:39.851" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'_PID=1312']}</msg>
<status status="PASS" starttime="20171031 19:40:39.850" endtime="20171031 19:40:39.851"></status>
</kw>
<msg timestamp="20171031 19:40:39.851" level="INFO">${esel_data} = [u'_PID=1312']</msg>
<status status="PASS" starttime="20171031 19:40:39.372" endtime="20171031 19:40:39.851"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20171031 19:40:39.852" level="FAIL">[ _PID=1312 ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" starttime="20171031 19:40:39.852" endtime="20171031 19:40:39.852"></status>
</kw>
<msg timestamp="20171031 19:40:39.853" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20171031 19:40:39.851" endtime="20171031 19:40:39.853"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20171031 19:40:39.853" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171031 19:40:39.853" endtime="20171031 19:40:39.853"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.371" endtime="20171031 19:40:39.853"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.754" endtime="20171031 19:40:39.853"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20171031 19:40:39.858" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20171031 19:40:39.872" level="INFO">${out} = </msg>
<status status="PASS" starttime="20171031 19:40:39.854" endtime="20171031 19:40:39.872"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20171031 19:40:39.889" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" starttime="20171031 19:40:39.886" endtime="20171031 19:40:39.890"></status>
</kw>
<msg timestamp="20171031 19:40:39.890" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20171031 19:40:39.884" endtime="20171031 19:40:39.890"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20171031 19:40:39.892" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171031 19:40:39.890" endtime="20171031 19:40:39.892"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.284" endtime="20171031 19:40:39.893"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.242" endtime="20171031 19:40:39.894"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.239" endtime="20171031 19:40:39.896"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:38.239" endtime="20171031 19:40:39.896"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.305" endtime="20171031 19:40:39.897"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.303" endtime="20171031 19:40:39.897"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.303" endtime="20171031 19:40:39.898"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.302" endtime="20171031 19:40:39.898"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20171031 19:40:39.914" endtime="20171031 19:40:39.915"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.899" endtime="20171031 19:40:39.915"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:15.301" endtime="20171031 19:40:39.915"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:11.935" endtime="20171031 19:40:39.915"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:11.934" endtime="20171031 19:40:39.915"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171031 19:40:39.929" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20171031 19:40:39.916" endtime="20171031 19:40:39.929"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171031 19:40:39.930" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/</msg>
<status status="PASS" starttime="20171031 19:40:39.929" endtime="20171031 19:40:39.930"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:39.930" endtime="20171031 19:40:39.930"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:39.931" endtime="20171031 19:40:39.931"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20171031 19:40:39.932" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs"&gt;/tmp/fspcibld/2550/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20171031 19:40:39.931" endtime="20171031 19:40:39.932"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171031 19:40:39.933" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20171031 19:40:39.932" endtime="20171031 19:40:39.933"></status>
</kw>
<msg timestamp="20171031 19:40:39.933" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20171031 19:40:39.932" endtime="20171031 19:40:39.933"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:39.934" endtime="20171031 19:40:39.934"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:39.935" endtime="20171031 19:40:39.935"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171031 19:40:39.937" level="INFO">${cur_time} = 2017-10-31 19:40:39:936350</msg>
<status status="PASS" starttime="20171031 19:40:39.936" endtime="20171031 19:40:39.937"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171031 19:40:39.937" level="INFO">${cur_time} = 20171031194039936350</msg>
<status status="PASS" starttime="20171031 19:40:39.937" endtime="20171031 19:40:39.937"></status>
</kw>
<msg timestamp="20171031 19:40:39.937" level="INFO">${cur_time} = 20171031194039936350</msg>
<status status="PASS" starttime="20171031 19:40:39.936" endtime="20171031 19:40:39.937"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20171031 19:40:39.938" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:40:39.938" endtime="20171031 19:40:39.938"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.916" endtime="20171031 19:40:39.939"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw library="utils" name="Delete Error Logs">
<doc>Delete error logs.</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:40:39.943" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:40:39.943" endtime="20171031 19:40:39.947"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:40:39.948" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:40:39.947" endtime="20171031 19:40:39.948"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:40:39.948" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:40:39.948" endtime="20171031 19:40:39.948"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:39.949" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:40:39.949" endtime="20171031 19:40:39.949"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:40:40.130" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:40:39.950" endtime="20171031 19:40:40.130"></status>
</kw>
<msg timestamp="20171031 19:40:40.130" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:40.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:39.949" endtime="20171031 19:40:40.130"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:40:40.131" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.131" endtime="20171031 19:40:40.131"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:40.132" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.131" endtime="20171031 19:40:40.132"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.942" endtime="20171031 19:40:40.132"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.941" endtime="20171031 19:40:40.132"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.941" endtime="20171031 19:40:40.132"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:40:40.133" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" starttime="20171031 19:40:40.132" endtime="20171031 19:40:40.133"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:40.133" endtime="20171031 19:40:40.134"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:40:40.208" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171031 19:40:40.208" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.134" endtime="20171031 19:40:40.208"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:40.208" endtime="20171031 19:40:40.209"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:40:40.209" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:40:40.209" endtime="20171031 19:40:40.209"></status>
</kw>
<msg timestamp="20171031 19:40:40.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:39.940" endtime="20171031 19:40:40.210"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:40.210" endtime="20171031 19:40:40.210"></status>
</kw>
<kw library="utils" name="Get URL List">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:40:40.214" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:40:40.214" endtime="20171031 19:40:40.214"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:40:40.215" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:40:40.215" endtime="20171031 19:40:40.215"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:40:40.216" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:40:40.215" endtime="20171031 19:40:40.216"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:40.216" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:40:40.216" endtime="20171031 19:40:40.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:40:40.435" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:40:40.217" endtime="20171031 19:40:40.435"></status>
</kw>
<msg timestamp="20171031 19:40:40.435" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:40.435" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.217" endtime="20171031 19:40:40.435"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:40:40.436" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.435" endtime="20171031 19:40:40.436"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:40.437" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.436" endtime="20171031 19:40:40.437"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.213" endtime="20171031 19:40:40.437"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.213" endtime="20171031 19:40:40.437"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.212" endtime="20171031 19:40:40.437"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:40:40.438" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" starttime="20171031 19:40:40.438" endtime="20171031 19:40:40.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:40.438" endtime="20171031 19:40:40.439"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:40:40.497" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171031 19:40:40.498" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.439" endtime="20171031 19:40:40.498"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:40.498" endtime="20171031 19:40:40.498"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:40:40.499" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:40:40.499" endtime="20171031 19:40:40.499"></status>
</kw>
<msg timestamp="20171031 19:40:40.499" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.211" endtime="20171031 19:40:40.499"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:40.500" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.499" endtime="20171031 19:40:40.500"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171031 19:40:40.500" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/3", 
    "/xyz/openbmc_project/logging/entry/2", 
    "/xyz/openbmc_project/logging/entry/1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171031 19:40:40.500" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171031 19:40:40.501" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/1']}</msg>
<status status="PASS" starttime="20171031 19:40:40.500" endtime="20171031 19:40:40.501"></status>
</kw>
<msg timestamp="20171031 19:40:40.501" level="INFO">${url_list} = [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" starttime="20171031 19:40:40.211" endtime="20171031 19:40:40.501"></status>
</kw>
<kw library="Collections" name="Sort List">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:40.501" endtime="20171031 19:40:40.502"></status>
</kw>
<msg timestamp="20171031 19:40:40.502" level="INFO">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3']</msg>
<status status="PASS" starttime="20171031 19:40:40.210" endtime="20171031 19:40:40.502"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/1">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:40.504" endtime="20171031 19:40:40.504"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:40.505" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" starttime="20171031 19:40:40.504" endtime="20171031 19:40:40.505"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:40:40.509" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:40:40.508" endtime="20171031 19:40:40.509"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:40:40.510" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:40:40.510" endtime="20171031 19:40:40.510"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:40:40.511" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:40:40.510" endtime="20171031 19:40:40.511"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:40.512" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:40:40.511" endtime="20171031 19:40:40.512"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:40:40.731" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:40:40.513" endtime="20171031 19:40:40.731"></status>
</kw>
<msg timestamp="20171031 19:40:40.731" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:40.731" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.512" endtime="20171031 19:40:40.731"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:40:40.732" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.732" endtime="20171031 19:40:40.732"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:40.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.733" endtime="20171031 19:40:40.733"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.507" endtime="20171031 19:40:40.733"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.507" endtime="20171031 19:40:40.733"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.506" endtime="20171031 19:40:40.733"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:40:40.734" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1</msg>
<status status="PASS" starttime="20171031 19:40:40.734" endtime="20171031 19:40:40.734"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:40:40.736" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171031 19:40:40.735" endtime="20171031 19:40:40.736"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:40:40.737" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171031 19:40:40.736" endtime="20171031 19:40:40.737"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.736" endtime="20171031 19:40:40.737"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.734" endtime="20171031 19:40:40.737"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:40:40.829" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20171031 19:40:40.829" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.737" endtime="20171031 19:40:40.829"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:40:40.831" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:40:40.830" endtime="20171031 19:40:40.831"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:40:40.832" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:40:40.832" endtime="20171031 19:40:40.832"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.831" endtime="20171031 19:40:40.832"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.830" endtime="20171031 19:40:40.832"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:40:40.833" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:40:40.832" endtime="20171031 19:40:40.833"></status>
</kw>
<msg timestamp="20171031 19:40:40.833" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.505" endtime="20171031 19:40:40.833"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:40.833" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.833" endtime="20171031 19:40:40.834"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.503" endtime="20171031 19:40:40.834"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.502" endtime="20171031 19:40:40.834"></status>
</kw>
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/2">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:40.835" endtime="20171031 19:40:40.835"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:40.835" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" starttime="20171031 19:40:40.835" endtime="20171031 19:40:40.836"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:40:40.838" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:40:40.838" endtime="20171031 19:40:40.839"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:40:40.839" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:40:40.839" endtime="20171031 19:40:40.839"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:40:40.841" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:40:40.840" endtime="20171031 19:40:40.841"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:40.841" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:40:40.841" endtime="20171031 19:40:40.842"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:40:41.030" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:40:40.842" endtime="20171031 19:40:41.030"></status>
</kw>
<msg timestamp="20171031 19:40:41.031" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:41.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.842" endtime="20171031 19:40:41.031"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:40:41.031" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.031" endtime="20171031 19:40:41.031"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:41.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.032" endtime="20171031 19:40:41.032"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.837" endtime="20171031 19:40:41.032"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.837" endtime="20171031 19:40:41.032"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.836" endtime="20171031 19:40:41.033"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:40:41.033" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2</msg>
<status status="PASS" starttime="20171031 19:40:41.033" endtime="20171031 19:40:41.033"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:40:41.035" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171031 19:40:41.034" endtime="20171031 19:40:41.035"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:40:41.036" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171031 19:40:41.035" endtime="20171031 19:40:41.036"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.035" endtime="20171031 19:40:41.036"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.033" endtime="20171031 19:40:41.036"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:40:41.117" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20171031 19:40:41.117" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.036" endtime="20171031 19:40:41.117"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:40:41.118" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:40:41.118" endtime="20171031 19:40:41.118"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:40:41.119" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:40:41.119" endtime="20171031 19:40:41.119"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.118" endtime="20171031 19:40:41.119"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.117" endtime="20171031 19:40:41.120"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:40:41.120" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:40:41.120" endtime="20171031 19:40:41.120"></status>
</kw>
<msg timestamp="20171031 19:40:41.120" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:40.836" endtime="20171031 19:40:41.120"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:41.121" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.121" endtime="20171031 19:40:41.121"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.834" endtime="20171031 19:40:41.121"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.834" endtime="20171031 19:40:41.121"></status>
</kw>
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/3">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:41.122" endtime="20171031 19:40:41.122"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:41.123" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" starttime="20171031 19:40:41.123" endtime="20171031 19:40:41.123"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:40:41.126" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:40:41.125" endtime="20171031 19:40:41.126"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:40:41.127" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:40:41.127" endtime="20171031 19:40:41.127"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:40:41.128" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:40:41.127" endtime="20171031 19:40:41.128"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:41.128" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:40:41.128" endtime="20171031 19:40:41.128"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:40:41.326" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:40:41.129" endtime="20171031 19:40:41.326"></status>
</kw>
<msg timestamp="20171031 19:40:41.326" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:41.326" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.129" endtime="20171031 19:40:41.326"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:40:41.327" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.326" endtime="20171031 19:40:41.327"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:41.327" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.327" endtime="20171031 19:40:41.328"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.125" endtime="20171031 19:40:41.328"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.124" endtime="20171031 19:40:41.328"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.124" endtime="20171031 19:40:41.328"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:40:41.328" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3</msg>
<status status="PASS" starttime="20171031 19:40:41.328" endtime="20171031 19:40:41.329"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:40:41.330" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171031 19:40:41.329" endtime="20171031 19:40:41.330"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:40:41.331" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171031 19:40:41.331" endtime="20171031 19:40:41.331"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.330" endtime="20171031 19:40:41.331"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.329" endtime="20171031 19:40:41.331"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:40:41.433" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20171031 19:40:41.434" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.332" endtime="20171031 19:40:41.434"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171031 19:40:41.435" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:40:41.435" endtime="20171031 19:40:41.435"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171031 19:40:41.436" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171031 19:40:41.436" endtime="20171031 19:40:41.436"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.435" endtime="20171031 19:40:41.436"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.434" endtime="20171031 19:40:41.436"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:40:41.437" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:40:41.437" endtime="20171031 19:40:41.437"></status>
</kw>
<msg timestamp="20171031 19:40:41.437" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.123" endtime="20171031 19:40:41.437"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:41.438" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.437" endtime="20171031 19:40:41.438"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.121" endtime="20171031 19:40:41.438"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.121" endtime="20171031 19:40:41.438"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:40.502" endtime="20171031 19:40:41.438"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.940" endtime="20171031 19:40:41.438"></status>
</kw>
<kw library="dump_utils" name="Delete All Dumps">
<doc>Delete all dumps.</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171031 19:40:41.442" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171031 19:40:41.441" endtime="20171031 19:40:41.442"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171031 19:40:41.443" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171031 19:40:41.442" endtime="20171031 19:40:41.443"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171031 19:40:41.443" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171031 19:40:41.443" endtime="20171031 19:40:41.443"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171031 19:40:41.444" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171031 19:40:41.444" endtime="20171031 19:40:41.444"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171031 19:40:41.671" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171031 19:40:41.445" endtime="20171031 19:40:41.671"></status>
</kw>
<msg timestamp="20171031 19:40:41.671" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:40:41.671" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.445" endtime="20171031 19:40:41.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171031 19:40:41.672" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.672" endtime="20171031 19:40:41.672"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171031 19:40:41.673" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.673" endtime="20171031 19:40:41.673"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.441" endtime="20171031 19:40:41.673"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.440" endtime="20171031 19:40:41.673"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.439" endtime="20171031 19:40:41.673"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171031 19:40:41.674" level="INFO">${base_uri} = /xyz/openbmc_project//dump/entry/list</msg>
<status status="PASS" starttime="20171031 19:40:41.674" endtime="20171031 19:40:41.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:41.674" endtime="20171031 19:40:41.675"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:40:41.718" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project//dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171031 19:40:41.718" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.675" endtime="20171031 19:40:41.718"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:41.718" endtime="20171031 19:40:41.719"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171031 19:40:41.719" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171031 19:40:41.719" endtime="20171031 19:40:41.719"></status>
</kw>
<msg timestamp="20171031 19:40:41.719" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.439" endtime="20171031 19:40:41.719"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171031 19:40:41.720" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171031 19:40:41.720" endtime="20171031 19:40:41.720"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.438" endtime="20171031 19:40:41.720"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.939" endtime="20171031 19:40:41.720"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:39.939" endtime="20171031 19:40:41.720"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:11.934" endtime="20171031 19:40:41.721"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171031 19:40:41.722" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:40:41.722" endtime="20171031 19:40:41.722"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171031 19:40:41.723" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:40:41.723" endtime="20171031 19:40:41.723"></status>
</kw>
<msg timestamp="20171031 19:40:41.723" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:40:41.722" endtime="20171031 19:40:41.723"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:41.725" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw'</msg>
<status status="PASS" starttime="20171031 19:40:41.724" endtime="20171031 19:40:41.725"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:41.725" endtime="20171031 19:40:41.725"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:40:41.729" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171031 19:40:41.734" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:40:41.734" level="INFO">${output} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:40:41.726" endtime="20171031 19:40:41.734"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:41.738" endtime="20171031 19:40:41.739"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171031 19:40:41.739" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:41.739" endtime="20171031 19:40:41.740"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171031 19:40:41.750" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:40:41.740" endtime="20171031 19:40:41.750"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:41.751" level="INFO">${cmd_buf} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:40:41.751" endtime="20171031 19:40:41.751"></status>
</kw>
<msg timestamp="20171031 19:40:41.751" level="INFO">${search_string} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:40:41.724" endtime="20171031 19:40:41.751"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171031 19:40:41.752" level="INFO">${search_string} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:40:41.752" endtime="20171031 19:40:41.752"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:41.753" level="INFO">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20171031 19:40:41.752" endtime="20171031 19:40:41.753"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:41.753" endtime="20171031 19:40:41.753"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171031 19:40:41.759" level="INFO">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171031 19:40:41.781" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:40:41.781" level="INFO">${os_con_pid} = 201</msg>
<status status="PASS" starttime="20171031 19:40:41.754" endtime="20171031 19:40:41.781"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:41.783" endtime="20171031 19:40:41.784"></status>
</kw>
<msg timestamp="20171031 19:40:41.785" level="INFO">${os_con_pid} = 201</msg>
<status status="PASS" starttime="20171031 19:40:41.724" endtime="20171031 19:40:41.785"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:41.786" level="INFO">${cmd_buf} = kill -9 201</msg>
<status status="PASS" starttime="20171031 19:40:41.785" endtime="20171031 19:40:41.786"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:41.787" endtime="20171031 19:40:41.787"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.786" endtime="20171031 19:40:41.787"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20171031 19:40:41.792" level="INFO">Running command 'kill -9 201 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20171031 19:40:41.789" endtime="20171031 19:40:41.795"></status>
</kw>
<msg timestamp="20171031 19:40:41.796" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:40:41.796" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171031 19:40:41.788" endtime="20171031 19:40:41.796"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:41.800" endtime="20171031 19:40:41.801"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.798" endtime="20171031 19:40:41.801"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20171031 19:40:41.805" level="INFO" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/9.3.86.161_os_console.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:40:41.802" endtime="20171031 19:40:41.805"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.802" endtime="20171031 19:40:41.805"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:41.801" endtime="20171031 19:40:41.805"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:40:41.806" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171031 19:40:41.806" endtime="20171031 19:40:41.806"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171031 19:40:41.807" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20171031 19:40:41.807" endtime="20171031 19:40:41.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:41.809" endtime="20171031 19:40:41.864"></status>
</kw>
<msg timestamp="20171031 19:40:41.866" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:40:41.906" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status status="PASS" starttime="20171031 19:40:41.808" endtime="20171031 19:40:41.906"></status>
</kw>
<msg timestamp="20171031 19:40:41.983" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status status="PASS" starttime="20171031 19:40:41.721" endtime="20171031 19:40:41.983"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20171031 19:40:42.061" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-c68be97/hbicore.bin ==--

  3.91458|secure|Booting in non-secure mode.
  3.91460|secure|SecureROM valid - enabling functionality
  5.98826|ERRL|Dumping errors reported prior to registration
  6.00426|================================================
  6.00427|Error reported by ipmi (0x2500) PLID 0x9000005C
  6.00813|  Request to get power limit information failed
  6.00813|  ModuleId   0x04 IPMI::MOD_IPMIDCMI
  6.00814|  ReasonCode 0x250a IPMI::RC_DCMI_CMD_FAILED
  6.01149|  UserData1  BMC IPMI Completion code. : 0x00000000000000c3
  6.23305|  UserData2   : 0x0000000000000000
  6.23306|------------------------------------------------
  6.23306|  Callout type             : Procedure Callout
  6.23306|  Procedure                : EPUB_PRC_HB_CODE
  6.23307|  Priority                 : SRCI_PRIORITY_HIGH
  6.23307|------------------------------------------------
  6.23307|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
  6.23308|================================================
  6.80422|================================================
  6.80770|Error reported by htmgt (0x2600) PLID 0x9000005E
  6.80770|  &lt;none&gt;
  6.80771|  ModuleId   0x07 unknown
  6.80771|  ReasonCode 0x2616 unknown
  6.81123|  UserData1   : 0x0000000000000000
  6.81123|  UserData2   : 0x0000000000000000
  6.81124|------------------------------------------------
  6.81124|  Callout type             : Procedure Callout
  6.81125|  Procedure                : EPUB_PRC_LVL_SUPP
  6.81125|  Priority                 : SRCI_PRIORITY_MED
  6.81126|------------------------------------------------
  6.81126|  Callout type             : Procedure Callout
  6.81126|  Procedure                : EPUB_PRC_HB_CODE
  6.81127|  Priority                 : SRCI_PRIORITY_MED
  6.81127|------------------------------------------------
  6.81128|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
  6.81128|================================================
  7.40439|ISTEP  6. 5 - host_init_fsi
  7.50590|ISTEP  6. 6 - host_set_ipl_parms
  7.54760|ISTEP  6. 7 - host_discover_targets
  8.03495|HWAS|PRESENT&gt; DIMM[03]=FF77000000000000
  8.03496|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  8.05424|ISTEP  6. 8 - host_update_master_tpm
 18.39111|SECURE|Security Access Bit&gt; 0x0000000000000000
 18.39112|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 18.39122|ISTEP  6. 9 - host_gard
 18.48032|ISTEP  6.10 - host_revert_sbe_mcs_setup
 18.48540|ISTEP  6.11 - host_start_occ_xstop_handler
 18.48858|ISTEP  6.12 - host_voltage_config
 18.52553|ISTEP  7. 2 - mss_volt
 19.11559|ISTEP  7. 3 - mss_freq
 19.20746|ISTEP  7. 4 - mss_eff_config
 21.83925|ISTEP  7. 5 - mss_attr_update
 21.85147|ISTEP  8. 1 - host_slave_sbe_config
 21.92681|ISTEP  8. 2 - host_setup_sbe
 21.93254|ISTEP  8. 3 - host_cbs_start
 21.95991|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 29.17613|ISTEP  8. 5 - host_attnlisten_proc
 29.17723|ISTEP  8. 6 - host_p9_fbc_eff_config
 29.18223|ISTEP  8. 7 - host_p9_eff_config_links
 29.19212|ISTEP  8. 8 - proc_attr_update
 29.19325|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 29.22179|ISTEP  8.10 - proc_xbus_scominit
 30.77608|ISTEP  8.11 - proc_xbus_enable_ridi
 30.77871|ISTEP  9. 1 - fabric_erepair
 31.11898|ISTEP  9. 2 - fabric_io_dccal
 31.78994|ISTEP  9. 3 - fabric_pre_trainadv
 31.79894|ISTEP  9. 4 - fabric_io_run_training
 31.92026|ISTEP  9. 5 - fabric_post_trainadv
 31.92459|ISTEP  9. 6 - proc_smp_link_layer
 31.92822|ISTEP  9. 7 - proc_fab_iovalid
 31.97127|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 31.97758|ISTEP 10. 1 - proc_build_smp
 32.09245|ISTEP 10. 2 - host_slave_sbe_update
 32.80232|ISTEP 10. 3 - host_set_voltages
 32.83660|ISTEP 10. 4 - proc_cen_ref_clk_enable
 32.84041|ISTEP 10. 5 - proc_enable_osclite
 32.84130|ISTEP 10. 6 - proc_chiplet_scominit
 32.87206|ISTEP 10. 7 - proc_abus_scominit
 32.88239|ISTEP 10. 8 - proc_obus_scominit
 32.94334|ISTEP 10. 9 - proc_npu_scominit
 32.96551|ISTEP 10.10 - proc_pcie_scominit
 33.02160|ISTEP 10.11 - proc_scomoverride_chiplets
 33.02283|ISTEP 10.12 - proc_chiplet_enable_ridi
 33.02523|ISTEP 10.13 - host_rng_bist
 33.02678|ISTEP 10.14 - host_update_redundant_tpm
 33.09736|ISTEP 11. 1 - host_prd_hwreconfig
 33.10484|ISTEP 11. 2 - cen_tp_chiplet_init1
 33.10760|ISTEP 11. 3 - cen_pll_initf
 33.10914|ISTEP 11. 4 - cen_pll_setup
 33.11046|ISTEP 11. 5 - cen_tp_chiplet_init2
 33.11165|ISTEP 11. 6 - cen_tp_arrayinit
 33.11340|ISTEP 11. 7 - cen_tp_chiplet_init3
 33.11447|ISTEP 11. 8 - cen_chiplet_init
 33.11550|ISTEP 11. 9 - cen_arrayinit
 33.11670|ISTEP 11.10 - cen_initf
 33.11845|ISTEP 11.11 - cen_do_manual_inits
 33.12074|ISTEP 11.12 - cen_startclocks
 33.12249|ISTEP 11.13 - cen_scominits
 33.12366|ISTEP 12. 1 - mss_getecid
 33.12828|ISTEP 12. 2 - dmi_attr_update
 33.12949|ISTEP 12. 3 - proc_dmi_scominit
 33.13074|ISTEP 12. 4 - cen_dmi_scominit
 33.14621|ISTEP 12. 5 - dmi_erepair
 33.14720|ISTEP 12. 6 - dmi_io_dccal
 33.14820|ISTEP 12. 7 - dmi_pre_trainadv
 33.14938|ISTEP 12. 8 - dmi_io_run_training
 33.15118|ISTEP 12. 9 - dmi_post_trainadv
 33.15222|ISTEP 12.10 - proc_cen_framelock
 33.15344|ISTEP 12.11 - host_startprd_dmi
 33.15623|ISTEP 12.12 - host_attnlisten_memb
 33.15766|ISTEP 12.13 - cen_set_inband_addr
 33.15950|ISTEP 13. 1 - host_disable_memvolt
 33.32054|ISTEP 13. 2 - mem_pll_reset
 33.33512|ISTEP 13. 3 - mem_pll_initf
 33.38467|ISTEP 13. 4 - mem_pll_setup
 33.40938|ISTEP 13. 6 - mem_startclocks
 33.42732|ISTEP 13. 7 - host_enable_memvolt
 33.42854|ISTEP 13. 8 - mss_scominit
 33.71923|ISTEP 13. 9 - mss_ddr_phy_reset
 33.78717|ISTEP 13.10 - mss_draminit
 34.04423|ISTEP 13.11 - mss_draminit_training
 34.39561|ISTEP 13.12 - mss_draminit_trainadv
 34.39791|ISTEP 13.13 - mss_draminit_mc
 34.42821|ISTEP 14. 1 - mss_memdiag
 44.81751|ISTEP 14. 2 - mss_thermal_init
 44.83404|ISTEP 14. 3 - proc_pcie_config
 44.84839|ISTEP 14. 4 - mss_power_cleanup
 44.85013|ISTEP 14. 5 - proc_setup_bars
 44.89502|ISTEP 14. 6 - proc_htm_setup
 44.90579|ISTEP 14. 7 - proc_exit_cache_contained
 44.91963|ISTEP 15. 1 - host_build_stop_image
 45.89212|ISTEP 15. 2 - proc_set_pba_homer_bar
 45.89593|ISTEP 15. 3 - host_establish_ex_chiplet
 45.90299|ISTEP 15. 4 - host_start_stop_engine
 46.00992|ISTEP 16. 1 - host_activate_master
  0.00812|ISTEP 16. 2 - host_activate_slave_cores
 47.63416|ISTEP 16. 3 - host_secure_rng
 47.62996|ISTEP 16. 4 - mss_scrub
 47.66057|ISTEP 16. 5 - host_ipl_complete
 47.68163|ISTEP 16. 6 - host_load_io_ppe
 47.68901|ISTEP 18.11 - proc_tod_setup
 47.87173|ISTEP 18.12 - proc_tod_init
 47.85582|ISTEP 20. 1 - host_load_payload
 48.22843|ISTEP 20. 2 - host_load_hdat
 51.99838|ISTEP 21. 1 - host_runtime_setup
 52.23845|dw-Setting HDAT HB Reserved Memory Range: ibm,homer-image RangeType 0x4 RangeId 0x0 StartAddress 0x80002017FD800000 EndAddress 0x80002017FDBFFFFF
 52.23849|dw-Setting HDAT HB Reserved Memory Range: ibm,homer-image RangeType 0x4 RangeId 0x8 StartAddress 0x80002017FDC00000 EndAddress 0x80002017FDFFFFFF
 52.23853|dw-Setting HDAT HB Reserved Memory Range: ibm,occ-common-area RangeType 0x4 RangeId 0x0 StartAddress 0x80002017FF800000 EndAddress 0x80002017FFFFFFFF
 52.62031|dw-Setting HDAT HB Reserved Memory Range: ibm,hbrt-data RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD670000 EndAddress 0x80002017FD7FFFFF
 54.25527|dw-Setting HDAT HB Reserved Memory Range: ibm,hbrt-code-image RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD390000 EndAddress 0x80002017FD66FFFF
 54.30051|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-comm RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD380000 EndAddress 0x80002017FD38FFFF
 54.30055|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-ffdc RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD370000 EndAddress 0x80002017FD37FFFF
 54.30534|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-comm RangeType 0x1 RangeId 0x8 StartAddress 0x80002017FD360000 EndAddress 0x80002017FD36FFFF
 54.30538|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-ffdc RangeType 0x1 RangeId 0x8 StartAddress 0x80002017FD350000 EndAddress 0x80002017FD35FFFF
 54.29496|dw-Setting HDAT HB Reserved Memory Range: ibm,secure-crypt-algo-code RangeType 0x3 RangeId 0x0 StartAddress 0x80002017FD340000 EndAddress 0x80002017FD34FFFF
 54.60082|dw-Setting HDAT HB Reserved Memory Range: OCC RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD2A0000 EndAddress 0x80002017FD33FFFF
 54.60480|dw-Setting HDAT HB Reserved Memory Range: WOFDATA RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD1A0000 EndAddress 0x80002017FD29FFFF
 54.60671|dw-Setting HDAT HB Reserved Memory Range: HCODE RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD130000 EndAddress 0x80002017FD19FFFF
 62.43387|htmgt|OCCs are now running in ACTIVE state
 62.45032|ISTEP 21. 2 - host_verify_hdat
 62.44092|ISTEP 21. 3 - host_start_payload
[   82.455360066,5] OPAL skiboot-v5.8-rc1-pd9d2012 starting...
[   82.455363996,7] initial console log level: memory 7, driver 5
[   82.455366123,6] CPU: P9 generation processor (max 4 threads/core)
[   82.455368018,7] CPU: Boot CPU PIR is 0x003c PVR is 0x004e1200
[   82.455370096,7] CPU: Initial max PIR set to 0x7fff
[   82.456357928,7] OPAL table: 0x300e4740 .. 0x300e4c80, branch table: 0x30002000
[   82.456361398,7] Assigning physical memory map table for nimbus
[   82.456364077,7] Parsing HDAT...
[   82.456365453,5] SPIRA-S found.
[   82.456367898,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[   82.456573350,4] SENSORS: Duplicate sensor ID : 8
[   82.456734227,4] SENSORS: Duplicate sensor ID : 9
[   82.456736158,6] SP Family is openbmc
[   82.456741634,7] LPC: IOPATH chip id = 0
[   82.456743090,7] LPC: FW BAR       = f0000000
[   82.456744686,7] LPC: MEM BAR      = e0000000
[   82.456746214,7] LPC: IO BAR       = d0010000
[   82.456747778,7] LPC: Internal BAR = c0012000
[   82.456760858,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[   82.456763820,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[   82.457551503,5] UART: Using UART at 0x60300d00103f8
[   82.460158838,3] I2C: v2 found, but not supported. Parsing as v1
[   82.460500960,3] I2C: v2 found, but not supported. Parsing as v1
[   82.461189967,5] P9 DD2.00 detected
[   82.461248893,5] CHIP: Chip ID 0000 type: P9N DD2.0
[   82.461301494,5] P9 DD2.00 detected
[   82.461333080,5] CHIP: Chip ID 0008 type: P9N DD2.0
[   82.461672053,5] SLW: Enabling: stop0_lite
[   82.461717652,5] SLW: Enabling: stop0
[   82.461884230,5] PLAT: Using virtual UART
[   82.462096741,7] LPC: Routing irq 9, policy: 0 (r=1)
[   82.462098611,7] LPC: SerIRQ 9 using route 0 targetted at OPAL
[   82.462320734,5] PLAT: Detected Witherspoon platform
[   82.462371940,5] PLAT: Detected BMC platform OpenBMC
[   82.503092709,5] CPU: All 176 processors called in...
[    2.428780136,5] FLASH: Found system flash:  id:0
[    2.428882213,5] BT: Interface initialized, IO 0x00e4
[    2.428925097,7] LPC: Routing irq 10, policy: 0 (r=1)
[    2.428926612,7] LPC: SerIRQ 10 using route 1 targetted at OPAL
[    5.070690651,5] NVRAM: Size is 576 KB
[    6.275618887,5] STB: secure and trusted boot not supported
[    6.275687934,5] OPAL: Using OPAL UART console
[    6.275722966,7] LPC: Routing irq 4, policy: 0 (r=1)
[    6.275724385,7] LPC: SerIRQ 4 using route 2 targetted at OPAL
[    6.276992769,5] VAS: Initialized chip 0
[    6.278116891,5] VAS: Initialized chip 8
[    6.278308776,5] Found ibm,power9-nx
[    6.278356169,3] NX0: DMA VAS MMIO BAR, 0x0006019100000000, xcfg 0x201105e
[    6.278481979,5] Found ibm,power9-nx
[    6.278516597,3] NX8: DMA VAS MMIO BAR, 0x0006219100000000, xcfg 0x201105e
[    7.403068852,3] FLASH: flash subpartition not found.
[    7.403123762,3] FLASH: Failed to parse subpart info for CAPP
[    7.404735830,3] CAPP: Error loading ucode lid. index=200d1
[    7.428909879,5] PCI: Resetting PHBs and training links...
[    8.464834623,5] PCI: Probing slots...
[    9.009228747,3] PCI: built-in device not found:  (loc: 100)
[    9.009298353,3] PCI: built-in device not found: GPU0 down (loc: 250)
[    9.009337949,3] PCI: built-in device not found: GPU0 (loc: 400)
[    9.009393459,3] PCI: built-in device not found: GPU1 down (loc: 258)
[    9.009432728,3] PCI: built-in device not found: GPU1 (loc: 500)
[    9.009475633,3] PCI: built-in device not found: GPU2 down (loc: 260)
[    9.009515069,3] PCI: built-in device not found: GPU2 (loc: 600)
[    9.009562819,3] PCI: built-in device not found:  (loc: 100)
[    9.009601932,3] PCI: built-in device not found: GPU3 down (loc: 220)
[    9.009643726,3] PCI: built-in device not found: GPU3 (loc: 300)
[    9.009689051,3] PCI: built-in device not found: GPU4 down (loc: 228)
[    9.009728306,3] PCI: built-in device not found: GPU4 (loc: 400)
[    9.009770972,3] PCI: built-in device not found: GPU5 down (loc: 268)
[    9.009807697,3] PCI: built-in device not found: GPU5 (loc: 500)
[    9.009856882,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    9.009905708,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    9.009956701,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[    9.010020899,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[    9.010076168,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[    9.010134001,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[    9.010185367,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    9.010238860,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..06 
[    9.010293710,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..06 
[    9.010364419,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[    9.010432479,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[    9.010503490,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 SLOT=GPU0 down 
[    9.010572298,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 SLOT=GPU1 down 
[    9.010646316,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:06..06 SLOT=GPU2 down 
[    9.010712691,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    9.010770253,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    9.010830316,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    9.010893474,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    9.010948576,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    9.011006555,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    9.011067694,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    9.011129346,5] PHB#0006:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    9.011196689,5] PHB#0006:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    9.011263705,5] PHB#0006:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    9.011331383,5] PHB#0006:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    9.011398433,5] PHB#0006:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    9.011466122,5] PHB#0006:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    9.011533003,5] PHB#0007:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    9.011600269,5] PHB#0007:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    9.011669934,5] PHB#0007:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    9.011737371,5] PHB#0007:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    9.011806928,5] PHB#0007:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    9.011876849,5] PHB#0007:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    9.011941288,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    9.011995211,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    9.012051650,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    9.012105349,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..08 
[    9.012160488,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..08 
[    9.012227906,5] PHB#0035:02:08.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..07 
[    9.012286474,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:08..08 SLOT=GPU5 down 
[   18.016496235,5] IPMI: Resetting boot count on successful boot
[   18.016558970,5] INIT: Waiting for kernel...
[   18.016590683,5] INIT: 64-bit LE kernel discovered
[   18.016631626,5] OCC: All Chip Rdy after 0 ms
[   18.058927931,5] INIT: Starting kernel at 0x20011000, fdt at 0x30957bc8 349535 bytes)
[   19.018858676,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c0002017ff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x200c00000000 with 0x40000000
[    0.000000] Mapped range 0x201000000000 - 0x201800000000 with 0x40000000
[    0.000000] Process table c0002017fe800000 and radix root for kernel: c000000001440000
[    0.000000] Linux version 4.12.8-openpower1 (fspbld@gfwa610.aus.stglabs.ibm.com) (gcc version 6.3.0 (Buildroot 2017.05.2-00163-g8035745) ) #2 SMP Wed Aug 30 16:46:19 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x3400000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x075c7afd18500249
[    0.000000]   possible        = 0x5f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaee00000
[    0.000000] mmu_features      = 0x3c006041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6700-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6e2700-0x2017ff6ebfff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6a6700-0x2017ff6affff]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff69ce00-0x2017ff6a66ff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff693500-0x2017ff69cdff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff689c00-0x2017ff6934ff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff680300-0x2017ff689bff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff676a00-0x2017ff6802ff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x00002017ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200bffffffff]
[    0.000000]   node   8: [mem 0x0000201000000000-0x00002017ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x00002017ffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c000001ff84b0000 s67992 r0 d63080 u131072
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 3404960
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 1048576 bytes
[    0.000000] log_buf_len: 2097152 bytes
[    0.000000] early log buf free: 1033784(98%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 217623296K/218103808K available (6208K kernel code, 1088K rwdata, 1968K rodata, 11456K init, 1693K bss, 480512K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU debugfs-based tracing is enabled.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: VP block alloc, for max VCPUs 176 use order 8
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000003] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000225] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.000551] clocksource: timebase mult[1f40000] shift[24] registered
[    0.000989] Console: colour dummy device 80x25
[    0.003591] console [tty0] enabled
[    0.003734] console [hvc0] enabled
[    0.003734] console [hvc0] enabled
[    0.003904] bootconsole [udbg0] disabled
[    0.003904] bootconsole [udbg0] disabled
[    0.004542] pid_max: default: 180224 minimum: 1408
[    0.005956] Security Framework initialized
[    0.009355] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.098653] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.163849] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.164085] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.169492] EEH: PowerNV platform initialized
[    0.169609] POWER9 performance monitor hardware support registered
[    0.171025] smp: Bringing up secondary CPUs ...
[    0.644888] smp: Brought up 8 nodes, 176 CPUs
[    0.645066] numa: Node 0 CPUs: 0-87
[    0.645147] numa: Node 8 CPUs: 88-175
[    0.645215] numa: Node 250 CPUs:
[    0.645273] numa: Node 251 CPUs:
[    0.645350] numa: Node 252 CPUs:
[    0.645408] numa: Node 253 CPUs:
[    0.645475] numa: Node 254 CPUs:
[    0.645548] numa: Node 255 CPUs:
[    0.662939] devtmpfs: initialized
[    0.677583] evm: security.capability
[    0.678308] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.678610] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.680316] NET: Registered protocol family 16
[    0.681011] cpuidle: using governor menu
[   22.226105237,3] LPC: Got LPC reset on chip 0x0 !
[   22.226108528,3] LPC[000]: Unknown LPC error Error address reg: 0x00000000
[   22.226117929,6] IPMI: dropping non severe PEL event
[    0.740982] PCI: Probing PCI hardware
[    0.741089] PCI host bridge to bus 0000:00
[    0.741164] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.741325] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.741440] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.741615] pci 0000:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.741695] pci 0000:00:00.0: disabling bridge mem windows
[    0.741909] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.742065] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    0.742199] PCI host bridge to bus 0001:00
[    0.742256] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.742409] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.742538] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.742673] pci 0001:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.742769] pci 0001:00:00.0: disabling bridge mem windows
[    0.743150] pci 0001:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.743232] pci 0001:01:00.0: BAR2 [mem size 0x00002000 64bit]: requesting alignment to 0x10000
[    0.743528] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.743716] PCI host bridge to bus 0002:00
[    0.743770] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.743905] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.744039] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.744182] pci 0002:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.744284] pci 0002:00:00.0: disabling bridge mem windows
[    0.744646] pci 0002:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.744733] pci 0002:01:00.0: disabling bridge mem windows
[    0.744976] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.745289] pci 0002:02:00.0: Disabling memory decoding and releasing memory resources.
[    0.745511] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.745673] PCI host bridge to bus 0003:00
[    0.745732] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.745831] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.745974] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.746120] pci 0003:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.746227] pci 0003:00:00.0: disabling bridge mem windows
[    0.746425] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.746590] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    0.746715] PCI host bridge to bus 0004:00
[    0.746772] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.746920] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.747044] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.747196] pci 0004:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.747270] pci 0004:00:00.0: disabling bridge mem windows
[    0.747643] pci 0004:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.747742] pci 0004:01:00.0: disabling bridge mem windows
[    0.748151] pci 0004:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.748246] pci 0004:01:00.1: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.748633] pci 0004:01:00.2: Disabling memory decoding and releasing memory resources.
[    0.748731] pci 0004:01:00.2: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.749121] pci 0004:01:00.3: Disabling memory decoding and releasing memory resources.
[    0.749188] random: fast init done
[    0.749285] pci 0004:01:00.3: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.749670] pci 0004:01:00.4: Disabling memory decoding and releasing memory resources.
[    0.749789] pci 0004:01:00.4: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.750015] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.750451] pci 0004:02:02.0: Disabling memory decoding and releasing memory resources.
[    0.750572] pci 0004:02:02.0: disabling bridge mem windows
[    0.750936] pci 0004:02:0a.0: Disabling memory decoding and releasing memory resources.
[    0.751045] pci 0004:02:0a.0: disabling bridge mem windows
[    0.751409] pci 0004:02:0b.0: Disabling memory decoding and releasing memory resources.
[    0.751528] pci 0004:02:0b.0: disabling bridge mem windows
[    0.751882] pci 0004:02:0c.0: Disabling memory decoding and releasing memory resources.
[    0.752002] pci 0004:02:0c.0: disabling bridge mem windows
[    0.752253] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.753825] pci 0004:03:00.0: Disabling memory decoding and releasing memory resources.
[    0.753927] pci 0004:03:00.0: BAR5 [mem size 0x00000800]: requesting alignment to 0x10000
[    0.754186] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.754369] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.754533] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.754697] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.754874] PCI host bridge to bus 0005:00
[    0.754940] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.755090] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.755213] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.755363] pci 0005:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.755484] pci 0005:00:00.0: disabling bridge mem windows
[    0.755880] pci 0005:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.756333] pci 0005:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.756631] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.756846] PCI host bridge to bus 0030:00
[    0.756891] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.757015] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.757151] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.757326] pci 0030:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.757428] pci 0030:00:00.0: disabling bridge mem windows
[    0.757657] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.757824] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.757960] PCI host bridge to bus 0033:00
[    0.758020] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.758172] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.758300] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.758475] pci 0033:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.758594] pci 0033:00:00.0: disabling bridge mem windows
[    0.758813] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.758989] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    0.759108] PCI host bridge to bus 0034:00
[    0.759166] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.759313] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.759443] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.759602] pci 0034:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.759691] pci 0034:00:00.0: disabling bridge mem windows
[    0.759924] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.760087] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    0.760214] PCI host bridge to bus 0035:00
[    0.760259] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.760397] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.760537] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.760713] pci 0035:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.760798] pci 0035:00:00.0: disabling bridge mem windows
[    0.761253] pci 0035:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.761342] pci 0035:01:00.0: disabling bridge mem windows
[    0.761667] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.762000] pci 0035:02:08.0: Disabling memory decoding and releasing memory resources.
[    0.762095] pci 0035:02:08.0: disabling bridge mem windows
[    0.762540] pci 0035:02:0d.0: Disabling memory decoding and releasing memory resources.
[    0.762638] pci 0035:02:0d.0: disabling bridge mem windows
[    0.762933] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.763858] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.764015] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.764178] PCI host bridge to bus 0006:00
[    0.764218] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.764333] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.764506] pci 0006:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.764776] pci 0006:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.765027] pci 0006:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.765283] pci 0006:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.765545] pci 0006:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.765822] pci 0006:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.766183] PCI host bridge to bus 0007:00
[    0.766224] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.766319] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.766474] pci 0007:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.766741] pci 0007:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.766986] pci 0007:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.767237] pci 0007:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.767508] pci 0007:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.767760] pci 0007:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.768074] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.768471] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.768570] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.768687] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.768818] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.768938] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.769340] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.769734] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.776124] IOMMU table initialized, virtual merging enabled
[    0.776199] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.776317] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.776402] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.776480] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.776639] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.776727] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.776849] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.776944] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.777036] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.777143] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.777266] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.777342] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.777427] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.777831] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.778211] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.784601] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.784678] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.784766] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.784822] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.784917] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.785325] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.785384] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.785506] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.785663] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.786062] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.786213] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.786320] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.786463] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.786574] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.786692] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.786804] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.786924] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200850000-0x600c200851fff]
[    0.787034] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200860000-0x600c200861fff]
[    0.787155] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200870000-0x600c200871fff]
[    0.787258] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.787338] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.787399] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.787462] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.787560] pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.787679] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.787799] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.787875] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.787960] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.788054] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.788151] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200000000-0x600c2000007ff]
[    0.788278] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200010000-0x600c20001ffff pref]
[    0.788395] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.788452] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.788537] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.788621] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.788716] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.788791] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.788886] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.788955] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.789044] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.789134] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.789213] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.789619] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.789987] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.796260] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.796330] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.796377] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.796423] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.796490] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.796566] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.796620] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.796673] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.796729] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.797081] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.797126] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.797193] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.797277] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.797631] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.803870] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.803937] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.803985] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.804030] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.804097] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.804172] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.804287] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.804360] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.804444] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.804529] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.804613] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.804699] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.804783] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.804868] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.805230] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.805576] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.811818] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.811885] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.811932] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.811980] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.812085] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.812449] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.812530] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.812893] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.812974] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.813327] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.813453] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.813518] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.813588] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.813939] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.813996] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.814057] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.814419] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.814480] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.814833] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.814879] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.814970] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.815078] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.815182] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.815286] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.815392] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.816574] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.819002] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.821423] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.826192] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.828623] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.831057] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.831231] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.831383] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.831532] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.831680] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.831819] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.831984] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.832139] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.832297] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.832471] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.832618] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.832745] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.832890] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.833063] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.833244] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.833331] pci 0006:00:00.1: Associating to existing PE d
[    0.833430] pci 0006:00:01.0: Associating to existing PE d
[    0.833489] pci 0006:00:01.1: Associating to existing PE d
[    0.833566] pci 0006:00:02.0: Associating to existing PE d
[    0.833664] pci 0006:00:02.1: Associating to existing PE d
[    0.833797] NPU6: Found 1 MMIO ATSD registers
[    0.833803] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.833982] pci 0007:00:00.1: Associating to existing PE d
[    0.834065] pci 0007:00:01.0: Associating to existing PE d
[    0.834140] pci 0007:00:01.1: Associating to existing PE d
[    0.834234] pci 0007:00:02.0: Associating to existing PE d
[    0.834326] pci 0007:00:02.1: Associating to existing PE d
[    0.834427] NPU7: Found 1 MMIO ATSD registers
[    0.838163] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.846751] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.846866] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.846951] vgaarb: loaded
[    0.847106] SCSI subsystem initialized
[    0.847278] usbcore: registered new interface driver usbfs
[    0.847347] usbcore: registered new interface driver hub
[    0.847925] usbcore: registered new device driver usb
[    0.848018] pps_core: LinuxPPS API ver. 1 registered
[    0.848097] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.848206] PTP clock support registered
[    0.848961] clocksource: Switched to clocksource timebase
[    0.852011] NET: Registered protocol family 2
[    0.852333] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.854812] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.855245] TCP: Hash tables configured (established 524288 bind 65536)
[    0.855534] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.856395] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.857608] NET: Registered protocol family 1
[    0.857681] pci 0001:00:00.0: enabling device (0105 -&gt; 0107)
[    0.857752] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[    3.182285] Initialise system trusted keyrings
[    3.182410] workingset: timestamp_bits=54 max_order=22 bucket_order=0
[    3.187433] Key type asymmetric registered
[    3.187480] Asymmetric key parser 'x509' registered
[    3.187557] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    3.187650] io scheduler noop registered
[    3.188098] io scheduler cfq registered (default)
[    3.188147] io scheduler mq-deadline registered
[    3.188210] io scheduler kyber registered
[    3.190695] ipmi message handler version 39.2
[    3.190744] ipmi device interface
[    3.190836] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[    3.284551] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[    3.297860] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    3.297947] hvc0: No interrupts property, using OPAL event
[    3.298315] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[    3.298815] [drm] radeon kernel modesetting enabled.
[    3.308715] brd: module loaded
[    3.328326] loop: module loaded
[    3.328487] pci 0004:00:00.0: enabling device (0105 -&gt; 0107)
[    3.328544] pci 0004:01:00.0: enabling device (0545 -&gt; 0547)
[    3.328600] pci 0004:02:02.0: enabling device (0545 -&gt; 0547)
[    3.328653] ahci 0004:03:00.0: enabling device (0141 -&gt; 0143)
[    3.328834] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    3.338980] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    3.339051] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    3.339690] scsi host0: ahci
[    3.339884] scsi host1: ahci
[    3.340071] scsi host2: ahci
[    3.340259] scsi host3: ahci
[    3.340371] ata1: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000100 irq 88
[    3.340437] ata2: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000180 irq 88
[    3.340502] ata3: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000200 irq 88
[    3.340566] ata4: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000280 irq 88
[    3.340761] libphy: Fixed MDIO Bus: probed
[    3.340819] tg3.c:v3.137 (May 11, 2014)
[    3.340861] pci 0005:00:00.0: enabling device (0105 -&gt; 0107)
[    3.340914] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[    3.375158] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    3.375642] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    3.375749] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.375921] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.376039] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.376213] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[    3.415610] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    3.415992] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    3.416098] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.416251] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.416380] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.416664] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    3.416728] ehci-pci: EHCI PCI platform driver
[    3.416814] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    3.416909] ohci-pci: OHCI PCI platform driver
[    3.417047] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    3.417152] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    3.417335] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    3.417467] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    3.418267] hub 1-0:1.0: USB hub found
[    3.418324] hub 1-0:1.0: 4 ports detected
[    3.418533] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    3.418668] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    3.418810] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    3.419093] hub 2-0:1.0: USB hub found
[    3.419144] hub 2-0:1.0: 4 ports detected
[    3.419405] usbcore: registered new interface driver usb-storage
[    3.508897] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    3.508972] i2c /dev entries driver
[    3.509315] at24 0-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.509637] at24 1-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.509945] at24 2-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.510264] at24 3-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.510596] at24 4-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   25.151459337,3] I2C: Request timeout !
[   25.151505184,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.151600912,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   25.151671113,3] I2C:  start_time=00000003035aa96a end_time=0000000303f794b3 (duration=00000000009ceb49)
[   25.151767642,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    3.670077] ata3: SATA link down (SStatus 0 SControl 300)
[    3.670182] ata4: SATA link down (SStatus 0 SControl 300)
[   25.258156520,3] I2C: Request timeout !
[   25.258211501,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.258297229,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   25.258367241,3] I2C:  start_time=0000000309b6be44 end_time=000000030a53a6fc (duration=00000000009ce8b8)
[   25.258455982,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    3.838854] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.838936] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.839915] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.840014] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.840250] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.840357] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.840856] ata2.00: configured for UDMA/133
[    3.841040] ata1.00: configured for UDMA/133
[    3.841551] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.842492] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   25.325869830,3] I2C: Request timeout !
[   25.325906902,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.325990133,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   25.326050052,3] I2C:  start_time=000000030dbff7f9 end_time=000000030e5ce02b (duration=00000000009ce832)
[   25.326141210,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   25.448985607,3] I2C: Request timeout !
[   25.449354545,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.450146152,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   25.450206155,3] I2C:  start_time=0000000315168dd4 end_time=0000000315b37941 (duration=00000000009ceb6d)
[   25.450294612,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   26.060100003,3] I2C: Request timeout !
[   26.060164812,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.060252969,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   26.060315504,3] I2C:  start_time=000000031c6d246d end_time=000000031d0a0cb3 (duration=00000000009ce846)
[   26.060414252,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   26.191423360,3] I2C: Request timeout !
[   26.191488287,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.191586303,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   26.191656167,3] I2C:  start_time=000000032440f8ae end_time=0000000324dde28a (duration=00000000009ce9dc)
[   26.191747158,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   26.316591056,3] I2C: Request timeout !
[   26.316655983,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.316746651,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   26.316814177,3] I2C:  start_time=000000032bb6de7e end_time=000000032c53caee (duration=00000000009cec70)
[   26.316902875,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    5.040672] at24 7-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.041003] at24 8-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.041330] at24 9-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.041655] at24 10-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   26.423993270,3] I2C: Request timeout !
[   26.424050818,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.424152110,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   26.424216443,3] I2C:  start_time=00000003321db2fa end_time=0000000332ba9d83 (duration=00000000009cea89)
[   26.424323385,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   27.063832778,3] I2C: Request timeout !
[   27.063897470,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   27.063996138,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   27.064062779,3] I2C:  start_time=000000033b2a9a00 end_time=000000033bc781be (duration=00000000009ce7be)
[   27.064164595,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   27.193100892,3] I2C: Request timeout !
[   27.193158056,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   27.193256430,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   27.193320759,3] I2C:  start_time=0000000342df1412 end_time=00000003437bfb66 (duration=00000000009ce754)
[   27.193412269,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   27.305959096,3] I2C: Request timeout !
[   27.306026102,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   27.306111977,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   27.306181252,3] I2C:  start_time=00000003499927e4 end_time=000000034a360fc6 (duration=00000000009ce7e2)
[   27.306280590,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   27.429074457,3] I2C: Request timeout !
[   27.429118783,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   27.429217413,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   27.429279287,3] I2C:  start_time=0000000350efbf25 end_time=00000003518ca717 (duration=00000000009ce7f2)
[   27.429373169,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    6.262156] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    6.262212] powernv-cpufreq: Workload Optimized Frequency is enabled in the platform
[    6.271747] usbcore: registered new interface driver usbhid
[    6.271803] usbhid: USB HID core driver
[    6.272155] ipip: IPv4 and MPLS over IPv4 tunneling driver
[    6.272430] NET: Registered protocol family 17
[    6.272490] Key type dns_resolver registered
[    6.272752] registered taskstats version 1
[    6.272792] Loading compiled-in X.509 certificates
[    6.278441] Loaded X.509 cert 'Build time autogenerated kernel key: 69b7bd2878a4bab90574770d0a2ffddecb40bd94'
[    6.283616] Key type encrypted registered
[    6.283687] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    6.283872] evm: HMAC attrs: 0x1
[    6.338996] rtc-opal opal-rtc: setting system clock to 2017-10-31 19:23:38 UTC (1509477818)
[    6.341381] Freeing unused kernel memory: 11456K
[    6.341453] This architecture does not have kernel memory protection.
[    6.360966] udevd[2944]: starting version 3.2.2
[    6.365503] udevd[2945]: starting eudev-3.2.2
[    6.415573] pci 0002:00:00.0: enabling device (0105 -&gt; 0107)
[    6.415657] pci 0002:01:00.0: enabling device (0145 -&gt; 0147)
[    6.415767] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[    6.415967] [drm] platform has no IO space, trying MMIO
[    6.416025] [drm] VGA not enabled on entry, requesting chip POST
[    6.416134] [drm] Using P2A bridge for configuration
[    6.416220] [drm] AST 2500 detected
[    6.416280] [drm] Analog VGA only
[    6.416376] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    6.416580] [TTM] Zone  kernel: Available graphics memory: 108817376 kiB
[    6.416673] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    6.416808] [TTM] Initializing pool allocator
[    6.417681] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[    6.418771] scsi 0:0:0:0: Attached scsi generic sg0 type 0
[    6.418931] scsi 1:0:0:0: Attached scsi generic sg1 type 0
[    6.421980] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    6.422075] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    6.422079] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[    6.422103] sd 1:0:0:0: [sdb] Write Protect is off
[    6.422144] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    6.422448] sd 0:0:0:0: [sda] 4096-byte physical blocks
[    6.422540] sd 0:0:0:0: [sda] Write Protect is off
[    6.422641] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA

(B)0[1;24r[m[?7h[?1h=[H[J[H[J Petitboot (v1.5.1-p848cad7)[1B [0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[2B  [0mSystem information[1B  System configuration[1B  System status log[1B  Language[1B  Rescan devices[1B  Retrieve config from URL[1B *[0;7mExit to shell           [12B[25D[0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[1B [0mEnter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[1B Welcome to Petitboot[J[1;47H0000000000000000 0000000000000000[23B [3;21r[3;1HMM[1;24r[3;3H[Disk: sda2 / 728d2189-0c67-4551-8857-40e2845ba17b][1B[49DUbuntu[12;27H[0;7m                           [12B[52D[m[4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic[20B [4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic (recovery mode)[14;54H[0;7m   [10B[55D[m[enP5p1s0f0] Configuring with static address (ip: 9.3.86.161/24) Booting in 9 sec: [sda2] Ubuntu[K[24;13H8[24;33H[24;13H7[24;33H[24;13H6[24;33H[24;13H5[24;33H[24;13H4[24;33H[24;13H3[24;33H[24;13H2[24;33H[24;13H1[24;33H[24;10HUbuntu                 [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-2[?7l6[?7h Running boot hooks[K Performing kexec loadrebootThe system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   40.399444] kexec_core: Starting new kernel
[   62.150395622,5] OPAL: Switch to big-endian OS
[   64.272866645,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c0002017ff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x200c00000000 with 0x40000000
[    0.000000] Mapped range 0x201000000000 - 0x201800000000 with 0x40000000
[    0.000000] Process table c0002017fe800000 and radix root for kernel: c0000000014a0000
[    0.000000] Linux version 4.10.0-26-generic (buildd@bos01-ppc64el-012) (gcc version 6.3.0 20170406 (Ubuntu 6.3.0-12ubuntu2) ) #30-Ubuntu SMP Tue Jun 27 09:29:34 UTC 2017 (Ubuntu 4.10.0-26.30-generic 4.10.17)
[    0.000000] Found initrd at 0xc000000002d90000:0xc00000000533e9f2
[    0.000000] OPAL: Power8 LPC bus found, chip ID 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x3400000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x077c7afd18500249
[    0.000000]   possible        = 0x7fffffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaec00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000110000000
[    0.000000] -----------------------------------------------------
[    0.000000] cma: Reserved 10656 MiB at 0x0000201563000000
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6300-0x1fffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x2017ffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6e4d80-0x2017ff6eea7f]
[    0.000000] numa: Initmem setup node 250
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6bb080-0x2017ff6c4d7f]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa: Initmem setup node 251
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6b1380-0x2017ff6bb07f]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa: Initmem setup node 252
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6a7680-0x2017ff6b137f]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa: Initmem setup node 253
[    0.000000] numa:   NODE_DATA [mem 0x2017ff69d980-0x2017ff6a767f]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa: Initmem setup node 254
[    0.000000] numa:   NODE_DATA [mem 0x2017ff693c80-0x2017ff69d97f]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa: Initmem setup node 255
[    0.000000] numa:   NODE_DATA [mem 0x2017ff689f80-0x2017ff693c7f]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x00002017ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200bffffffff]
[    0.000000]   node   8: [mem 0x0000201000000000-0x00002017ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x00002017ffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 3 pages/cpu @c000001ff5eb0000 s149272 r0 d47336 u196608
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 3404544
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: root=UUID=728d2189-0c67-4551-8857-40e2845ba17b ro powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 131072 bytes
[    0.000000] log_buf_len: 1048576 bytes
[    0.000000] early log buf free: 115232(87%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 206570240K/218103808K available (11712K kernel code, 1600K rwdata, 3352K rodata, 4416K init, 3045K bss, 621824K reserved, 10911744K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000003] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000420] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.001148] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001767] Console: colour dummy device 80x25
[    0.002330] console [hvc0] enabled
[    0.002330] console [hvc0] enabled
[    0.002629] bootconsole [udbg0] disabled
[    0.002629] bootconsole [udbg0] disabled
[    0.003251] mempolicy: Enabling automatic NUMA balancing. Configure with numa_balancing= or the kernel.numa_balancing sysctl
[    0.003377] pid_max: default: 180224 minimum: 1408
[    0.005462] Security Framework initialized
[    0.005496] Yama: becoming mindful.
[    0.005595] AppArmor: AppArmor initialized
[    0.009035] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.098639] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.151849] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.152004] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.155749] ftrace: allocating 30684 entries in 12 pages
[    0.174238] EEH: PowerNV platform initialized
[    0.174293] POWER9 performance monitor hardware support registered
[    0.176612] smp: Bringing up secondary CPUs ...
[    0.650898] smp: Brought up 8 nodes, 176 CPUs
[    0.650971] numa: Node 0 CPUs: 0-87
[    0.651019] numa: Node 8 CPUs: 88-175
[    0.651076] numa: Node 250 CPUs:
[    0.651122] numa: Node 251 CPUs:
[    0.651177] numa: Node 252 CPUs:
[    0.651213] numa: Node 253 CPUs:
[    0.651268] numa: Node 254 CPUs:
[    0.651313] numa: Node 255 CPUs:
[    0.663456] devtmpfs: initialized
[    0.724641] evm: security.selinux
[    0.724677] evm: security.SMACK64
[    0.724702] evm: security.SMACK64EXEC
[    0.724727] evm: security.SMACK64TRANSMUTE
[    0.724752] evm: security.SMACK64MMAP
[    0.724777] evm: security.ima
[    0.724801] evm: security.capability
[    0.725809] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
[    0.725971] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.731995] NET: Registered protocol family 16
[    0.750671] cpuidle: using governor ladder
[    0.774690] cpuidle: using governor menu
[    0.774953] pstore: using zlib compression
[    0.774989] pstore: Registered nvram as persistent store backend
[    0.845042] PCI: Probing PCI hardware
[    0.845168] PCI host bridge to bus 0000:00
[    0.845222] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.845289] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.845347] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.845686] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.845803] PCI host bridge to bus 0001:00
[    0.845831] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.845896] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.845952] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.846596] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.846880] PCI host bridge to bus 0002:00
[    0.846908] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.846973] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.847030] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.847625] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.848099] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.848261] PCI host bridge to bus 0003:00
[    0.848289] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.848354] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.848411] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.848746] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.848859] PCI host bridge to bus 0004:00
[    0.848887] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.848952] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.849009] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.850729] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.852264] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.854248] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.854403] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.854535] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.854667] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.854828] PCI host bridge to bus 0005:00
[    0.854856] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.854921] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.854977] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.856012] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.856219] PCI host bridge to bus 0030:00
[    0.856247] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.856312] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.856368] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.856724] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.856844] PCI host bridge to bus 0033:00
[    0.856872] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.856937] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.856993] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.857358] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.857478] PCI host bridge to bus 0034:00
[    0.857506] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.857571] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.857627] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.857986] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.858105] PCI host bridge to bus 0035:00
[    0.858133] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.858198] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.858255] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.859034] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.859975] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.861031] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.862915] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.865354] PCI host bridge to bus 0006:00
[    0.867588] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.867734] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.869012] PCI host bridge to bus 0007:00
[    0.869080] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.869187] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.870367] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.870778] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.870888] pci 0001:00:00.0: BAR 14: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.870959] random: fast init done
[    0.871051] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.871182] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.871304] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.871711] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.872151] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.876976] IOMMU table initialized, virtual merging enabled
[    0.877041] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.877131] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.877227] iommu: Adding device 0001:01:00.0 to group 0
[    0.877307] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.877394] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.877538] pci 0002:00:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.877640] pci 0002:01:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.877740] pci 0002:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.877825] pci 0002:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.877914] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.878021] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.878090] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.878189] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.878288] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.878697] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.879104] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.883901] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.883974] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.884069] iommu: Adding device 0002:02:00.0 to group 1
[    0.884143] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.884219] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.884349] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.884740] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.884817] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.884928] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.885071] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.885474] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.885660] pci 0004:00:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.885747] pci 0004:00:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.885874] pci 0004:01:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.885998] pci 0004:01:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.886098] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.886203] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.886300] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200842000-0x600c200843fff]
[    0.886414] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200844000-0x600c200845fff]
[    0.886531] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200846000-0x600c200847fff]
[    0.886634] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.886717] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.886805] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.886889] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.886983] pci 0004:02:02.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.887099] pci 0004:02:02.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.887198] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.887284] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.887365] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.887456] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.887545] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    0.887654] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    0.887761] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.887846] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.887933] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.888015] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.888102] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.888189] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.888275] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.888358] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.888442] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.888524] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.888615] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.889010] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.889385] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.894147] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.894226] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.894319] iommu: Adding device 0004:03:00.0 to group 2
[    0.894401] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.894479] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.894589] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.894673] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.894768] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.894859] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.894945] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.895341] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.895392] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.895474] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.895606] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.896028] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.900803] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.900871] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.900928] iommu: Adding device 0004:01:00.0 to group 3
[    0.901004] iommu: Adding device 0004:01:00.1 to group 3
[    0.901082] iommu: Adding device 0004:01:00.2 to group 3
[    0.901156] iommu: Adding device 0004:01:00.3 to group 3
[    0.901240] iommu: Adding device 0004:01:00.4 to group 3
[    0.901323] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.901412] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.901540] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.901675] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.901830] pci 0005:00:00.0: BAR 15: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.901946] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.902075] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.902198] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.902333] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.902460] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.902591] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.902720] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.903127] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.903490] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.908256] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.908330] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.908394] iommu: Adding device 0005:01:00.0 to group 4
[    0.908440] iommu: Adding device 0005:01:00.1 to group 4
[    0.908523] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.908611] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.908773] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.909188] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.909277] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.909678] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.909761] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.910166] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.910297] pci 0035:00:00.0: BAR 14: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.910398] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.910504] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.910888] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.910955] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.911052] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.911444] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.911511] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.911920] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.911975] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.912105] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.912258] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.912404] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.912554] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.912701] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.912846] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.912967] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.913127] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.913271] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.913419] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.913563] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.913711] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.913865] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.914014] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.914160] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.914307] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.914457] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.914605] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.914757] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.914912] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.915064] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.915206] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.915351] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.915499] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.915657] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.915727] pci 0006:00:00.1: Associating to existing PE d
[    0.915813] pci 0006:00:01.0: Associating to existing PE d
[    0.915893] pci 0006:00:01.1: Associating to existing PE d
[    0.915964] pci 0006:00:02.0: Associating to existing PE d
[    0.916037] pci 0006:00:02.1: Associating to existing PE d
[    0.916163] NPU6: Found 1 MMIO ATSD registers
[    0.916168] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.916314] pci 0007:00:00.1: Associating to existing PE d
[    0.916389] pci 0007:00:01.0: Associating to existing PE d
[    0.916460] pci 0007:00:01.1: Associating to existing PE d
[    0.916537] pci 0007:00:02.0: Associating to existing PE d
[    0.916611] pci 0007:00:02.1: Associating to existing PE d
[    0.916695] NPU7: Found 1 MMIO ATSD registers
[    0.920383] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.946121] HugeTLB registered 2 MB page size, pre-allocated 0 pages
[    0.946169] HugeTLB registered 1 GB page size, pre-allocated 0 pages
[    0.950352] SCSI subsystem initialized
[    0.950760] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.950832] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.950873] vgaarb: loaded
[    0.950955] usbcore: registered new interface driver usbfs
[    0.951004] usbcore: registered new interface driver hub
[    0.951490] usbcore: registered new device driver usb
[    0.951552] pps_core: LinuxPPS API ver. 1 registered
[    0.951585] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.951645] PTP clock support registered
[    0.952533] NetLabel: Initializing
[    0.952559] NetLabel:  domain hash size = 128
[    0.952592] NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO
[    0.952657] NetLabel:  unlabeled traffic allowed by default
[    0.953519] clocksource: Switched to clocksource timebase
[    0.972572] VFS: Disk quotas dquot_6.6.0
[    0.972862] VFS: Dquot-cache hash table entries: 8192 (order 0, 65536 bytes)
[    0.973379] AppArmor: AppArmor Filesystem Enabled
[    0.977021] NET: Registered protocol family 2
[    0.977856] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.979655] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.979999] TCP: Hash tables configured (established 524288 bind 65536)
[    0.980085] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.980779] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.982060] NET: Registered protocol family 1
[    0.982372] Unpacking initramfs...
[    1.915858] Freeing initrd memory: 38528K
[    1.954742] audit: initializing netlink subsys (disabled)
[    1.954873] audit: type=2000 audit(1509477858.944:1): initialized
[    1.961979] Initialise system trusted keyrings
[    1.962677] workingset: timestamp_bits=38 max_order=22 bucket_order=0
[    1.966182] zbud: loaded
[    1.970435] squashfs: version 4.0 (2009/01/31) Phillip Lougher
[    1.971266] fuse init (API version 7.26)
[    1.975771] Key type asymmetric registered
[    1.975799] Asymmetric key parser 'x509' registered
[    1.975859] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 246)
[    1.976209] io scheduler noop registered
[    1.976247] io scheduler deadline registered
[    1.976319] io scheduler cfq registered (default)
[    1.978851] Using unsupported 1024x768 vga at 600c100010000, depth=32, pitch=4096
[    2.061547] Console: switching to colour frame buffer device 128x48
[    2.144024] fb0: Open Firmware frame buffer device on /pciex@600c3c0200000/pci@0/pci@0/vga@0
[    2.144308] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    2.144378] hvc0: No interrupts property, using OPAL event
[    2.144840] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
[    2.147211] Linux agpgart interface v0.103
[    2.162334] loop: module loaded
[    2.162694] libphy: Fixed MDIO Bus: probed
[    2.162724] tun: Universal TUN/TAP device driver, 1.6
[    2.162780] tun: (C) 1999-2004 Max Krasnyansky &lt;maxk@qualcomm.com&gt;
[    2.162932] PPP generic driver version 2.4.2
[    2.163094] VFIO - User Level meta-driver version: 0.3
[    2.164039] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    2.164122] ehci-pci: EHCI PCI platform driver
[    2.164220] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    2.164311] ohci-pci: OHCI PCI platform driver
[    2.164399] uhci_hcd: USB Universal Host Controller Interface driver
[    2.164599] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.164674] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    2.164858] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    2.164986] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    2.165623] usb usb1: New USB device found, idVendor=1d6b, idProduct=0002
[    2.165678] usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.165769] usb usb1: Product: xHCI Host Controller
[    2.165833] usb usb1: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.165903] usb usb1: SerialNumber: 0001:01:00.0
[    2.166147] hub 1-0:1.0: USB hub found
[    2.166209] hub 1-0:1.0: 4 ports detected
[    2.166555] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.166604] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    2.166735] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    2.166881] usb usb2: New USB device found, idVendor=1d6b, idProduct=0003
[    2.166966] usb usb2: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.167068] usb usb2: Product: xHCI Host Controller
[    2.167135] usb usb2: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.167220] usb usb2: SerialNumber: 0001:01:00.0
[    2.167446] hub 2-0:1.0: USB hub found
[    2.167490] hub 2-0:1.0: 4 ports detected
[    2.168230] mousedev: PS/2 mouse device common for all mice
[    2.505470] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    2.505536] i2c /dev entries driver
[    2.508683] device-mapper: uevent: version 1.0.3
[    2.509046] device-mapper: ioctl: 4.35.0-ioctl (2016-06-23) initialised: dm-devel@redhat.com
[    2.509139] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    2.522454] ledtrig-cpu: registered to indicate activity on CPUs
[    2.523511] NET: Registered protocol family 10
[    2.530996] Segment Routing with IPv6
[    2.531050] NET: Registered protocol family 17
[    2.531111] Key type dns_resolver registered
[    2.531381] registered taskstats version 1
[    2.531426] Loading compiled-in X.509 certificates
[    2.535652] Loaded X.509 cert 'Build time autogenerated kernel key: 5d3adc177bbb659f71409a29e976c45eb95b6207'
[    2.535954] zswap: loaded using pool lzo/zbud
[    2.538834] Key type big_key registered
[    2.538865] Key type trusted registered
[    2.541787] Key type encrypted registered
[    2.541821] AppArmor: AppArmor sha1 policy hashing enabled
[    2.541864] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    2.541960] evm: HMAC attrs: 0x1
[    2.773522] rtc-opal opal-rtc: setting system clock to 2017-10-31 19:24:20 UTC (1509477860)
[    2.774227] Unable to open file: /etc/keys/x509_ima.der (-2)
[    2.774232] Unable to open file: /etc/keys/x509_evm.der (-2)
[    2.774690] Freeing unused kernel memory: 4416K
[    2.774782] This architecture does not have kernel memory protection.
Loading, please wait...
starting version 232
[    2.988516] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    2.990932] tg3.c:v3.137 (May 11, 2014)
[    2.995931] [drm] Initialized
[    2.998653] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    2.998705] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    2.999724] scsi host0: ahci
[    2.999995] scsi host1: ahci
[    3.000240] scsi host2: ahci
[    3.000506] scsi host3: ahci
[    3.000626] ata1: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010100 irq 88
[    3.000674] ata2: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010180 irq 88
[    3.000722] ata3: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010200 irq 88
[    3.000769] ata4: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010280 irq 88
[    3.010761] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    3.011290] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    3.011397] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.011504] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.011606] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.018762] [drm] platform has no IO space, trying MMIO
[    3.018808] [drm] Using P2A bridge for configuration
[    3.018856] [drm] AST 2500 detected
[    3.018892] [drm] Analog VGA only
[    3.018952] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    3.019094] [TTM] Zone  kernel: Available graphics memory: 108795936 kiB
[    3.019170] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    3.019255] [TTM] Initializing pool allocator
[    3.019302] [TTM] Initializing DMA pool allocator
[    3.022378] fb: switching to astdrmfb from OFfb vga
[    3.022455] Console: switching to colour dummy device 80x25
[    3.031834] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    3.036922] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    3.036951] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.036985] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.037013] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.040951] Console: switching to colour frame buffer device 128x48
[    3.061228] ast 0002:02:00.0: fb0: astdrmfb frame buffer device
[    3.085411] [drm] Initialized ast 0.1.0 20120228 for 0002:02:00.0 on minor 0
[    3.100445] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    3.201950] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[    3.315559] ata4: SATA link down (SStatus 0 SControl 300)
[    3.315660] ata3: SATA link down (SStatus 0 SControl 300)
[    3.477416] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.477476] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.478357] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.478413] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.478466] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.478514] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.479025] ata2.00: configured for UDMA/133
[    3.479069] ata1.00: configured for UDMA/133
[    3.479795] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.525644] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    3.525697] sd 0:0:0:0: Attached scsi generic sg0 type 0
[    3.525762] sd 0:0:0:0: [sda] 4096-byte physical blocks
[    3.525861] sd 0:0:0:0: [sda] Write Protect is off
[    3.525955] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    3.526424] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.576954]  sda: sda1 sda2
[    3.577410] sd 0:0:0:0: [sda] Attached SCSI removable disk
[    3.593624] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    3.593681] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[    3.593693] sd 1:0:0:0: Attached scsi generic sg1 type 0
[    3.593759] sd 1:0:0:0: [sdb] Write Protect is off
[    3.593815] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    3.608863] sd 1:0:0:0: [sdb] Attached SCSI removable disk
Begin: Loading essential drivers ... done.
Begin: Running /scripts/init-premount ... done.
Begin: Mounting root file system ... Begin: Running /scripts/local-top ... done.
Begin: Running /scripts/local-premount ... done.
Begin: Will now check root file system ... fsck from util-linux 2.29
[/sbin/fsck.ext4 (1) -- /dev/sda2] fsck.ext4 -a -C0 /dev/sda2 
/dev/sda2: clean, 62083/61054976 files, 5064270/244188416 blocks
done.
[    4.040826] EXT4-fs (sda2): mounted filesystem with ordered data mode. Opts: (null)
done.
Begin: Running /scripts/local-bottom ... done.
Begin: Running /scripts/init-bottom ... done.
[    4.863449] ip_tables: (C) 2000-2006 Netfilter Core Team
[    4.904686] systemd[1]: systemd 232 running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN)
[    4.905458] systemd[1]: Detected architecture ppc64-le.

Welcome to [1mUbuntu 17.04[0m!

[    4.918319] systemd[1]: Set hostname to &lt;w54L&gt;.
[    5.480095] systemd[1]: Reached target Remote File Systems.
[[0;32m  OK  [0m] Reached target Remote File Systems.
[    5.480487] systemd[1]: Listening on Journal Audit Socket.
[[0;32m  OK  [0m] Listening on Journal Audit Socket.
[    5.480754] systemd[1]: Listening on Syslog Socket.
[[0;32m  OK  [0m] Listening on Syslog Socket.
[    5.481000] systemd[1]: Listening on /dev/initctl Compatibility Named Pipe.
[[0;32m  OK  [0m] Listening on /dev/initctl Compatibility Named Pipe.
[    5.481311] systemd[1]: Listening on Journal Socket.
[[0;32m  OK  [0m] Listening on Journal Socket.
[    5.481563] systemd[1]: Listening on fsck to fsckd communication Socket.
[[0;32m  OK  [0m] Listening on fsck to fsckd communication Socket.
[    5.482068] systemd[1]: Created slice System Slice.
[[0;32m  OK  [0m] Created slice System Slice.
         Mounting POSIX Message Queue File System...
         Mounting Huge Pages File System...
         Starting Load Kernel Modules...
[[0;32m  OK  [0m] Started Forward Password Requests to Wall Directory Watch.
         Starting Uncomplicated firewall...
         Starting Set the console keyboard layout...
[[0;32m  OK  [0m] Started Read required files in advance.
[[0;32m  OK  [0m] Listening on udev Kernel Socket.
[[0;32m  OK  [0m] Reached target User and Group Name Lookups.
         Starting Nameserver information manager...
[[0;32m  OK  [0m] Listening on Journal Socket (/dev/log).
[[0;32m  OK  [0m] Listening on udev Control Socket.
         Starting Journal Service...
         Starting Create list of required st\xe2\x80\xa6ce nodes for the current kernel...
         Mounting Debug File System...
[[0;32m  OK  [0m] Set up automount Arbitrary Executab\xe2\x80\xa6rmats File System Automount Point.
[[0;32m  OK  [0m] Created slice User and Session Slice.
[[0;32m  OK  [0m] Reached target Slices.
[[0;32m  OK  [0m] Created slice system-serial\x2dgetty.slice.
[[0;32m  OK  [0m] Started Load Kernel Modules.
         Mounting FUSE Control File System...
         Starting Apply Kernel Variables...
[    5.614313] random: crng init done
[[0;32m  OK  [0m] Started Uncomplicated firewall.
[[0;32m  OK  [0m] Started Journal Service.
[[0;32m  OK  [0m] Started Apply Kernel Variables.
[[0;32m  OK  [0m] Started Create list of required sta\xe2\x80\xa6vice nodes for the current kernel.
         Starting Create Static Device Nodes in /dev...
[[0;32m  OK  [0m] Mounted POSIX Message Queue File System.
[[0;32m  OK  [0m] Mounted Huge Pages File System.
[[0;32m  OK  [0m] Mounted Debug File System.
[[0;32m  OK  [0m] Mounted FUSE Control File System.
[[0;32m  OK  [0m] Started Nameserver information manager.
[[0;32m  OK  [0m] Started Create Static Device Nodes in /dev.
         Starting udev Kernel Device Manager...
[[0;32m  OK  [0m] Reached target Network (Pre).
[[0;32m  OK  [0m] Started udev Kernel Device Manager.
         Starting Remount Root and Kernel File Systems...
[[0;32m  OK  [0m] Started Set the console keyboard layout.
[[0m[0;31m*     [0m] (1 of 2) A start job is running for\xe2\x80\xa6ernel File Systems (7s / no limit)[K[[0;1;31m*[0m[0;31m*    [0m] (1 of 2) A start job is running for\xe2\x80\xa6ernel File Systems (7s / no limit)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] (1 of 2) A start job is running for\xe2\x80\xa6ernel File Systems (8s / no limit)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] (2 of 2) A start job is running for dev-hvc0.device (8s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] (2 of 2) A start job is running for dev-hvc0.device (9s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] (2 of 2) A start job is running for dev-hvc0.device (10s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] (1 of 2) A start job is running for\xe2\x80\xa6rnel File Systems (10s / no limit)[K[     [0;31m*[0m] (1 of 2) A start job is running for\xe2\x80\xa6rnel File Systems (11s / no limit)[K[    [0;31m*[0;1;31m*[0m] (1 of 2) A start job is running for\xe2\x80\xa6rnel File Systems (11s / no limit)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] (2 of 2) A start job is running for dev-hvc0.device (12s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] (2 of 2) A start job is running for dev-hvc0.device (12s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] (2 of 2) A start job is running for dev-hvc0.device (13s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] (1 of 2) A start job is running for\xe2\x80\xa6rnel File Systems (14s / no limit)[K[[0;1;31m*[0m[0;31m*    [0m] (1 of 2) A start job is running for\xe2\x80\xa6rnel File Systems (14s / no limit)[K[[0;32m  OK  [0m] Started Remount Root and Kernel File Systems.
         Starting udev Coldplug all Devices...
         Starting Load/Save Random Seed...
         Activating swap /swapfile...
         Starting Flush Journal to Persistent Storage...
[[0;32m  OK  [0m] Reached target Local File Systems (Pre).
[[0;32m  OK  [0m] Reached target Local File Systems.
         Starting AppArmor initialization...
         Starting Set console font and keymap...
         Starting Tell Plymouth To Write Out Runtime Data...
[[0;32m  OK  [0m] Started Load/Save Random Seed.
[[0;32m  OK  [0m] Started Set console font and keymap.
[[0;32m  OK  [0m] Started Tell Plymouth To Write Out Runtime Data.
[[0;32m  OK  [0m] Started Flush Journal to Persistent Storage.
         Starting Create Volatile Files and Directories...
[[0;32m  OK  [0m] Started AppArmor initialization.
         Starting Raise network interfaces...
[[0;32m  OK  [0m] Started Create Volatile Files and Directories.
         Starting Update UTMP about System Boot/Shutdown...
         Starting Network Time Synchronization...
[[0;32m  OK  [0m] Started Update UTMP about System Boot/Shutdown.
[[0;32m  OK  [0m] Activated swap /swapfile.
[[0;32m  OK  [0m] Reached target Swap.
[[0;32m  OK  [0m] Started udev Coldplug all Devices.
[   87.472863533,3] I2C: Request timeout !
[   87.473578483,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   87.475064514,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   87.477211193,3] I2C:  start_time=0000000a7a9908a4 end_time=0000000a7af02ceb (duration=0000000000572447)
[   87.479371813,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started Dispatch Password Requests to Console Directory Watch.
[[0;32m  OK  [0m] Reached target Encrypted Volumes.
[[0;32m  OK  [0m] Reached target Paths.
[   87.509753457,3] I2C: Request timeout !
[   87.510508854,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   87.511973261,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   88.000742642,3] I2C:  start_time=0000000a7cccac77 end_time=0000000a7d69b1fa (duration=00000000009d0583)
[   88.002220285,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Found dev[   88.025777506,3] I2C: Request timeout !
[   88.025841917,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   88.025928054,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   88.025991143,3] I2C:  start_time=0000000a7e785e38 end_time=0000000a7ee1557f (duration=000000000068f747)
[   88.026124684,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
ice NetXtreme BCM5719 Gigabit Ethernet PCIe.
[[0;32m  OK  [0m] Started ifup for enP5p1s0f0.
[   88.055205880,3] I2C: Request timeout !
[   88.055272791,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   88.055384635,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   88.055461776,3] I2C:  start_time=0000000a8039569f end_time=0000000a80d65949 (duration=00000000009d02aa)
[   88.055562079,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Found device /dev/hvc0.
[[0;32m  OK  [0m] Listening on Load/Save RF Kill Switch Status /dev/rfkill Watch.
[   88.141372215,3] I2C: Request timeout !
[   88.142551699,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   88.146216964,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   88.147464184,3] I2C:  start_time=0000000a855c3fe3 end_time=0000000a85f9292c (duration=00000000009ce949)
[   88.147565125,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started Network Time Synchronization.
[[0;32m  OK  [0m] Started Raise network interfaces.
[   88.212745571,3] I2C: Request timeout !
[   88.212807466,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   88.212918414,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   88.212984682,3] I2C:  start_time=0000000a899d548b end_time=0000000a89c9440f (duration=00000000002bef84)
[   88.213084719,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Reached target Network.
[[0;32m  OK  [0m] Reached target System Initialization.
[[0;32m  OK  [0m] Started Message of the Day.
[[0;32m  OK  [0m] Started Daily Cleanup of Temporary Directories.
[[0;32m  OK  [0m] Listening on UUID daemon activation socket.
[[0;32m  OK  [0m] Reached target System Time Synchronized.
[[0;32m  OK  [0m] Started Daily apt activities.
[[0;32m  OK  [0m] Reached target Timers.
[[0;32m  OK  [0m] Listening on D-Bus System Message Bus Socket.
[[0;32m  OK  [0m] Reached target Sockets.
[[0;32m  OK  [0m] Reached target Basic System.
[[0;32m  OK  [0m] Started Regular background program processing daemon.
         Starti[   88.263137727,3] I2C: Request timeout !
[   88.264035349,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   88.265348049,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   88.267795214,3] I2C:  start_time=0000000a8c9e3e25 end_time=0000000a8cc9245f (duration=00000000002ae63a)
[   88.271449976,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
ng Login Service...
         Starting Accounts Service...
[[0;32m  OK  [0m] Started D-Bus System Message Bus.
         Starting OpenBSD Secure Shell server...
[[0;32m  OK  [0m] Started Set the CPU Frequency Scaling governor.
         Starting Network Name Resolution...
         Starting Permit User Sessions...
         Starting System Logging Service...
         Starting LSB: daemon to balance interrupts for SMP systems...
[   88.359571553,3] I2C: Request timeout !
[   88.360616745,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   88.361896726,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   88.364345009,3] I2C:  start_time=0000000a925db85f end_time=0000000a92fa9ef3 (duration=00000000009ce694)
[   88.367987434,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started System Logging Service.
[[0;32m  OK  [0m] Started Permit User Sessions.
         Starting Hold until boot process finishes up...
         Starting Terminate Plymouth Boot Screen...
[[0;32m  OK  [0m] Started Hold until boot process finishes up.
[[0;32m  OK  [0m] Started Login Service.
         Starting Set console scheme...
[[0;32m  OK  [0m] Started Serial Getty on hvc0.
[[0;32m  OK  [0m] Started Terminate Plymouth Boot Screen.
[[0;32m  OK  [0m] Started Set console scheme.
[[0;32m  OK  [0m] Created slice system-getty.slice.
[[0;32m  OK  [0m] Started Getty on tty1.
[[0;32m  OK  [0m] Reached target Login Prompts.
[   88.462167214,3] I2C: Request timeout !
[   88.462227399,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   88.462322442,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   88.462381142,3] I2C:  start_time=0000000a987b351f end_time=0000000a99181bbf (duration=00000000009ce6a0)
[   88.462472463,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started LSB: daemon to balance interrupts for SMP systems.
[   88.494997971,3] I2C: Request timeout !
[   88.495053659,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   88.495142248,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   88.495221459,3] I2C:  start_time=0000000a9a702b21 end_time=0000000a9b0d10d6 (duration=00000000009ce5b5)
[   88.495321725,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started OpenBSD Secure Shell server.
[[0;32m  OK  [0m] Started Accounts Service.
[[0;32m  OK  [0m] Started Network Name Resolution.
[[0;32m  OK  [0m] Reached target Multi-User System.
[[0;32m  OK  [0m] Reached target Graphical Interface.
[[0;32m  OK  [0m] Started Stop ureadahead data collection 45s after completed startup.
         Starting Update UTMP about System Runlevel Changes...
[[0;32m  OK  [0m] Started Update UTMP about System Runlevel Changes.

Ubuntu 17.04 w54L hvc0

w54L login: [  108.167094565,5] IPMI: Soft shutdown requested
[[0;32m  OK  [0m] Closed Load/Save RF Kill Switch Status /dev/rfkill Watch.
[[0;32m  OK  [0m] Stopped target Timers.
[[0;32m  OK  [0m] Stopped Daily apt activities.
[[0;32m  OK  [0m] Stopped target System Time Synchronized.
[[0;32m  OK  [0m] Stopped Daily Cleanup of Temporary Directories.
[[0;32m  OK  [0m] Stopped Stop ureadahead data collection 45s after completed startup.
[[0;32m  OK  [0m] Stopped target Graphical Interface.
[[0;32m  OK  [0m] Stopped target Multi-User System.
[[0;32m  OK  [0m] Stopped target Login Prompts.
         Stopping Getty on tty1...
         Stopping Serial Getty on hvc0...
         Stopping OpenBSD Secure Shell server...
         Stopping Network Name Resolution...
         Stopping LSB: daemon to balance interrupts for SMP systems...
         Stopping Regular background program processing daemon...
         Stopping Login Service...
         Stopping System Logging Service...
         Stopping Accounts Service...
[[0;32m  OK  [0m] Stopped Message of the Day.
         Stopping D-Bus System Message Bus...
[[0;32m  OK  [0m] Stopped Regular background program processing daemon.
[[0;32m  OK  [0m] Stopped Login Service.
[[0;32m  OK  [0m] Stopped Accounts Service.
[[0;32m  OK  [0m] Stopped Serial Getty on hvc0.
[[0;32m  OK  [0m] Stopped Getty on tty1.
[[0;32m  OK  [0m] Stopped Network Name Resolution.
[[0;32m  OK  [0m] Stopped System Logging Service.
[[0;32m  OK  [0m] Removed slice system-getty.slice.
[[0;32m  OK  [0m] Removed slice system-serial\x2dgetty.slice.
         Stopping Permit User Sessions...
[[0;32m  OK  [0m] Stopped D-Bus System Message Bus.
[[0;32m  OK  [0m] Stopped Permit User Sessions.
[[0;32m  OK  [0m] Stopped target User and Group Name Lookups.
[[0;32m  OK  [0m] Stopped OpenBSD Secure Shell server.
[[0;32m  OK  [0m] Stopped target Network.
         Stopping Raise network interfaces...
         Stopping ifup for enP5p1s0f0...
[[0;32m  OK  [0m] Stopped LSB: daemon to balance interrupts for SMP systems.
[[0;32m  OK  [0m] Stopped target Remote File Systems.
[[0;32m  OK  [0m] Stopped target Basic System.
[[0;32m  OK  [0m] Stopped target Paths.
[[0;32m  OK  [0m] Stopped target Sockets.
[[0;32m  OK  [0m] Closed Syslog Socket.
[[0;32m  OK  [0m] Closed UUID daemon activation socket.
[[0;32m  OK  [0m] Closed D-Bus System Message Bus Socket.
[[0;32m  OK  [0m] Stopped target Slices.
[[0;32m  OK  [0m] Removed slice User and Session Slice.
[[0;32m  OK  [0m] Stopped target System Initialization.
         Stopping Update UTMP about System Boot/Shutdown...
         Stopping Network Time Synchronization...
         Stopping Load/Save Random Seed...
[[0;32m  OK  [0m] Stopped target Encrypted Volumes.
[[0;32m  OK  [0m] Stopped Dispatch Password Requests to Console Directory Watch.
[[0;32m  OK  [0m] Stopped Forward Password Requests to Wall Directory Watch.
[[0;32m  OK  [0m] Stopped target Swap.
         Deactivating swap /swapfile...
[[0;32m  OK  [0m] Stopped Load/Save Random Seed.
[[0;32m  OK  [0m] Stopped Update UTMP about System Boot/Shutdown.
[[0;32m  OK  [0m] Stopped Network Time Synchronization.
[[0;32m  OK  [0m] Stopped Create Volatile Files and Directories.
[[0;32m  OK  [0m] Deactivated swap /swapfile.
[[0;32m  OK  [0m] Reached target Unmount All Filesystems.
[[0;32m  OK  [0m] Stopped ifup for enP5p1s0f0.
[[0;32m  OK  [0m] Stopped Raise network interfaces.
[[0;32m  OK  [0m] Stopped target Network (Pre).
[[0;32m  OK  [0m] Stopped Apply Kernel Variables.
[[0;32m  OK  [0m] Stopped Load Kernel Modules.
[[0;32m  OK  [0m] Stopped target Local File Systems.
[[0;32m  OK  [0m] Stopped target Local File Systems (Pre).
[[0;32m  OK  [0m] Stopped Remount Root and Kernel File Systems.
[[0;32m  OK  [0m] Stopped Create Static Device Nodes in /dev.
[[0;32m  OK  [0m] Reached target Shutdown.
[   44.153406] reboot: Power down
[  111.292843740,5] OPAL: Shutdown request type 0x0...
</msg>
<status status="PASS" starttime="20171031 19:40:41.985" endtime="20171031 19:40:42.065"></status>
</kw>
<status status="PASS" starttime="20171031 19:31:11.933" endtime="20171031 19:40:42.065"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="FAIL" starttime="20171031 19:21:09.780" endtime="20171031 19:40:42.065" critical="yes">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</status>
</test>
<test id="s1-s2-t2" name="Check For Application Failures">
<kw type="setup" library="utils" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171031 19:40:42.068" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:40:42.068" endtime="20171031 19:40:42.068"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171031 19:40:42.069" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:40:42.069" endtime="20171031 19:40:42.069"></status>
</kw>
<msg timestamp="20171031 19:40:42.069" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:40:42.067" endtime="20171031 19:40:42.069"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171031 19:40:42.071" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:40:42.071" endtime="20171031 19:40:42.071"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171031 19:40:42.072" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:40:42.071" endtime="20171031 19:40:42.072"></status>
</kw>
<msg timestamp="20171031 19:40:42.072" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:40:42.070" endtime="20171031 19:40:42.072"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:42.074" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw'</msg>
<status status="PASS" starttime="20171031 19:40:42.074" endtime="20171031 19:40:42.074"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:42.074" endtime="20171031 19:40:42.074"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:40:42.078" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171031 19:40:42.085" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:40:42.085" level="INFO">${output} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:40:42.075" endtime="20171031 19:40:42.085"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:42.088" endtime="20171031 19:40:42.089"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171031 19:40:42.090" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:42.089" endtime="20171031 19:40:42.090"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171031 19:40:42.091" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:40:42.090" endtime="20171031 19:40:42.091"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:42.092" level="INFO">${cmd_buf} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:40:42.091" endtime="20171031 19:40:42.092"></status>
</kw>
<msg timestamp="20171031 19:40:42.093" level="INFO">${search_string} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:40:42.073" endtime="20171031 19:40:42.093"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171031 19:40:42.093" level="INFO">${search_string} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:40:42.093" endtime="20171031 19:40:42.093"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:42.094" level="INFO">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20171031 19:40:42.094" endtime="20171031 19:40:42.094"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:42.095" endtime="20171031 19:40:42.095"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171031 19:40:42.099" level="INFO">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171031 19:40:42.112" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:40:42.112" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20171031 19:40:42.095" endtime="20171031 19:40:42.113"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:42.115" endtime="20171031 19:40:42.117"></status>
</kw>
<msg timestamp="20171031 19:40:42.117" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20171031 19:40:42.072" endtime="20171031 19:40:42.118"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:42.119" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20171031 19:40:42.118" endtime="20171031 19:40:42.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:42.119" endtime="20171031 19:40:42.120"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:40:42.121" level="INFO">${rc} = None</msg>
<msg timestamp="20171031 19:40:42.121" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20171031 19:40:42.120" endtime="20171031 19:40:42.121"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:42.122" endtime="20171031 19:40:42.122"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20171031 19:40:42.126" level="INFO" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/9.3.86.161_os_console.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:40:42.124" endtime="20171031 19:40:42.126"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:42.123" endtime="20171031 19:40:42.126"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:42.122" endtime="20171031 19:40:42.126"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:40:42.127" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171031 19:40:42.127" endtime="20171031 19:40:42.127"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171031 19:40:42.128" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20171031 19:40:42.127" endtime="20171031 19:40:42.128"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:42.130" endtime="20171031 19:40:42.192"></status>
</kw>
<msg timestamp="20171031 19:40:42.199" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:40:42.238" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status status="PASS" starttime="20171031 19:40:42.128" endtime="20171031 19:40:42.238"></status>
</kw>
<msg timestamp="20171031 19:40:42.275" level="INFO">${log_output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status status="PASS" starttime="20171031 19:40:42.070" endtime="20171031 19:40:42.275"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20171031 19:40:42.278" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:40:42.277" endtime="20171031 19:40:42.278"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:42.280" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw'</msg>
<status status="PASS" starttime="20171031 19:40:42.279" endtime="20171031 19:40:42.280"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:42.280" endtime="20171031 19:40:42.280"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:40:42.284" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171031 19:40:42.291" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:40:42.291" level="INFO">${output} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:40:42.281" endtime="20171031 19:40:42.291"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:42.293" endtime="20171031 19:40:42.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171031 19:40:42.295" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:42.295" endtime="20171031 19:40:42.295"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171031 19:40:42.296" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:40:42.296" endtime="20171031 19:40:42.296"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:42.297" level="INFO">${cmd_buf} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:40:42.296" endtime="20171031 19:40:42.297"></status>
</kw>
<msg timestamp="20171031 19:40:42.298" level="INFO">${sub_cmd_buf} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:40:42.278" endtime="20171031 19:40:42.298"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:42.299" level="INFO">${cmd_buf} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status status="PASS" starttime="20171031 19:40:42.298" endtime="20171031 19:40:42.299"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:42.299" endtime="20171031 19:40:42.299"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:40:42.303" level="INFO">Running command '/tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20171031 19:40:42.307" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:40:42.308" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171031 19:40:42.299" endtime="20171031 19:40:42.308"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:42.311" endtime="20171031 19:40:42.312"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20171031 19:40:43.314" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20171031 19:40:42.313" endtime="20171031 19:40:43.314"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:43.316" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw'</msg>
<status status="PASS" starttime="20171031 19:40:43.316" endtime="20171031 19:40:43.317"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:43.317" endtime="20171031 19:40:43.317"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:40:43.321" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171031 19:40:43.331" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:40:43.332" level="INFO">${output} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:40:43.318" endtime="20171031 19:40:43.332"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:43.347" endtime="20171031 19:40:43.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171031 19:40:43.352" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:43.351" endtime="20171031 19:40:43.352"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171031 19:40:43.354" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:40:43.353" endtime="20171031 19:40:43.354"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:43.357" level="INFO">${cmd_buf} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:40:43.354" endtime="20171031 19:40:43.358"></status>
</kw>
<msg timestamp="20171031 19:40:43.359" level="INFO">${search_string} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:40:43.315" endtime="20171031 19:40:43.359"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171031 19:40:43.361" level="INFO">${search_string} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:40:43.359" endtime="20171031 19:40:43.361"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:43.362" level="INFO">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20171031 19:40:43.361" endtime="20171031 19:40:43.362"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:43.362" endtime="20171031 19:40:43.363"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171031 19:40:43.374" level="INFO">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171031 19:40:43.392" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:40:43.393" level="INFO">${os_con_pid} = 244</msg>
<status status="PASS" starttime="20171031 19:40:43.363" endtime="20171031 19:40:43.394"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:43.405" endtime="20171031 19:40:43.408"></status>
</kw>
<msg timestamp="20171031 19:40:43.410" level="INFO">${os_con_pid} = 244</msg>
<status status="PASS" starttime="20171031 19:40:43.314" endtime="20171031 19:40:43.410"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg timestamp="20171031 19:40:43.413" level="INFO">Length is 3</msg>
<status status="PASS" starttime="20171031 19:40:43.411" endtime="20171031 19:40:43.420"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:42.067" endtime="20171031 19:40:43.422"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171031 19:40:43.427" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20171031 19:40:43.427" endtime="20171031 19:40:43.427"></status>
</kw>
<msg timestamp="20171031 19:40:43.427" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20171031 19:40:43.426" endtime="20171031 19:40:43.427"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:43.429" endtime="20171031 19:40:43.429"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:43.428" endtime="20171031 19:40:43.430"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20171031 19:40:43.432" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20171031 19:40:43.432" endtime="20171031 19:40:43.432"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20171031 19:40:43.433" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20171031 19:40:43.433" endtime="20171031 19:40:43.433"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20171031 19:40:43.434" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20171031 19:40:43.434" endtime="20171031 19:40:43.434"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20171031 19:40:43.435" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" starttime="20171031 19:40:43.435" endtime="20171031 19:40:43.435"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:43.431" endtime="20171031 19:40:43.436"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:43.430" endtime="20171031 19:40:43.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171031 19:40:43.437" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20171031 19:40:43.437" endtime="20171031 19:40:43.437"></status>
</kw>
<msg timestamp="20171031 19:40:43.437" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20171031 19:40:43.436" endtime="20171031 19:40:43.437"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:43.439" endtime="20171031 19:40:43.439"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:43.440" endtime="20171031 19:40:43.440"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:43.438" endtime="20171031 19:40:43.440"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:43.438" endtime="20171031 19:40:43.440"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171031 19:40:43.441" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171031 19:40:45.154" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20171031 19:40:43.441" endtime="20171031 19:40:45.154"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:43.423" endtime="20171031 19:40:45.154"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>journalctl --no-pager | egrep '${ERROR_REGEX}'</arg>
</arguments>
<assign>
<var>${journal_log}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171031 19:40:45.155" level="INFO">Executing command 'journalctl --no-pager | egrep 'SEGV|core-dump''.</msg>
<msg timestamp="20171031 19:40:47.579" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20171031 19:40:47.580" level="INFO">${stdout} = </msg>
<msg timestamp="20171031 19:40:47.580" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171031 19:40:45.155" endtime="20171031 19:40:47.580"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171031 19:40:47.581" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20171031 19:40:47.580" endtime="20171031 19:40:47.581"></status>
</kw>
<msg timestamp="20171031 19:40:47.581" level="INFO">${journal_log} = </msg>
<status status="PASS" starttime="20171031 19:40:45.154" endtime="20171031 19:40:47.581"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${journal_log}</arg>
</arguments>
<msg timestamp="20171031 19:40:47.581" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20171031 19:40:47.581" endtime="20171031 19:40:47.581"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:47.583" endtime="20171031 19:40:47.583"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171031 19:40:47.595" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20171031 19:40:47.584" endtime="20171031 19:40:47.595"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171031 19:40:47.596" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/2550/obmc-robot/logs/20171031193115046624_TestsTestBasicPoweron/20171031193115046624_PowerOnTest/</msg>
<status status="PASS" starttime="20171031 19:40:47.595" endtime="20171031 19:40:47.596"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:47.596" endtime="20171031 19:40:47.596"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:47.597" endtime="20171031 19:40:47.597"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20171031 19:40:47.598" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs"&gt;/tmp/fspcibld/2550/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20171031 19:40:47.597" endtime="20171031 19:40:47.598"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171031 19:40:47.599" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20171031 19:40:47.598" endtime="20171031 19:40:47.599"></status>
</kw>
<msg timestamp="20171031 19:40:47.599" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20171031 19:40:47.598" endtime="20171031 19:40:47.599"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:47.599" endtime="20171031 19:40:47.600"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:47.600" endtime="20171031 19:40:47.600"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171031 19:40:47.601" level="INFO">${cur_time} = 2017-10-31 19:40:47:601125</msg>
<status status="PASS" starttime="20171031 19:40:47.601" endtime="20171031 19:40:47.601"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171031 19:40:47.602" level="INFO">${cur_time} = 20171031194047601125</msg>
<status status="PASS" starttime="20171031 19:40:47.602" endtime="20171031 19:40:47.602"></status>
</kw>
<msg timestamp="20171031 19:40:47.602" level="INFO">${cur_time} = 20171031194047601125</msg>
<status status="PASS" starttime="20171031 19:40:47.600" endtime="20171031 19:40:47.602"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20171031 19:40:47.603" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:40:47.603" endtime="20171031 19:40:47.603"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:47.583" endtime="20171031 19:40:47.604"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:47.604" endtime="20171031 19:40:47.604"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:47.582" endtime="20171031 19:40:47.604"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171031 19:40:47.606" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:40:47.606" endtime="20171031 19:40:47.606"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171031 19:40:47.607" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:40:47.606" endtime="20171031 19:40:47.607"></status>
</kw>
<msg timestamp="20171031 19:40:47.607" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171031 19:40:47.605" endtime="20171031 19:40:47.607"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:47.608" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw'</msg>
<status status="PASS" starttime="20171031 19:40:47.608" endtime="20171031 19:40:47.608"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:47.608" endtime="20171031 19:40:47.609"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:40:47.623" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/2550/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171031 19:40:47.631" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:40:47.631" level="INFO">${output} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:40:47.609" endtime="20171031 19:40:47.631"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:47.633" endtime="20171031 19:40:47.633"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171031 19:40:47.634" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" starttime="20171031 19:40:47.634" endtime="20171031 19:40:47.634"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171031 19:40:47.635" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171031 19:40:47.635" endtime="20171031 19:40:47.635"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:47.636" level="INFO">${cmd_buf} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:40:47.636" endtime="20171031 19:40:47.637"></status>
</kw>
<msg timestamp="20171031 19:40:47.637" level="INFO">${search_string} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:40:47.607" endtime="20171031 19:40:47.637"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171031 19:40:47.638" level="INFO">${search_string} = /tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" starttime="20171031 19:40:47.638" endtime="20171031 19:40:47.638"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:47.639" level="INFO">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20171031 19:40:47.638" endtime="20171031 19:40:47.639"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:47.639" endtime="20171031 19:40:47.639"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171031 19:40:47.643" level="INFO">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/2550/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171031 19:40:47.652" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:40:47.652" level="INFO">${os_con_pid} = 244</msg>
<status status="PASS" starttime="20171031 19:40:47.639" endtime="20171031 19:40:47.652"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:47.655" endtime="20171031 19:40:47.656"></status>
</kw>
<msg timestamp="20171031 19:40:47.657" level="INFO">${os_con_pid} = 244</msg>
<status status="PASS" starttime="20171031 19:40:47.607" endtime="20171031 19:40:47.657"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171031 19:40:47.658" level="INFO">${cmd_buf} = kill -9 244</msg>
<status status="PASS" starttime="20171031 19:40:47.657" endtime="20171031 19:40:47.658"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:47.659" endtime="20171031 19:40:47.660"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:47.658" endtime="20171031 19:40:47.660"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20171031 19:40:47.665" level="INFO">Running command 'kill -9 244 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20171031 19:40:47.661" endtime="20171031 19:40:47.669"></status>
</kw>
<msg timestamp="20171031 19:40:47.670" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:40:47.670" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171031 19:40:47.660" endtime="20171031 19:40:47.671"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:47.676" endtime="20171031 19:40:47.676"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:47.674" endtime="20171031 19:40:47.676"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20171031 19:40:47.680" level="INFO" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/2550/obmc-robot/logs/9.3.86.161_os_console.txt"&gt;/tmp/fspcibld/2550/obmc-robot/logs/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171031 19:40:47.678" endtime="20171031 19:40:47.681"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:47.678" endtime="20171031 19:40:47.681"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:47.677" endtime="20171031 19:40:47.681"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171031 19:40:47.681" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171031 19:40:47.681" endtime="20171031 19:40:47.681"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171031 19:40:47.682" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20171031 19:40:47.682" endtime="20171031 19:40:47.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<status status="PASS" starttime="20171031 19:40:47.683" endtime="20171031 19:40:47.749"></status>
</kw>
<msg timestamp="20171031 19:40:47.757" level="INFO">${rc} = 0</msg>
<msg timestamp="20171031 19:40:47.761" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
root@9.3.86.161's password: 
</msg>
<status status="PASS" starttime="20171031 19:40:47.683" endtime="20171031 19:40:47.761"></status>
</kw>
<msg timestamp="20171031 19:40:47.765" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
root@9.3.86.161's password: 
</msg>
<status status="PASS" starttime="20171031 19:40:47.604" endtime="20171031 19:40:47.765"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20171031 19:40:47.773" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
root@9.3.86.161's password: 
</msg>
<status status="PASS" starttime="20171031 19:40:47.773" endtime="20171031 19:40:47.774"></status>
</kw>
<status status="PASS" starttime="20171031 19:40:47.582" endtime="20171031 19:40:47.774"></status>
</kw>
<doc>Parse the journal log and check for failures.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Check_For_Application_Failures</tag>
</tags>
<status status="PASS" starttime="20171031 19:40:42.066" endtime="20171031 19:40:47.774" critical="yes"></status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" starttime="20171031 19:21:09.703" endtime="20171031 19:40:47.778"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" starttime="20171031 19:20:58.751" endtime="20171031 19:40:47.783"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="2">Critical Tests</stat>
<stat fail="1" pass="2">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="1">chassisboot</stat>
<stat fail="0" pass="1">Check_For_Application_Failures</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Tests" pass="2">Tests</stat>
<stat fail="0" id="s1-s1" name="Security" pass="1">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" name="Test Basic Poweron" pass="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20171031 19:21:26.765" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg timestamp="20171031 19:37:22.192" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/logging/entry/enumerate</msg>
<msg timestamp="20171031 19:37:32.405" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/logging/entry/enumerate</msg>
<msg timestamp="20171031 19:37:42.817" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/logging/entry/enumerate</msg>
<msg timestamp="20171031 19:38:42.889" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/control/enumerate</msg>
<msg timestamp="20171031 19:38:53.101" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/control/enumerate</msg>
<msg timestamp="20171031 19:39:03.513" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/control/enumerate</msg>
<msg timestamp="20171031 19:40:03.589" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/inventory/enumerate</msg>
<msg timestamp="20171031 19:40:13.801" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/inventory/enumerate</msg>
<msg timestamp="20171031 19:40:24.213" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/inventory/enumerate</msg>
</errors>
</robot>
