<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170918 10:25:21.068">
<suite name="Tests" source="/tmp/fspcibld/17304/obmc-robot/tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170918 10:25:21.577" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170918 10:25:21.577" starttime="20170918 10:25:21.577" status="FAIL"></status>
</kw>
<msg timestamp="20170918 10:25:21.578" level="INFO">${has_host} = False</msg>
<status endtime="20170918 10:25:21.578" starttime="20170918 10:25:21.577" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170918 10:25:21.579" starttime="20170918 10:25:21.578" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:21.579" starttime="20170918 10:25:21.578" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170918 10:25:21.580" level="INFO">${port_num} = 22</msg>
<status endtime="20170918 10:25:21.580" starttime="20170918 10:25:21.580" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170918 10:25:21.581" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170918 10:25:21.581" starttime="20170918 10:25:21.581" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170918 10:25:21.581" level="INFO">${https_num} = 443</msg>
<status endtime="20170918 10:25:21.582" starttime="20170918 10:25:21.581" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170918 10:25:21.582" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170918 10:25:21.582" starttime="20170918 10:25:21.582" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:21.582" starttime="20170918 10:25:21.580" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:21.582" starttime="20170918 10:25:21.579" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170918 10:25:21.583" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170918 10:25:21.584" starttime="20170918 10:25:21.583" status="FAIL"></status>
</kw>
<msg timestamp="20170918 10:25:21.584" level="INFO">${has_port} = False</msg>
<status endtime="20170918 10:25:21.584" starttime="20170918 10:25:21.583" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170918 10:25:21.586" starttime="20170918 10:25:21.585" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170918 10:25:21.586" starttime="20170918 10:25:21.586" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:21.586" starttime="20170918 10:25:21.585" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:21.587" starttime="20170918 10:25:21.584" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170918 10:25:21.587" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170918 10:25:23.304" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170918 10:25:23.304" starttime="20170918 10:25:21.587" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:23.305" starttime="20170918 10:25:21.576" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170918 10:25:23.307" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170918 10:25:23.454" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170918 10:25:23.454" level="INFO">${output} = VERSION_ID="v1.99.10-12-gac7bf16"</msg>
<msg timestamp="20170918 10:25:23.454" level="INFO">${stderr} = </msg>
<status endtime="20170918 10:25:23.454" starttime="20170918 10:25:23.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170918 10:25:23.455" level="INFO">Length is 0</msg>
<status endtime="20170918 10:25:23.455" starttime="20170918 10:25:23.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170918 10:25:23.455" level="INFO">VERSION_ID="v1.99.10-12-gac7bf16"</msg>
<status endtime="20170918 10:25:23.456" starttime="20170918 10:25:23.455" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:23.456" starttime="20170918 10:25:23.305" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:23.456" starttime="20170918 10:25:23.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="code_update_utils" name="Get Host Software Objects Details">
<doc>Return software object details as a list of dictionaries.</doc>
<assign>
<var>${software}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${software}</var>
</assign>
<msg timestamp="20170918 10:25:23.457" level="INFO">${software} = []</msg>
<status endtime="20170918 10:25:23.457" starttime="20170918 10:25:23.457" status="PASS"></status>
</kw>
<kw library="code_update_utils" name="Get Software Objects">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>${VERSION_PURPOSE_HOST}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg timestamp="20170918 10:25:23.458" level="INFO">${host_list} = []</msg>
<status endtime="20170918 10:25:23.458" starttime="20170918 10:25:23.458" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:25:23.461" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:25:23.462" starttime="20170918 10:25:23.461" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:25:23.462" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:25:23.463" starttime="20170918 10:25:23.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:25:23.463" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:25:23.463" starttime="20170918 10:25:23.463" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:25:23.464" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:25:23.464" starttime="20170918 10:25:23.463" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:25:23.701" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:25:23.702" starttime="20170918 10:25:23.465" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:23.702" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:25:23.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:23.702" starttime="20170918 10:25:23.464" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:25:23.703" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:23.703" starttime="20170918 10:25:23.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:23.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:23.703" starttime="20170918 10:25:23.703" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:23.704" starttime="20170918 10:25:23.460" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:23.704" starttime="20170918 10:25:23.460" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:23.704" starttime="20170918 10:25:23.459" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:25:23.704" level="INFO">${base_uri} = /xyz/openbmc_project/software/</msg>
<status endtime="20170918 10:25:23.704" starttime="20170918 10:25:23.704" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:23.707" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status endtime="20170918 10:25:23.707" starttime="20170918 10:25:23.706" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:23.707" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status endtime="20170918 10:25:23.708" starttime="20170918 10:25:23.707" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:23.708" starttime="20170918 10:25:23.707" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:23.708" starttime="20170918 10:25:23.705" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:23.708" starttime="20170918 10:25:23.705" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:25:23.768" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg timestamp="20170918 10:25:23.768" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:23.768" starttime="20170918 10:25:23.708" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:23.770" level="INFO">${msg} = Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:23.770" starttime="20170918 10:25:23.769" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:23.771" level="INFO">Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:23.771" starttime="20170918 10:25:23.771" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:23.771" starttime="20170918 10:25:23.770" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:23.771" starttime="20170918 10:25:23.769" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:23.771" starttime="20170918 10:25:23.769" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:25:23.772" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:25:23.772" starttime="20170918 10:25:23.772" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:23.772" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:23.772" starttime="20170918 10:25:23.459" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:23.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:23.773" starttime="20170918 10:25:23.772" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:25:23.773" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:25:23.773" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:25:23.773" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'/xyz/openbmc_project/software/8764baa3', u'/xyz/openbmc_project/software/active']}</msg>
<status endtime="20170918 10:25:23.773" starttime="20170918 10:25:23.773" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:23.774" level="INFO">${sw_list} = [u'/xyz/openbmc_project/software/8764baa3', u'/xyz/openbmc_project/software/active']</msg>
<status endtime="20170918 10:25:23.774" starttime="20170918 10:25:23.458" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{sw_list} ]" type="for">
<kw name="${index} = /xyz/openbmc_project/software/8764baa3" type="foritem">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:25:23.779" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:25:23.779" starttime="20170918 10:25:23.779" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:25:23.780" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:25:23.780" starttime="20170918 10:25:23.780" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:25:23.781" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:25:23.781" starttime="20170918 10:25:23.780" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:25:23.782" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:25:23.782" starttime="20170918 10:25:23.781" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:25:23.956" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:25:23.956" starttime="20170918 10:25:23.782" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:23.956" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:25:23.956" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:23.957" starttime="20170918 10:25:23.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:25:23.957" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:23.957" starttime="20170918 10:25:23.957" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:23.958" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:23.958" starttime="20170918 10:25:23.958" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:23.958" starttime="20170918 10:25:23.776" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:23.958" starttime="20170918 10:25:23.776" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:23.958" starttime="20170918 10:25:23.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:25:23.959" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Purpose</msg>
<status endtime="20170918 10:25:23.959" starttime="20170918 10:25:23.959" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:25:23.960" starttime="20170918 10:25:23.959" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:25:24.094" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20170918 10:25:24.095" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:24.095" starttime="20170918 10:25:23.960" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:25:24.095" starttime="20170918 10:25:24.095" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:25:24.096" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:25:24.096" starttime="20170918 10:25:24.096" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:24.096" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:24.096" starttime="20170918 10:25:23.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status endtime="20170918 10:25:24.097" starttime="20170918 10:25:24.096" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:25:24.097" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:25:24.097" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:25:24.097" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host'}</msg>
<status endtime="20170918 10:25:24.097" starttime="20170918 10:25:24.097" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:24.098" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status endtime="20170918 10:25:24.098" starttime="20170918 10:25:23.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status endtime="20170918 10:25:24.099" starttime="20170918 10:25:24.098" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status endtime="20170918 10:25:24.099" starttime="20170918 10:25:24.099" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:24.099" starttime="20170918 10:25:23.774" status="PASS"></status>
</kw>
<kw name="${index} = /xyz/openbmc_project/software/active" type="foritem">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:25:24.102" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:25:24.103" starttime="20170918 10:25:24.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:25:24.104" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:25:24.104" starttime="20170918 10:25:24.103" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:25:24.104" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:25:24.104" starttime="20170918 10:25:24.104" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:25:24.105" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:25:24.105" starttime="20170918 10:25:24.105" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:25:24.294" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:25:24.294" starttime="20170918 10:25:24.106" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:24.294" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:25:24.294" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:24.294" starttime="20170918 10:25:24.105" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:25:24.295" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:24.295" starttime="20170918 10:25:24.294" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:24.295" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:24.295" starttime="20170918 10:25:24.295" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:24.296" starttime="20170918 10:25:24.101" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:24.296" starttime="20170918 10:25:24.101" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:24.296" starttime="20170918 10:25:24.100" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:25:24.296" level="INFO">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status endtime="20170918 10:25:24.296" starttime="20170918 10:25:24.296" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:25:24.297" starttime="20170918 10:25:24.297" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:25:24.354" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20170918 10:25:24.354" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170918 10:25:24.354" starttime="20170918 10:25:24.297" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:25:24.355" starttime="20170918 10:25:24.355" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:25:24.355" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:25:24.356" starttime="20170918 10:25:24.355" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:24.356" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170918 10:25:24.356" starttime="20170918 10:25:24.100" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:24.356" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170918 10:25:24.357" starttime="20170918 10:25:24.356" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:24.357" level="INFO">${attr_purpose} = None</msg>
<status endtime="20170918 10:25:24.357" starttime="20170918 10:25:24.099" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20170918 10:25:24.357" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170918 10:25:24.357" starttime="20170918 10:25:24.357" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:24.358" starttime="20170918 10:25:24.099" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:24.358" starttime="20170918 10:25:23.774" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:24.358" level="INFO">${pnor_details} = [u'/xyz/openbmc_project/software/8764baa3']</msg>
<status endtime="20170918 10:25:24.358" starttime="20170918 10:25:23.457" status="PASS"></status>
</kw>
<kw name="${pnor} IN [ @{pnor_details} ]" type="for">
<kw name="${pnor} = /xyz/openbmc_project/software/8764baa3" type="foritem">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:25:24.361" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:25:24.361" starttime="20170918 10:25:24.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:25:24.361" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:25:24.361" starttime="20170918 10:25:24.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:25:24.362" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:25:24.362" starttime="20170918 10:25:24.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:25:24.363" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:25:24.363" starttime="20170918 10:25:24.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:25:24.564" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:25:24.564" starttime="20170918 10:25:24.364" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:24.564" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:25:24.564" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:24.564" starttime="20170918 10:25:24.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:25:24.565" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:24.565" starttime="20170918 10:25:24.565" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:24.566" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:24.566" starttime="20170918 10:25:24.565" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:24.566" starttime="20170918 10:25:24.360" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:24.566" starttime="20170918 10:25:24.359" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:24.566" starttime="20170918 10:25:24.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:25:24.567" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status endtime="20170918 10:25:24.567" starttime="20170918 10:25:24.567" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:25:24.568" starttime="20170918 10:25:24.567" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:25:24.724" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg timestamp="20170918 10:25:24.724" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:24.724" starttime="20170918 10:25:24.568" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:25:24.725" starttime="20170918 10:25:24.725" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:25:24.725" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:25:24.725" starttime="20170918 10:25:24.725" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:24.726" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:24.726" starttime="20170918 10:25:24.358" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170918 10:25:24.726" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:25:24.726" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:25:24.726" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openp...</msg>
<status endtime="20170918 10:25:24.727" starttime="20170918 10:25:24.726" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status endtime="20170918 10:25:24.727" starttime="20170918 10:25:24.727" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:24.727" starttime="20170918 10:25:24.358" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:24.727" starttime="20170918 10:25:24.358" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:24.727" level="INFO">${software} = [{u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-x...</msg>
<status endtime="20170918 10:25:24.727" starttime="20170918 10:25:23.457" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${software}</arg>
</arguments>
<msg timestamp="20170918 10:25:24.728" level="INFO">[{u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54', u'Path': u'', u'Priority': 0, u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None'}]</msg>
<status endtime="20170918 10:25:24.728" starttime="20170918 10:25:24.728" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:24.728" starttime="20170918 10:25:23.456" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:24.728" starttime="20170918 10:25:23.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170918 10:25:24.913" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:25:24.914" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170918 10:25:25.694" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170918 10:25:25.694" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170918 10:25:25.770" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170918 10:25:25.778" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170918 10:25:25.778" level="INFO">${stderr} = </msg>
<msg timestamp="20170918 10:25:25.778" level="INFO">${rc} = 0</msg>
<status endtime="20170918 10:25:25.778" starttime="20170918 10:25:24.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170918 10:25:25.779" level="INFO">Length is 0</msg>
<status endtime="20170918 10:25:25.779" starttime="20170918 10:25:25.779" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170918 10:25:25.779" level="INFO">Length is 11</msg>
<status endtime="20170918 10:25:25.780" starttime="20170918 10:25:25.779" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:25.780" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170918 10:25:25.780" starttime="20170918 10:25:24.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170918 10:25:25.780" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170918 10:25:25.780" starttime="20170918 10:25:25.780" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:25.780" starttime="20170918 10:25:24.729" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:25.780" starttime="20170918 10:25:24.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170918 10:25:25.783" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170918 10:25:25.783" starttime="20170918 10:25:25.782" status="FAIL"></status>
</kw>
<msg timestamp="20170918 10:25:25.783" level="INFO">${has_host} = False</msg>
<status endtime="20170918 10:25:25.783" starttime="20170918 10:25:25.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170918 10:25:25.784" starttime="20170918 10:25:25.784" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:25.785" starttime="20170918 10:25:25.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170918 10:25:25.786" level="INFO">${port_num} = 22</msg>
<status endtime="20170918 10:25:25.786" starttime="20170918 10:25:25.786" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170918 10:25:25.787" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170918 10:25:25.787" starttime="20170918 10:25:25.787" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170918 10:25:25.788" level="INFO">${https_num} = 443</msg>
<status endtime="20170918 10:25:25.788" starttime="20170918 10:25:25.787" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170918 10:25:25.788" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170918 10:25:25.788" starttime="20170918 10:25:25.788" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:25.789" starttime="20170918 10:25:25.785" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:25.789" starttime="20170918 10:25:25.785" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170918 10:25:25.790" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170918 10:25:25.790" starttime="20170918 10:25:25.789" status="FAIL"></status>
</kw>
<msg timestamp="20170918 10:25:25.790" level="INFO">${has_port} = False</msg>
<status endtime="20170918 10:25:25.790" starttime="20170918 10:25:25.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170918 10:25:25.792" starttime="20170918 10:25:25.791" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170918 10:25:25.792" starttime="20170918 10:25:25.792" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:25.792" starttime="20170918 10:25:25.791" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:25.792" starttime="20170918 10:25:25.790" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170918 10:25:25.793" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170918 10:25:27.537" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170918 10:25:27.538" starttime="20170918 10:25:25.793" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:27.538" starttime="20170918 10:25:25.781" status="PASS"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170918 10:25:27.539" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170918 10:25:27.636" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170918 10:25:27.636" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170918 10:25:27.636" level="INFO">${stderr} = </msg>
<status endtime="20170918 10:25:27.636" starttime="20170918 10:25:27.539" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170918 10:25:27.637" level="INFO">Length is 0</msg>
<status endtime="20170918 10:25:27.637" starttime="20170918 10:25:27.637" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:27.637" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170918 10:25:27.637" starttime="20170918 10:25:27.538" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170918 10:25:27.638" starttime="20170918 10:25:27.637" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:27.638" starttime="20170918 10:25:25.781" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:27.638" starttime="20170918 10:25:25.781" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170918 10:25:27.639" starttime="20170918 10:25:27.638" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:27.639" starttime="20170918 10:25:21.575" status="PASS"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/17304/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/17304/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:25:27.679" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:25:27.679" starttime="20170918 10:25:27.678" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:25:27.680" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:25:27.680" starttime="20170918 10:25:27.679" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:25:27.680" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:25:27.680" starttime="20170918 10:25:27.680" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:25:27.681" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:25:27.681" starttime="20170918 10:25:27.680" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:25:27.867" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:25:27.867" starttime="20170918 10:25:27.682" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:27.868" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:25:27.868" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:27.868" starttime="20170918 10:25:27.681" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:25:27.868" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:27.868" starttime="20170918 10:25:27.868" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:27.869" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:27.869" starttime="20170918 10:25:27.869" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:27.869" starttime="20170918 10:25:27.678" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:27.869" starttime="20170918 10:25:27.677" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:27.869" starttime="20170918 10:25:27.677" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:25:27.874" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:25:27.875" starttime="20170918 10:25:27.874" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:25:27.875" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:25:27.875" starttime="20170918 10:25:27.875" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:25:27.876" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:25:27.876" starttime="20170918 10:25:27.876" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:25:27.877" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:25:27.877" starttime="20170918 10:25:27.876" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:25:28.059" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:25:28.059" starttime="20170918 10:25:27.877" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:28.059" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:25:28.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:28.059" starttime="20170918 10:25:27.877" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:25:28.060" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:28.060" starttime="20170918 10:25:28.060" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:28.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:28.061" starttime="20170918 10:25:28.060" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.061" starttime="20170918 10:25:27.874" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.061" starttime="20170918 10:25:27.873" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.061" starttime="20170918 10:25:27.872" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:25:28.062" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:25:28.062" starttime="20170918 10:25:28.062" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:28.065" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:25:28.066" starttime="20170918 10:25:28.064" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:28.069" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:25:28.069" starttime="20170918 10:25:28.069" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.069" starttime="20170918 10:25:28.066" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.069" starttime="20170918 10:25:28.063" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.069" starttime="20170918 10:25:28.063" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:25:28.156" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:25:28.156" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:28.156" starttime="20170918 10:25:28.070" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:28.158" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:28.158" starttime="20170918 10:25:28.157" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:28.159" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:28.159" starttime="20170918 10:25:28.159" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.159" starttime="20170918 10:25:28.158" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.159" starttime="20170918 10:25:28.157" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.159" starttime="20170918 10:25:28.156" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:25:28.160" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:25:28.160" starttime="20170918 10:25:28.159" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:28.160" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:28.160" starttime="20170918 10:25:27.872" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:28.161" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:28.161" starttime="20170918 10:25:28.160" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:25:28.161" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:25:28.161" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:25:28.161" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170918 10:25:28.162" starttime="20170918 10:25:28.161" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:28.162" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170918 10:25:28.162" starttime="20170918 10:25:27.871" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:28.162" level="INFO">${host_state} = Off</msg>
<status endtime="20170918 10:25:28.162" starttime="20170918 10:25:27.871" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170918 10:25:28.164" level="FAIL">Off != Quiesced</msg>
<status endtime="20170918 10:25:28.164" starttime="20170918 10:25:28.163" status="FAIL"></status>
</kw>
<msg timestamp="20170918 10:25:28.164" level="INFO">${status} = False</msg>
<status endtime="20170918 10:25:28.164" starttime="20170918 10:25:28.163" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:28.164" level="INFO">${status} = False</msg>
<status endtime="20170918 10:25:28.164" starttime="20170918 10:25:27.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170918 10:25:28.165" starttime="20170918 10:25:28.164" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170918 10:25:28.165" starttime="20170918 10:25:28.165" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170918 10:25:28.181" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170918 10:25:28.181" starttime="20170918 10:25:28.166" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170918 10:25:28.197" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170918 10:25:28.197" starttime="20170918 10:25:28.181" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170918 10:25:28.200" level="INFO">${cur_time} = 2017-09-18 10:25:28:199681</msg>
<status endtime="20170918 10:25:28.200" starttime="20170918 10:25:28.199" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170918 10:25:28.201" level="INFO">${cur_time} = 20170918102528199681</msg>
<status endtime="20170918 10:25:28.201" starttime="20170918 10:25:28.200" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.201" starttime="20170918 10:25:28.199" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:28.209" level="INFO">${FFDC_TIME} = 20170918102528199681</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170918 10:25:28.210" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170918 10:25:28.210" starttime="20170918 10:25:28.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170918 10:25:28.211" level="INFO">${suite_name} = 20170918102528199681_TestsSecurityTestSsl</msg>
<status endtime="20170918 10:25:28.211" starttime="20170918 10:25:28.211" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170918 10:25:28.212" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170918 10:25:28.212" starttime="20170918 10:25:28.211" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170918 10:25:28.212" level="INFO">${test_name} = 20170918102528199681_TestSSLConnection</msg>
<status endtime="20170918 10:25:28.212" starttime="20170918 10:25:28.212" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.213" starttime="20170918 10:25:28.210" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:28.213" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/17304/obmc-robot/logs/20170918102528199681_TestsSecurityTestSsl/20170918102528199681_TestSSLConnection/</msg>
<msg timestamp="20170918 10:25:28.218" level="INFO">${FFDC_PREFIX} = 20170918102528199681_</msg>
<status endtime="20170918 10:25:28.218" starttime="20170918 10:25:28.198" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.218" starttime="20170918 10:25:28.198" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170918 10:25:28.219" starttime="20170918 10:25:28.218" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:25:28.219" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs"&gt;/tmp/fspcibld/17304/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170918 10:25:28.219" starttime="20170918 10:25:28.219" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170918 10:25:28.220" level="FAIL">File '/tmp/fspcibld/17304/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170918 10:25:28.221" starttime="20170918 10:25:28.220" status="FAIL"></status>
</kw>
<msg timestamp="20170918 10:25:28.221" level="INFO">${exist} = False</msg>
<status endtime="20170918 10:25:28.221" starttime="20170918 10:25:28.220" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:25:28.222" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:25:28.222" starttime="20170918 10:25:28.221" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.222" starttime="20170918 10:25:28.221" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170918 10:25:28.222" starttime="20170918 10:25:28.222" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170918 10:25:28.223" level="INFO">${cur_time} = 2017-09-18 10:25:28:223320</msg>
<status endtime="20170918 10:25:28.223" starttime="20170918 10:25:28.223" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170918 10:25:28.224" level="INFO">${cur_time} = 20170918102528223320</msg>
<status endtime="20170918 10:25:28.224" starttime="20170918 10:25:28.224" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:28.224" level="INFO">${cur_time} = 20170918102528223320</msg>
<status endtime="20170918 10:25:28.224" starttime="20170918 10:25:28.223" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:25:28.225" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:25:28.225" starttime="20170918 10:25:28.225" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.225" starttime="20170918 10:25:28.165" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.225" starttime="20170918 10:25:27.870" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170918 10:25:28.225" starttime="20170918 10:25:27.676" status="PASS" critical="yes"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:25:28.227" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:25:28.227" starttime="20170918 10:25:28.226" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170918 10:25:28.227" starttime="20170918 10:25:27.641" status="PASS"></status>
</suite>
<status endtime="20170918 10:25:28.229" starttime="20170918 10:25:27.639" status="PASS"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/17304/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170918 10:25:28.267" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170918 10:25:28.267" starttime="20170918 10:25:28.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170918 10:25:28.267" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170918 10:25:28.267" starttime="20170918 10:25:28.267" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:28.268" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170918 10:25:28.268" starttime="20170918 10:25:28.266" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170918 10:25:28.269" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170918 10:25:28.269" starttime="20170918 10:25:28.269" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170918 10:25:28.270" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170918 10:25:28.270" starttime="20170918 10:25:28.269" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:28.270" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170918 10:25:28.270" starttime="20170918 10:25:28.268" status="PASS"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:25:28.271" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170918 10:25:28.271" starttime="20170918 10:25:28.271" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170918 10:25:28.272" starttime="20170918 10:25:28.272" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170918 10:25:28.277" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170918 10:25:28.280" level="INFO">${rc} = 0</msg>
<msg timestamp="20170918 10:25:28.280" level="INFO">${output} = /tmp/fspcibld/17304/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170918 10:25:28.280" starttime="20170918 10:25:28.272" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170918 10:25:28.283" starttime="20170918 10:25:28.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170918 10:25:28.284" starttime="20170918 10:25:28.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:25:28.285" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170918 10:25:28.285" starttime="20170918 10:25:28.284" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:28.285" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170918 10:25:28.285" starttime="20170918 10:25:28.271" status="PASS"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20170918 10:25:28.286" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169</msg>
<status endtime="20170918 10:25:28.286" starttime="20170918 10:25:28.285" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:25:28.286" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170918 10:25:28.286" starttime="20170918 10:25:28.286" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170918 10:25:28.287" starttime="20170918 10:25:28.287" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170918 10:25:28.291" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170918 10:25:28.314" level="INFO">${rc} = 0</msg>
<msg timestamp="20170918 10:25:28.314" level="INFO">${os_con_pid} = </msg>
<status endtime="20170918 10:25:28.314" starttime="20170918 10:25:28.287" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170918 10:25:28.317" starttime="20170918 10:25:28.316" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:28.317" level="INFO">${os_con_pid} = </msg>
<status endtime="20170918 10:25:28.317" starttime="20170918 10:25:28.270" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:25:28.318" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170918 10:25:28.318" starttime="20170918 10:25:28.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170918 10:25:28.319" starttime="20170918 10:25:28.318" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170918 10:25:28.321" level="INFO">${rc} = None</msg>
<msg timestamp="20170918 10:25:28.321" level="INFO">${output} = None</msg>
<status endtime="20170918 10:25:28.321" starttime="20170918 10:25:28.319" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170918 10:25:28.322" starttime="20170918 10:25:28.321" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170918 10:25:28.324" level="FAIL">Source file '/tmp/9.41.166.169_os_console' does not exist.</msg>
<status endtime="20170918 10:25:28.324" starttime="20170918 10:25:28.323" status="FAIL"></status>
</kw>
<status endtime="20170918 10:25:28.324" starttime="20170918 10:25:28.323" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:28.324" starttime="20170918 10:25:28.322" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170918 10:25:28.325" level="INFO">${output} = </msg>
<status endtime="20170918 10:25:28.325" starttime="20170918 10:25:28.324" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170918 10:25:28.325" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170918 10:25:28.325" starttime="20170918 10:25:28.325" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170918 10:25:28.370" starttime="20170918 10:25:28.326" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:28.370" level="INFO">${rc} = 1</msg>
<msg timestamp="20170918 10:25:28.371" level="INFO">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status endtime="20170918 10:25:28.371" starttime="20170918 10:25:28.326" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:28.371" level="INFO">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status endtime="20170918 10:25:28.371" starttime="20170918 10:25:28.268" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:25:28.373" level="INFO">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status endtime="20170918 10:25:28.373" starttime="20170918 10:25:28.372" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:25:28.374" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170918 10:25:28.374" starttime="20170918 10:25:28.374" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170918 10:25:28.375" starttime="20170918 10:25:28.375" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170918 10:25:28.379" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170918 10:25:28.382" level="INFO">${rc} = 0</msg>
<msg timestamp="20170918 10:25:28.382" level="INFO">${output} = /tmp/fspcibld/17304/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170918 10:25:28.382" starttime="20170918 10:25:28.375" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170918 10:25:28.385" starttime="20170918 10:25:28.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170918 10:25:28.386" starttime="20170918 10:25:28.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:25:28.387" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170918 10:25:28.387" starttime="20170918 10:25:28.386" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:28.387" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170918 10:25:28.387" starttime="20170918 10:25:28.373" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:25:28.388" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170918 10:25:28.388" starttime="20170918 10:25:28.388" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170918 10:25:28.389" starttime="20170918 10:25:28.388" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170918 10:25:28.393" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170918 10:25:28.400" level="INFO">${rc} = 0</msg>
<msg timestamp="20170918 10:25:28.400" level="INFO">${output} = </msg>
<status endtime="20170918 10:25:28.400" starttime="20170918 10:25:28.389" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170918 10:25:28.403" starttime="20170918 10:25:28.402" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20170918 10:25:29.404" level="INFO">Slept 1 second</msg>
<status endtime="20170918 10:25:29.404" starttime="20170918 10:25:28.403" status="PASS"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:25:29.406" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170918 10:25:29.406" starttime="20170918 10:25:29.406" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170918 10:25:29.407" starttime="20170918 10:25:29.406" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170918 10:25:29.410" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170918 10:25:29.414" level="INFO">${rc} = 0</msg>
<msg timestamp="20170918 10:25:29.414" level="INFO">${output} = /tmp/fspcibld/17304/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170918 10:25:29.414" starttime="20170918 10:25:29.407" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170918 10:25:29.418" starttime="20170918 10:25:29.417" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170918 10:25:29.420" starttime="20170918 10:25:29.418" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:25:29.421" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170918 10:25:29.421" starttime="20170918 10:25:29.420" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:29.421" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170918 10:25:29.421" starttime="20170918 10:25:29.405" status="PASS"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20170918 10:25:29.422" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169</msg>
<status endtime="20170918 10:25:29.422" starttime="20170918 10:25:29.421" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:25:29.422" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170918 10:25:29.422" starttime="20170918 10:25:29.422" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170918 10:25:29.423" starttime="20170918 10:25:29.423" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170918 10:25:29.426" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170918 10:25:29.445" level="INFO">${rc} = 0</msg>
<msg timestamp="20170918 10:25:29.445" level="INFO">${os_con_pid} = 182</msg>
<status endtime="20170918 10:25:29.445" starttime="20170918 10:25:29.423" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170918 10:25:29.459" starttime="20170918 10:25:29.456" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:29.460" level="INFO">${os_con_pid} = 182</msg>
<status endtime="20170918 10:25:29.460" starttime="20170918 10:25:29.405" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg timestamp="20170918 10:25:29.462" level="INFO">Length is 3</msg>
<status endtime="20170918 10:25:29.462" starttime="20170918 10:25:29.461" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:29.463" starttime="20170918 10:25:28.265" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170918 10:25:29.465" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170918 10:25:29.470" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170918 10:25:29.470" starttime="20170918 10:25:29.469" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:25:29.472" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170918 10:25:29.472" starttime="20170918 10:25:29.471" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:25:29.477" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:25:29.481" starttime="20170918 10:25:29.476" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:25:29.481" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:25:29.482" starttime="20170918 10:25:29.481" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:25:29.482" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:25:29.483" starttime="20170918 10:25:29.482" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:25:29.483" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:25:29.483" starttime="20170918 10:25:29.483" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:25:29.726" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:25:29.726" starttime="20170918 10:25:29.486" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:29.726" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:25:29.726" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:29.726" starttime="20170918 10:25:29.485" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:25:29.727" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:29.727" starttime="20170918 10:25:29.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:29.728" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:29.728" starttime="20170918 10:25:29.727" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:29.728" starttime="20170918 10:25:29.475" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:29.728" starttime="20170918 10:25:29.474" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:29.728" starttime="20170918 10:25:29.473" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:25:29.729" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170918 10:25:29.729" starttime="20170918 10:25:29.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:25:29.730" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:25:29.730" starttime="20170918 10:25:29.729" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170918 10:25:29.731" starttime="20170918 10:25:29.730" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:29.733" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status endtime="20170918 10:25:29.733" starttime="20170918 10:25:29.732" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:29.734" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170918 10:25:29.734" starttime="20170918 10:25:29.734" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:29.734" starttime="20170918 10:25:29.733" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:29.734" starttime="20170918 10:25:29.731" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:25:30.470" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170918 10:25:30.470" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:30.470" starttime="20170918 10:25:29.735" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:30.471" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:30.471" starttime="20170918 10:25:30.471" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:30.472" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:30.472" starttime="20170918 10:25:30.472" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:30.472" starttime="20170918 10:25:30.471" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:30.472" starttime="20170918 10:25:30.470" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:25:30.473" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:25:30.473" starttime="20170918 10:25:30.473" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:30.473" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:30.473" starttime="20170918 10:25:29.472" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:30.474" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:30.474" starttime="20170918 10:25:30.473" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170918 10:25:30.474" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:25:30.474" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:25:30.475" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status endtime="20170918 10:25:30.475" starttime="20170918 10:25:30.474" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:30.475" starttime="20170918 10:25:29.470" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170918 10:25:30.475" starttime="20170918 10:25:30.475" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:25:30.481" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:25:30.481" starttime="20170918 10:25:30.481" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:25:30.482" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:25:30.482" starttime="20170918 10:25:30.482" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:25:30.483" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:25:30.483" starttime="20170918 10:25:30.482" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:25:30.483" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:25:30.483" starttime="20170918 10:25:30.483" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:25:31.837" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:25:31.837" starttime="20170918 10:25:30.484" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:31.837" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:25:31.837" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:31.837" starttime="20170918 10:25:30.484" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:25:31.838" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:31.838" starttime="20170918 10:25:31.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:31.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:31.839" starttime="20170918 10:25:31.838" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:31.839" starttime="20170918 10:25:30.480" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:31.839" starttime="20170918 10:25:30.480" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:31.839" starttime="20170918 10:25:30.479" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:25:31.840" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:25:31.840" starttime="20170918 10:25:31.839" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:31.842" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:25:31.842" starttime="20170918 10:25:31.842" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:31.843" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:25:31.843" starttime="20170918 10:25:31.843" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:31.843" starttime="20170918 10:25:31.842" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:31.844" starttime="20170918 10:25:31.841" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:31.844" starttime="20170918 10:25:31.840" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:25:36.513" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:25:36.513" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:36.514" starttime="20170918 10:25:31.844" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:36.516" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:36.516" starttime="20170918 10:25:36.515" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:36.516" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:36.517" starttime="20170918 10:25:36.516" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.517" starttime="20170918 10:25:36.516" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.517" starttime="20170918 10:25:36.514" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.517" starttime="20170918 10:25:36.514" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:25:36.517" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:25:36.517" starttime="20170918 10:25:36.517" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:36.518" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:36.518" starttime="20170918 10:25:30.479" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:36.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:36.518" starttime="20170918 10:25:36.518" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:25:36.519" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:25:36.519" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:25:36.519" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170918 10:25:36.519" starttime="20170918 10:25:36.518" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:36.519" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170918 10:25:36.519" starttime="20170918 10:25:30.478" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:36.520" level="INFO">${power_state} = Off</msg>
<status endtime="20170918 10:25:36.520" starttime="20170918 10:25:30.478" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:25:36.520" starttime="20170918 10:25:36.520" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.520" starttime="20170918 10:25:30.477" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:25:36.524" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:25:36.524" starttime="20170918 10:25:36.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:25:36.525" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:25:36.525" starttime="20170918 10:25:36.525" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:25:36.526" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:25:36.526" starttime="20170918 10:25:36.525" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:25:36.526" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:25:36.526" starttime="20170918 10:25:36.526" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:25:36.701" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:25:36.701" starttime="20170918 10:25:36.527" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:36.701" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:25:36.701" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:36.702" starttime="20170918 10:25:36.526" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:25:36.702" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:36.702" starttime="20170918 10:25:36.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:36.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:36.703" starttime="20170918 10:25:36.703" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.703" starttime="20170918 10:25:36.523" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.703" starttime="20170918 10:25:36.522" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.703" starttime="20170918 10:25:36.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:25:36.704" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:25:36.704" starttime="20170918 10:25:36.704" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:36.706" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:25:36.706" starttime="20170918 10:25:36.705" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:36.707" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:25:36.707" starttime="20170918 10:25:36.707" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.707" starttime="20170918 10:25:36.706" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.707" starttime="20170918 10:25:36.705" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.707" starttime="20170918 10:25:36.704" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:25:36.976" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:25:36.976" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:36.976" starttime="20170918 10:25:36.708" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:36.978" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:36.978" starttime="20170918 10:25:36.978" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:36.979" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:36.979" starttime="20170918 10:25:36.979" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.979" starttime="20170918 10:25:36.978" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.979" starttime="20170918 10:25:36.977" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.979" starttime="20170918 10:25:36.977" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:25:36.980" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:25:36.980" starttime="20170918 10:25:36.980" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:36.980" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:36.980" starttime="20170918 10:25:36.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:36.981" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:36.981" starttime="20170918 10:25:36.981" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:25:36.981" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:25:36.982" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:25:36.982" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170918 10:25:36.982" starttime="20170918 10:25:36.981" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:36.982" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170918 10:25:36.982" starttime="20170918 10:25:36.521" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:36.982" level="INFO">${host_state} = Off</msg>
<status endtime="20170918 10:25:36.982" starttime="20170918 10:25:36.520" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:25:36.983" starttime="20170918 10:25:36.983" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.983" starttime="20170918 10:25:30.477" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.983" starttime="20170918 10:25:30.476" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.983" starttime="20170918 10:25:30.476" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:36.983" level="INFO">${status} = True</msg>
<status endtime="20170918 10:25:36.983" starttime="20170918 10:25:30.476" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status endtime="20170918 10:25:36.984" starttime="20170918 10:25:36.984" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:36.984" starttime="20170918 10:25:29.467" status="PASS"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170918 10:25:36.985" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170918 10:25:36.985" starttime="20170918 10:25:36.985" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:25:36.986" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170918 10:25:36.986" starttime="20170918 10:25:36.986" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:25:36.991" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:25:36.991" starttime="20170918 10:25:36.989" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:25:36.992" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:25:36.992" starttime="20170918 10:25:36.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:25:36.993" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:25:36.993" starttime="20170918 10:25:36.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:25:36.994" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:25:36.994" starttime="20170918 10:25:36.993" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:25:37.917" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:25:37.917" starttime="20170918 10:25:36.994" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:37.918" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:25:37.918" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:37.918" starttime="20170918 10:25:36.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:25:37.918" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:37.919" starttime="20170918 10:25:37.918" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:37.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:37.919" starttime="20170918 10:25:37.919" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:37.919" starttime="20170918 10:25:36.988" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:37.919" starttime="20170918 10:25:36.988" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:37.920" starttime="20170918 10:25:36.987" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:25:37.920" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170918 10:25:37.920" starttime="20170918 10:25:37.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:25:37.921" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:25:37.921" starttime="20170918 10:25:37.920" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170918 10:25:37.921" starttime="20170918 10:25:37.921" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:37.923" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status endtime="20170918 10:25:37.923" starttime="20170918 10:25:37.922" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:37.924" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170918 10:25:37.924" starttime="20170918 10:25:37.924" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:37.924" starttime="20170918 10:25:37.923" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:37.924" starttime="20170918 10:25:37.921" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:25:38.315" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170918 10:25:38.315" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:38.315" starttime="20170918 10:25:37.924" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:38.317" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:38.317" starttime="20170918 10:25:38.316" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:38.318" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:38.318" starttime="20170918 10:25:38.317" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:38.318" starttime="20170918 10:25:38.317" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:38.318" starttime="20170918 10:25:38.316" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:25:38.318" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:25:38.318" starttime="20170918 10:25:38.318" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:38.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:38.319" starttime="20170918 10:25:36.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:38.319" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:38.319" starttime="20170918 10:25:38.319" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170918 10:25:38.320" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:25:38.320" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:25:38.320" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status endtime="20170918 10:25:38.320" starttime="20170918 10:25:38.319" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:38.320" starttime="20170918 10:25:36.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170918 10:25:38.321" starttime="20170918 10:25:38.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:25:38.326" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:25:38.326" starttime="20170918 10:25:38.325" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:25:38.327" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:25:38.327" starttime="20170918 10:25:38.326" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:25:38.327" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:25:38.327" starttime="20170918 10:25:38.327" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:25:38.328" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:25:38.328" starttime="20170918 10:25:38.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:25:39.198" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:25:39.198" starttime="20170918 10:25:38.329" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:39.198" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:25:39.198" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:39.198" starttime="20170918 10:25:38.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:25:39.199" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:39.199" starttime="20170918 10:25:39.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:39.200" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:39.200" starttime="20170918 10:25:39.199" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:39.200" starttime="20170918 10:25:38.325" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:39.200" starttime="20170918 10:25:38.325" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:39.200" starttime="20170918 10:25:38.324" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:25:39.201" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:25:39.201" starttime="20170918 10:25:39.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:39.203" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:25:39.203" starttime="20170918 10:25:39.202" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:39.204" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:25:39.204" starttime="20170918 10:25:39.204" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:39.204" starttime="20170918 10:25:39.203" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:39.204" starttime="20170918 10:25:39.201" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:39.204" starttime="20170918 10:25:39.201" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:25:43.420" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:25:43.420" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:43.420" starttime="20170918 10:25:39.205" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:43.422" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:43.422" starttime="20170918 10:25:43.422" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:43.423" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:43.423" starttime="20170918 10:25:43.423" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:43.424" starttime="20170918 10:25:43.423" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:43.424" starttime="20170918 10:25:43.421" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:43.424" starttime="20170918 10:25:43.421" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:25:43.424" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:25:43.424" starttime="20170918 10:25:43.424" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:43.424" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:43.424" starttime="20170918 10:25:38.323" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:43.425" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:43.425" starttime="20170918 10:25:43.425" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:25:43.426" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:25:43.426" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:25:43.426" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170918 10:25:43.426" starttime="20170918 10:25:43.425" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:43.426" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170918 10:25:43.426" starttime="20170918 10:25:38.323" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:43.426" level="INFO">${power_state} = Off</msg>
<status endtime="20170918 10:25:43.426" starttime="20170918 10:25:38.322" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170918 10:25:43.427" level="FAIL">On != Off</msg>
<status endtime="20170918 10:25:43.427" starttime="20170918 10:25:43.427" status="FAIL"></status>
</kw>
<status endtime="20170918 10:25:43.427" starttime="20170918 10:25:38.322" status="FAIL"></status>
</kw>
<status endtime="20170918 10:25:43.428" starttime="20170918 10:25:38.321" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:25:53.433" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:25:53.434" starttime="20170918 10:25:53.432" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:25:53.434" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:25:53.434" starttime="20170918 10:25:53.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:25:53.435" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:25:53.435" starttime="20170918 10:25:53.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:25:53.436" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:25:53.436" starttime="20170918 10:25:53.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:25:53.925" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:25:53.925" starttime="20170918 10:25:53.436" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:53.925" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:25:53.925" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:53.925" starttime="20170918 10:25:53.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:25:53.926" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:53.926" starttime="20170918 10:25:53.925" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:53.926" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:53.926" starttime="20170918 10:25:53.926" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:53.927" starttime="20170918 10:25:53.432" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:53.927" starttime="20170918 10:25:53.431" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:53.927" starttime="20170918 10:25:53.431" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:25:53.927" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:25:53.927" starttime="20170918 10:25:53.927" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:53.929" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:25:53.929" starttime="20170918 10:25:53.929" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:53.930" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:25:53.930" starttime="20170918 10:25:53.930" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:53.931" starttime="20170918 10:25:53.930" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:53.931" starttime="20170918 10:25:53.928" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:53.931" starttime="20170918 10:25:53.928" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:25:54.604" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:25:54.604" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:54.604" starttime="20170918 10:25:53.931" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:25:54.606" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:54.606" starttime="20170918 10:25:54.605" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:25:54.607" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:25:54.607" starttime="20170918 10:25:54.607" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:54.607" starttime="20170918 10:25:54.606" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:54.607" starttime="20170918 10:25:54.605" status="PASS"></status>
</kw>
<status endtime="20170918 10:25:54.607" starttime="20170918 10:25:54.605" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:25:54.608" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:25:54.608" starttime="20170918 10:25:54.608" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:54.608" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:25:54.608" starttime="20170918 10:25:53.430" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:25:54.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:25:54.609" starttime="20170918 10:25:54.608" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:25:54.610" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:25:54.610" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:25:54.610" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170918 10:25:54.610" starttime="20170918 10:25:54.609" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:54.610" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170918 10:25:54.610" starttime="20170918 10:25:53.429" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:25:54.610" level="INFO">${power_state} = Off</msg>
<status endtime="20170918 10:25:54.610" starttime="20170918 10:25:53.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170918 10:25:54.611" level="FAIL">On != Off</msg>
<status endtime="20170918 10:25:54.611" starttime="20170918 10:25:54.611" status="FAIL"></status>
</kw>
<status endtime="20170918 10:25:54.611" starttime="20170918 10:25:53.429" status="FAIL"></status>
</kw>
<status endtime="20170918 10:25:54.611" starttime="20170918 10:25:53.428" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:26:04.617" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:26:04.617" starttime="20170918 10:26:04.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:26:04.618" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:26:04.618" starttime="20170918 10:26:04.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:26:04.619" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:26:04.619" starttime="20170918 10:26:04.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:26:04.619" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:26:04.619" starttime="20170918 10:26:04.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:26:04.825" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:26:04.825" starttime="20170918 10:26:04.620" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:04.825" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:26:04.825" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:04.825" starttime="20170918 10:26:04.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:26:04.826" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:04.826" starttime="20170918 10:26:04.826" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:04.827" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:04.827" starttime="20170918 10:26:04.826" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:04.827" starttime="20170918 10:26:04.616" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:04.827" starttime="20170918 10:26:04.616" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:04.827" starttime="20170918 10:26:04.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:26:04.828" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:26:04.828" starttime="20170918 10:26:04.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:04.830" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:04.830" starttime="20170918 10:26:04.829" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:04.831" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:04.831" starttime="20170918 10:26:04.830" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:04.831" starttime="20170918 10:26:04.830" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:04.831" starttime="20170918 10:26:04.828" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:04.831" starttime="20170918 10:26:04.828" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:26:04.893" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:26:04.893" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:04.893" starttime="20170918 10:26:04.831" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:04.895" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:04.895" starttime="20170918 10:26:04.894" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:04.896" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:04.896" starttime="20170918 10:26:04.895" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:04.896" starttime="20170918 10:26:04.895" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:04.896" starttime="20170918 10:26:04.894" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:04.896" starttime="20170918 10:26:04.893" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:26:04.896" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:26:04.896" starttime="20170918 10:26:04.896" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:04.897" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:04.897" starttime="20170918 10:26:04.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:04.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:04.897" starttime="20170918 10:26:04.897" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:26:04.898" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:26:04.898" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:26:04.898" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:26:04.898" starttime="20170918 10:26:04.898" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:04.898" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:26:04.898" starttime="20170918 10:26:04.613" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:04.899" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:26:04.899" starttime="20170918 10:26:04.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:26:04.899" starttime="20170918 10:26:04.899" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:04.899" starttime="20170918 10:26:04.613" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:26:04.903" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:26:04.903" starttime="20170918 10:26:04.903" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:26:04.904" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:26:04.904" starttime="20170918 10:26:04.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:26:04.905" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:26:04.905" starttime="20170918 10:26:04.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:26:04.905" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:26:04.905" starttime="20170918 10:26:04.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:26:05.089" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:26:05.089" starttime="20170918 10:26:04.906" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:05.089" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:26:05.089" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:05.089" starttime="20170918 10:26:04.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:26:05.090" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:05.090" starttime="20170918 10:26:05.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:05.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:05.091" starttime="20170918 10:26:05.090" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.091" starttime="20170918 10:26:04.902" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.091" starttime="20170918 10:26:04.902" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.091" starttime="20170918 10:26:04.901" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:26:05.091" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:26:05.092" starttime="20170918 10:26:05.091" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:05.094" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:05.094" starttime="20170918 10:26:05.093" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:05.095" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:05.095" starttime="20170918 10:26:05.094" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.095" starttime="20170918 10:26:05.094" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.095" starttime="20170918 10:26:05.092" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.095" starttime="20170918 10:26:05.092" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:26:05.181" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:26:05.181" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:05.181" starttime="20170918 10:26:05.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:05.183" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:05.183" starttime="20170918 10:26:05.183" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:05.184" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:05.184" starttime="20170918 10:26:05.184" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.184" starttime="20170918 10:26:05.183" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.184" starttime="20170918 10:26:05.182" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.185" starttime="20170918 10:26:05.182" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:26:05.185" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:26:05.185" starttime="20170918 10:26:05.185" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:05.185" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:05.185" starttime="20170918 10:26:04.900" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:05.186" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:05.186" starttime="20170918 10:26:05.186" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:26:05.187" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:26:05.187" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:26:05.187" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:26:05.187" starttime="20170918 10:26:05.186" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:05.187" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:26:05.187" starttime="20170918 10:26:04.900" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:05.187" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:26:05.187" starttime="20170918 10:26:04.899" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:26:05.188" starttime="20170918 10:26:05.188" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:26:05.192" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:26:05.193" starttime="20170918 10:26:05.192" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:26:05.193" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:26:05.193" starttime="20170918 10:26:05.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:26:05.194" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:26:05.194" starttime="20170918 10:26:05.194" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:26:05.195" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:26:05.195" starttime="20170918 10:26:05.194" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:26:05.381" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:26:05.381" starttime="20170918 10:26:05.195" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:05.381" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:26:05.381" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:05.381" starttime="20170918 10:26:05.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:26:05.382" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:05.382" starttime="20170918 10:26:05.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:05.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:05.382" starttime="20170918 10:26:05.382" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.383" starttime="20170918 10:26:05.191" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.383" starttime="20170918 10:26:05.191" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.383" starttime="20170918 10:26:05.190" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:26:05.383" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:26:05.383" starttime="20170918 10:26:05.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:05.386" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:26:05.386" starttime="20170918 10:26:05.385" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:05.386" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:26:05.387" starttime="20170918 10:26:05.386" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.387" starttime="20170918 10:26:05.386" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.387" starttime="20170918 10:26:05.384" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.387" starttime="20170918 10:26:05.384" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:26:05.523" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:26:05.523" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:05.523" starttime="20170918 10:26:05.387" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:05.525" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:05.525" starttime="20170918 10:26:05.524" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:05.526" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:05.526" starttime="20170918 10:26:05.526" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.527" starttime="20170918 10:26:05.525" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.527" starttime="20170918 10:26:05.524" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:05.527" starttime="20170918 10:26:05.523" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:26:05.527" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:26:05.527" starttime="20170918 10:26:05.527" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:05.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:05.527" starttime="20170918 10:26:05.190" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:05.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:05.528" starttime="20170918 10:26:05.528" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:26:05.529" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:26:05.529" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:26:05.529" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170918 10:26:05.529" starttime="20170918 10:26:05.528" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:05.529" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170918 10:26:05.529" starttime="20170918 10:26:05.189" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:05.529" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170918 10:26:05.529" starttime="20170918 10:26:05.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:26:05.530" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:26:05.530" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170918 10:26:05.530" starttime="20170918 10:26:05.530" status="FAIL"></status>
</kw>
<status endtime="20170918 10:26:05.531" starttime="20170918 10:26:05.188" status="FAIL"></status>
</kw>
<status endtime="20170918 10:26:05.531" starttime="20170918 10:26:04.612" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:26:15.536" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:26:15.537" starttime="20170918 10:26:15.536" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:26:15.537" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:26:15.537" starttime="20170918 10:26:15.537" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:26:15.538" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:26:15.538" starttime="20170918 10:26:15.538" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:26:15.539" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:26:15.539" starttime="20170918 10:26:15.538" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:26:15.947" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:26:15.947" starttime="20170918 10:26:15.539" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:15.947" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:26:15.947" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:15.947" starttime="20170918 10:26:15.539" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:26:15.948" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:15.948" starttime="20170918 10:26:15.948" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:15.949" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:15.949" starttime="20170918 10:26:15.948" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:15.949" starttime="20170918 10:26:15.535" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:15.949" starttime="20170918 10:26:15.535" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:15.949" starttime="20170918 10:26:15.534" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:26:15.950" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:26:15.950" starttime="20170918 10:26:15.949" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:15.952" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:15.952" starttime="20170918 10:26:15.951" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:15.953" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:15.953" starttime="20170918 10:26:15.952" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:15.953" starttime="20170918 10:26:15.952" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:15.953" starttime="20170918 10:26:15.950" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:15.953" starttime="20170918 10:26:15.950" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:26:16.621" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:26:16.621" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:16.621" starttime="20170918 10:26:15.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:16.623" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:16.623" starttime="20170918 10:26:16.623" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:16.624" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:16.624" starttime="20170918 10:26:16.624" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:16.624" starttime="20170918 10:26:16.623" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:16.625" starttime="20170918 10:26:16.622" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:16.625" starttime="20170918 10:26:16.622" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:26:16.625" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:26:16.625" starttime="20170918 10:26:16.625" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:16.625" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:16.625" starttime="20170918 10:26:15.533" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:16.626" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:16.626" starttime="20170918 10:26:16.626" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:26:16.627" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:26:16.627" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:26:16.627" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:26:16.627" starttime="20170918 10:26:16.626" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:16.627" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:26:16.627" starttime="20170918 10:26:15.533" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:16.627" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:26:16.627" starttime="20170918 10:26:15.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:26:16.628" starttime="20170918 10:26:16.628" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:16.628" starttime="20170918 10:26:15.532" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:26:16.632" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:26:16.632" starttime="20170918 10:26:16.631" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:26:16.633" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:26:16.633" starttime="20170918 10:26:16.633" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:26:16.634" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:26:16.634" starttime="20170918 10:26:16.633" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:26:16.634" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:26:16.634" starttime="20170918 10:26:16.634" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:26:16.994" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:26:16.994" starttime="20170918 10:26:16.635" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:16.994" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:26:16.994" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:16.994" starttime="20170918 10:26:16.635" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:26:16.995" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:16.995" starttime="20170918 10:26:16.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:16.996" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:16.996" starttime="20170918 10:26:16.995" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:16.996" starttime="20170918 10:26:16.631" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:16.996" starttime="20170918 10:26:16.630" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:16.996" starttime="20170918 10:26:16.630" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:26:16.997" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:26:16.997" starttime="20170918 10:26:16.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:16.999" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:16.999" starttime="20170918 10:26:16.998" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:17.000" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:17.000" starttime="20170918 10:26:17.000" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:17.000" starttime="20170918 10:26:16.999" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:17.000" starttime="20170918 10:26:16.998" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:17.000" starttime="20170918 10:26:16.997" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:26:17.676" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:26:17.676" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:17.676" starttime="20170918 10:26:17.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:17.678" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:17.678" starttime="20170918 10:26:17.677" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:17.679" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:17.679" starttime="20170918 10:26:17.678" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:17.679" starttime="20170918 10:26:17.678" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:17.679" starttime="20170918 10:26:17.677" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:17.679" starttime="20170918 10:26:17.676" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:26:17.679" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:26:17.679" starttime="20170918 10:26:17.679" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:17.680" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:17.680" starttime="20170918 10:26:16.629" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:17.680" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:17.680" starttime="20170918 10:26:17.680" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:26:17.681" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:26:17.681" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:26:17.681" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:26:17.681" starttime="20170918 10:26:17.681" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:17.681" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:26:17.681" starttime="20170918 10:26:16.629" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:17.682" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:26:17.682" starttime="20170918 10:26:16.628" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:26:17.682" starttime="20170918 10:26:17.682" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:26:17.687" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:26:17.687" starttime="20170918 10:26:17.686" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:26:17.688" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:26:17.688" starttime="20170918 10:26:17.687" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:26:17.688" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:26:17.688" starttime="20170918 10:26:17.688" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:26:17.689" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:26:17.689" starttime="20170918 10:26:17.689" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:26:18.209" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:26:18.210" starttime="20170918 10:26:17.690" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:18.210" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:26:18.210" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:18.210" starttime="20170918 10:26:17.689" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:26:18.211" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:18.211" starttime="20170918 10:26:18.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:18.212" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:18.212" starttime="20170918 10:26:18.211" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:18.212" starttime="20170918 10:26:17.686" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:18.212" starttime="20170918 10:26:17.686" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:18.212" starttime="20170918 10:26:17.685" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:26:18.213" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:26:18.213" starttime="20170918 10:26:18.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:18.215" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:26:18.215" starttime="20170918 10:26:18.214" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:18.218" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:26:18.218" starttime="20170918 10:26:18.215" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:18.219" starttime="20170918 10:26:18.215" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:18.219" starttime="20170918 10:26:18.213" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:18.219" starttime="20170918 10:26:18.213" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:26:18.753" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:26:18.753" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:18.753" starttime="20170918 10:26:18.219" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:18.755" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:18.755" starttime="20170918 10:26:18.754" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:18.756" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:18.756" starttime="20170918 10:26:18.755" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:18.756" starttime="20170918 10:26:18.755" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:18.756" starttime="20170918 10:26:18.754" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:18.756" starttime="20170918 10:26:18.753" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:26:18.756" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:26:18.757" starttime="20170918 10:26:18.756" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:18.757" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:18.757" starttime="20170918 10:26:17.684" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:18.757" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:18.757" starttime="20170918 10:26:18.757" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:26:18.758" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:26:18.758" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:26:18.758" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:26:18.758" starttime="20170918 10:26:18.758" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:18.758" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:26:18.758" starttime="20170918 10:26:17.683" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:18.759" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:26:18.759" starttime="20170918 10:26:17.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:26:18.759" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:26:18.759" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:26:18.759" starttime="20170918 10:26:18.759" status="FAIL"></status>
</kw>
<status endtime="20170918 10:26:18.760" starttime="20170918 10:26:17.682" status="FAIL"></status>
</kw>
<status endtime="20170918 10:26:18.760" starttime="20170918 10:26:15.531" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:26:28.765" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:26:28.765" starttime="20170918 10:26:28.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:26:28.766" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:26:28.766" starttime="20170918 10:26:28.766" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:26:28.766" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:26:28.767" starttime="20170918 10:26:28.766" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:26:28.767" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:26:28.767" starttime="20170918 10:26:28.767" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:26:29.231" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:26:29.231" starttime="20170918 10:26:28.768" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:29.231" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:26:29.232" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:29.232" starttime="20170918 10:26:28.768" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:26:29.232" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:29.232" starttime="20170918 10:26:29.232" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:29.233" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:29.233" starttime="20170918 10:26:29.233" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:29.233" starttime="20170918 10:26:28.764" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:29.233" starttime="20170918 10:26:28.764" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:29.233" starttime="20170918 10:26:28.763" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:26:29.234" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:26:29.234" starttime="20170918 10:26:29.234" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:29.236" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:29.236" starttime="20170918 10:26:29.235" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:29.237" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:29.237" starttime="20170918 10:26:29.237" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:29.237" starttime="20170918 10:26:29.236" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:29.237" starttime="20170918 10:26:29.235" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:29.238" starttime="20170918 10:26:29.234" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:26:29.906" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:26:29.907" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:29.907" starttime="20170918 10:26:29.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:29.908" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:29.908" starttime="20170918 10:26:29.908" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:29.909" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:29.909" starttime="20170918 10:26:29.909" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:29.910" starttime="20170918 10:26:29.909" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:29.910" starttime="20170918 10:26:29.907" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:29.910" starttime="20170918 10:26:29.907" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:26:29.910" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:26:29.910" starttime="20170918 10:26:29.910" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:29.911" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:29.911" starttime="20170918 10:26:28.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:29.911" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:29.912" starttime="20170918 10:26:29.911" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:26:29.912" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:26:29.912" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:26:29.912" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:26:29.913" starttime="20170918 10:26:29.912" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:29.913" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:26:29.913" starttime="20170918 10:26:28.762" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:29.913" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:26:29.913" starttime="20170918 10:26:28.761" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:26:29.914" starttime="20170918 10:26:29.913" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:29.914" starttime="20170918 10:26:28.761" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:26:29.918" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:26:29.918" starttime="20170918 10:26:29.917" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:26:29.919" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:26:29.919" starttime="20170918 10:26:29.918" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:26:29.919" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:26:29.919" starttime="20170918 10:26:29.919" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:26:29.920" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:26:29.920" starttime="20170918 10:26:29.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:26:30.357" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:26:30.357" starttime="20170918 10:26:29.921" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:30.357" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:26:30.357" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:30.357" starttime="20170918 10:26:29.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:26:30.358" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:30.358" starttime="20170918 10:26:30.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:30.359" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:30.359" starttime="20170918 10:26:30.358" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:30.359" starttime="20170918 10:26:29.917" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:30.359" starttime="20170918 10:26:29.916" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:30.359" starttime="20170918 10:26:29.916" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:26:30.360" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:26:30.360" starttime="20170918 10:26:30.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:30.362" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:30.362" starttime="20170918 10:26:30.361" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:30.363" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:30.363" starttime="20170918 10:26:30.363" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:30.363" starttime="20170918 10:26:30.362" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:30.363" starttime="20170918 10:26:30.361" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:30.363" starttime="20170918 10:26:30.360" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:26:31.108" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:26:31.108" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:31.108" starttime="20170918 10:26:30.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:31.111" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:31.111" starttime="20170918 10:26:31.110" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:31.112" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:31.112" starttime="20170918 10:26:31.111" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:31.112" starttime="20170918 10:26:31.111" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:31.112" starttime="20170918 10:26:31.110" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:31.112" starttime="20170918 10:26:31.109" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:26:31.113" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:26:31.113" starttime="20170918 10:26:31.112" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:31.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:31.113" starttime="20170918 10:26:29.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:31.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:31.114" starttime="20170918 10:26:31.114" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:26:31.115" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:26:31.115" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:26:31.115" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:26:31.116" starttime="20170918 10:26:31.115" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:31.116" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:26:31.116" starttime="20170918 10:26:29.914" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:31.116" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:26:31.116" starttime="20170918 10:26:29.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:26:31.117" starttime="20170918 10:26:31.117" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:26:31.123" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:26:31.123" starttime="20170918 10:26:31.122" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:26:31.124" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:26:31.124" starttime="20170918 10:26:31.124" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:26:31.125" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:26:31.125" starttime="20170918 10:26:31.124" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:26:31.125" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:26:31.125" starttime="20170918 10:26:31.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:26:31.509" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:26:31.509" starttime="20170918 10:26:31.126" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:31.509" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:26:31.509" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:31.509" starttime="20170918 10:26:31.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:26:31.510" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:31.510" starttime="20170918 10:26:31.510" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:31.511" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:31.511" starttime="20170918 10:26:31.510" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:31.511" starttime="20170918 10:26:31.122" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:31.511" starttime="20170918 10:26:31.121" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:31.511" starttime="20170918 10:26:31.120" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:26:31.512" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:26:31.512" starttime="20170918 10:26:31.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:31.515" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:26:31.515" starttime="20170918 10:26:31.513" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:31.516" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:26:31.516" starttime="20170918 10:26:31.516" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:31.516" starttime="20170918 10:26:31.515" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:31.516" starttime="20170918 10:26:31.513" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:31.516" starttime="20170918 10:26:31.512" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:26:32.139" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:26:32.139" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:32.139" starttime="20170918 10:26:31.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:32.141" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:32.141" starttime="20170918 10:26:32.140" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:32.142" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:32.142" starttime="20170918 10:26:32.141" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:32.142" starttime="20170918 10:26:32.141" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:32.142" starttime="20170918 10:26:32.140" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:32.142" starttime="20170918 10:26:32.139" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:26:32.143" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:26:32.143" starttime="20170918 10:26:32.142" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:32.143" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:32.143" starttime="20170918 10:26:31.119" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:32.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:32.144" starttime="20170918 10:26:32.143" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:26:32.144" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:26:32.144" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:26:32.144" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:26:32.144" starttime="20170918 10:26:32.144" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:32.145" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:26:32.145" starttime="20170918 10:26:31.118" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:32.145" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:26:32.145" starttime="20170918 10:26:31.118" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:26:32.145" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:26:32.146" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:26:32.146" starttime="20170918 10:26:32.145" status="FAIL"></status>
</kw>
<status endtime="20170918 10:26:32.146" starttime="20170918 10:26:31.117" status="FAIL"></status>
</kw>
<status endtime="20170918 10:26:32.146" starttime="20170918 10:26:28.760" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:26:42.151" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:26:42.152" starttime="20170918 10:26:42.151" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:26:42.152" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:26:42.152" starttime="20170918 10:26:42.152" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:26:42.153" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:26:42.153" starttime="20170918 10:26:42.153" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:26:42.154" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:26:42.154" starttime="20170918 10:26:42.153" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:26:42.593" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:26:42.593" starttime="20170918 10:26:42.154" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:42.593" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:26:42.593" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:42.593" starttime="20170918 10:26:42.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:26:42.594" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:42.594" starttime="20170918 10:26:42.593" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:42.594" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:42.595" starttime="20170918 10:26:42.594" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:42.595" starttime="20170918 10:26:42.150" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:42.595" starttime="20170918 10:26:42.150" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:42.595" starttime="20170918 10:26:42.149" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:26:42.595" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:26:42.596" starttime="20170918 10:26:42.595" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:42.598" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:42.598" starttime="20170918 10:26:42.597" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:42.598" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:42.599" starttime="20170918 10:26:42.598" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:42.599" starttime="20170918 10:26:42.598" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:42.599" starttime="20170918 10:26:42.596" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:42.599" starttime="20170918 10:26:42.596" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:26:43.145" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:26:43.145" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:43.145" starttime="20170918 10:26:42.599" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:43.147" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:43.147" starttime="20170918 10:26:43.147" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:43.149" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:43.149" starttime="20170918 10:26:43.148" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:43.149" starttime="20170918 10:26:43.147" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:43.149" starttime="20170918 10:26:43.146" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:43.149" starttime="20170918 10:26:43.146" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:26:43.149" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:26:43.149" starttime="20170918 10:26:43.149" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:43.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:43.150" starttime="20170918 10:26:42.148" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:43.150" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:43.150" starttime="20170918 10:26:43.150" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:26:43.151" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:26:43.151" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:26:43.151" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:26:43.151" starttime="20170918 10:26:43.151" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:43.151" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:26:43.151" starttime="20170918 10:26:42.148" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:43.152" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:26:43.152" starttime="20170918 10:26:42.147" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:26:43.152" starttime="20170918 10:26:43.152" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:43.152" starttime="20170918 10:26:42.147" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:26:43.156" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:26:43.156" starttime="20170918 10:26:43.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:26:43.157" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:26:43.157" starttime="20170918 10:26:43.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:26:43.158" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:26:43.158" starttime="20170918 10:26:43.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:26:43.158" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:26:43.158" starttime="20170918 10:26:43.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:26:43.570" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:26:43.570" starttime="20170918 10:26:43.159" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:43.570" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:26:43.570" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:43.570" starttime="20170918 10:26:43.159" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:26:43.571" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:43.571" starttime="20170918 10:26:43.571" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:43.572" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:43.572" starttime="20170918 10:26:43.571" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:43.572" starttime="20170918 10:26:43.155" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:43.572" starttime="20170918 10:26:43.155" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:43.572" starttime="20170918 10:26:43.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:26:43.573" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:26:43.573" starttime="20170918 10:26:43.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:43.575" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:43.575" starttime="20170918 10:26:43.574" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:43.576" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:43.576" starttime="20170918 10:26:43.576" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:43.576" starttime="20170918 10:26:43.575" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:43.577" starttime="20170918 10:26:43.573" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:43.577" starttime="20170918 10:26:43.573" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:26:44.297" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:26:44.298" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:44.298" starttime="20170918 10:26:43.577" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:44.299" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:44.300" starttime="20170918 10:26:44.299" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:44.300" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:44.301" starttime="20170918 10:26:44.300" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:44.301" starttime="20170918 10:26:44.300" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:44.301" starttime="20170918 10:26:44.298" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:44.301" starttime="20170918 10:26:44.298" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:26:44.301" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:26:44.301" starttime="20170918 10:26:44.301" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:44.302" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:44.302" starttime="20170918 10:26:43.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:44.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:44.302" starttime="20170918 10:26:44.302" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:26:44.303" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:26:44.303" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:26:44.303" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:26:44.303" starttime="20170918 10:26:44.302" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:44.303" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:26:44.303" starttime="20170918 10:26:43.153" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:44.304" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:26:44.304" starttime="20170918 10:26:43.153" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:26:44.304" starttime="20170918 10:26:44.304" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:26:44.308" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:26:44.308" starttime="20170918 10:26:44.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:26:44.309" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:26:44.309" starttime="20170918 10:26:44.309" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:26:44.310" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:26:44.310" starttime="20170918 10:26:44.309" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:26:44.311" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:26:44.311" starttime="20170918 10:26:44.310" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:26:44.619" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:26:44.619" starttime="20170918 10:26:44.311" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:44.619" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:26:44.619" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:44.619" starttime="20170918 10:26:44.311" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:26:44.620" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:44.620" starttime="20170918 10:26:44.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:44.621" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:44.621" starttime="20170918 10:26:44.620" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:44.621" starttime="20170918 10:26:44.307" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:44.621" starttime="20170918 10:26:44.307" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:44.621" starttime="20170918 10:26:44.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:26:44.622" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:26:44.622" starttime="20170918 10:26:44.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:44.624" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:26:44.624" starttime="20170918 10:26:44.623" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:44.624" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:26:44.625" starttime="20170918 10:26:44.624" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:44.625" starttime="20170918 10:26:44.624" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:44.625" starttime="20170918 10:26:44.622" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:44.625" starttime="20170918 10:26:44.622" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:26:45.656" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:26:45.657" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:45.657" starttime="20170918 10:26:44.625" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:45.659" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:45.659" starttime="20170918 10:26:45.658" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:45.660" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:45.660" starttime="20170918 10:26:45.659" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:45.660" starttime="20170918 10:26:45.659" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:45.660" starttime="20170918 10:26:45.658" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:45.660" starttime="20170918 10:26:45.657" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:26:45.660" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:26:45.660" starttime="20170918 10:26:45.660" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:45.661" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:45.661" starttime="20170918 10:26:44.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:45.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:45.661" starttime="20170918 10:26:45.661" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:26:45.662" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:26:45.662" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:26:45.662" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:26:45.662" starttime="20170918 10:26:45.662" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:45.662" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:26:45.662" starttime="20170918 10:26:44.305" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:45.663" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:26:45.663" starttime="20170918 10:26:44.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:26:45.663" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:26:45.663" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:26:45.663" starttime="20170918 10:26:45.663" status="FAIL"></status>
</kw>
<status endtime="20170918 10:26:45.664" starttime="20170918 10:26:44.304" status="FAIL"></status>
</kw>
<status endtime="20170918 10:26:45.664" starttime="20170918 10:26:42.146" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:26:55.669" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:26:55.670" starttime="20170918 10:26:55.669" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:26:55.670" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:26:55.670" starttime="20170918 10:26:55.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:26:55.671" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:26:55.671" starttime="20170918 10:26:55.671" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:26:55.672" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:26:55.672" starttime="20170918 10:26:55.671" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:26:56.188" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:26:56.188" starttime="20170918 10:26:55.672" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:56.188" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:26:56.188" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:56.188" starttime="20170918 10:26:55.672" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:26:56.189" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:56.189" starttime="20170918 10:26:56.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:56.190" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:56.190" starttime="20170918 10:26:56.189" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:56.190" starttime="20170918 10:26:55.668" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:56.190" starttime="20170918 10:26:55.668" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:56.190" starttime="20170918 10:26:55.667" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:26:56.191" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:26:56.191" starttime="20170918 10:26:56.190" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:56.193" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:56.193" starttime="20170918 10:26:56.192" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:56.194" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:56.194" starttime="20170918 10:26:56.193" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:56.194" starttime="20170918 10:26:56.193" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:56.194" starttime="20170918 10:26:56.191" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:56.194" starttime="20170918 10:26:56.191" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:26:56.831" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:26:56.831" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:56.831" starttime="20170918 10:26:56.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:56.833" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:56.833" starttime="20170918 10:26:56.833" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:56.834" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:56.834" starttime="20170918 10:26:56.834" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:56.834" starttime="20170918 10:26:56.833" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:56.834" starttime="20170918 10:26:56.832" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:56.834" starttime="20170918 10:26:56.832" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:26:56.835" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:26:56.835" starttime="20170918 10:26:56.835" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:56.835" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:56.835" starttime="20170918 10:26:55.666" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:56.836" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:56.836" starttime="20170918 10:26:56.836" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:26:56.836" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:26:56.837" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:26:56.837" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:26:56.837" starttime="20170918 10:26:56.836" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:56.837" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:26:56.837" starttime="20170918 10:26:55.666" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:56.837" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:26:56.837" starttime="20170918 10:26:55.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:26:56.838" starttime="20170918 10:26:56.838" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:56.838" starttime="20170918 10:26:55.665" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:26:56.841" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:26:56.842" starttime="20170918 10:26:56.841" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:26:56.842" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:26:56.842" starttime="20170918 10:26:56.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:26:56.843" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:26:56.843" starttime="20170918 10:26:56.843" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:26:56.844" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:26:56.844" starttime="20170918 10:26:56.843" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:26:57.168" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:26:57.168" starttime="20170918 10:26:56.844" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:57.168" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:26:57.168" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:57.168" starttime="20170918 10:26:56.844" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:26:57.169" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:57.169" starttime="20170918 10:26:57.169" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:57.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:57.170" starttime="20170918 10:26:57.169" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:57.170" starttime="20170918 10:26:56.841" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:57.170" starttime="20170918 10:26:56.840" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:57.170" starttime="20170918 10:26:56.840" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:26:57.171" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:26:57.171" starttime="20170918 10:26:57.170" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:57.173" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:57.173" starttime="20170918 10:26:57.172" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:57.174" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:26:57.174" starttime="20170918 10:26:57.173" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:57.174" starttime="20170918 10:26:57.173" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:57.174" starttime="20170918 10:26:57.171" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:57.174" starttime="20170918 10:26:57.171" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:26:58.103" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:26:58.103" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:58.103" starttime="20170918 10:26:57.174" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:58.105" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:58.105" starttime="20170918 10:26:58.104" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:58.106" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:58.106" starttime="20170918 10:26:58.105" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:58.106" starttime="20170918 10:26:58.105" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:58.106" starttime="20170918 10:26:58.104" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:58.106" starttime="20170918 10:26:58.103" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:26:58.107" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:26:58.107" starttime="20170918 10:26:58.106" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:58.107" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:58.107" starttime="20170918 10:26:56.839" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:58.108" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:58.108" starttime="20170918 10:26:58.107" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:26:58.108" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:26:58.108" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:26:58.108" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:26:58.108" starttime="20170918 10:26:58.108" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:58.109" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:26:58.109" starttime="20170918 10:26:56.838" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:58.109" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:26:58.109" starttime="20170918 10:26:56.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:26:58.109" starttime="20170918 10:26:58.109" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:26:58.114" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:26:58.114" starttime="20170918 10:26:58.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:26:58.115" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:26:58.115" starttime="20170918 10:26:58.115" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:26:58.116" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:26:58.116" starttime="20170918 10:26:58.115" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:26:58.116" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:26:58.116" starttime="20170918 10:26:58.116" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:26:58.428" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:26:58.428" starttime="20170918 10:26:58.117" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:58.428" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:26:58.428" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:58.428" starttime="20170918 10:26:58.117" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:26:58.429" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:58.429" starttime="20170918 10:26:58.428" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:58.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:58.430" starttime="20170918 10:26:58.429" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:58.430" starttime="20170918 10:26:58.113" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:58.430" starttime="20170918 10:26:58.112" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:58.430" starttime="20170918 10:26:58.112" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:26:58.430" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:26:58.430" starttime="20170918 10:26:58.430" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:58.433" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:26:58.433" starttime="20170918 10:26:58.432" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:58.434" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:26:58.434" starttime="20170918 10:26:58.433" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:58.434" starttime="20170918 10:26:58.433" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:58.434" starttime="20170918 10:26:58.431" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:58.434" starttime="20170918 10:26:58.431" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:26:59.291" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:26:59.291" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:59.291" starttime="20170918 10:26:58.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:26:59.293" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:59.293" starttime="20170918 10:26:59.292" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:26:59.296" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:26:59.297" starttime="20170918 10:26:59.296" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:59.297" starttime="20170918 10:26:59.293" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:59.297" starttime="20170918 10:26:59.292" status="PASS"></status>
</kw>
<status endtime="20170918 10:26:59.297" starttime="20170918 10:26:59.291" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:26:59.297" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:26:59.297" starttime="20170918 10:26:59.297" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:59.298" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:26:59.298" starttime="20170918 10:26:58.111" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:26:59.298" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:26:59.298" starttime="20170918 10:26:59.298" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:26:59.299" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:26:59.299" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:26:59.299" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:26:59.299" starttime="20170918 10:26:59.299" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:59.299" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:26:59.299" starttime="20170918 10:26:58.110" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:26:59.299" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:26:59.300" starttime="20170918 10:26:58.110" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:26:59.300" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:26:59.300" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:26:59.300" starttime="20170918 10:26:59.300" status="FAIL"></status>
</kw>
<status endtime="20170918 10:26:59.300" starttime="20170918 10:26:58.110" status="FAIL"></status>
</kw>
<status endtime="20170918 10:26:59.301" starttime="20170918 10:26:55.664" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:27:09.306" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:27:09.307" starttime="20170918 10:27:09.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:27:09.307" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:27:09.307" starttime="20170918 10:27:09.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:27:09.308" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:27:09.308" starttime="20170918 10:27:09.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:27:09.308" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:27:09.309" starttime="20170918 10:27:09.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:27:09.836" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:27:09.836" starttime="20170918 10:27:09.309" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:09.836" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:27:09.836" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:09.836" starttime="20170918 10:27:09.309" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:27:09.837" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:09.837" starttime="20170918 10:27:09.836" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:09.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:09.837" starttime="20170918 10:27:09.837" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:09.838" starttime="20170918 10:27:09.305" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:09.838" starttime="20170918 10:27:09.305" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:09.838" starttime="20170918 10:27:09.304" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:27:09.838" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:27:09.838" starttime="20170918 10:27:09.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:09.840" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:27:09.840" starttime="20170918 10:27:09.840" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:09.841" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:27:09.841" starttime="20170918 10:27:09.841" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:09.842" starttime="20170918 10:27:09.841" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:09.842" starttime="20170918 10:27:09.839" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:09.842" starttime="20170918 10:27:09.839" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:27:10.566" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:27:10.567" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:10.567" starttime="20170918 10:27:09.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:10.568" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:10.569" starttime="20170918 10:27:10.568" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:10.569" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:10.570" starttime="20170918 10:27:10.569" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:10.570" starttime="20170918 10:27:10.569" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:10.570" starttime="20170918 10:27:10.567" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:10.570" starttime="20170918 10:27:10.567" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:27:10.570" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:27:10.570" starttime="20170918 10:27:10.570" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:10.571" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:10.571" starttime="20170918 10:27:09.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:10.571" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:10.571" starttime="20170918 10:27:10.571" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:27:10.572" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:27:10.572" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:27:10.572" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:27:10.572" starttime="20170918 10:27:10.571" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:10.572" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:27:10.572" starttime="20170918 10:27:09.303" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:10.573" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:27:10.573" starttime="20170918 10:27:09.302" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:27:10.573" starttime="20170918 10:27:10.573" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:10.573" starttime="20170918 10:27:09.302" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:27:10.577" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:27:10.578" starttime="20170918 10:27:10.577" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:27:10.578" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:27:10.578" starttime="20170918 10:27:10.578" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:27:10.579" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:27:10.579" starttime="20170918 10:27:10.578" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:27:10.579" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:27:10.580" starttime="20170918 10:27:10.579" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:27:10.992" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:27:10.992" starttime="20170918 10:27:10.580" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:10.992" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:27:10.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:10.992" starttime="20170918 10:27:10.580" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:27:10.993" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:10.993" starttime="20170918 10:27:10.993" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:10.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:10.994" starttime="20170918 10:27:10.993" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:10.994" starttime="20170918 10:27:10.576" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:10.994" starttime="20170918 10:27:10.576" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:10.994" starttime="20170918 10:27:10.575" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:27:10.995" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:27:10.995" starttime="20170918 10:27:10.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:10.997" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:27:10.997" starttime="20170918 10:27:10.996" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:10.998" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:27:10.998" starttime="20170918 10:27:10.998" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:10.998" starttime="20170918 10:27:10.997" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:10.998" starttime="20170918 10:27:10.995" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:10.998" starttime="20170918 10:27:10.995" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:27:11.993" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:27:11.993" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:11.993" starttime="20170918 10:27:10.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:11.995" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:11.995" starttime="20170918 10:27:11.994" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:11.996" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:11.996" starttime="20170918 10:27:11.996" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:11.996" starttime="20170918 10:27:11.995" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:11.996" starttime="20170918 10:27:11.994" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:11.997" starttime="20170918 10:27:11.993" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:27:11.997" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:27:11.997" starttime="20170918 10:27:11.997" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:11.997" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:11.997" starttime="20170918 10:27:10.574" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:11.998" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:11.998" starttime="20170918 10:27:11.998" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:27:11.998" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:27:11.999" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:27:11.999" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:27:11.999" starttime="20170918 10:27:11.998" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:11.999" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:27:11.999" starttime="20170918 10:27:10.574" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:11.999" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:27:11.999" starttime="20170918 10:27:10.573" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:27:12.000" starttime="20170918 10:27:12.000" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:27:12.004" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:27:12.005" starttime="20170918 10:27:12.004" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:27:12.005" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:27:12.005" starttime="20170918 10:27:12.005" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:27:12.006" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:27:12.006" starttime="20170918 10:27:12.006" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:27:12.007" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:27:12.007" starttime="20170918 10:27:12.006" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:27:12.435" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:27:12.435" starttime="20170918 10:27:12.007" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:12.435" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:27:12.435" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:12.435" starttime="20170918 10:27:12.007" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:27:12.436" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:12.436" starttime="20170918 10:27:12.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:12.437" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:12.437" starttime="20170918 10:27:12.436" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:12.437" starttime="20170918 10:27:12.003" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:12.437" starttime="20170918 10:27:12.003" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:12.437" starttime="20170918 10:27:12.002" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:27:12.438" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:27:12.438" starttime="20170918 10:27:12.437" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:12.440" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:27:12.440" starttime="20170918 10:27:12.439" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:12.441" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:27:12.441" starttime="20170918 10:27:12.441" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:12.441" starttime="20170918 10:27:12.440" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:12.441" starttime="20170918 10:27:12.439" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:12.441" starttime="20170918 10:27:12.438" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:27:13.045" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:27:13.045" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:13.045" starttime="20170918 10:27:12.441" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:13.047" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:13.047" starttime="20170918 10:27:13.047" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:13.048" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:13.048" starttime="20170918 10:27:13.048" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:13.048" starttime="20170918 10:27:13.047" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:13.048" starttime="20170918 10:27:13.046" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:13.048" starttime="20170918 10:27:13.046" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:27:13.049" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:27:13.049" starttime="20170918 10:27:13.049" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:13.049" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:13.049" starttime="20170918 10:27:12.001" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:13.050" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:13.050" starttime="20170918 10:27:13.049" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:27:13.050" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:27:13.050" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:27:13.051" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:27:13.051" starttime="20170918 10:27:13.050" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:13.051" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:27:13.051" starttime="20170918 10:27:12.001" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:13.051" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:27:13.051" starttime="20170918 10:27:12.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:27:13.052" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:27:13.052" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:27:13.052" starttime="20170918 10:27:13.051" status="FAIL"></status>
</kw>
<status endtime="20170918 10:27:13.052" starttime="20170918 10:27:12.000" status="FAIL"></status>
</kw>
<status endtime="20170918 10:27:13.052" starttime="20170918 10:27:09.301" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:27:23.057" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:27:23.058" starttime="20170918 10:27:23.057" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:27:23.058" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:27:23.058" starttime="20170918 10:27:23.058" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:27:23.059" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:27:23.059" starttime="20170918 10:27:23.059" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:27:23.060" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:27:23.060" starttime="20170918 10:27:23.059" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:27:23.453" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:27:23.453" starttime="20170918 10:27:23.061" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:23.453" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:27:23.453" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:23.453" starttime="20170918 10:27:23.060" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:27:23.454" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:23.454" starttime="20170918 10:27:23.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:23.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:23.455" starttime="20170918 10:27:23.454" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:23.455" starttime="20170918 10:27:23.057" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:23.455" starttime="20170918 10:27:23.056" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:23.455" starttime="20170918 10:27:23.055" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:27:23.455" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:27:23.455" starttime="20170918 10:27:23.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:23.458" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:27:23.458" starttime="20170918 10:27:23.457" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:23.458" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:27:23.459" starttime="20170918 10:27:23.458" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:23.459" starttime="20170918 10:27:23.458" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:23.459" starttime="20170918 10:27:23.456" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:23.459" starttime="20170918 10:27:23.456" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:27:23.618" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:27:23.619" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:23.619" starttime="20170918 10:27:23.459" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:23.620" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:23.620" starttime="20170918 10:27:23.620" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:23.621" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:23.621" starttime="20170918 10:27:23.621" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:23.622" starttime="20170918 10:27:23.621" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:23.622" starttime="20170918 10:27:23.619" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:23.622" starttime="20170918 10:27:23.619" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:27:23.622" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:27:23.622" starttime="20170918 10:27:23.622" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:23.622" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:23.622" starttime="20170918 10:27:23.055" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:23.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:23.623" starttime="20170918 10:27:23.623" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:27:23.624" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:27:23.624" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:27:23.624" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:27:23.624" starttime="20170918 10:27:23.623" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:23.624" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:27:23.624" starttime="20170918 10:27:23.054" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:23.625" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:27:23.625" starttime="20170918 10:27:23.054" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:27:23.625" starttime="20170918 10:27:23.625" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:23.625" starttime="20170918 10:27:23.053" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:27:23.629" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:27:23.630" starttime="20170918 10:27:23.629" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:27:23.630" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:27:23.630" starttime="20170918 10:27:23.630" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:27:23.631" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:27:23.631" starttime="20170918 10:27:23.631" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:27:23.632" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:27:23.632" starttime="20170918 10:27:23.631" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:27:24.050" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:27:24.050" starttime="20170918 10:27:23.632" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:24.050" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:27:24.050" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:24.050" starttime="20170918 10:27:23.632" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:27:24.051" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:24.051" starttime="20170918 10:27:24.051" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:24.052" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:24.052" starttime="20170918 10:27:24.051" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:24.052" starttime="20170918 10:27:23.628" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:24.052" starttime="20170918 10:27:23.628" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:24.052" starttime="20170918 10:27:23.627" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:27:24.053" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:27:24.053" starttime="20170918 10:27:24.052" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:24.055" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:27:24.055" starttime="20170918 10:27:24.054" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:24.056" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:27:24.056" starttime="20170918 10:27:24.056" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:24.056" starttime="20170918 10:27:24.055" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:24.056" starttime="20170918 10:27:24.054" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:24.056" starttime="20170918 10:27:24.053" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:27:24.205" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:27:24.205" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:24.205" starttime="20170918 10:27:24.057" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:24.207" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:24.207" starttime="20170918 10:27:24.206" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:24.208" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:24.208" starttime="20170918 10:27:24.207" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:24.208" starttime="20170918 10:27:24.207" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:24.208" starttime="20170918 10:27:24.206" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:24.208" starttime="20170918 10:27:24.205" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:27:24.208" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:27:24.209" starttime="20170918 10:27:24.208" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:24.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:24.209" starttime="20170918 10:27:23.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:24.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:24.209" starttime="20170918 10:27:24.209" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:27:24.210" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:27:24.210" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:27:24.210" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:27:24.210" starttime="20170918 10:27:24.210" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:24.210" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:27:24.210" starttime="20170918 10:27:23.626" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:24.211" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:27:24.211" starttime="20170918 10:27:23.625" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:27:24.211" starttime="20170918 10:27:24.211" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:27:24.216" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:27:24.216" starttime="20170918 10:27:24.216" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:27:24.217" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:27:24.217" starttime="20170918 10:27:24.217" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:27:24.217" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:27:24.218" starttime="20170918 10:27:24.217" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:27:24.218" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:27:24.218" starttime="20170918 10:27:24.218" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:27:24.689" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:27:24.689" starttime="20170918 10:27:24.219" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:24.689" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:27:24.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:24.689" starttime="20170918 10:27:24.219" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:27:24.690" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:24.690" starttime="20170918 10:27:24.689" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:24.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:24.690" starttime="20170918 10:27:24.690" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:24.691" starttime="20170918 10:27:24.215" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:24.691" starttime="20170918 10:27:24.215" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:24.691" starttime="20170918 10:27:24.214" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:27:24.691" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:27:24.691" starttime="20170918 10:27:24.691" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:24.694" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:27:24.694" starttime="20170918 10:27:24.693" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:24.696" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:27:24.696" starttime="20170918 10:27:24.695" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:24.696" starttime="20170918 10:27:24.695" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:24.696" starttime="20170918 10:27:24.692" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:24.696" starttime="20170918 10:27:24.692" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:27:25.037" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:27:25.037" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:25.037" starttime="20170918 10:27:24.696" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:25.039" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:25.039" starttime="20170918 10:27:25.039" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:25.040" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:25.040" starttime="20170918 10:27:25.040" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:25.040" starttime="20170918 10:27:25.039" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:25.040" starttime="20170918 10:27:25.038" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:25.041" starttime="20170918 10:27:25.038" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:27:25.041" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:27:25.041" starttime="20170918 10:27:25.041" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:25.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:25.041" starttime="20170918 10:27:24.213" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:25.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:25.042" starttime="20170918 10:27:25.041" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:27:25.043" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:27:25.043" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:27:25.043" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:27:25.043" starttime="20170918 10:27:25.042" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:25.043" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:27:25.043" starttime="20170918 10:27:24.212" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:25.043" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:27:25.043" starttime="20170918 10:27:24.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:27:25.044" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:27:25.044" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:27:25.044" starttime="20170918 10:27:25.043" status="FAIL"></status>
</kw>
<status endtime="20170918 10:27:25.044" starttime="20170918 10:27:24.211" status="FAIL"></status>
</kw>
<status endtime="20170918 10:27:25.044" starttime="20170918 10:27:23.053" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:27:35.049" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:27:35.050" starttime="20170918 10:27:35.049" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:27:35.050" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:27:35.051" starttime="20170918 10:27:35.050" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:27:35.051" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:27:35.051" starttime="20170918 10:27:35.051" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:27:35.052" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:27:35.052" starttime="20170918 10:27:35.051" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:27:35.442" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:27:35.442" starttime="20170918 10:27:35.052" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:35.442" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:27:35.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:35.442" starttime="20170918 10:27:35.052" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:27:35.443" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:35.443" starttime="20170918 10:27:35.443" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:35.444" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:35.444" starttime="20170918 10:27:35.443" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:35.444" starttime="20170918 10:27:35.049" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:35.444" starttime="20170918 10:27:35.048" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:35.444" starttime="20170918 10:27:35.048" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:27:35.445" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:27:35.445" starttime="20170918 10:27:35.444" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:35.447" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:27:35.447" starttime="20170918 10:27:35.446" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:35.448" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:27:35.448" starttime="20170918 10:27:35.448" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:35.448" starttime="20170918 10:27:35.447" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:35.448" starttime="20170918 10:27:35.446" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:35.449" starttime="20170918 10:27:35.445" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:27:40.570" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:27:40.571" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:40.571" starttime="20170918 10:27:35.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:40.573" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:40.573" starttime="20170918 10:27:40.572" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:40.574" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:40.574" starttime="20170918 10:27:40.573" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:40.574" starttime="20170918 10:27:40.573" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:40.574" starttime="20170918 10:27:40.572" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:40.574" starttime="20170918 10:27:40.571" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:27:40.574" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:27:40.575" starttime="20170918 10:27:40.574" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:40.575" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:40.575" starttime="20170918 10:27:35.047" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:40.575" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:40.575" starttime="20170918 10:27:40.575" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:27:40.576" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:27:40.576" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:27:40.576" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:27:40.576" starttime="20170918 10:27:40.576" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:40.577" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:27:40.577" starttime="20170918 10:27:35.046" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:40.577" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:27:40.577" starttime="20170918 10:27:35.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:27:40.577" starttime="20170918 10:27:40.577" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:40.578" starttime="20170918 10:27:35.045" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:27:40.581" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:27:40.582" starttime="20170918 10:27:40.581" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:27:40.583" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:27:40.583" starttime="20170918 10:27:40.582" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:27:40.583" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:27:40.583" starttime="20170918 10:27:40.583" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:27:40.584" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:27:40.584" starttime="20170918 10:27:40.583" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:27:41.334" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:27:41.334" starttime="20170918 10:27:40.585" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:41.334" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:27:41.335" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:41.335" starttime="20170918 10:27:40.584" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:27:41.335" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:41.335" starttime="20170918 10:27:41.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:41.336" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:41.336" starttime="20170918 10:27:41.336" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:41.336" starttime="20170918 10:27:40.580" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:41.336" starttime="20170918 10:27:40.580" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:41.336" starttime="20170918 10:27:40.579" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:27:41.337" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:27:41.337" starttime="20170918 10:27:41.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:41.339" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:27:41.339" starttime="20170918 10:27:41.339" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:41.340" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:27:41.340" starttime="20170918 10:27:41.340" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:41.340" starttime="20170918 10:27:41.339" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:41.340" starttime="20170918 10:27:41.338" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:41.341" starttime="20170918 10:27:41.337" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:27:41.599" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:27:41.599" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:41.599" starttime="20170918 10:27:41.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:41.601" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:41.601" starttime="20170918 10:27:41.601" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:41.602" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:41.602" starttime="20170918 10:27:41.602" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:41.602" starttime="20170918 10:27:41.601" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:41.602" starttime="20170918 10:27:41.600" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:41.602" starttime="20170918 10:27:41.600" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:27:41.603" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:27:41.603" starttime="20170918 10:27:41.603" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:41.603" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:41.603" starttime="20170918 10:27:40.579" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:41.604" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:41.604" starttime="20170918 10:27:41.604" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:27:41.605" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:27:41.605" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:27:41.605" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:27:41.605" starttime="20170918 10:27:41.605" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:41.606" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:27:41.606" starttime="20170918 10:27:40.578" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:41.606" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:27:41.606" starttime="20170918 10:27:40.578" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:27:41.607" starttime="20170918 10:27:41.607" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:27:41.613" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:27:41.614" starttime="20170918 10:27:41.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:27:41.615" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:27:41.615" starttime="20170918 10:27:41.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:27:41.616" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:27:41.616" starttime="20170918 10:27:41.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:27:41.617" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:27:41.617" starttime="20170918 10:27:41.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:27:41.997" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:27:41.997" starttime="20170918 10:27:41.618" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:41.997" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:27:41.997" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:41.997" starttime="20170918 10:27:41.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:27:41.998" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:41.998" starttime="20170918 10:27:41.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:41.999" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:41.999" starttime="20170918 10:27:41.998" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:41.999" starttime="20170918 10:27:41.612" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:41.999" starttime="20170918 10:27:41.611" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:41.999" starttime="20170918 10:27:41.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:27:42.000" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:27:42.000" starttime="20170918 10:27:41.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:42.005" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:27:42.005" starttime="20170918 10:27:42.001" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:42.006" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:27:42.006" starttime="20170918 10:27:42.006" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:42.007" starttime="20170918 10:27:42.005" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:42.007" starttime="20170918 10:27:42.001" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:42.007" starttime="20170918 10:27:42.000" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:27:42.147" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:27:42.147" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:42.147" starttime="20170918 10:27:42.007" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:42.149" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:42.149" starttime="20170918 10:27:42.148" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:42.150" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:27:42.150" starttime="20170918 10:27:42.149" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:42.150" starttime="20170918 10:27:42.149" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:42.150" starttime="20170918 10:27:42.148" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:42.150" starttime="20170918 10:27:42.147" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:27:42.150" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:27:42.150" starttime="20170918 10:27:42.150" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:42.151" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:42.151" starttime="20170918 10:27:41.609" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:42.151" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:42.151" starttime="20170918 10:27:42.151" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:27:42.152" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:27:42.152" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:27:42.152" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:27:42.152" starttime="20170918 10:27:42.152" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:42.152" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:27:42.152" starttime="20170918 10:27:41.609" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:42.153" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:27:42.153" starttime="20170918 10:27:41.608" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:27:42.153" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:27:42.153" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:27:42.153" starttime="20170918 10:27:42.153" status="FAIL"></status>
</kw>
<status endtime="20170918 10:27:42.154" starttime="20170918 10:27:41.607" status="FAIL"></status>
</kw>
<status endtime="20170918 10:27:42.154" starttime="20170918 10:27:35.045" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:27:52.159" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:27:52.159" starttime="20170918 10:27:52.159" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:27:52.160" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:27:52.160" starttime="20170918 10:27:52.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:27:52.161" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:27:52.161" starttime="20170918 10:27:52.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:27:52.161" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:27:52.161" starttime="20170918 10:27:52.161" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:27:52.972" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:27:52.972" starttime="20170918 10:27:52.162" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:27:52.972" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:27:52.972" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:27:52.972" starttime="20170918 10:27:52.162" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:27:52.973" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:52.973" starttime="20170918 10:27:52.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:27:52.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:27:52.973" starttime="20170918 10:27:52.973" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:52.974" starttime="20170918 10:27:52.158" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:52.974" starttime="20170918 10:27:52.158" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:52.974" starttime="20170918 10:27:52.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:27:52.974" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:27:52.974" starttime="20170918 10:27:52.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:27:52.976" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:27:52.977" starttime="20170918 10:27:52.976" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:27:52.977" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:27:52.978" starttime="20170918 10:27:52.977" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:52.978" starttime="20170918 10:27:52.977" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:52.978" starttime="20170918 10:27:52.975" status="PASS"></status>
</kw>
<status endtime="20170918 10:27:52.978" starttime="20170918 10:27:52.975" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:28:01.518" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:28:01.518" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:01.518" starttime="20170918 10:27:52.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:01.520" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:01.520" starttime="20170918 10:28:01.520" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:01.521" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:01.521" starttime="20170918 10:28:01.521" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:01.521" starttime="20170918 10:28:01.520" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:01.522" starttime="20170918 10:28:01.519" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:01.522" starttime="20170918 10:28:01.519" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:28:01.522" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:28:01.522" starttime="20170918 10:28:01.522" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:01.522" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:01.522" starttime="20170918 10:27:52.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:01.523" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:01.523" starttime="20170918 10:28:01.523" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:28:01.524" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:28:01.524" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:28:01.524" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170918 10:28:01.524" starttime="20170918 10:28:01.523" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:01.524" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170918 10:28:01.524" starttime="20170918 10:27:52.156" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:01.524" level="INFO">${power_state} = Off</msg>
<status endtime="20170918 10:28:01.524" starttime="20170918 10:27:52.155" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170918 10:28:01.525" level="FAIL">On != Off</msg>
<status endtime="20170918 10:28:01.525" starttime="20170918 10:28:01.525" status="FAIL"></status>
</kw>
<status endtime="20170918 10:28:01.525" starttime="20170918 10:27:52.155" status="FAIL"></status>
</kw>
<status endtime="20170918 10:28:01.525" starttime="20170918 10:27:52.154" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:28:11.531" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:28:11.532" starttime="20170918 10:28:11.531" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:28:11.533" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:28:11.533" starttime="20170918 10:28:11.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:28:11.533" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:28:11.533" starttime="20170918 10:28:11.533" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:28:11.534" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:28:11.534" starttime="20170918 10:28:11.534" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:28:11.722" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:28:11.723" starttime="20170918 10:28:11.535" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:11.723" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:28:11.723" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:11.723" starttime="20170918 10:28:11.534" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:28:11.723" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:11.724" starttime="20170918 10:28:11.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:11.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:11.724" starttime="20170918 10:28:11.724" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:11.724" starttime="20170918 10:28:11.530" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:11.724" starttime="20170918 10:28:11.530" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:11.725" starttime="20170918 10:28:11.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:28:11.725" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:28:11.725" starttime="20170918 10:28:11.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:11.727" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:11.727" starttime="20170918 10:28:11.727" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:11.728" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:11.729" starttime="20170918 10:28:11.728" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:11.729" starttime="20170918 10:28:11.728" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:11.729" starttime="20170918 10:28:11.726" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:11.729" starttime="20170918 10:28:11.725" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:28:12.763" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:28:12.763" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:12.763" starttime="20170918 10:28:11.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:12.766" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:12.766" starttime="20170918 10:28:12.765" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:12.767" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:12.767" starttime="20170918 10:28:12.766" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:12.767" starttime="20170918 10:28:12.766" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:12.767" starttime="20170918 10:28:12.764" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:12.767" starttime="20170918 10:28:12.764" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:28:12.767" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:28:12.768" starttime="20170918 10:28:12.767" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:12.768" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:12.768" starttime="20170918 10:28:11.528" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:12.768" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:12.769" starttime="20170918 10:28:12.768" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:28:12.769" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:28:12.769" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:28:12.769" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:28:12.769" starttime="20170918 10:28:12.769" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:12.770" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:28:12.770" starttime="20170918 10:28:11.527" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:12.770" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:28:12.770" starttime="20170918 10:28:11.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:28:12.770" starttime="20170918 10:28:12.770" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:12.771" starttime="20170918 10:28:11.527" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:28:12.774" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:28:12.774" starttime="20170918 10:28:12.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:28:12.775" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:28:12.775" starttime="20170918 10:28:12.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:28:12.776" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:28:12.776" starttime="20170918 10:28:12.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:28:12.776" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:28:12.776" starttime="20170918 10:28:12.776" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:28:13.406" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:28:13.407" starttime="20170918 10:28:12.777" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:13.407" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:28:13.407" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:13.407" starttime="20170918 10:28:12.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:28:13.408" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:13.408" starttime="20170918 10:28:13.407" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:13.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:13.408" starttime="20170918 10:28:13.408" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:13.409" starttime="20170918 10:28:12.773" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:13.409" starttime="20170918 10:28:12.773" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:13.409" starttime="20170918 10:28:12.772" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:28:13.409" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:28:13.409" starttime="20170918 10:28:13.409" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:13.412" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:13.412" starttime="20170918 10:28:13.411" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:13.413" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:13.413" starttime="20170918 10:28:13.413" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:13.413" starttime="20170918 10:28:13.412" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:13.413" starttime="20170918 10:28:13.410" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:13.414" starttime="20170918 10:28:13.410" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:28:13.910" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:28:13.910" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:13.910" starttime="20170918 10:28:13.414" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:13.912" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:13.912" starttime="20170918 10:28:13.911" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:13.913" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:13.913" starttime="20170918 10:28:13.913" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:13.913" starttime="20170918 10:28:13.912" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:13.913" starttime="20170918 10:28:13.911" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:13.913" starttime="20170918 10:28:13.911" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:28:13.914" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:28:13.914" starttime="20170918 10:28:13.914" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:13.914" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:13.914" starttime="20170918 10:28:12.772" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:13.915" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:13.915" starttime="20170918 10:28:13.914" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:28:13.915" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:28:13.915" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:28:13.915" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:28:13.915" starttime="20170918 10:28:13.915" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:13.916" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:28:13.916" starttime="20170918 10:28:12.771" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:13.916" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:28:13.916" starttime="20170918 10:28:12.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:28:13.917" starttime="20170918 10:28:13.916" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:28:13.921" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:28:13.921" starttime="20170918 10:28:13.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:28:13.921" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:28:13.922" starttime="20170918 10:28:13.921" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:28:13.922" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:28:13.922" starttime="20170918 10:28:13.922" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:28:13.923" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:28:13.923" starttime="20170918 10:28:13.922" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:28:14.235" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:28:14.235" starttime="20170918 10:28:13.924" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:14.235" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:28:14.235" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:14.235" starttime="20170918 10:28:13.923" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:28:14.236" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:14.236" starttime="20170918 10:28:14.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:14.237" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:14.237" starttime="20170918 10:28:14.236" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:14.237" starttime="20170918 10:28:13.920" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:14.237" starttime="20170918 10:28:13.919" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:14.237" starttime="20170918 10:28:13.919" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:28:14.238" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:28:14.238" starttime="20170918 10:28:14.237" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:14.240" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:28:14.240" starttime="20170918 10:28:14.239" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:14.241" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:28:14.241" starttime="20170918 10:28:14.240" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:14.241" starttime="20170918 10:28:14.240" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:14.241" starttime="20170918 10:28:14.238" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:14.241" starttime="20170918 10:28:14.238" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:28:14.775" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:28:14.775" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:14.775" starttime="20170918 10:28:14.241" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:14.777" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:14.777" starttime="20170918 10:28:14.776" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:14.778" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:14.778" starttime="20170918 10:28:14.778" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:14.778" starttime="20170918 10:28:14.777" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:14.778" starttime="20170918 10:28:14.776" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:14.778" starttime="20170918 10:28:14.775" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:28:14.779" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:28:14.779" starttime="20170918 10:28:14.778" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:14.779" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:14.779" starttime="20170918 10:28:13.918" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:14.780" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:14.780" starttime="20170918 10:28:14.779" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:28:14.780" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:28:14.780" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:28:14.780" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170918 10:28:14.780" starttime="20170918 10:28:14.780" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:14.781" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170918 10:28:14.781" starttime="20170918 10:28:13.918" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:14.781" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170918 10:28:14.781" starttime="20170918 10:28:13.917" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:28:14.782" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:28:14.782" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170918 10:28:14.782" starttime="20170918 10:28:14.781" status="FAIL"></status>
</kw>
<status endtime="20170918 10:28:14.782" starttime="20170918 10:28:13.917" status="FAIL"></status>
</kw>
<status endtime="20170918 10:28:14.782" starttime="20170918 10:28:11.526" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:28:24.789" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:28:24.790" starttime="20170918 10:28:24.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:28:24.790" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:28:24.791" starttime="20170918 10:28:24.790" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:28:24.791" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:28:24.792" starttime="20170918 10:28:24.791" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:28:24.792" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:28:24.792" starttime="20170918 10:28:24.792" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:28:25.292" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:28:25.292" starttime="20170918 10:28:24.794" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:25.292" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:28:25.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:25.292" starttime="20170918 10:28:24.793" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:28:25.293" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:25.293" starttime="20170918 10:28:25.293" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:25.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:25.294" starttime="20170918 10:28:25.293" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.294" starttime="20170918 10:28:24.788" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.294" starttime="20170918 10:28:24.786" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.294" starttime="20170918 10:28:24.785" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:28:25.295" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:28:25.295" starttime="20170918 10:28:25.295" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:25.298" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:25.298" starttime="20170918 10:28:25.297" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:25.298" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:25.299" starttime="20170918 10:28:25.298" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.299" starttime="20170918 10:28:25.298" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.299" starttime="20170918 10:28:25.296" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.299" starttime="20170918 10:28:25.295" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:28:25.443" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:28:25.443" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:25.443" starttime="20170918 10:28:25.299" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:25.446" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:25.446" starttime="20170918 10:28:25.445" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:25.447" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:25.447" starttime="20170918 10:28:25.446" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.447" starttime="20170918 10:28:25.446" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.447" starttime="20170918 10:28:25.444" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.447" starttime="20170918 10:28:25.444" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:28:25.447" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:28:25.448" starttime="20170918 10:28:25.447" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:25.448" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:25.448" starttime="20170918 10:28:24.785" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:25.448" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:25.448" starttime="20170918 10:28:25.448" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:28:25.449" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:28:25.449" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:28:25.449" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:28:25.449" starttime="20170918 10:28:25.449" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:25.449" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:28:25.449" starttime="20170918 10:28:24.784" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:25.450" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:28:25.450" starttime="20170918 10:28:24.784" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:28:25.450" starttime="20170918 10:28:25.450" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.450" starttime="20170918 10:28:24.783" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:28:25.454" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:28:25.454" starttime="20170918 10:28:25.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:28:25.455" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:28:25.455" starttime="20170918 10:28:25.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:28:25.456" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:28:25.456" starttime="20170918 10:28:25.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:28:25.456" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:28:25.456" starttime="20170918 10:28:25.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:28:25.949" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:28:25.950" starttime="20170918 10:28:25.457" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:25.950" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:28:25.950" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:25.950" starttime="20170918 10:28:25.457" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:28:25.951" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:25.951" starttime="20170918 10:28:25.950" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:25.951" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:25.951" starttime="20170918 10:28:25.951" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.951" starttime="20170918 10:28:25.453" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.952" starttime="20170918 10:28:25.453" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.952" starttime="20170918 10:28:25.452" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:28:25.952" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:28:25.952" starttime="20170918 10:28:25.952" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:25.955" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:25.955" starttime="20170918 10:28:25.954" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:25.956" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:25.956" starttime="20170918 10:28:25.955" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.956" starttime="20170918 10:28:25.955" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.956" starttime="20170918 10:28:25.953" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:25.956" starttime="20170918 10:28:25.953" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:28:26.534" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:28:26.535" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:26.535" starttime="20170918 10:28:25.956" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:26.537" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:26.537" starttime="20170918 10:28:26.536" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:26.538" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:26.538" starttime="20170918 10:28:26.538" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:26.538" starttime="20170918 10:28:26.537" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:26.539" starttime="20170918 10:28:26.536" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:26.539" starttime="20170918 10:28:26.535" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:28:26.539" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:28:26.539" starttime="20170918 10:28:26.539" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:26.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:26.539" starttime="20170918 10:28:25.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:26.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:26.540" starttime="20170918 10:28:26.540" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:28:26.541" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:28:26.541" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:28:26.541" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:28:26.541" starttime="20170918 10:28:26.540" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:26.541" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:28:26.541" starttime="20170918 10:28:25.451" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:26.541" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:28:26.541" starttime="20170918 10:28:25.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:28:26.542" starttime="20170918 10:28:26.542" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:28:26.546" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:28:26.546" starttime="20170918 10:28:26.546" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:28:26.547" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:28:26.547" starttime="20170918 10:28:26.546" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:28:26.548" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:28:26.548" starttime="20170918 10:28:26.547" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:28:26.548" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:28:26.548" starttime="20170918 10:28:26.548" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:28:26.902" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:28:26.902" starttime="20170918 10:28:26.549" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:26.902" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:28:26.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:26.902" starttime="20170918 10:28:26.549" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:28:26.903" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:26.903" starttime="20170918 10:28:26.903" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:26.904" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:26.904" starttime="20170918 10:28:26.904" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:26.904" starttime="20170918 10:28:26.545" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:26.904" starttime="20170918 10:28:26.545" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:26.904" starttime="20170918 10:28:26.544" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:28:26.905" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:28:26.905" starttime="20170918 10:28:26.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:26.907" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:28:26.907" starttime="20170918 10:28:26.906" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:26.908" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:28:26.908" starttime="20170918 10:28:26.908" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:26.908" starttime="20170918 10:28:26.907" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:26.908" starttime="20170918 10:28:26.906" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:26.909" starttime="20170918 10:28:26.905" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:28:27.754" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:28:27.754" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:27.754" starttime="20170918 10:28:26.909" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:27.756" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:27.756" starttime="20170918 10:28:27.756" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:27.757" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:27.757" starttime="20170918 10:28:27.757" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:27.757" starttime="20170918 10:28:27.756" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:27.757" starttime="20170918 10:28:27.755" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:27.758" starttime="20170918 10:28:27.754" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:28:27.758" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:28:27.758" starttime="20170918 10:28:27.758" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:27.758" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:27.758" starttime="20170918 10:28:26.543" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:27.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:27.759" starttime="20170918 10:28:27.759" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:28:27.759" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:28:27.760" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:28:27.760" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:28:27.760" starttime="20170918 10:28:27.759" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:27.760" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:28:27.760" starttime="20170918 10:28:26.543" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:27.760" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:28:27.760" starttime="20170918 10:28:26.542" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:28:27.761" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:28:27.761" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:28:27.761" starttime="20170918 10:28:27.760" status="FAIL"></status>
</kw>
<status endtime="20170918 10:28:27.761" starttime="20170918 10:28:26.542" status="FAIL"></status>
</kw>
<status endtime="20170918 10:28:27.761" starttime="20170918 10:28:24.783" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:28:37.767" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:28:37.768" starttime="20170918 10:28:37.767" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:28:37.768" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:28:37.768" starttime="20170918 10:28:37.768" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:28:37.769" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:28:37.769" starttime="20170918 10:28:37.768" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:28:37.769" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:28:37.769" starttime="20170918 10:28:37.769" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:28:38.196" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:28:38.196" starttime="20170918 10:28:37.770" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:38.196" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:28:38.196" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:38.196" starttime="20170918 10:28:37.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:28:38.197" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:38.197" starttime="20170918 10:28:38.196" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:38.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:38.198" starttime="20170918 10:28:38.197" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:38.198" starttime="20170918 10:28:37.766" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:38.198" starttime="20170918 10:28:37.766" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:38.198" starttime="20170918 10:28:37.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:28:38.199" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:28:38.199" starttime="20170918 10:28:38.198" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:38.201" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:38.201" starttime="20170918 10:28:38.200" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:38.202" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:38.202" starttime="20170918 10:28:38.201" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:38.202" starttime="20170918 10:28:38.201" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:38.202" starttime="20170918 10:28:38.199" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:38.202" starttime="20170918 10:28:38.199" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:28:38.784" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:28:38.784" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:38.784" starttime="20170918 10:28:38.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:38.786" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:38.786" starttime="20170918 10:28:38.785" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:38.787" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:38.788" starttime="20170918 10:28:38.787" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:38.788" starttime="20170918 10:28:38.786" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:38.788" starttime="20170918 10:28:38.785" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:38.788" starttime="20170918 10:28:38.784" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:28:38.788" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:28:38.788" starttime="20170918 10:28:38.788" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:38.789" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:38.789" starttime="20170918 10:28:37.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:38.789" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:38.789" starttime="20170918 10:28:38.789" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:28:38.790" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:28:38.790" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:28:38.790" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:28:38.790" starttime="20170918 10:28:38.789" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:38.790" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:28:38.790" starttime="20170918 10:28:37.763" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:38.791" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:28:38.791" starttime="20170918 10:28:37.763" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:28:38.791" starttime="20170918 10:28:38.791" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:38.791" starttime="20170918 10:28:37.763" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:28:38.795" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:28:38.795" starttime="20170918 10:28:38.794" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:28:38.796" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:28:38.796" starttime="20170918 10:28:38.796" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:28:38.797" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:28:38.797" starttime="20170918 10:28:38.796" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:28:38.797" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:28:38.797" starttime="20170918 10:28:38.797" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:28:39.241" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:28:39.241" starttime="20170918 10:28:38.798" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:39.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:28:39.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:39.241" starttime="20170918 10:28:38.798" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:28:39.242" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:39.242" starttime="20170918 10:28:39.241" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:39.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:39.242" starttime="20170918 10:28:39.242" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:39.242" starttime="20170918 10:28:38.794" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:39.243" starttime="20170918 10:28:38.793" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:39.243" starttime="20170918 10:28:38.793" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:28:39.243" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:28:39.243" starttime="20170918 10:28:39.243" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:39.249" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:39.249" starttime="20170918 10:28:39.245" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:39.250" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:39.250" starttime="20170918 10:28:39.249" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:39.250" starttime="20170918 10:28:39.249" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:39.250" starttime="20170918 10:28:39.244" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:39.250" starttime="20170918 10:28:39.244" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:28:39.973" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:28:39.973" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:39.973" starttime="20170918 10:28:39.250" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:39.975" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:39.975" starttime="20170918 10:28:39.975" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:39.976" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:39.976" starttime="20170918 10:28:39.976" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:39.976" starttime="20170918 10:28:39.975" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:39.976" starttime="20170918 10:28:39.974" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:39.976" starttime="20170918 10:28:39.974" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:28:39.977" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:28:39.977" starttime="20170918 10:28:39.977" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:39.977" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:39.977" starttime="20170918 10:28:38.792" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:39.978" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:39.978" starttime="20170918 10:28:39.977" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:28:39.979" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:28:39.979" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:28:39.979" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:28:39.979" starttime="20170918 10:28:39.978" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:39.979" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:28:39.979" starttime="20170918 10:28:38.792" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:39.980" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:28:39.980" starttime="20170918 10:28:38.791" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:28:39.980" starttime="20170918 10:28:39.980" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:28:39.984" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:28:39.985" starttime="20170918 10:28:39.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:28:39.985" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:28:39.985" starttime="20170918 10:28:39.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:28:39.986" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:28:39.986" starttime="20170918 10:28:39.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:28:39.987" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:28:39.987" starttime="20170918 10:28:39.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:28:40.536" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:28:40.536" starttime="20170918 10:28:39.987" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:40.536" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:28:40.536" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:40.536" starttime="20170918 10:28:39.987" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:28:40.537" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:40.537" starttime="20170918 10:28:40.537" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:40.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:40.538" starttime="20170918 10:28:40.537" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:40.538" starttime="20170918 10:28:39.983" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:40.538" starttime="20170918 10:28:39.983" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:40.538" starttime="20170918 10:28:39.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:28:40.539" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:28:40.539" starttime="20170918 10:28:40.538" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:40.541" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:28:40.541" starttime="20170918 10:28:40.540" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:40.542" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:28:40.542" starttime="20170918 10:28:40.542" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:40.542" starttime="20170918 10:28:40.541" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:40.542" starttime="20170918 10:28:40.540" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:40.542" starttime="20170918 10:28:40.539" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:28:41.473" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:28:41.473" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:41.473" starttime="20170918 10:28:40.543" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:41.475" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:41.475" starttime="20170918 10:28:41.474" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:41.476" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:41.476" starttime="20170918 10:28:41.476" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:41.476" starttime="20170918 10:28:41.475" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:41.476" starttime="20170918 10:28:41.474" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:41.476" starttime="20170918 10:28:41.473" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:28:41.477" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:28:41.477" starttime="20170918 10:28:41.477" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:41.477" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:41.477" starttime="20170918 10:28:39.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:41.478" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:41.478" starttime="20170918 10:28:41.477" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:28:41.478" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:28:41.478" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:28:41.478" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:28:41.478" starttime="20170918 10:28:41.478" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:41.479" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:28:41.479" starttime="20170918 10:28:39.981" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:41.479" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:28:41.479" starttime="20170918 10:28:39.981" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:28:41.479" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:28:41.480" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:28:41.480" starttime="20170918 10:28:41.479" status="FAIL"></status>
</kw>
<status endtime="20170918 10:28:41.480" starttime="20170918 10:28:39.980" status="FAIL"></status>
</kw>
<status endtime="20170918 10:28:41.480" starttime="20170918 10:28:37.762" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:28:51.486" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:28:51.486" starttime="20170918 10:28:51.486" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:28:51.487" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:28:51.487" starttime="20170918 10:28:51.487" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:28:51.489" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:28:51.489" starttime="20170918 10:28:51.487" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:28:51.490" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:28:51.490" starttime="20170918 10:28:51.489" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:28:51.954" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:28:51.955" starttime="20170918 10:28:51.490" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:51.955" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:28:51.955" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:51.955" starttime="20170918 10:28:51.490" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:28:51.955" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:51.956" starttime="20170918 10:28:51.955" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:51.956" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:51.956" starttime="20170918 10:28:51.956" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:51.956" starttime="20170918 10:28:51.485" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:51.957" starttime="20170918 10:28:51.485" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:51.957" starttime="20170918 10:28:51.483" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:28:51.957" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:28:51.957" starttime="20170918 10:28:51.957" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:51.959" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:51.959" starttime="20170918 10:28:51.959" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:51.960" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:51.960" starttime="20170918 10:28:51.960" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:51.961" starttime="20170918 10:28:51.960" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:51.961" starttime="20170918 10:28:51.958" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:51.961" starttime="20170918 10:28:51.958" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:28:52.379" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:28:52.380" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:52.380" starttime="20170918 10:28:51.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:52.382" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:52.382" starttime="20170918 10:28:52.381" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:52.383" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:52.383" starttime="20170918 10:28:52.383" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:52.383" starttime="20170918 10:28:52.382" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:52.383" starttime="20170918 10:28:52.381" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:52.384" starttime="20170918 10:28:52.380" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:28:52.384" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:28:52.384" starttime="20170918 10:28:52.384" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:52.384" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:52.384" starttime="20170918 10:28:51.483" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:52.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:52.385" starttime="20170918 10:28:52.385" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:28:52.386" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:28:52.386" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:28:52.386" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:28:52.386" starttime="20170918 10:28:52.385" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:52.386" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:28:52.386" starttime="20170918 10:28:51.482" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:52.386" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:28:52.386" starttime="20170918 10:28:51.482" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:28:52.387" starttime="20170918 10:28:52.387" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:52.387" starttime="20170918 10:28:51.481" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:28:52.391" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:28:52.391" starttime="20170918 10:28:52.390" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:28:52.392" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:28:52.392" starttime="20170918 10:28:52.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:28:52.392" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:28:52.392" starttime="20170918 10:28:52.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:28:52.393" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:28:52.393" starttime="20170918 10:28:52.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:28:52.709" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:28:52.709" starttime="20170918 10:28:52.394" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:52.709" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:28:52.709" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:52.709" starttime="20170918 10:28:52.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:28:52.710" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:52.710" starttime="20170918 10:28:52.710" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:52.711" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:52.711" starttime="20170918 10:28:52.711" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:52.711" starttime="20170918 10:28:52.390" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:52.711" starttime="20170918 10:28:52.389" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:52.712" starttime="20170918 10:28:52.389" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:28:52.713" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:28:52.713" starttime="20170918 10:28:52.712" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:52.715" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:52.715" starttime="20170918 10:28:52.714" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:52.716" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:28:52.716" starttime="20170918 10:28:52.716" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:52.717" starttime="20170918 10:28:52.716" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:52.717" starttime="20170918 10:28:52.714" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:52.717" starttime="20170918 10:28:52.713" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:28:53.251" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:28:53.251" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:53.251" starttime="20170918 10:28:52.717" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:53.253" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:53.253" starttime="20170918 10:28:53.253" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:53.254" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:53.255" starttime="20170918 10:28:53.254" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:53.255" starttime="20170918 10:28:53.254" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:53.255" starttime="20170918 10:28:53.252" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:53.255" starttime="20170918 10:28:53.252" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:28:53.255" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:28:53.255" starttime="20170918 10:28:53.255" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:53.256" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:53.256" starttime="20170918 10:28:52.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:53.256" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:53.256" starttime="20170918 10:28:53.256" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:28:53.257" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:28:53.257" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:28:53.257" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:28:53.257" starttime="20170918 10:28:53.256" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:53.257" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:28:53.257" starttime="20170918 10:28:52.388" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:53.258" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:28:53.258" starttime="20170918 10:28:52.387" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:28:53.258" starttime="20170918 10:28:53.258" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:28:53.262" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:28:53.263" starttime="20170918 10:28:53.262" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:28:53.263" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:28:53.263" starttime="20170918 10:28:53.263" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:28:53.264" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:28:53.264" starttime="20170918 10:28:53.263" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:28:53.264" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:28:53.264" starttime="20170918 10:28:53.264" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:28:53.598" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:28:53.598" starttime="20170918 10:28:53.265" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:53.598" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:28:53.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:53.598" starttime="20170918 10:28:53.265" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:28:53.599" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:53.599" starttime="20170918 10:28:53.599" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:53.600" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:53.600" starttime="20170918 10:28:53.599" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:53.600" starttime="20170918 10:28:53.261" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:53.600" starttime="20170918 10:28:53.261" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:53.600" starttime="20170918 10:28:53.260" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:28:53.601" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:28:53.601" starttime="20170918 10:28:53.601" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:53.603" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:28:53.603" starttime="20170918 10:28:53.602" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:53.604" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:28:53.604" starttime="20170918 10:28:53.604" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:53.604" starttime="20170918 10:28:53.603" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:53.604" starttime="20170918 10:28:53.602" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:53.604" starttime="20170918 10:28:53.601" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:28:54.556" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:28:54.557" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:54.557" starttime="20170918 10:28:53.605" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:28:54.559" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:54.559" starttime="20170918 10:28:54.558" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:28:54.560" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:28:54.560" starttime="20170918 10:28:54.560" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:54.560" starttime="20170918 10:28:54.559" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:54.560" starttime="20170918 10:28:54.558" status="PASS"></status>
</kw>
<status endtime="20170918 10:28:54.560" starttime="20170918 10:28:54.557" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:28:54.561" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:28:54.561" starttime="20170918 10:28:54.561" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:54.561" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:28:54.561" starttime="20170918 10:28:53.260" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:28:54.562" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:28:54.562" starttime="20170918 10:28:54.561" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:28:54.562" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:28:54.562" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:28:54.562" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:28:54.562" starttime="20170918 10:28:54.562" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:54.563" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:28:54.563" starttime="20170918 10:28:53.259" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:28:54.563" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:28:54.563" starttime="20170918 10:28:53.259" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:28:54.564" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:28:54.564" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:28:54.564" starttime="20170918 10:28:54.563" status="FAIL"></status>
</kw>
<status endtime="20170918 10:28:54.564" starttime="20170918 10:28:53.258" status="FAIL"></status>
</kw>
<status endtime="20170918 10:28:54.564" starttime="20170918 10:28:51.481" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:29:04.570" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:29:04.570" starttime="20170918 10:29:04.570" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:29:04.571" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:29:04.571" starttime="20170918 10:29:04.571" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:29:04.571" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:29:04.572" starttime="20170918 10:29:04.571" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:29:04.572" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:29:04.572" starttime="20170918 10:29:04.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:29:04.937" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:29:04.938" starttime="20170918 10:29:04.573" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:04.938" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:29:04.938" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:04.938" starttime="20170918 10:29:04.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:29:04.939" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:04.939" starttime="20170918 10:29:04.938" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:04.939" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:04.939" starttime="20170918 10:29:04.939" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:04.940" starttime="20170918 10:29:04.569" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:04.940" starttime="20170918 10:29:04.568" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:04.940" starttime="20170918 10:29:04.567" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:29:04.940" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:29:04.940" starttime="20170918 10:29:04.940" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:04.942" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:04.943" starttime="20170918 10:29:04.942" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:04.943" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:04.943" starttime="20170918 10:29:04.943" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:04.944" starttime="20170918 10:29:04.943" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:04.944" starttime="20170918 10:29:04.941" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:04.944" starttime="20170918 10:29:04.941" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:29:05.670" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:29:05.670" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:05.670" starttime="20170918 10:29:04.944" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:05.672" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:05.672" starttime="20170918 10:29:05.671" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:05.673" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:05.673" starttime="20170918 10:29:05.673" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:05.673" starttime="20170918 10:29:05.672" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:05.674" starttime="20170918 10:29:05.671" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:05.674" starttime="20170918 10:29:05.670" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:29:05.674" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:29:05.674" starttime="20170918 10:29:05.674" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:05.674" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:05.674" starttime="20170918 10:29:04.567" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:05.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:05.675" starttime="20170918 10:29:05.675" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:29:05.676" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:29:05.676" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:29:05.676" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:29:05.676" starttime="20170918 10:29:05.675" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:05.676" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:29:05.676" starttime="20170918 10:29:04.566" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:05.676" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:29:05.676" starttime="20170918 10:29:04.566" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:29:05.677" starttime="20170918 10:29:05.677" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:05.677" starttime="20170918 10:29:04.565" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:29:05.681" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:29:05.681" starttime="20170918 10:29:05.680" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:29:05.682" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:29:05.682" starttime="20170918 10:29:05.681" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:29:05.682" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:29:05.682" starttime="20170918 10:29:05.682" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:29:05.683" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:29:05.683" starttime="20170918 10:29:05.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:29:06.082" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:29:06.082" starttime="20170918 10:29:05.684" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:06.082" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:29:06.082" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:06.082" starttime="20170918 10:29:05.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:29:06.083" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:06.083" starttime="20170918 10:29:06.083" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:06.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:06.084" starttime="20170918 10:29:06.083" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:06.084" starttime="20170918 10:29:05.680" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:06.084" starttime="20170918 10:29:05.679" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:06.084" starttime="20170918 10:29:05.679" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:29:06.085" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:29:06.085" starttime="20170918 10:29:06.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:06.087" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:06.087" starttime="20170918 10:29:06.086" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:06.088" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:06.088" starttime="20170918 10:29:06.088" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:06.088" starttime="20170918 10:29:06.087" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:06.088" starttime="20170918 10:29:06.085" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:06.089" starttime="20170918 10:29:06.085" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:29:06.609" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:29:06.609" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:06.609" starttime="20170918 10:29:06.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:06.611" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:06.612" starttime="20170918 10:29:06.611" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:06.612" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:06.613" starttime="20170918 10:29:06.612" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:06.613" starttime="20170918 10:29:06.612" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:06.613" starttime="20170918 10:29:06.610" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:06.613" starttime="20170918 10:29:06.610" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:29:06.613" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:29:06.613" starttime="20170918 10:29:06.613" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:06.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:06.614" starttime="20170918 10:29:05.678" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:06.614" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:06.614" starttime="20170918 10:29:06.614" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:29:06.615" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:29:06.615" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:29:06.615" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:29:06.615" starttime="20170918 10:29:06.615" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:06.615" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:29:06.615" starttime="20170918 10:29:05.678" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:06.616" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:29:06.616" starttime="20170918 10:29:05.677" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:29:06.616" starttime="20170918 10:29:06.616" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:29:06.620" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:29:06.621" starttime="20170918 10:29:06.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:29:06.621" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:29:06.621" starttime="20170918 10:29:06.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:29:06.622" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:29:06.622" starttime="20170918 10:29:06.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:29:06.622" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:29:06.622" starttime="20170918 10:29:06.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:29:07.032" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:29:07.032" starttime="20170918 10:29:06.623" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:07.032" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:29:07.032" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:07.032" starttime="20170918 10:29:06.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:29:07.033" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:07.033" starttime="20170918 10:29:07.033" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:07.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:07.034" starttime="20170918 10:29:07.033" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:07.034" starttime="20170918 10:29:06.619" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:07.034" starttime="20170918 10:29:06.619" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:07.034" starttime="20170918 10:29:06.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:29:07.035" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:29:07.035" starttime="20170918 10:29:07.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:07.037" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:29:07.037" starttime="20170918 10:29:07.036" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:07.038" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:29:07.038" starttime="20170918 10:29:07.038" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:07.038" starttime="20170918 10:29:07.037" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:07.038" starttime="20170918 10:29:07.036" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:07.038" starttime="20170918 10:29:07.035" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:29:07.724" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:29:07.725" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:07.725" starttime="20170918 10:29:07.039" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:07.727" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:07.727" starttime="20170918 10:29:07.726" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:07.728" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:07.728" starttime="20170918 10:29:07.727" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:07.728" starttime="20170918 10:29:07.727" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:07.728" starttime="20170918 10:29:07.725" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:07.728" starttime="20170918 10:29:07.725" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:29:07.728" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:29:07.729" starttime="20170918 10:29:07.728" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:07.729" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:07.729" starttime="20170918 10:29:06.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:07.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:07.729" starttime="20170918 10:29:07.729" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:29:07.730" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:29:07.730" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:29:07.730" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:29:07.730" starttime="20170918 10:29:07.730" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:07.731" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:29:07.731" starttime="20170918 10:29:06.617" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:07.731" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:29:07.731" starttime="20170918 10:29:06.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:29:07.731" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:29:07.731" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:29:07.732" starttime="20170918 10:29:07.731" status="FAIL"></status>
</kw>
<status endtime="20170918 10:29:07.732" starttime="20170918 10:29:06.616" status="FAIL"></status>
</kw>
<status endtime="20170918 10:29:07.732" starttime="20170918 10:29:04.565" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:29:17.738" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:29:17.738" starttime="20170918 10:29:17.738" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:29:17.739" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:29:17.739" starttime="20170918 10:29:17.739" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:29:17.740" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:29:17.740" starttime="20170918 10:29:17.739" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:29:17.740" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:29:17.740" starttime="20170918 10:29:17.740" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:29:18.188" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:29:18.188" starttime="20170918 10:29:17.741" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:18.188" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:29:18.189" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:18.189" starttime="20170918 10:29:17.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:29:18.189" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:18.189" starttime="20170918 10:29:18.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:18.190" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:18.190" starttime="20170918 10:29:18.190" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:18.190" starttime="20170918 10:29:17.737" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:18.190" starttime="20170918 10:29:17.736" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:18.190" starttime="20170918 10:29:17.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:29:18.191" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:29:18.191" starttime="20170918 10:29:18.191" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:18.193" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:18.193" starttime="20170918 10:29:18.192" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:18.194" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:18.194" starttime="20170918 10:29:18.194" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:18.194" starttime="20170918 10:29:18.193" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:18.194" starttime="20170918 10:29:18.192" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:18.195" starttime="20170918 10:29:18.191" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:29:18.857" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:29:18.857" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:18.857" starttime="20170918 10:29:18.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:18.859" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:18.859" starttime="20170918 10:29:18.858" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:18.860" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:18.861" starttime="20170918 10:29:18.860" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:18.861" starttime="20170918 10:29:18.860" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:18.861" starttime="20170918 10:29:18.858" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:18.861" starttime="20170918 10:29:18.857" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:29:18.861" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:29:18.861" starttime="20170918 10:29:18.861" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:18.862" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:18.862" starttime="20170918 10:29:17.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:18.862" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:18.862" starttime="20170918 10:29:18.862" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:29:18.863" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:29:18.863" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:29:18.863" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:29:18.863" starttime="20170918 10:29:18.862" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:18.863" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:29:18.863" starttime="20170918 10:29:17.734" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:18.864" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:29:18.864" starttime="20170918 10:29:17.734" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:29:18.864" starttime="20170918 10:29:18.864" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:18.864" starttime="20170918 10:29:17.733" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:29:18.868" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:29:18.868" starttime="20170918 10:29:18.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:29:18.869" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:29:18.869" starttime="20170918 10:29:18.868" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:29:18.869" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:29:18.869" starttime="20170918 10:29:18.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:29:18.870" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:29:18.870" starttime="20170918 10:29:18.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:29:19.222" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:29:19.222" starttime="20170918 10:29:18.871" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:19.222" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:29:19.222" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:19.222" starttime="20170918 10:29:18.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:29:19.223" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:19.223" starttime="20170918 10:29:19.223" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:19.224" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:19.224" starttime="20170918 10:29:19.223" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:19.224" starttime="20170918 10:29:18.867" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:19.224" starttime="20170918 10:29:18.866" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:19.224" starttime="20170918 10:29:18.866" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:29:19.225" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:29:19.225" starttime="20170918 10:29:19.224" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:19.230" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:19.230" starttime="20170918 10:29:19.226" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:19.231" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:19.231" starttime="20170918 10:29:19.231" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:19.231" starttime="20170918 10:29:19.230" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:19.231" starttime="20170918 10:29:19.226" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:19.232" starttime="20170918 10:29:19.225" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:29:20.040" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:29:20.040" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:20.040" starttime="20170918 10:29:19.232" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:20.042" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:20.042" starttime="20170918 10:29:20.042" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:20.043" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:20.043" starttime="20170918 10:29:20.043" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:20.043" starttime="20170918 10:29:20.042" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:20.043" starttime="20170918 10:29:20.041" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:20.044" starttime="20170918 10:29:20.041" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:29:20.044" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:29:20.044" starttime="20170918 10:29:20.044" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:20.044" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:20.044" starttime="20170918 10:29:18.865" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:20.045" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:20.045" starttime="20170918 10:29:20.044" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:29:20.045" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:29:20.045" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:29:20.046" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:29:20.046" starttime="20170918 10:29:20.045" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:20.046" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:29:20.046" starttime="20170918 10:29:18.865" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:20.046" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:29:20.046" starttime="20170918 10:29:18.864" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:29:20.047" starttime="20170918 10:29:20.047" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:29:20.052" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:29:20.053" starttime="20170918 10:29:20.052" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:29:20.054" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:29:20.054" starttime="20170918 10:29:20.053" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:29:20.054" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:29:20.055" starttime="20170918 10:29:20.054" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:29:20.056" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:29:20.056" starttime="20170918 10:29:20.055" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:29:20.373" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:29:20.373" starttime="20170918 10:29:20.057" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:20.373" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:29:20.374" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:20.374" starttime="20170918 10:29:20.056" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:29:20.375" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:20.375" starttime="20170918 10:29:20.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:20.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:20.376" starttime="20170918 10:29:20.375" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:20.376" starttime="20170918 10:29:20.051" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:20.376" starttime="20170918 10:29:20.050" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:20.376" starttime="20170918 10:29:20.049" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:29:20.377" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:29:20.377" starttime="20170918 10:29:20.377" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:20.380" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:29:20.380" starttime="20170918 10:29:20.379" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:20.380" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:29:20.381" starttime="20170918 10:29:20.380" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:20.381" starttime="20170918 10:29:20.380" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:20.381" starttime="20170918 10:29:20.378" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:20.381" starttime="20170918 10:29:20.378" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:29:21.341" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:29:21.341" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:21.342" starttime="20170918 10:29:20.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:21.343" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:21.344" starttime="20170918 10:29:21.343" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:21.345" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:21.345" starttime="20170918 10:29:21.344" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:21.345" starttime="20170918 10:29:21.344" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:21.345" starttime="20170918 10:29:21.342" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:21.345" starttime="20170918 10:29:21.342" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:29:21.345" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:29:21.346" starttime="20170918 10:29:21.345" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:21.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:21.346" starttime="20170918 10:29:20.048" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:21.346" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:21.346" starttime="20170918 10:29:21.346" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:29:21.347" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:29:21.347" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:29:21.347" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:29:21.347" starttime="20170918 10:29:21.347" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:21.347" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:29:21.347" starttime="20170918 10:29:20.048" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:21.348" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:29:21.348" starttime="20170918 10:29:20.047" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:29:21.348" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:29:21.349" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:29:21.349" starttime="20170918 10:29:21.348" status="FAIL"></status>
</kw>
<status endtime="20170918 10:29:21.349" starttime="20170918 10:29:20.047" status="FAIL"></status>
</kw>
<status endtime="20170918 10:29:21.349" starttime="20170918 10:29:17.733" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:29:31.355" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:29:31.355" starttime="20170918 10:29:31.355" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:29:31.356" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:29:31.356" starttime="20170918 10:29:31.356" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:29:31.357" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:29:31.357" starttime="20170918 10:29:31.356" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:29:31.357" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:29:31.357" starttime="20170918 10:29:31.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:29:31.571" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:29:31.571" starttime="20170918 10:29:31.358" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:31.571" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:29:31.571" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:31.571" starttime="20170918 10:29:31.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:29:31.572" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:31.572" starttime="20170918 10:29:31.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:31.573" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:31.573" starttime="20170918 10:29:31.572" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.573" starttime="20170918 10:29:31.354" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.573" starttime="20170918 10:29:31.353" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.573" starttime="20170918 10:29:31.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:29:31.574" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:29:31.574" starttime="20170918 10:29:31.573" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:31.577" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:31.577" starttime="20170918 10:29:31.576" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:31.579" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:31.579" starttime="20170918 10:29:31.578" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.579" starttime="20170918 10:29:31.577" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.579" starttime="20170918 10:29:31.575" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.579" starttime="20170918 10:29:31.574" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:29:31.642" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:29:31.642" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:31.642" starttime="20170918 10:29:31.579" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:31.644" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:31.644" starttime="20170918 10:29:31.644" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:31.645" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:31.646" starttime="20170918 10:29:31.645" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.646" starttime="20170918 10:29:31.645" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.646" starttime="20170918 10:29:31.643" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.646" starttime="20170918 10:29:31.642" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:29:31.646" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:29:31.646" starttime="20170918 10:29:31.646" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:31.647" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:31.647" starttime="20170918 10:29:31.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:31.647" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:31.647" starttime="20170918 10:29:31.647" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:29:31.648" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:29:31.648" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:29:31.648" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:29:31.648" starttime="20170918 10:29:31.647" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:31.648" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:29:31.648" starttime="20170918 10:29:31.351" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:31.649" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:29:31.649" starttime="20170918 10:29:31.351" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:29:31.649" starttime="20170918 10:29:31.649" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.649" starttime="20170918 10:29:31.350" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:29:31.653" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:29:31.653" starttime="20170918 10:29:31.653" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:29:31.654" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:29:31.654" starttime="20170918 10:29:31.653" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:29:31.654" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:29:31.654" starttime="20170918 10:29:31.654" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:29:31.655" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:29:31.655" starttime="20170918 10:29:31.655" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:29:31.862" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:29:31.862" starttime="20170918 10:29:31.656" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:31.862" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:29:31.862" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:31.862" starttime="20170918 10:29:31.655" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:29:31.863" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:31.863" starttime="20170918 10:29:31.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:31.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:31.864" starttime="20170918 10:29:31.864" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.864" starttime="20170918 10:29:31.652" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.864" starttime="20170918 10:29:31.652" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.864" starttime="20170918 10:29:31.651" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:29:31.865" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:29:31.865" starttime="20170918 10:29:31.865" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:31.867" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:31.867" starttime="20170918 10:29:31.866" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:31.869" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:31.869" starttime="20170918 10:29:31.868" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.869" starttime="20170918 10:29:31.868" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.869" starttime="20170918 10:29:31.866" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.869" starttime="20170918 10:29:31.865" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:29:31.988" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:29:31.989" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:31.989" starttime="20170918 10:29:31.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:31.991" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:31.991" starttime="20170918 10:29:31.990" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:31.991" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:31.992" starttime="20170918 10:29:31.991" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.992" starttime="20170918 10:29:31.991" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.992" starttime="20170918 10:29:31.990" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:31.992" starttime="20170918 10:29:31.989" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:29:31.992" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:29:31.992" starttime="20170918 10:29:31.992" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:31.993" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:31.993" starttime="20170918 10:29:31.650" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:31.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:31.993" starttime="20170918 10:29:31.993" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:29:31.994" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:29:31.994" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:29:31.994" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:29:31.994" starttime="20170918 10:29:31.994" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:31.994" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:29:31.994" starttime="20170918 10:29:31.650" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:31.995" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:29:31.995" starttime="20170918 10:29:31.649" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:29:31.995" starttime="20170918 10:29:31.995" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:29:31.999" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:29:32.000" starttime="20170918 10:29:31.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:29:32.000" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:29:32.000" starttime="20170918 10:29:32.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:29:32.001" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:29:32.001" starttime="20170918 10:29:32.001" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:29:32.002" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:29:32.002" starttime="20170918 10:29:32.001" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:29:32.202" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:29:32.202" starttime="20170918 10:29:32.002" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:32.202" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:29:32.202" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:32.202" starttime="20170918 10:29:32.002" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:29:32.203" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:32.203" starttime="20170918 10:29:32.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:32.203" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:32.204" starttime="20170918 10:29:32.203" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:32.204" starttime="20170918 10:29:31.998" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:32.204" starttime="20170918 10:29:31.998" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:32.204" starttime="20170918 10:29:31.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:29:32.204" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:29:32.205" starttime="20170918 10:29:32.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:32.207" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:29:32.207" starttime="20170918 10:29:32.206" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:32.207" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:29:32.208" starttime="20170918 10:29:32.207" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:32.208" starttime="20170918 10:29:32.207" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:32.208" starttime="20170918 10:29:32.205" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:32.208" starttime="20170918 10:29:32.205" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:29:32.319" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:29:32.320" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:32.320" starttime="20170918 10:29:32.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:32.322" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:32.322" starttime="20170918 10:29:32.321" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:32.322" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:32.323" starttime="20170918 10:29:32.322" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:32.323" starttime="20170918 10:29:32.322" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:32.323" starttime="20170918 10:29:32.321" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:32.323" starttime="20170918 10:29:32.320" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:29:32.323" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:29:32.323" starttime="20170918 10:29:32.323" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:32.324" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:32.324" starttime="20170918 10:29:31.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:32.324" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:32.324" starttime="20170918 10:29:32.324" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:29:32.325" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:29:32.325" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:29:32.325" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:29:32.325" starttime="20170918 10:29:32.325" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:32.325" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:29:32.325" starttime="20170918 10:29:31.996" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:32.326" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:29:32.326" starttime="20170918 10:29:31.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:29:32.326" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:29:32.326" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:29:32.326" starttime="20170918 10:29:32.326" status="FAIL"></status>
</kw>
<status endtime="20170918 10:29:32.327" starttime="20170918 10:29:31.995" status="FAIL"></status>
</kw>
<status endtime="20170918 10:29:32.327" starttime="20170918 10:29:31.350" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:29:42.333" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:29:42.333" starttime="20170918 10:29:42.332" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:29:42.334" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:29:42.334" starttime="20170918 10:29:42.333" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:29:42.334" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:29:42.334" starttime="20170918 10:29:42.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:29:42.335" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:29:42.335" starttime="20170918 10:29:42.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:29:43.153" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:29:43.153" starttime="20170918 10:29:42.336" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:43.153" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:29:43.154" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:43.154" starttime="20170918 10:29:42.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:29:43.154" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:43.154" starttime="20170918 10:29:43.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:43.155" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:43.155" starttime="20170918 10:29:43.155" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:43.155" starttime="20170918 10:29:42.332" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:43.155" starttime="20170918 10:29:42.331" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:43.155" starttime="20170918 10:29:42.330" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:29:43.156" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:29:43.156" starttime="20170918 10:29:43.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:43.158" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:43.158" starttime="20170918 10:29:43.157" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:43.159" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:43.159" starttime="20170918 10:29:43.159" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:43.159" starttime="20170918 10:29:43.158" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:43.160" starttime="20170918 10:29:43.157" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:43.160" starttime="20170918 10:29:43.156" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:29:46.498" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:29:46.498" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:46.498" starttime="20170918 10:29:43.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:46.502" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:46.502" starttime="20170918 10:29:46.500" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:46.503" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:46.503" starttime="20170918 10:29:46.503" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:46.503" starttime="20170918 10:29:46.502" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:46.503" starttime="20170918 10:29:46.500" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:46.504" starttime="20170918 10:29:46.499" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:29:46.504" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:29:46.504" starttime="20170918 10:29:46.504" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:46.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:46.504" starttime="20170918 10:29:42.329" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:46.505" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:46.505" starttime="20170918 10:29:46.505" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:29:46.506" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:29:46.506" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:29:46.506" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:29:46.506" starttime="20170918 10:29:46.505" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:46.506" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:29:46.506" starttime="20170918 10:29:42.329" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:46.506" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:29:46.506" starttime="20170918 10:29:42.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:29:46.507" starttime="20170918 10:29:46.507" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:46.507" starttime="20170918 10:29:42.328" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:29:46.511" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:29:46.511" starttime="20170918 10:29:46.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:29:46.512" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:29:46.512" starttime="20170918 10:29:46.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:29:46.513" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:29:46.513" starttime="20170918 10:29:46.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:29:46.513" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:29:46.513" starttime="20170918 10:29:46.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:29:47.232" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:29:47.232" starttime="20170918 10:29:46.514" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:47.232" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:29:47.232" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:47.232" starttime="20170918 10:29:46.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:29:47.233" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:47.233" starttime="20170918 10:29:47.233" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:47.234" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:47.234" starttime="20170918 10:29:47.233" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.234" starttime="20170918 10:29:46.510" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.234" starttime="20170918 10:29:46.510" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.234" starttime="20170918 10:29:46.509" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:29:47.235" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:29:47.235" starttime="20170918 10:29:47.234" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:47.237" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:47.237" starttime="20170918 10:29:47.236" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:47.238" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:47.238" starttime="20170918 10:29:47.238" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.238" starttime="20170918 10:29:47.237" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.239" starttime="20170918 10:29:47.235" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.239" starttime="20170918 10:29:47.235" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:29:47.347" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:29:47.347" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:47.347" starttime="20170918 10:29:47.239" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:47.349" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:47.349" starttime="20170918 10:29:47.349" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:47.350" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:47.350" starttime="20170918 10:29:47.350" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.350" starttime="20170918 10:29:47.349" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.350" starttime="20170918 10:29:47.348" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.350" starttime="20170918 10:29:47.348" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:29:47.351" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:29:47.351" starttime="20170918 10:29:47.351" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:47.351" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:47.351" starttime="20170918 10:29:46.508" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:47.352" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:47.352" starttime="20170918 10:29:47.351" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:29:47.352" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:29:47.352" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:29:47.353" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:29:47.353" starttime="20170918 10:29:47.352" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:47.353" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:29:47.353" starttime="20170918 10:29:46.508" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:47.353" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:29:47.353" starttime="20170918 10:29:46.507" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:29:47.354" starttime="20170918 10:29:47.353" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:29:47.358" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:29:47.358" starttime="20170918 10:29:47.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:29:47.359" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:29:47.359" starttime="20170918 10:29:47.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:29:47.359" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:29:47.359" starttime="20170918 10:29:47.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:29:47.360" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:29:47.360" starttime="20170918 10:29:47.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:29:47.645" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:29:47.645" starttime="20170918 10:29:47.361" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:47.645" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:29:47.645" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:47.645" starttime="20170918 10:29:47.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:29:47.646" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:47.646" starttime="20170918 10:29:47.646" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:47.647" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:47.647" starttime="20170918 10:29:47.647" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.647" starttime="20170918 10:29:47.357" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.647" starttime="20170918 10:29:47.356" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.647" starttime="20170918 10:29:47.356" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:29:47.648" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:29:47.648" starttime="20170918 10:29:47.648" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:47.650" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:29:47.650" starttime="20170918 10:29:47.649" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:47.651" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:29:47.651" starttime="20170918 10:29:47.651" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.651" starttime="20170918 10:29:47.650" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.651" starttime="20170918 10:29:47.649" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.651" starttime="20170918 10:29:47.648" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:29:47.969" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:29:47.969" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:47.969" starttime="20170918 10:29:47.652" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:47.971" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:47.971" starttime="20170918 10:29:47.970" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:47.972" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:29:47.972" starttime="20170918 10:29:47.972" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.972" starttime="20170918 10:29:47.971" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.972" starttime="20170918 10:29:47.970" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:47.972" starttime="20170918 10:29:47.969" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:29:47.973" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:29:47.973" starttime="20170918 10:29:47.973" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:47.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:47.973" starttime="20170918 10:29:47.355" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:47.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:47.974" starttime="20170918 10:29:47.973" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:29:47.974" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:29:47.974" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:29:47.974" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:29:47.974" starttime="20170918 10:29:47.974" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:47.975" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:29:47.975" starttime="20170918 10:29:47.355" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:47.975" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:29:47.975" starttime="20170918 10:29:47.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:29:47.975" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:29:47.976" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:29:47.976" starttime="20170918 10:29:47.975" status="FAIL"></status>
</kw>
<status endtime="20170918 10:29:47.976" starttime="20170918 10:29:47.354" status="FAIL"></status>
</kw>
<status endtime="20170918 10:29:47.976" starttime="20170918 10:29:42.327" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:29:57.982" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:29:57.982" starttime="20170918 10:29:57.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:29:57.983" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:29:57.983" starttime="20170918 10:29:57.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:29:57.984" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:29:57.984" starttime="20170918 10:29:57.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:29:57.984" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:29:57.984" starttime="20170918 10:29:57.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:29:59.334" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:29:59.334" starttime="20170918 10:29:57.985" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:29:59.334" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:29:59.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:29:59.334" starttime="20170918 10:29:57.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:29:59.335" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:59.335" starttime="20170918 10:29:59.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:29:59.336" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:29:59.336" starttime="20170918 10:29:59.335" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:59.336" starttime="20170918 10:29:57.981" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:59.336" starttime="20170918 10:29:57.980" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:59.336" starttime="20170918 10:29:57.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:29:59.337" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:29:59.337" starttime="20170918 10:29:59.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:29:59.339" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:59.339" starttime="20170918 10:29:59.338" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:29:59.340" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:29:59.340" starttime="20170918 10:29:59.340" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:59.340" starttime="20170918 10:29:59.339" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:59.340" starttime="20170918 10:29:59.338" status="PASS"></status>
</kw>
<status endtime="20170918 10:29:59.341" starttime="20170918 10:29:59.337" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:30:08.085" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:30:08.085" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:08.086" starttime="20170918 10:29:59.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:08.088" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:08.088" starttime="20170918 10:30:08.087" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:08.089" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:08.089" starttime="20170918 10:30:08.089" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:08.089" starttime="20170918 10:30:08.088" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:08.089" starttime="20170918 10:30:08.086" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:08.089" starttime="20170918 10:30:08.086" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:30:08.090" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:30:08.090" starttime="20170918 10:30:08.090" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:08.090" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:08.090" starttime="20170918 10:29:57.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:08.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:08.091" starttime="20170918 10:30:08.090" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:30:08.091" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:30:08.091" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:30:08.092" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170918 10:30:08.092" starttime="20170918 10:30:08.091" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:08.092" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170918 10:30:08.092" starttime="20170918 10:29:57.978" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:08.092" level="INFO">${power_state} = Off</msg>
<status endtime="20170918 10:30:08.092" starttime="20170918 10:29:57.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170918 10:30:08.093" level="FAIL">On != Off</msg>
<status endtime="20170918 10:30:08.093" starttime="20170918 10:30:08.092" status="FAIL"></status>
</kw>
<status endtime="20170918 10:30:08.093" starttime="20170918 10:29:57.977" status="FAIL"></status>
</kw>
<status endtime="20170918 10:30:08.093" starttime="20170918 10:29:57.977" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:30:18.099" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:30:18.099" starttime="20170918 10:30:18.098" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:30:18.100" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:30:18.100" starttime="20170918 10:30:18.099" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:30:18.100" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:30:18.100" starttime="20170918 10:30:18.100" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:30:18.101" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:30:18.101" starttime="20170918 10:30:18.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:30:18.575" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:30:18.576" starttime="20170918 10:30:18.102" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:18.576" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:30:18.576" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:18.576" starttime="20170918 10:30:18.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:30:18.577" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:18.577" starttime="20170918 10:30:18.577" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:18.578" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:18.578" starttime="20170918 10:30:18.577" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:18.578" starttime="20170918 10:30:18.098" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:18.578" starttime="20170918 10:30:18.097" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:18.579" starttime="20170918 10:30:18.097" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:30:18.580" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:30:18.580" starttime="20170918 10:30:18.579" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:18.583" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:18.583" starttime="20170918 10:30:18.582" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:18.584" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:18.584" starttime="20170918 10:30:18.584" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:18.584" starttime="20170918 10:30:18.583" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:18.584" starttime="20170918 10:30:18.581" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:18.585" starttime="20170918 10:30:18.580" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:30:19.296" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:30:19.296" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:19.297" starttime="20170918 10:30:18.585" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:19.298" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:19.298" starttime="20170918 10:30:19.298" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:19.299" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:19.299" starttime="20170918 10:30:19.299" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:19.300" starttime="20170918 10:30:19.298" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:19.300" starttime="20170918 10:30:19.297" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:19.300" starttime="20170918 10:30:19.297" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:30:19.300" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:30:19.300" starttime="20170918 10:30:19.300" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:19.300" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:19.300" starttime="20170918 10:30:18.096" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:19.301" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:19.301" starttime="20170918 10:30:19.301" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:30:19.302" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:30:19.302" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:30:19.302" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:30:19.302" starttime="20170918 10:30:19.302" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:19.302" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:30:19.302" starttime="20170918 10:30:18.095" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:19.303" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:30:19.303" starttime="20170918 10:30:18.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:30:19.303" starttime="20170918 10:30:19.303" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:19.303" starttime="20170918 10:30:18.094" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:30:19.308" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:30:19.308" starttime="20170918 10:30:19.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:30:19.309" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:30:19.309" starttime="20170918 10:30:19.309" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:30:19.310" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:30:19.310" starttime="20170918 10:30:19.309" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:30:19.311" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:30:19.311" starttime="20170918 10:30:19.310" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:30:19.676" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:30:19.676" starttime="20170918 10:30:19.311" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:19.677" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:30:19.677" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:19.677" starttime="20170918 10:30:19.311" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:30:19.677" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:19.677" starttime="20170918 10:30:19.677" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:19.678" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:19.678" starttime="20170918 10:30:19.678" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:19.678" starttime="20170918 10:30:19.307" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:19.678" starttime="20170918 10:30:19.306" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:19.678" starttime="20170918 10:30:19.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:30:19.679" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:30:19.679" starttime="20170918 10:30:19.679" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:19.681" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:19.681" starttime="20170918 10:30:19.681" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:19.682" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:19.682" starttime="20170918 10:30:19.682" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:19.682" starttime="20170918 10:30:19.681" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:19.683" starttime="20170918 10:30:19.680" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:19.683" starttime="20170918 10:30:19.680" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:30:20.503" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:30:20.503" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:20.503" starttime="20170918 10:30:19.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:20.505" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:20.505" starttime="20170918 10:30:20.504" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:20.506" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:20.506" starttime="20170918 10:30:20.506" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:20.506" starttime="20170918 10:30:20.505" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:20.506" starttime="20170918 10:30:20.504" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:20.506" starttime="20170918 10:30:20.503" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:30:20.507" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:30:20.507" starttime="20170918 10:30:20.506" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:20.507" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:20.507" starttime="20170918 10:30:19.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:20.508" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:20.508" starttime="20170918 10:30:20.507" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:30:20.508" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:30:20.508" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:30:20.508" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:30:20.508" starttime="20170918 10:30:20.508" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:20.509" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:30:20.509" starttime="20170918 10:30:19.304" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:20.509" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:30:20.509" starttime="20170918 10:30:19.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:30:20.510" starttime="20170918 10:30:20.509" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:30:20.514" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:30:20.514" starttime="20170918 10:30:20.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:30:20.515" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:30:20.515" starttime="20170918 10:30:20.515" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:30:20.516" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:30:20.516" starttime="20170918 10:30:20.515" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:30:20.516" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:30:20.516" starttime="20170918 10:30:20.516" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:30:20.919" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:30:20.919" starttime="20170918 10:30:20.517" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:20.920" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:30:20.920" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:20.920" starttime="20170918 10:30:20.516" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:30:20.920" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:20.920" starttime="20170918 10:30:20.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:20.921" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:20.921" starttime="20170918 10:30:20.921" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:20.921" starttime="20170918 10:30:20.513" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:20.921" starttime="20170918 10:30:20.513" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:20.921" starttime="20170918 10:30:20.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:30:20.922" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:30:20.922" starttime="20170918 10:30:20.922" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:20.924" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:30:20.924" starttime="20170918 10:30:20.923" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:20.925" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:30:20.925" starttime="20170918 10:30:20.925" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:20.925" starttime="20170918 10:30:20.924" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:20.925" starttime="20170918 10:30:20.923" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:20.926" starttime="20170918 10:30:20.922" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:30:21.420" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:30:21.420" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:21.420" starttime="20170918 10:30:20.926" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:21.422" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:21.422" starttime="20170918 10:30:21.422" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:21.423" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:21.423" starttime="20170918 10:30:21.423" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:21.423" starttime="20170918 10:30:21.422" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:21.423" starttime="20170918 10:30:21.421" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:21.423" starttime="20170918 10:30:21.421" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:30:21.424" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:30:21.424" starttime="20170918 10:30:21.424" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:21.424" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:21.424" starttime="20170918 10:30:20.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:21.425" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:21.425" starttime="20170918 10:30:21.424" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:30:21.426" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:30:21.426" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:30:21.426" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170918 10:30:21.426" starttime="20170918 10:30:21.425" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:21.426" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170918 10:30:21.426" starttime="20170918 10:30:20.511" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:21.426" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170918 10:30:21.426" starttime="20170918 10:30:20.510" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:30:21.427" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:30:21.427" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170918 10:30:21.427" starttime="20170918 10:30:21.427" status="FAIL"></status>
</kw>
<status endtime="20170918 10:30:21.427" starttime="20170918 10:30:20.510" status="FAIL"></status>
</kw>
<status endtime="20170918 10:30:21.427" starttime="20170918 10:30:18.094" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:30:31.432" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:30:31.433" starttime="20170918 10:30:31.432" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:30:31.434" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:30:31.434" starttime="20170918 10:30:31.433" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:30:31.434" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:30:31.434" starttime="20170918 10:30:31.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:30:31.435" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:30:31.435" starttime="20170918 10:30:31.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:30:31.939" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:30:31.939" starttime="20170918 10:30:31.436" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:31.939" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:30:31.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:31.939" starttime="20170918 10:30:31.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:30:31.940" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:31.940" starttime="20170918 10:30:31.940" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:31.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:31.941" starttime="20170918 10:30:31.940" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:31.941" starttime="20170918 10:30:31.432" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:31.941" starttime="20170918 10:30:31.431" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:31.941" starttime="20170918 10:30:31.431" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:30:31.942" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:30:31.942" starttime="20170918 10:30:31.941" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:31.944" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:31.944" starttime="20170918 10:30:31.943" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:31.945" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:31.945" starttime="20170918 10:30:31.944" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:31.945" starttime="20170918 10:30:31.944" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:31.945" starttime="20170918 10:30:31.942" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:31.945" starttime="20170918 10:30:31.942" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:30:32.600" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:30:32.600" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:32.600" starttime="20170918 10:30:31.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:32.602" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:32.602" starttime="20170918 10:30:32.601" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:32.603" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:32.603" starttime="20170918 10:30:32.603" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:32.603" starttime="20170918 10:30:32.602" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:32.604" starttime="20170918 10:30:32.601" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:32.604" starttime="20170918 10:30:32.600" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:30:32.604" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:30:32.604" starttime="20170918 10:30:32.604" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:32.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:32.604" starttime="20170918 10:30:31.430" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:32.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:32.605" starttime="20170918 10:30:32.605" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:30:32.606" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:30:32.606" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:30:32.606" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:30:32.606" starttime="20170918 10:30:32.605" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:32.606" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:30:32.606" starttime="20170918 10:30:31.429" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:32.607" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:30:32.607" starttime="20170918 10:30:31.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:30:32.607" starttime="20170918 10:30:32.607" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:32.607" starttime="20170918 10:30:31.428" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:30:32.611" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:30:32.612" starttime="20170918 10:30:32.611" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:30:32.612" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:30:32.612" starttime="20170918 10:30:32.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:30:32.613" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:30:32.613" starttime="20170918 10:30:32.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:30:32.614" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:30:32.614" starttime="20170918 10:30:32.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:30:33.120" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:30:33.120" starttime="20170918 10:30:32.614" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:33.120" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:30:33.120" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:33.120" starttime="20170918 10:30:32.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:30:33.121" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:33.121" starttime="20170918 10:30:33.121" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:33.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:33.122" starttime="20170918 10:30:33.121" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:33.122" starttime="20170918 10:30:32.610" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:33.122" starttime="20170918 10:30:32.610" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:33.122" starttime="20170918 10:30:32.609" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:30:33.123" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:30:33.123" starttime="20170918 10:30:33.122" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:33.125" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:33.125" starttime="20170918 10:30:33.124" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:33.126" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:33.126" starttime="20170918 10:30:33.126" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:33.126" starttime="20170918 10:30:33.125" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:33.126" starttime="20170918 10:30:33.124" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:33.126" starttime="20170918 10:30:33.123" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:30:33.788" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:30:33.788" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:33.788" starttime="20170918 10:30:33.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:33.790" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:33.790" starttime="20170918 10:30:33.789" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:33.791" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:33.791" starttime="20170918 10:30:33.791" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:33.791" starttime="20170918 10:30:33.790" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:33.791" starttime="20170918 10:30:33.789" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:33.791" starttime="20170918 10:30:33.788" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:30:33.792" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:30:33.792" starttime="20170918 10:30:33.792" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:33.792" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:33.792" starttime="20170918 10:30:32.608" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:33.793" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:33.793" starttime="20170918 10:30:33.792" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:30:33.793" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:30:33.793" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:30:33.793" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:30:33.793" starttime="20170918 10:30:33.793" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:33.794" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:30:33.794" starttime="20170918 10:30:32.608" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:33.794" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:30:33.794" starttime="20170918 10:30:32.608" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:30:33.795" starttime="20170918 10:30:33.794" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:30:33.799" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:30:33.800" starttime="20170918 10:30:33.799" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:30:33.800" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:30:33.800" starttime="20170918 10:30:33.800" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:30:33.801" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:30:33.801" starttime="20170918 10:30:33.801" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:30:33.802" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:30:33.802" starttime="20170918 10:30:33.801" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:30:34.212" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:30:34.212" starttime="20170918 10:30:33.802" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:34.212" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:30:34.212" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:34.213" starttime="20170918 10:30:33.802" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:30:34.213" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:34.213" starttime="20170918 10:30:34.213" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:34.214" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:34.214" starttime="20170918 10:30:34.214" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:34.214" starttime="20170918 10:30:33.798" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:34.214" starttime="20170918 10:30:33.798" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:34.214" starttime="20170918 10:30:33.797" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:30:34.215" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:30:34.215" starttime="20170918 10:30:34.215" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:34.217" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:30:34.217" starttime="20170918 10:30:34.216" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:34.218" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:30:34.218" starttime="20170918 10:30:34.218" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:34.218" starttime="20170918 10:30:34.217" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:34.218" starttime="20170918 10:30:34.216" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:34.219" starttime="20170918 10:30:34.215" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:30:34.943" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:30:34.943" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:34.943" starttime="20170918 10:30:34.219" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:34.945" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:34.945" starttime="20170918 10:30:34.944" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:34.946" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:34.946" starttime="20170918 10:30:34.946" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:34.946" starttime="20170918 10:30:34.945" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:34.946" starttime="20170918 10:30:34.944" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:34.946" starttime="20170918 10:30:34.943" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:30:34.947" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:30:34.947" starttime="20170918 10:30:34.947" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:34.947" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:34.947" starttime="20170918 10:30:33.796" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:34.948" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:34.948" starttime="20170918 10:30:34.947" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:30:34.948" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:30:34.948" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:30:34.948" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:30:34.948" starttime="20170918 10:30:34.948" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:34.949" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:30:34.949" starttime="20170918 10:30:33.796" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:34.949" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:30:34.949" starttime="20170918 10:30:33.795" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:30:34.949" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:30:34.950" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:30:34.950" starttime="20170918 10:30:34.949" status="FAIL"></status>
</kw>
<status endtime="20170918 10:30:34.950" starttime="20170918 10:30:33.795" status="FAIL"></status>
</kw>
<status endtime="20170918 10:30:34.950" starttime="20170918 10:30:31.428" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:30:44.955" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:30:44.956" starttime="20170918 10:30:44.955" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:30:44.956" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:30:44.956" starttime="20170918 10:30:44.956" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:30:44.957" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:30:44.957" starttime="20170918 10:30:44.957" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:30:44.958" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:30:44.958" starttime="20170918 10:30:44.957" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:30:45.145" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:30:45.145" starttime="20170918 10:30:44.958" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:45.145" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:30:45.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:45.145" starttime="20170918 10:30:44.958" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:30:45.146" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:45.146" starttime="20170918 10:30:45.145" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:45.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:45.147" starttime="20170918 10:30:45.146" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:45.147" starttime="20170918 10:30:44.954" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:45.147" starttime="20170918 10:30:44.954" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:45.147" starttime="20170918 10:30:44.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:30:45.147" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:30:45.147" starttime="20170918 10:30:45.147" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:45.150" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:45.150" starttime="20170918 10:30:45.149" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:45.151" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:45.151" starttime="20170918 10:30:45.150" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:45.151" starttime="20170918 10:30:45.150" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:45.151" starttime="20170918 10:30:45.148" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:45.151" starttime="20170918 10:30:45.148" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:30:46.020" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:30:46.020" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:46.020" starttime="20170918 10:30:45.151" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:46.023" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:46.023" starttime="20170918 10:30:46.022" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:46.024" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:46.024" starttime="20170918 10:30:46.024" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:46.024" starttime="20170918 10:30:46.023" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:46.024" starttime="20170918 10:30:46.021" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:46.025" starttime="20170918 10:30:46.021" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:30:46.025" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:30:46.025" starttime="20170918 10:30:46.025" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:46.025" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:46.025" starttime="20170918 10:30:44.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:46.026" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:46.026" starttime="20170918 10:30:46.026" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:30:46.026" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:30:46.027" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:30:46.027" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:30:46.027" starttime="20170918 10:30:46.026" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:46.027" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:30:46.027" starttime="20170918 10:30:44.952" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:46.027" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:30:46.027" starttime="20170918 10:30:44.952" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:30:46.028" starttime="20170918 10:30:46.028" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:46.028" starttime="20170918 10:30:44.951" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:30:46.032" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:30:46.033" starttime="20170918 10:30:46.031" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:30:46.033" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:30:46.033" starttime="20170918 10:30:46.033" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:30:46.034" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:30:46.034" starttime="20170918 10:30:46.033" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:30:46.034" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:30:46.034" starttime="20170918 10:30:46.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:30:46.462" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:30:46.462" starttime="20170918 10:30:46.035" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:46.462" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:30:46.462" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:46.462" starttime="20170918 10:30:46.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:30:46.463" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:46.463" starttime="20170918 10:30:46.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:46.463" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:46.464" starttime="20170918 10:30:46.463" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:46.464" starttime="20170918 10:30:46.031" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:46.464" starttime="20170918 10:30:46.030" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:46.464" starttime="20170918 10:30:46.030" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:30:46.464" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:30:46.464" starttime="20170918 10:30:46.464" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:46.467" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:46.467" starttime="20170918 10:30:46.466" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:46.467" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:46.468" starttime="20170918 10:30:46.467" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:46.468" starttime="20170918 10:30:46.467" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:46.468" starttime="20170918 10:30:46.465" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:46.468" starttime="20170918 10:30:46.465" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:30:46.970" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:30:46.970" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:46.971" starttime="20170918 10:30:46.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:46.973" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:46.973" starttime="20170918 10:30:46.972" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:46.973" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:46.974" starttime="20170918 10:30:46.973" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:46.974" starttime="20170918 10:30:46.973" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:46.974" starttime="20170918 10:30:46.972" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:46.974" starttime="20170918 10:30:46.971" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:30:46.974" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:30:46.975" starttime="20170918 10:30:46.974" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:46.975" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:46.975" starttime="20170918 10:30:46.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:46.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:46.975" starttime="20170918 10:30:46.975" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:30:46.976" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:30:46.976" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:30:46.976" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:30:46.976" starttime="20170918 10:30:46.976" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:46.976" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:30:46.976" starttime="20170918 10:30:46.029" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:46.977" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:30:46.977" starttime="20170918 10:30:46.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:30:46.977" starttime="20170918 10:30:46.977" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:30:46.982" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:30:46.982" starttime="20170918 10:30:46.981" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:30:46.983" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:30:46.983" starttime="20170918 10:30:46.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:30:46.983" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:30:46.983" starttime="20170918 10:30:46.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:30:46.984" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:30:46.984" starttime="20170918 10:30:46.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:30:47.585" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:30:47.585" starttime="20170918 10:30:46.985" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:47.585" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:30:47.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:47.586" starttime="20170918 10:30:46.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:30:47.586" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:47.586" starttime="20170918 10:30:47.586" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:47.587" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:47.587" starttime="20170918 10:30:47.587" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:47.588" starttime="20170918 10:30:46.981" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:47.588" starttime="20170918 10:30:46.980" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:47.588" starttime="20170918 10:30:46.980" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:30:47.589" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:30:47.589" starttime="20170918 10:30:47.588" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:47.592" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:30:47.592" starttime="20170918 10:30:47.591" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:47.594" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:30:47.594" starttime="20170918 10:30:47.593" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:47.594" starttime="20170918 10:30:47.592" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:47.594" starttime="20170918 10:30:47.590" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:47.594" starttime="20170918 10:30:47.589" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:30:48.206" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:30:48.206" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:48.206" starttime="20170918 10:30:47.594" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:48.208" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:48.208" starttime="20170918 10:30:48.208" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:48.209" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:48.209" starttime="20170918 10:30:48.209" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:48.209" starttime="20170918 10:30:48.208" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:48.210" starttime="20170918 10:30:48.207" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:48.210" starttime="20170918 10:30:48.207" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:30:48.210" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:30:48.210" starttime="20170918 10:30:48.210" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:48.210" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:48.210" starttime="20170918 10:30:46.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:48.211" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:48.211" starttime="20170918 10:30:48.211" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:30:48.212" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:30:48.212" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:30:48.212" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:30:48.212" starttime="20170918 10:30:48.211" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:48.212" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:30:48.212" starttime="20170918 10:30:46.978" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:48.212" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:30:48.212" starttime="20170918 10:30:46.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:30:48.213" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:30:48.213" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:30:48.213" starttime="20170918 10:30:48.213" status="FAIL"></status>
</kw>
<status endtime="20170918 10:30:48.213" starttime="20170918 10:30:46.977" status="FAIL"></status>
</kw>
<status endtime="20170918 10:30:48.214" starttime="20170918 10:30:44.951" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:30:58.219" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:30:58.219" starttime="20170918 10:30:58.218" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:30:58.220" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:30:58.220" starttime="20170918 10:30:58.219" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:30:58.220" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:30:58.221" starttime="20170918 10:30:58.220" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:30:58.221" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:30:58.221" starttime="20170918 10:30:58.221" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:30:58.649" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:30:58.649" starttime="20170918 10:30:58.222" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:58.649" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:30:58.649" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:58.649" starttime="20170918 10:30:58.221" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:30:58.650" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:58.650" starttime="20170918 10:30:58.650" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:58.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:58.651" starttime="20170918 10:30:58.650" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:58.651" starttime="20170918 10:30:58.218" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:58.651" starttime="20170918 10:30:58.217" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:58.651" starttime="20170918 10:30:58.217" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:30:58.652" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:30:58.652" starttime="20170918 10:30:58.651" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:58.654" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:58.654" starttime="20170918 10:30:58.653" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:58.655" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:58.655" starttime="20170918 10:30:58.655" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:58.655" starttime="20170918 10:30:58.654" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:58.655" starttime="20170918 10:30:58.652" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:58.655" starttime="20170918 10:30:58.652" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:30:58.920" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:30:58.920" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:58.920" starttime="20170918 10:30:58.655" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:58.922" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:58.922" starttime="20170918 10:30:58.921" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:58.923" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:30:58.923" starttime="20170918 10:30:58.922" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:58.923" starttime="20170918 10:30:58.922" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:58.923" starttime="20170918 10:30:58.921" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:58.923" starttime="20170918 10:30:58.920" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:30:58.923" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:30:58.923" starttime="20170918 10:30:58.923" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:58.924" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:58.924" starttime="20170918 10:30:58.216" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:58.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:58.924" starttime="20170918 10:30:58.924" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:30:58.925" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:30:58.925" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:30:58.925" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:30:58.925" starttime="20170918 10:30:58.925" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:58.925" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:30:58.925" starttime="20170918 10:30:58.216" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:58.926" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:30:58.926" starttime="20170918 10:30:58.215" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:30:58.926" starttime="20170918 10:30:58.926" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:58.926" starttime="20170918 10:30:58.215" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:30:58.930" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:30:58.931" starttime="20170918 10:30:58.930" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:30:58.932" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:30:58.932" starttime="20170918 10:30:58.931" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:30:58.932" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:30:58.933" starttime="20170918 10:30:58.932" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:30:58.933" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:30:58.933" starttime="20170918 10:30:58.933" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:30:59.332" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:30:59.332" starttime="20170918 10:30:58.934" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:30:59.333" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:30:59.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:30:59.333" starttime="20170918 10:30:58.934" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:30:59.333" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:59.333" starttime="20170918 10:30:59.333" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:30:59.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:30:59.334" starttime="20170918 10:30:59.334" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:59.335" starttime="20170918 10:30:58.929" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:59.335" starttime="20170918 10:30:58.929" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:59.335" starttime="20170918 10:30:58.928" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:30:59.336" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:30:59.336" starttime="20170918 10:30:59.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:30:59.339" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:59.339" starttime="20170918 10:30:59.338" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:30:59.340" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:30:59.341" starttime="20170918 10:30:59.340" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:59.341" starttime="20170918 10:30:59.339" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:59.341" starttime="20170918 10:30:59.337" status="PASS"></status>
</kw>
<status endtime="20170918 10:30:59.341" starttime="20170918 10:30:59.336" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:31:00.016" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:31:00.016" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:00.016" starttime="20170918 10:30:59.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:00.018" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:00.018" starttime="20170918 10:31:00.017" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:00.019" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:00.019" starttime="20170918 10:31:00.018" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:00.019" starttime="20170918 10:31:00.018" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:00.019" starttime="20170918 10:31:00.017" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:00.019" starttime="20170918 10:31:00.016" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:31:00.019" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:31:00.020" starttime="20170918 10:31:00.019" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:00.020" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:00.020" starttime="20170918 10:30:58.927" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:00.020" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:00.021" starttime="20170918 10:31:00.020" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:31:00.021" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:31:00.021" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:31:00.021" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:31:00.021" starttime="20170918 10:31:00.021" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:00.022" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:31:00.022" starttime="20170918 10:30:58.927" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:00.022" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:31:00.022" starttime="20170918 10:30:58.927" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:31:00.022" starttime="20170918 10:31:00.022" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:31:00.027" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:31:00.027" starttime="20170918 10:31:00.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:31:00.028" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:31:00.028" starttime="20170918 10:31:00.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:31:00.028" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:31:00.028" starttime="20170918 10:31:00.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:31:00.029" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:31:00.029" starttime="20170918 10:31:00.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:31:00.465" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:31:00.465" starttime="20170918 10:31:00.030" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:00.465" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:31:00.465" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:00.465" starttime="20170918 10:31:00.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:31:00.466" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:00.466" starttime="20170918 10:31:00.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:00.467" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:00.467" starttime="20170918 10:31:00.466" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:00.467" starttime="20170918 10:31:00.026" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:00.467" starttime="20170918 10:31:00.026" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:00.467" starttime="20170918 10:31:00.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:31:00.468" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:31:00.468" starttime="20170918 10:31:00.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:00.470" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:31:00.470" starttime="20170918 10:31:00.469" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:00.471" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:31:00.471" starttime="20170918 10:31:00.471" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:00.471" starttime="20170918 10:31:00.471" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:00.472" starttime="20170918 10:31:00.468" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:00.472" starttime="20170918 10:31:00.468" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:31:01.121" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:31:01.121" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:01.121" starttime="20170918 10:31:00.472" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:01.123" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:01.123" starttime="20170918 10:31:01.123" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:01.124" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:01.124" starttime="20170918 10:31:01.124" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:01.124" starttime="20170918 10:31:01.123" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:01.124" starttime="20170918 10:31:01.122" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:01.124" starttime="20170918 10:31:01.122" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:31:01.125" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:31:01.125" starttime="20170918 10:31:01.125" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:01.125" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:01.125" starttime="20170918 10:31:00.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:01.126" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:01.126" starttime="20170918 10:31:01.125" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:31:01.126" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:31:01.126" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:31:01.126" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:31:01.127" starttime="20170918 10:31:01.126" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:01.127" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:31:01.127" starttime="20170918 10:31:00.024" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:01.127" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:31:01.127" starttime="20170918 10:31:00.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:31:01.128" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:31:01.128" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:31:01.128" starttime="20170918 10:31:01.127" status="FAIL"></status>
</kw>
<status endtime="20170918 10:31:01.128" starttime="20170918 10:31:00.023" status="FAIL"></status>
</kw>
<status endtime="20170918 10:31:01.128" starttime="20170918 10:30:58.214" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:31:11.133" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:31:11.134" starttime="20170918 10:31:11.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:31:11.134" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:31:11.134" starttime="20170918 10:31:11.134" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:31:11.135" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:31:11.135" starttime="20170918 10:31:11.135" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:31:11.136" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:31:11.136" starttime="20170918 10:31:11.135" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:31:11.665" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:31:11.666" starttime="20170918 10:31:11.136" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:11.666" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:31:11.666" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:11.666" starttime="20170918 10:31:11.136" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:31:11.666" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:11.666" starttime="20170918 10:31:11.666" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:11.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:11.667" starttime="20170918 10:31:11.667" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:11.667" starttime="20170918 10:31:11.132" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:11.667" starttime="20170918 10:31:11.132" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:11.667" starttime="20170918 10:31:11.131" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:31:11.668" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:31:11.668" starttime="20170918 10:31:11.668" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:11.670" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:11.670" starttime="20170918 10:31:11.669" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:11.671" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:11.671" starttime="20170918 10:31:11.671" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:11.671" starttime="20170918 10:31:11.670" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:11.672" starttime="20170918 10:31:11.669" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:11.672" starttime="20170918 10:31:11.668" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:31:12.095" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:31:12.095" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:12.095" starttime="20170918 10:31:11.672" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:12.097" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:12.097" starttime="20170918 10:31:12.096" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:12.098" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:12.098" starttime="20170918 10:31:12.097" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:12.098" starttime="20170918 10:31:12.097" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:12.098" starttime="20170918 10:31:12.096" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:12.098" starttime="20170918 10:31:12.095" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:31:12.098" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:31:12.098" starttime="20170918 10:31:12.098" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:12.099" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:12.099" starttime="20170918 10:31:11.131" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:12.099" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:12.099" starttime="20170918 10:31:12.099" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:31:12.100" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:31:12.100" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:31:12.100" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:31:12.100" starttime="20170918 10:31:12.100" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:12.100" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:31:12.100" starttime="20170918 10:31:11.130" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:12.101" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:31:12.101" starttime="20170918 10:31:11.130" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:31:12.101" starttime="20170918 10:31:12.101" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:12.101" starttime="20170918 10:31:11.129" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:31:12.106" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:31:12.106" starttime="20170918 10:31:12.105" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:31:12.107" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:31:12.107" starttime="20170918 10:31:12.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:31:12.107" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:31:12.107" starttime="20170918 10:31:12.107" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:31:12.108" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:31:12.108" starttime="20170918 10:31:12.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:31:12.692" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:31:12.692" starttime="20170918 10:31:12.109" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:12.692" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:31:12.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:12.692" starttime="20170918 10:31:12.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:31:12.693" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:12.693" starttime="20170918 10:31:12.692" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:12.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:12.694" starttime="20170918 10:31:12.693" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:12.694" starttime="20170918 10:31:12.105" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:12.694" starttime="20170918 10:31:12.104" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:12.694" starttime="20170918 10:31:12.104" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:31:12.695" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:31:12.695" starttime="20170918 10:31:12.694" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:12.697" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:12.697" starttime="20170918 10:31:12.696" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:12.698" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:12.698" starttime="20170918 10:31:12.697" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:12.698" starttime="20170918 10:31:12.697" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:12.698" starttime="20170918 10:31:12.695" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:12.698" starttime="20170918 10:31:12.695" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:31:13.207" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:31:13.207" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:13.207" starttime="20170918 10:31:12.698" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:13.209" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:13.209" starttime="20170918 10:31:13.208" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:13.209" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:13.210" starttime="20170918 10:31:13.209" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:13.210" starttime="20170918 10:31:13.209" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:13.210" starttime="20170918 10:31:13.208" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:13.210" starttime="20170918 10:31:13.207" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:31:13.210" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:31:13.210" starttime="20170918 10:31:13.210" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:13.211" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:13.211" starttime="20170918 10:31:12.103" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:13.211" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:13.211" starttime="20170918 10:31:13.211" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:31:13.212" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:31:13.212" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:31:13.212" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:31:13.212" starttime="20170918 10:31:13.212" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:13.212" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:31:13.212" starttime="20170918 10:31:12.102" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:13.213" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:31:13.213" starttime="20170918 10:31:12.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:31:13.213" starttime="20170918 10:31:13.213" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:31:13.218" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:31:13.218" starttime="20170918 10:31:13.217" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:31:13.219" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:31:13.219" starttime="20170918 10:31:13.218" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:31:13.219" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:31:13.219" starttime="20170918 10:31:13.219" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:31:13.220" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:31:13.220" starttime="20170918 10:31:13.219" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:31:13.396" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:31:13.396" starttime="20170918 10:31:13.221" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:13.396" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:31:13.397" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:13.397" starttime="20170918 10:31:13.220" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:31:13.397" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:13.397" starttime="20170918 10:31:13.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:13.398" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:13.398" starttime="20170918 10:31:13.398" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:13.398" starttime="20170918 10:31:13.217" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:13.398" starttime="20170918 10:31:13.216" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:13.398" starttime="20170918 10:31:13.216" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:31:13.399" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:31:13.399" starttime="20170918 10:31:13.398" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:13.401" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:31:13.402" starttime="20170918 10:31:13.400" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:13.402" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:31:13.403" starttime="20170918 10:31:13.402" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:13.403" starttime="20170918 10:31:13.402" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:13.403" starttime="20170918 10:31:13.400" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:13.403" starttime="20170918 10:31:13.399" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:31:14.441" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:31:14.441" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:14.441" starttime="20170918 10:31:13.403" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:14.443" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:14.443" starttime="20170918 10:31:14.443" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:14.444" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:14.444" starttime="20170918 10:31:14.444" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:14.444" starttime="20170918 10:31:14.443" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:14.445" starttime="20170918 10:31:14.442" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:14.445" starttime="20170918 10:31:14.442" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:31:14.445" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:31:14.445" starttime="20170918 10:31:14.445" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:14.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:14.445" starttime="20170918 10:31:13.215" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:14.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:14.446" starttime="20170918 10:31:14.446" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:31:14.446" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:31:14.447" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:31:14.447" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:31:14.447" starttime="20170918 10:31:14.446" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:14.447" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:31:14.447" starttime="20170918 10:31:13.214" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:14.447" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:31:14.447" starttime="20170918 10:31:13.214" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:31:14.448" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:31:14.448" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:31:14.448" starttime="20170918 10:31:14.447" status="FAIL"></status>
</kw>
<status endtime="20170918 10:31:14.448" starttime="20170918 10:31:13.213" status="FAIL"></status>
</kw>
<status endtime="20170918 10:31:14.448" starttime="20170918 10:31:11.129" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:31:24.453" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:31:24.454" starttime="20170918 10:31:24.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:31:24.454" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:31:24.454" starttime="20170918 10:31:24.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:31:24.455" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:31:24.455" starttime="20170918 10:31:24.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:31:24.456" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:31:24.456" starttime="20170918 10:31:24.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:31:24.787" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:31:24.787" starttime="20170918 10:31:24.456" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:24.787" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:31:24.787" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:24.787" starttime="20170918 10:31:24.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:31:24.788" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:24.788" starttime="20170918 10:31:24.787" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:24.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:24.788" starttime="20170918 10:31:24.788" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:24.789" starttime="20170918 10:31:24.452" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:24.789" starttime="20170918 10:31:24.452" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:24.789" starttime="20170918 10:31:24.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:31:24.789" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:31:24.789" starttime="20170918 10:31:24.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:24.792" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:24.792" starttime="20170918 10:31:24.791" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:24.793" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:24.793" starttime="20170918 10:31:24.792" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:24.793" starttime="20170918 10:31:24.792" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:24.793" starttime="20170918 10:31:24.790" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:24.793" starttime="20170918 10:31:24.790" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:31:25.011" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:31:25.012" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:25.012" starttime="20170918 10:31:24.793" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:25.013" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:25.013" starttime="20170918 10:31:25.013" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:25.014" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:25.014" starttime="20170918 10:31:25.014" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:25.015" starttime="20170918 10:31:25.014" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:25.015" starttime="20170918 10:31:25.012" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:25.015" starttime="20170918 10:31:25.012" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:31:25.015" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:31:25.015" starttime="20170918 10:31:25.015" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:25.015" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:25.016" starttime="20170918 10:31:24.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:25.016" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:25.016" starttime="20170918 10:31:25.016" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:31:25.017" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:31:25.017" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:31:25.017" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:31:25.017" starttime="20170918 10:31:25.016" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:25.017" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:31:25.017" starttime="20170918 10:31:24.450" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:25.018" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:31:25.018" starttime="20170918 10:31:24.450" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:31:25.018" starttime="20170918 10:31:25.018" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:25.018" starttime="20170918 10:31:24.449" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:31:25.022" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:31:25.023" starttime="20170918 10:31:25.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:31:25.023" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:31:25.023" starttime="20170918 10:31:25.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:31:25.024" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:31:25.024" starttime="20170918 10:31:25.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:31:25.025" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:31:25.025" starttime="20170918 10:31:25.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:31:25.364" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:31:25.364" starttime="20170918 10:31:25.025" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:25.364" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:31:25.364" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:25.364" starttime="20170918 10:31:25.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:31:25.365" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:25.365" starttime="20170918 10:31:25.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:25.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:25.365" starttime="20170918 10:31:25.365" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:25.366" starttime="20170918 10:31:25.021" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:25.366" starttime="20170918 10:31:25.021" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:25.366" starttime="20170918 10:31:25.020" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:31:25.366" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:31:25.366" starttime="20170918 10:31:25.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:25.368" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:25.368" starttime="20170918 10:31:25.368" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:25.369" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:25.369" starttime="20170918 10:31:25.369" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:25.370" starttime="20170918 10:31:25.369" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:25.370" starttime="20170918 10:31:25.367" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:25.370" starttime="20170918 10:31:25.367" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:31:26.080" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:31:26.080" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:26.080" starttime="20170918 10:31:25.370" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:26.082" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:26.082" starttime="20170918 10:31:26.081" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:26.083" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:26.083" starttime="20170918 10:31:26.083" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:26.083" starttime="20170918 10:31:26.082" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:26.083" starttime="20170918 10:31:26.081" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:26.083" starttime="20170918 10:31:26.080" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:31:26.084" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:31:26.084" starttime="20170918 10:31:26.084" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:26.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:26.084" starttime="20170918 10:31:25.019" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:26.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:26.085" starttime="20170918 10:31:26.084" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:31:26.085" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:31:26.085" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:31:26.085" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:31:26.085" starttime="20170918 10:31:26.085" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:26.086" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:31:26.086" starttime="20170918 10:31:25.019" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:26.086" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:31:26.086" starttime="20170918 10:31:25.018" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:31:26.087" starttime="20170918 10:31:26.086" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:31:26.091" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:31:26.091" starttime="20170918 10:31:26.091" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:31:26.092" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:31:26.092" starttime="20170918 10:31:26.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:31:26.093" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:31:26.093" starttime="20170918 10:31:26.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:31:26.093" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:31:26.093" starttime="20170918 10:31:26.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:31:26.672" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:31:26.672" starttime="20170918 10:31:26.094" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:26.673" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:31:26.673" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:26.673" starttime="20170918 10:31:26.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:31:26.673" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:26.673" starttime="20170918 10:31:26.673" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:26.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:26.674" starttime="20170918 10:31:26.674" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:26.674" starttime="20170918 10:31:26.090" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:26.674" starttime="20170918 10:31:26.090" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:26.674" starttime="20170918 10:31:26.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:31:26.675" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:31:26.675" starttime="20170918 10:31:26.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:26.678" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:31:26.678" starttime="20170918 10:31:26.677" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:26.680" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:31:26.680" starttime="20170918 10:31:26.679" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:26.680" starttime="20170918 10:31:26.679" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:26.680" starttime="20170918 10:31:26.676" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:26.680" starttime="20170918 10:31:26.675" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:31:27.293" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:31:27.294" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:27.294" starttime="20170918 10:31:26.681" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:27.296" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:27.296" starttime="20170918 10:31:27.295" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:27.297" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:27.297" starttime="20170918 10:31:27.296" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:27.297" starttime="20170918 10:31:27.296" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:27.297" starttime="20170918 10:31:27.295" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:27.297" starttime="20170918 10:31:27.294" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:31:27.297" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:31:27.297" starttime="20170918 10:31:27.297" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:27.298" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:27.298" starttime="20170918 10:31:26.088" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:27.298" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:27.298" starttime="20170918 10:31:27.298" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:31:27.299" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:31:27.299" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:31:27.299" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:31:27.299" starttime="20170918 10:31:27.299" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:27.299" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:31:27.299" starttime="20170918 10:31:26.088" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:27.300" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:31:27.300" starttime="20170918 10:31:26.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:31:27.300" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:31:27.300" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:31:27.300" starttime="20170918 10:31:27.300" status="FAIL"></status>
</kw>
<status endtime="20170918 10:31:27.301" starttime="20170918 10:31:26.087" status="FAIL"></status>
</kw>
<status endtime="20170918 10:31:27.301" starttime="20170918 10:31:24.449" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:31:37.306" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:31:37.306" starttime="20170918 10:31:37.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:31:37.307" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:31:37.307" starttime="20170918 10:31:37.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:31:37.308" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:31:37.308" starttime="20170918 10:31:37.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:31:37.311" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:31:37.311" starttime="20170918 10:31:37.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:31:37.619" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:31:37.619" starttime="20170918 10:31:37.312" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:37.619" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:31:37.619" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:37.619" starttime="20170918 10:31:37.312" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:31:37.620" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:37.620" starttime="20170918 10:31:37.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:37.620" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:37.620" starttime="20170918 10:31:37.620" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:37.621" starttime="20170918 10:31:37.305" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:37.621" starttime="20170918 10:31:37.305" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:37.621" starttime="20170918 10:31:37.304" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:31:37.621" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:31:37.622" starttime="20170918 10:31:37.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:37.624" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:37.624" starttime="20170918 10:31:37.623" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:37.624" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:37.625" starttime="20170918 10:31:37.624" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:37.625" starttime="20170918 10:31:37.624" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:37.625" starttime="20170918 10:31:37.622" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:37.625" starttime="20170918 10:31:37.622" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:31:37.695" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:31:37.695" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:37.695" starttime="20170918 10:31:37.625" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:37.697" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:37.697" starttime="20170918 10:31:37.697" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:37.699" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:37.699" starttime="20170918 10:31:37.698" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:37.699" starttime="20170918 10:31:37.698" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:37.699" starttime="20170918 10:31:37.696" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:37.699" starttime="20170918 10:31:37.695" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:31:37.700" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:31:37.700" starttime="20170918 10:31:37.699" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:37.700" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:37.700" starttime="20170918 10:31:37.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:37.701" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:37.701" starttime="20170918 10:31:37.700" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:31:37.701" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:31:37.702" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:31:37.702" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:31:37.702" starttime="20170918 10:31:37.701" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:37.702" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:31:37.702" starttime="20170918 10:31:37.303" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:37.702" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:31:37.702" starttime="20170918 10:31:37.302" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:31:37.703" starttime="20170918 10:31:37.703" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:37.703" starttime="20170918 10:31:37.302" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:31:37.707" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:31:37.707" starttime="20170918 10:31:37.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:31:37.708" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:31:37.708" starttime="20170918 10:31:37.708" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:31:37.709" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:31:37.709" starttime="20170918 10:31:37.708" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:31:37.709" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:31:37.709" starttime="20170918 10:31:37.709" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:31:38.013" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:31:38.014" starttime="20170918 10:31:37.710" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:38.014" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:31:38.014" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:38.014" starttime="20170918 10:31:37.710" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:31:38.014" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:38.014" starttime="20170918 10:31:38.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:38.015" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:38.015" starttime="20170918 10:31:38.015" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:38.015" starttime="20170918 10:31:37.706" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:38.015" starttime="20170918 10:31:37.705" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:38.015" starttime="20170918 10:31:37.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:31:38.016" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:31:38.016" starttime="20170918 10:31:38.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:38.018" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:38.018" starttime="20170918 10:31:38.018" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:38.019" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:38.019" starttime="20170918 10:31:38.019" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:38.019" starttime="20170918 10:31:38.018" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:38.019" starttime="20170918 10:31:38.017" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:38.020" starttime="20170918 10:31:38.016" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:31:38.415" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:31:38.415" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:38.415" starttime="20170918 10:31:38.020" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:38.417" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:38.417" starttime="20170918 10:31:38.416" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:38.418" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:38.418" starttime="20170918 10:31:38.418" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:38.418" starttime="20170918 10:31:38.417" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:38.419" starttime="20170918 10:31:38.416" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:38.419" starttime="20170918 10:31:38.415" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:31:38.419" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:31:38.419" starttime="20170918 10:31:38.419" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:38.419" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:38.419" starttime="20170918 10:31:37.704" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:38.420" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:38.420" starttime="20170918 10:31:38.420" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:31:38.420" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:31:38.421" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:31:38.421" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170918 10:31:38.421" starttime="20170918 10:31:38.420" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:38.421" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170918 10:31:38.421" starttime="20170918 10:31:37.703" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:38.421" level="INFO">${host_state} = Running</msg>
<status endtime="20170918 10:31:38.421" starttime="20170918 10:31:37.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:31:38.422" starttime="20170918 10:31:38.422" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:31:38.426" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:31:38.426" starttime="20170918 10:31:38.425" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:31:38.427" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:31:38.427" starttime="20170918 10:31:38.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:31:38.427" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:31:38.427" starttime="20170918 10:31:38.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:31:38.428" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:31:38.428" starttime="20170918 10:31:38.428" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:31:38.882" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:31:38.882" starttime="20170918 10:31:38.429" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:38.882" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:31:38.882" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:38.882" starttime="20170918 10:31:38.428" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:31:38.883" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:38.883" starttime="20170918 10:31:38.883" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:38.884" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:38.884" starttime="20170918 10:31:38.883" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:38.884" starttime="20170918 10:31:38.425" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:38.884" starttime="20170918 10:31:38.425" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:38.885" starttime="20170918 10:31:38.424" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:31:38.885" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170918 10:31:38.885" starttime="20170918 10:31:38.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:38.887" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:31:38.887" starttime="20170918 10:31:38.887" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:38.888" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170918 10:31:38.888" starttime="20170918 10:31:38.888" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:38.889" starttime="20170918 10:31:38.888" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:38.889" starttime="20170918 10:31:38.886" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:38.889" starttime="20170918 10:31:38.885" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:31:39.226" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170918 10:31:39.226" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:39.226" starttime="20170918 10:31:38.889" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:39.228" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:39.228" starttime="20170918 10:31:39.228" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:39.229" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:39.229" starttime="20170918 10:31:39.229" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:39.229" starttime="20170918 10:31:39.228" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:39.229" starttime="20170918 10:31:39.227" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:39.229" starttime="20170918 10:31:39.227" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:31:39.230" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:31:39.230" starttime="20170918 10:31:39.230" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:39.230" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:39.230" starttime="20170918 10:31:38.423" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:39.231" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:39.231" starttime="20170918 10:31:39.230" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:31:39.231" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:31:39.231" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:31:39.231" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170918 10:31:39.232" starttime="20170918 10:31:39.231" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:39.232" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:31:39.232" starttime="20170918 10:31:38.423" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:39.232" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:31:39.232" starttime="20170918 10:31:38.422" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170918 10:31:39.233" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170918 10:31:39.233" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170918 10:31:39.233" starttime="20170918 10:31:39.232" status="FAIL"></status>
</kw>
<status endtime="20170918 10:31:39.233" starttime="20170918 10:31:38.422" status="FAIL"></status>
</kw>
<status endtime="20170918 10:31:39.233" starttime="20170918 10:31:37.301" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:31:49.239" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:31:49.239" starttime="20170918 10:31:49.239" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:31:49.240" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:31:49.240" starttime="20170918 10:31:49.240" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:31:49.241" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:31:49.241" starttime="20170918 10:31:49.240" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:31:49.241" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:31:49.241" starttime="20170918 10:31:49.241" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:31:49.425" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:31:49.425" starttime="20170918 10:31:49.242" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:49.425" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:31:49.425" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:49.426" starttime="20170918 10:31:49.242" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:31:49.426" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:49.426" starttime="20170918 10:31:49.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:49.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:49.427" starttime="20170918 10:31:49.427" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.427" starttime="20170918 10:31:49.238" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.427" starttime="20170918 10:31:49.237" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.427" starttime="20170918 10:31:49.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:31:49.428" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:31:49.428" starttime="20170918 10:31:49.428" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:49.430" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:49.430" starttime="20170918 10:31:49.429" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:49.431" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:49.431" starttime="20170918 10:31:49.431" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.431" starttime="20170918 10:31:49.430" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.431" starttime="20170918 10:31:49.429" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.431" starttime="20170918 10:31:49.428" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:31:49.504" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:31:49.504" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:49.504" starttime="20170918 10:31:49.432" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:49.506" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:49.506" starttime="20170918 10:31:49.506" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:49.507" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:49.508" starttime="20170918 10:31:49.507" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.508" starttime="20170918 10:31:49.506" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.508" starttime="20170918 10:31:49.505" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.508" starttime="20170918 10:31:49.505" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:31:49.508" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:31:49.508" starttime="20170918 10:31:49.508" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:49.508" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:49.509" starttime="20170918 10:31:49.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:49.509" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:49.509" starttime="20170918 10:31:49.509" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:31:49.510" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:31:49.510" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:31:49.510" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:31:49.510" starttime="20170918 10:31:49.510" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:49.511" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:31:49.511" starttime="20170918 10:31:49.235" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:49.511" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:31:49.511" starttime="20170918 10:31:49.235" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:31:49.512" starttime="20170918 10:31:49.512" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.512" starttime="20170918 10:31:49.234" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:31:49.517" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:31:49.518" starttime="20170918 10:31:49.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:31:49.519" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:31:49.519" starttime="20170918 10:31:49.518" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:31:49.520" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:31:49.520" starttime="20170918 10:31:49.519" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:31:49.521" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:31:49.521" starttime="20170918 10:31:49.520" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:31:49.702" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:31:49.702" starttime="20170918 10:31:49.522" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:49.702" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:31:49.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:49.702" starttime="20170918 10:31:49.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:31:49.703" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:49.703" starttime="20170918 10:31:49.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:49.704" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:49.704" starttime="20170918 10:31:49.703" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.704" starttime="20170918 10:31:49.516" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.704" starttime="20170918 10:31:49.516" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.704" starttime="20170918 10:31:49.515" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:31:49.705" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:31:49.705" starttime="20170918 10:31:49.704" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:49.707" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:49.707" starttime="20170918 10:31:49.706" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:49.708" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:31:49.708" starttime="20170918 10:31:49.708" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.708" starttime="20170918 10:31:49.707" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.709" starttime="20170918 10:31:49.706" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.709" starttime="20170918 10:31:49.705" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:31:49.796" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:31:49.796" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:49.796" starttime="20170918 10:31:49.709" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:31:49.798" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:49.798" starttime="20170918 10:31:49.797" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:31:49.799" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:31:49.799" starttime="20170918 10:31:49.798" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.799" starttime="20170918 10:31:49.798" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.799" starttime="20170918 10:31:49.797" status="PASS"></status>
</kw>
<status endtime="20170918 10:31:49.799" starttime="20170918 10:31:49.796" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:31:49.799" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:31:49.800" starttime="20170918 10:31:49.799" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:49.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:31:49.800" starttime="20170918 10:31:49.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:31:49.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:31:49.800" starttime="20170918 10:31:49.800" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:31:49.801" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:31:49.801" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:31:49.802" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:31:49.802" starttime="20170918 10:31:49.801" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:49.802" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:31:49.802" starttime="20170918 10:31:49.513" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:31:49.802" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:31:49.802" starttime="20170918 10:31:49.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:31:49.803" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:31:49.803" starttime="20170918 10:31:49.802" status="FAIL"></status>
</kw>
<status endtime="20170918 10:31:49.803" starttime="20170918 10:31:49.234" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:31:59.808" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:31:59.809" starttime="20170918 10:31:59.808" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:31:59.809" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:31:59.809" starttime="20170918 10:31:59.809" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:31:59.810" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:31:59.810" starttime="20170918 10:31:59.809" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:31:59.811" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:31:59.811" starttime="20170918 10:31:59.810" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:32:00.037" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:32:00.037" starttime="20170918 10:31:59.812" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:00.037" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:32:00.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:00.037" starttime="20170918 10:31:59.811" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:32:00.038" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:00.038" starttime="20170918 10:32:00.038" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:00.039" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:00.039" starttime="20170918 10:32:00.038" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.039" starttime="20170918 10:31:59.807" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.039" starttime="20170918 10:31:59.807" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.039" starttime="20170918 10:31:59.806" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:32:00.040" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:32:00.040" starttime="20170918 10:32:00.039" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:00.042" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:00.042" starttime="20170918 10:32:00.041" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:00.043" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:00.043" starttime="20170918 10:32:00.043" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.043" starttime="20170918 10:32:00.042" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.043" starttime="20170918 10:32:00.040" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.043" starttime="20170918 10:32:00.040" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:32:00.183" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:32:00.183" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:00.183" starttime="20170918 10:32:00.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:00.185" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:00.185" starttime="20170918 10:32:00.184" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:00.186" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:00.186" starttime="20170918 10:32:00.186" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.186" starttime="20170918 10:32:00.185" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.186" starttime="20170918 10:32:00.184" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.186" starttime="20170918 10:32:00.183" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:32:00.187" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:32:00.187" starttime="20170918 10:32:00.187" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:00.187" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:00.187" starttime="20170918 10:31:59.806" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:00.188" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:00.188" starttime="20170918 10:32:00.188" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:32:00.189" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:32:00.189" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:32:00.189" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:32:00.189" starttime="20170918 10:32:00.189" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:00.190" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:32:00.190" starttime="20170918 10:31:59.805" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:00.190" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:32:00.190" starttime="20170918 10:31:59.805" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:32:00.191" starttime="20170918 10:32:00.191" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.191" starttime="20170918 10:31:59.804" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:32:00.197" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:32:00.198" starttime="20170918 10:32:00.197" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:32:00.198" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:32:00.199" starttime="20170918 10:32:00.198" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:32:00.200" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:32:00.200" starttime="20170918 10:32:00.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:32:00.200" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:32:00.201" starttime="20170918 10:32:00.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:32:00.419" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:32:00.419" starttime="20170918 10:32:00.201" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:00.419" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:32:00.419" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:00.419" starttime="20170918 10:32:00.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:32:00.420" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:00.420" starttime="20170918 10:32:00.420" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:00.421" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:00.421" starttime="20170918 10:32:00.420" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.421" starttime="20170918 10:32:00.196" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.421" starttime="20170918 10:32:00.195" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.421" starttime="20170918 10:32:00.194" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:32:00.422" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:32:00.422" starttime="20170918 10:32:00.421" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:00.424" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:00.424" starttime="20170918 10:32:00.423" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:00.425" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:00.425" starttime="20170918 10:32:00.425" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.425" starttime="20170918 10:32:00.424" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.425" starttime="20170918 10:32:00.423" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.425" starttime="20170918 10:32:00.422" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:32:00.512" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:32:00.513" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:00.513" starttime="20170918 10:32:00.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:00.514" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:00.514" starttime="20170918 10:32:00.514" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:00.516" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:00.516" starttime="20170918 10:32:00.515" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.516" starttime="20170918 10:32:00.515" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.516" starttime="20170918 10:32:00.513" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:00.516" starttime="20170918 10:32:00.513" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:32:00.516" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:32:00.517" starttime="20170918 10:32:00.516" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:00.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:00.517" starttime="20170918 10:32:00.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:00.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:00.518" starttime="20170918 10:32:00.517" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:32:00.518" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:32:00.518" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:32:00.518" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:32:00.518" starttime="20170918 10:32:00.518" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:00.519" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:32:00.519" starttime="20170918 10:32:00.192" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:00.519" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:32:00.519" starttime="20170918 10:32:00.191" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:32:00.520" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:32:00.520" starttime="20170918 10:32:00.519" status="FAIL"></status>
</kw>
<status endtime="20170918 10:32:00.520" starttime="20170918 10:31:59.804" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:32:10.524" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:32:10.525" starttime="20170918 10:32:10.524" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:32:10.525" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:32:10.525" starttime="20170918 10:32:10.525" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:32:10.526" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:32:10.526" starttime="20170918 10:32:10.526" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:32:10.527" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:32:10.527" starttime="20170918 10:32:10.526" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:32:10.724" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:32:10.724" starttime="20170918 10:32:10.527" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:10.724" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:32:10.724" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:10.724" starttime="20170918 10:32:10.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:32:10.725" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:10.725" starttime="20170918 10:32:10.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:10.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:10.726" starttime="20170918 10:32:10.725" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:10.726" starttime="20170918 10:32:10.524" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:10.726" starttime="20170918 10:32:10.523" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:10.726" starttime="20170918 10:32:10.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:32:10.727" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:32:10.727" starttime="20170918 10:32:10.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:10.729" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:10.729" starttime="20170918 10:32:10.728" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:10.730" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:10.730" starttime="20170918 10:32:10.729" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:10.730" starttime="20170918 10:32:10.729" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:10.730" starttime="20170918 10:32:10.727" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:10.730" starttime="20170918 10:32:10.727" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:32:10.817" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:32:10.817" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:10.817" starttime="20170918 10:32:10.730" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:10.819" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:10.819" starttime="20170918 10:32:10.818" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:10.820" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:10.820" starttime="20170918 10:32:10.820" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:10.820" starttime="20170918 10:32:10.819" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:10.820" starttime="20170918 10:32:10.818" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:10.820" starttime="20170918 10:32:10.818" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:32:10.821" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:32:10.821" starttime="20170918 10:32:10.821" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:10.821" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:10.821" starttime="20170918 10:32:10.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:10.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:10.822" starttime="20170918 10:32:10.821" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:32:10.822" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:32:10.822" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:32:10.822" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:32:10.823" starttime="20170918 10:32:10.822" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:10.823" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:32:10.823" starttime="20170918 10:32:10.521" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:10.823" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:32:10.823" starttime="20170918 10:32:10.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:32:10.824" starttime="20170918 10:32:10.823" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:10.824" starttime="20170918 10:32:10.521" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:32:10.827" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:32:10.828" starttime="20170918 10:32:10.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:32:10.829" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:32:10.829" starttime="20170918 10:32:10.828" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:32:10.829" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:32:10.829" starttime="20170918 10:32:10.829" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:32:10.830" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:32:10.830" starttime="20170918 10:32:10.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:32:11.101" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:32:11.101" starttime="20170918 10:32:10.831" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:11.101" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:32:11.101" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:11.101" starttime="20170918 10:32:10.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:32:11.102" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:11.102" starttime="20170918 10:32:11.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:11.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:11.103" starttime="20170918 10:32:11.102" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:11.103" starttime="20170918 10:32:10.826" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:11.103" starttime="20170918 10:32:10.826" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:11.103" starttime="20170918 10:32:10.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:32:11.104" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:32:11.104" starttime="20170918 10:32:11.103" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:11.106" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:11.106" starttime="20170918 10:32:11.105" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:11.107" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:11.107" starttime="20170918 10:32:11.106" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:11.107" starttime="20170918 10:32:11.106" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:11.107" starttime="20170918 10:32:11.104" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:11.107" starttime="20170918 10:32:11.104" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:32:11.229" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:32:11.230" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:11.230" starttime="20170918 10:32:11.107" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:11.231" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:11.231" starttime="20170918 10:32:11.231" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:11.232" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:11.233" starttime="20170918 10:32:11.232" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:11.233" starttime="20170918 10:32:11.232" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:11.233" starttime="20170918 10:32:11.230" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:11.233" starttime="20170918 10:32:11.230" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:32:11.233" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:32:11.233" starttime="20170918 10:32:11.233" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:11.234" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:11.234" starttime="20170918 10:32:10.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:11.234" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:11.234" starttime="20170918 10:32:11.234" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:32:11.235" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:32:11.235" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:32:11.235" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:32:11.235" starttime="20170918 10:32:11.234" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:11.235" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:32:11.235" starttime="20170918 10:32:10.824" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:11.236" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:32:11.236" starttime="20170918 10:32:10.824" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:32:11.236" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:32:11.236" starttime="20170918 10:32:11.236" status="FAIL"></status>
</kw>
<status endtime="20170918 10:32:11.236" starttime="20170918 10:32:10.520" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:32:21.245" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:32:21.245" starttime="20170918 10:32:21.244" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:32:21.246" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:32:21.246" starttime="20170918 10:32:21.245" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:32:21.246" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:32:21.246" starttime="20170918 10:32:21.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:32:21.247" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:32:21.247" starttime="20170918 10:32:21.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:32:21.441" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:32:21.441" starttime="20170918 10:32:21.248" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:21.441" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:32:21.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:21.442" starttime="20170918 10:32:21.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:32:21.442" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:21.442" starttime="20170918 10:32:21.442" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:21.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:21.443" starttime="20170918 10:32:21.443" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.443" starttime="20170918 10:32:21.244" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.443" starttime="20170918 10:32:21.243" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.443" starttime="20170918 10:32:21.243" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:32:21.444" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:32:21.444" starttime="20170918 10:32:21.444" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:21.446" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:21.446" starttime="20170918 10:32:21.446" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:21.447" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:21.448" starttime="20170918 10:32:21.447" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.448" starttime="20170918 10:32:21.446" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.448" starttime="20170918 10:32:21.445" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.448" starttime="20170918 10:32:21.444" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:32:21.522" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:32:21.523" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:21.523" starttime="20170918 10:32:21.448" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:21.525" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:21.525" starttime="20170918 10:32:21.524" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:21.525" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:21.526" starttime="20170918 10:32:21.525" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.526" starttime="20170918 10:32:21.525" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.526" starttime="20170918 10:32:21.523" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.526" starttime="20170918 10:32:21.523" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:32:21.526" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:32:21.526" starttime="20170918 10:32:21.526" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:21.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:21.527" starttime="20170918 10:32:21.242" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:21.527" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:21.527" starttime="20170918 10:32:21.527" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:32:21.528" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:32:21.528" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:32:21.528" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:32:21.529" starttime="20170918 10:32:21.528" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:21.529" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:32:21.529" starttime="20170918 10:32:21.241" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:21.529" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:32:21.529" starttime="20170918 10:32:21.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:32:21.530" starttime="20170918 10:32:21.530" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.530" starttime="20170918 10:32:21.237" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:32:21.535" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:32:21.535" starttime="20170918 10:32:21.535" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:32:21.536" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:32:21.536" starttime="20170918 10:32:21.536" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:32:21.537" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:32:21.537" starttime="20170918 10:32:21.536" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:32:21.537" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:32:21.537" starttime="20170918 10:32:21.537" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:32:21.799" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:32:21.799" starttime="20170918 10:32:21.538" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:21.800" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:32:21.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:21.800" starttime="20170918 10:32:21.538" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:32:21.800" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:21.800" starttime="20170918 10:32:21.800" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:21.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:21.801" starttime="20170918 10:32:21.801" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.801" starttime="20170918 10:32:21.534" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.801" starttime="20170918 10:32:21.534" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.801" starttime="20170918 10:32:21.533" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:32:21.802" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:32:21.802" starttime="20170918 10:32:21.802" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:21.804" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:21.804" starttime="20170918 10:32:21.804" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:21.805" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:21.805" starttime="20170918 10:32:21.805" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.805" starttime="20170918 10:32:21.804" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.805" starttime="20170918 10:32:21.803" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.806" starttime="20170918 10:32:21.802" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:32:21.934" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:32:21.934" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:21.934" starttime="20170918 10:32:21.806" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:21.936" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:21.936" starttime="20170918 10:32:21.936" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:21.937" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:21.937" starttime="20170918 10:32:21.937" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.937" starttime="20170918 10:32:21.936" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.937" starttime="20170918 10:32:21.935" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:21.938" starttime="20170918 10:32:21.935" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:32:21.938" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:32:21.938" starttime="20170918 10:32:21.938" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:21.938" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:21.938" starttime="20170918 10:32:21.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:21.939" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:21.939" starttime="20170918 10:32:21.939" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:32:21.939" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:32:21.939" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:32:21.940" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:32:21.940" starttime="20170918 10:32:21.939" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:21.940" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:32:21.940" starttime="20170918 10:32:21.531" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:21.940" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:32:21.940" starttime="20170918 10:32:21.531" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:32:21.941" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:32:21.941" starttime="20170918 10:32:21.941" status="FAIL"></status>
</kw>
<status endtime="20170918 10:32:21.941" starttime="20170918 10:32:21.237" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:32:31.947" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:32:31.947" starttime="20170918 10:32:31.946" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:32:31.948" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:32:31.948" starttime="20170918 10:32:31.948" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:32:31.949" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:32:31.949" starttime="20170918 10:32:31.949" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:32:31.950" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:32:31.950" starttime="20170918 10:32:31.950" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:32:32.154" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:32:32.154" starttime="20170918 10:32:31.951" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:32.154" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:32:32.154" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:32.154" starttime="20170918 10:32:31.951" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:32:32.155" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:32.155" starttime="20170918 10:32:32.155" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:32.156" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:32.156" starttime="20170918 10:32:32.156" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.156" starttime="20170918 10:32:31.945" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.156" starttime="20170918 10:32:31.945" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.156" starttime="20170918 10:32:31.944" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:32:32.157" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:32:32.157" starttime="20170918 10:32:32.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:32.159" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:32.159" starttime="20170918 10:32:32.158" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:32.160" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:32.160" starttime="20170918 10:32:32.160" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.160" starttime="20170918 10:32:32.159" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.160" starttime="20170918 10:32:32.158" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.161" starttime="20170918 10:32:32.157" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:32:32.234" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:32:32.235" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:32.235" starttime="20170918 10:32:32.161" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:32.236" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:32.236" starttime="20170918 10:32:32.236" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:32.238" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:32.238" starttime="20170918 10:32:32.238" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.238" starttime="20170918 10:32:32.237" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.238" starttime="20170918 10:32:32.235" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.238" starttime="20170918 10:32:32.235" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:32:32.239" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:32:32.239" starttime="20170918 10:32:32.238" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:32.239" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:32.239" starttime="20170918 10:32:31.943" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:32.239" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:32.240" starttime="20170918 10:32:32.239" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:32:32.240" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:32:32.240" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:32:32.240" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:32:32.240" starttime="20170918 10:32:32.240" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:32.241" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:32:32.241" starttime="20170918 10:32:31.943" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:32.241" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:32:32.241" starttime="20170918 10:32:31.942" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:32:32.242" starttime="20170918 10:32:32.241" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.242" starttime="20170918 10:32:31.942" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:32:32.245" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:32:32.246" starttime="20170918 10:32:32.245" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:32:32.246" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:32:32.246" starttime="20170918 10:32:32.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:32:32.247" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:32:32.247" starttime="20170918 10:32:32.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:32:32.247" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:32:32.247" starttime="20170918 10:32:32.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:32:32.425" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:32:32.425" starttime="20170918 10:32:32.248" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:32.425" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:32:32.425" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:32.425" starttime="20170918 10:32:32.248" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:32:32.426" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:32.426" starttime="20170918 10:32:32.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:32.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:32.427" starttime="20170918 10:32:32.426" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.427" starttime="20170918 10:32:32.244" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.427" starttime="20170918 10:32:32.244" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.427" starttime="20170918 10:32:32.243" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:32:32.428" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:32:32.428" starttime="20170918 10:32:32.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:32.430" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:32.430" starttime="20170918 10:32:32.429" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:32.431" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:32.431" starttime="20170918 10:32:32.431" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.431" starttime="20170918 10:32:32.430" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.431" starttime="20170918 10:32:32.428" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.431" starttime="20170918 10:32:32.428" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:32:32.519" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:32:32.519" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:32.519" starttime="20170918 10:32:32.432" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:32.521" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:32.521" starttime="20170918 10:32:32.521" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:32.522" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:32.522" starttime="20170918 10:32:32.522" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.522" starttime="20170918 10:32:32.521" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.523" starttime="20170918 10:32:32.520" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:32.523" starttime="20170918 10:32:32.520" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:32:32.523" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:32:32.523" starttime="20170918 10:32:32.523" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:32.523" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:32.523" starttime="20170918 10:32:32.243" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:32.524" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:32.524" starttime="20170918 10:32:32.524" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:32:32.525" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:32:32.525" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:32:32.525" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:32:32.525" starttime="20170918 10:32:32.524" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:32.525" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:32:32.525" starttime="20170918 10:32:32.242" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:32.525" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:32:32.525" starttime="20170918 10:32:32.242" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:32:32.526" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:32:32.526" starttime="20170918 10:32:32.526" status="FAIL"></status>
</kw>
<status endtime="20170918 10:32:32.526" starttime="20170918 10:32:31.942" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:32:42.531" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:32:42.532" starttime="20170918 10:32:42.531" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:32:42.532" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:32:42.532" starttime="20170918 10:32:42.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:32:42.533" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:32:42.533" starttime="20170918 10:32:42.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:32:42.534" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:32:42.534" starttime="20170918 10:32:42.533" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:32:42.735" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:32:42.735" starttime="20170918 10:32:42.535" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:42.735" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:32:42.735" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:42.735" starttime="20170918 10:32:42.534" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:32:42.736" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:42.736" starttime="20170918 10:32:42.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:42.736" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:42.736" starttime="20170918 10:32:42.736" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:42.737" starttime="20170918 10:32:42.530" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:42.737" starttime="20170918 10:32:42.530" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:42.737" starttime="20170918 10:32:42.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:32:42.737" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:32:42.737" starttime="20170918 10:32:42.737" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:42.739" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:42.739" starttime="20170918 10:32:42.739" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:42.740" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:42.740" starttime="20170918 10:32:42.740" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:42.741" starttime="20170918 10:32:42.740" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:42.741" starttime="20170918 10:32:42.738" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:42.741" starttime="20170918 10:32:42.738" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:32:42.803" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:32:42.803" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:42.803" starttime="20170918 10:32:42.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:42.805" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:42.805" starttime="20170918 10:32:42.805" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:42.806" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:42.806" starttime="20170918 10:32:42.806" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:42.806" starttime="20170918 10:32:42.805" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:42.806" starttime="20170918 10:32:42.804" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:42.806" starttime="20170918 10:32:42.804" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:32:42.807" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:32:42.807" starttime="20170918 10:32:42.807" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:42.807" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:42.807" starttime="20170918 10:32:42.528" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:42.808" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:42.808" starttime="20170918 10:32:42.807" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:32:42.808" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:32:42.808" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:32:42.809" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:32:42.809" starttime="20170918 10:32:42.808" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:42.809" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:32:42.809" starttime="20170918 10:32:42.528" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:42.809" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:32:42.809" starttime="20170918 10:32:42.528" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:32:42.810" starttime="20170918 10:32:42.809" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:42.810" starttime="20170918 10:32:42.527" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:32:42.814" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:32:42.814" starttime="20170918 10:32:42.814" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:32:42.815" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:32:42.815" starttime="20170918 10:32:42.814" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:32:42.815" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:32:42.815" starttime="20170918 10:32:42.815" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:32:42.816" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:32:42.816" starttime="20170918 10:32:42.816" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:32:43.010" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:32:43.010" starttime="20170918 10:32:42.817" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:43.010" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:32:43.010" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:43.010" starttime="20170918 10:32:42.816" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:32:43.011" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:43.011" starttime="20170918 10:32:43.010" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:43.011" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:43.011" starttime="20170918 10:32:43.011" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:43.012" starttime="20170918 10:32:42.813" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:43.012" starttime="20170918 10:32:42.812" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:43.012" starttime="20170918 10:32:42.812" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:32:43.012" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:32:43.013" starttime="20170918 10:32:43.012" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:43.015" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:43.015" starttime="20170918 10:32:43.014" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:43.016" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:43.016" starttime="20170918 10:32:43.015" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:43.016" starttime="20170918 10:32:43.015" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:43.016" starttime="20170918 10:32:43.013" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:43.016" starttime="20170918 10:32:43.013" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:32:43.103" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:32:43.104" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:43.104" starttime="20170918 10:32:43.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:43.105" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:43.105" starttime="20170918 10:32:43.105" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:43.107" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:43.107" starttime="20170918 10:32:43.106" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:43.107" starttime="20170918 10:32:43.106" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:43.107" starttime="20170918 10:32:43.104" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:43.107" starttime="20170918 10:32:43.104" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:32:43.107" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:32:43.107" starttime="20170918 10:32:43.107" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:43.108" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:43.108" starttime="20170918 10:32:42.811" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:43.108" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:43.108" starttime="20170918 10:32:43.108" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:32:43.109" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:32:43.109" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:32:43.109" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:32:43.109" starttime="20170918 10:32:43.109" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:43.109" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:32:43.109" starttime="20170918 10:32:42.810" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:43.110" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:32:43.110" starttime="20170918 10:32:42.810" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:32:43.110" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:32:43.110" starttime="20170918 10:32:43.110" status="FAIL"></status>
</kw>
<status endtime="20170918 10:32:43.111" starttime="20170918 10:32:42.527" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:32:53.115" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:32:53.116" starttime="20170918 10:32:53.115" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:32:53.117" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:32:53.117" starttime="20170918 10:32:53.116" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:32:53.117" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:32:53.117" starttime="20170918 10:32:53.117" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:32:53.118" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:32:53.118" starttime="20170918 10:32:53.118" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:32:53.342" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:32:53.342" starttime="20170918 10:32:53.119" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:53.342" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:32:53.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:53.342" starttime="20170918 10:32:53.118" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:32:53.343" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:53.343" starttime="20170918 10:32:53.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:53.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:53.344" starttime="20170918 10:32:53.343" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.344" starttime="20170918 10:32:53.115" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.344" starttime="20170918 10:32:53.114" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.344" starttime="20170918 10:32:53.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:32:53.345" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:32:53.345" starttime="20170918 10:32:53.345" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:53.347" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:53.347" starttime="20170918 10:32:53.346" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:53.348" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:53.348" starttime="20170918 10:32:53.348" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.348" starttime="20170918 10:32:53.347" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.348" starttime="20170918 10:32:53.346" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.348" starttime="20170918 10:32:53.345" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:32:53.480" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:32:53.480" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:53.481" starttime="20170918 10:32:53.349" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:53.482" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:53.482" starttime="20170918 10:32:53.482" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:53.483" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:53.483" starttime="20170918 10:32:53.483" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.484" starttime="20170918 10:32:53.482" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.484" starttime="20170918 10:32:53.481" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.484" starttime="20170918 10:32:53.481" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:32:53.484" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:32:53.484" starttime="20170918 10:32:53.484" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:53.485" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:53.485" starttime="20170918 10:32:53.113" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:53.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:53.485" starttime="20170918 10:32:53.485" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:32:53.486" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:32:53.486" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:32:53.486" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:32:53.486" starttime="20170918 10:32:53.485" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:53.486" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:32:53.486" starttime="20170918 10:32:53.112" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:53.487" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:32:53.487" starttime="20170918 10:32:53.112" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:32:53.487" starttime="20170918 10:32:53.487" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.487" starttime="20170918 10:32:53.112" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:32:53.491" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:32:53.491" starttime="20170918 10:32:53.490" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:32:53.492" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:32:53.492" starttime="20170918 10:32:53.492" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:32:53.493" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:32:53.493" starttime="20170918 10:32:53.492" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:32:53.493" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:32:53.493" starttime="20170918 10:32:53.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:32:53.712" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:32:53.712" starttime="20170918 10:32:53.494" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:53.712" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:32:53.712" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:53.712" starttime="20170918 10:32:53.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:32:53.713" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:53.713" starttime="20170918 10:32:53.712" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:53.714" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:53.714" starttime="20170918 10:32:53.713" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.714" starttime="20170918 10:32:53.490" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.714" starttime="20170918 10:32:53.489" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.714" starttime="20170918 10:32:53.489" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:32:53.714" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:32:53.715" starttime="20170918 10:32:53.714" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:53.717" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:53.717" starttime="20170918 10:32:53.716" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:53.718" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:32:53.718" starttime="20170918 10:32:53.717" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.718" starttime="20170918 10:32:53.717" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.718" starttime="20170918 10:32:53.715" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.718" starttime="20170918 10:32:53.715" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:32:53.816" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:32:53.816" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:53.817" starttime="20170918 10:32:53.718" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:32:53.818" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:53.818" starttime="20170918 10:32:53.818" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:32:53.819" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:32:53.819" starttime="20170918 10:32:53.819" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.819" starttime="20170918 10:32:53.818" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.820" starttime="20170918 10:32:53.817" status="PASS"></status>
</kw>
<status endtime="20170918 10:32:53.820" starttime="20170918 10:32:53.817" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:32:53.820" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:32:53.820" starttime="20170918 10:32:53.820" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:53.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:32:53.820" starttime="20170918 10:32:53.488" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:32:53.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:32:53.821" starttime="20170918 10:32:53.821" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:32:53.822" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:32:53.822" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:32:53.822" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:32:53.822" starttime="20170918 10:32:53.821" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:53.822" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:32:53.822" starttime="20170918 10:32:53.488" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:32:53.822" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:32:53.822" starttime="20170918 10:32:53.487" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:32:53.823" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:32:53.823" starttime="20170918 10:32:53.823" status="FAIL"></status>
</kw>
<status endtime="20170918 10:32:53.823" starttime="20170918 10:32:53.111" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:33:03.829" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:33:03.829" starttime="20170918 10:33:03.829" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:33:03.830" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:33:03.830" starttime="20170918 10:33:03.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:33:03.831" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:33:03.831" starttime="20170918 10:33:03.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:33:03.831" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:33:03.831" starttime="20170918 10:33:03.831" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:33:04.036" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:33:04.036" starttime="20170918 10:33:03.832" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:04.037" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:33:04.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:04.037" starttime="20170918 10:33:03.832" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:33:04.037" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:04.037" starttime="20170918 10:33:04.037" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:04.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:04.038" starttime="20170918 10:33:04.038" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.038" starttime="20170918 10:33:03.828" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.038" starttime="20170918 10:33:03.828" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.038" starttime="20170918 10:33:03.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:33:04.039" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:33:04.039" starttime="20170918 10:33:04.039" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:04.041" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:04.041" starttime="20170918 10:33:04.040" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:04.045" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:04.045" starttime="20170918 10:33:04.042" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.045" starttime="20170918 10:33:04.041" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.045" starttime="20170918 10:33:04.040" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.046" starttime="20170918 10:33:04.039" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:33:04.145" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:33:04.145" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:04.145" starttime="20170918 10:33:04.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:04.147" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:04.147" starttime="20170918 10:33:04.146" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:04.148" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:04.148" starttime="20170918 10:33:04.147" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.148" starttime="20170918 10:33:04.147" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.148" starttime="20170918 10:33:04.146" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.148" starttime="20170918 10:33:04.145" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:33:04.148" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:33:04.148" starttime="20170918 10:33:04.148" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:04.149" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:04.149" starttime="20170918 10:33:03.826" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:04.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:04.149" starttime="20170918 10:33:04.149" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:33:04.150" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:33:04.150" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:33:04.150" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:33:04.150" starttime="20170918 10:33:04.150" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:04.150" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:33:04.150" starttime="20170918 10:33:03.825" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:04.151" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:33:04.151" starttime="20170918 10:33:03.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:33:04.151" starttime="20170918 10:33:04.151" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.151" starttime="20170918 10:33:03.824" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:33:04.155" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:33:04.155" starttime="20170918 10:33:04.155" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:33:04.156" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:33:04.156" starttime="20170918 10:33:04.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:33:04.157" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:33:04.157" starttime="20170918 10:33:04.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:33:04.157" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:33:04.157" starttime="20170918 10:33:04.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:33:04.442" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:33:04.442" starttime="20170918 10:33:04.158" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:04.442" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:33:04.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:04.442" starttime="20170918 10:33:04.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:33:04.443" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:04.443" starttime="20170918 10:33:04.442" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:04.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:04.443" starttime="20170918 10:33:04.443" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.444" starttime="20170918 10:33:04.154" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.444" starttime="20170918 10:33:04.154" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.444" starttime="20170918 10:33:04.153" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:33:04.444" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:33:04.445" starttime="20170918 10:33:04.444" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:04.447" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:04.447" starttime="20170918 10:33:04.446" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:04.447" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:04.448" starttime="20170918 10:33:04.447" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.448" starttime="20170918 10:33:04.447" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.448" starttime="20170918 10:33:04.445" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.448" starttime="20170918 10:33:04.445" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:33:04.540" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:33:04.540" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:04.540" starttime="20170918 10:33:04.448" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:04.542" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:04.542" starttime="20170918 10:33:04.541" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:04.543" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:04.543" starttime="20170918 10:33:04.542" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.543" starttime="20170918 10:33:04.542" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.543" starttime="20170918 10:33:04.541" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:04.543" starttime="20170918 10:33:04.540" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:33:04.543" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:33:04.544" starttime="20170918 10:33:04.543" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:04.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:04.544" starttime="20170918 10:33:04.152" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:04.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:04.544" starttime="20170918 10:33:04.544" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:33:04.545" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:33:04.545" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:33:04.545" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:33:04.545" starttime="20170918 10:33:04.545" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:04.545" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:33:04.545" starttime="20170918 10:33:04.152" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:04.546" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:33:04.546" starttime="20170918 10:33:04.152" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:33:04.546" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:33:04.546" starttime="20170918 10:33:04.546" status="FAIL"></status>
</kw>
<status endtime="20170918 10:33:04.547" starttime="20170918 10:33:03.824" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:33:14.552" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:33:14.552" starttime="20170918 10:33:14.552" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:33:14.553" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:33:14.553" starttime="20170918 10:33:14.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:33:14.554" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:33:14.554" starttime="20170918 10:33:14.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:33:14.554" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:33:14.554" starttime="20170918 10:33:14.554" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:33:14.733" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:33:14.733" starttime="20170918 10:33:14.555" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:14.733" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:33:14.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:14.733" starttime="20170918 10:33:14.555" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:33:14.734" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:14.734" starttime="20170918 10:33:14.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:14.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:14.735" starttime="20170918 10:33:14.734" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:14.735" starttime="20170918 10:33:14.551" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:14.735" starttime="20170918 10:33:14.550" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:14.735" starttime="20170918 10:33:14.550" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:33:14.736" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:33:14.736" starttime="20170918 10:33:14.736" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:14.739" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:14.739" starttime="20170918 10:33:14.738" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:14.740" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:14.741" starttime="20170918 10:33:14.740" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:14.741" starttime="20170918 10:33:14.739" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:14.741" starttime="20170918 10:33:14.737" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:14.741" starttime="20170918 10:33:14.737" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:33:14.815" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:33:14.815" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:14.815" starttime="20170918 10:33:14.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:14.817" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:14.817" starttime="20170918 10:33:14.816" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:14.818" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:14.818" starttime="20170918 10:33:14.818" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:14.818" starttime="20170918 10:33:14.817" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:14.819" starttime="20170918 10:33:14.816" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:14.819" starttime="20170918 10:33:14.815" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:33:14.819" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:33:14.819" starttime="20170918 10:33:14.819" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:14.819" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:14.819" starttime="20170918 10:33:14.549" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:14.820" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:14.820" starttime="20170918 10:33:14.820" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:33:14.821" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:33:14.821" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:33:14.821" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:33:14.821" starttime="20170918 10:33:14.820" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:14.821" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:33:14.821" starttime="20170918 10:33:14.548" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:14.821" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:33:14.821" starttime="20170918 10:33:14.548" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:33:14.822" starttime="20170918 10:33:14.822" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:14.822" starttime="20170918 10:33:14.548" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:33:14.826" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:33:14.826" starttime="20170918 10:33:14.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:33:14.827" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:33:14.827" starttime="20170918 10:33:14.826" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:33:14.827" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:33:14.827" starttime="20170918 10:33:14.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:33:14.828" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:33:14.828" starttime="20170918 10:33:14.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:33:15.065" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:33:15.065" starttime="20170918 10:33:14.829" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:15.065" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:33:15.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:15.065" starttime="20170918 10:33:14.828" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:33:15.066" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:15.066" starttime="20170918 10:33:15.065" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:15.066" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:15.066" starttime="20170918 10:33:15.066" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:15.067" starttime="20170918 10:33:14.825" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:15.067" starttime="20170918 10:33:14.824" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:15.067" starttime="20170918 10:33:14.824" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:33:15.067" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:33:15.067" starttime="20170918 10:33:15.067" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:15.070" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:15.070" starttime="20170918 10:33:15.069" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:15.071" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:15.071" starttime="20170918 10:33:15.070" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:15.071" starttime="20170918 10:33:15.070" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:15.071" starttime="20170918 10:33:15.068" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:15.071" starttime="20170918 10:33:15.068" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:33:15.268" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:33:15.268" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:15.268" starttime="20170918 10:33:15.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:15.270" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:15.270" starttime="20170918 10:33:15.269" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:15.271" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:15.271" starttime="20170918 10:33:15.270" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:15.271" starttime="20170918 10:33:15.270" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:15.271" starttime="20170918 10:33:15.269" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:15.271" starttime="20170918 10:33:15.268" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:33:15.271" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:33:15.272" starttime="20170918 10:33:15.271" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:15.272" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:15.272" starttime="20170918 10:33:14.823" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:15.272" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:15.272" starttime="20170918 10:33:15.272" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:33:15.273" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:33:15.273" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:33:15.273" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:33:15.273" starttime="20170918 10:33:15.273" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:15.273" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:33:15.274" starttime="20170918 10:33:14.823" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:15.274" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:33:15.274" starttime="20170918 10:33:14.822" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:33:15.275" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:33:15.275" starttime="20170918 10:33:15.274" status="FAIL"></status>
</kw>
<status endtime="20170918 10:33:15.275" starttime="20170918 10:33:14.547" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:33:25.280" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:33:25.280" starttime="20170918 10:33:25.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:33:25.281" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:33:25.281" starttime="20170918 10:33:25.280" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:33:25.281" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:33:25.281" starttime="20170918 10:33:25.281" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:33:25.282" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:33:25.282" starttime="20170918 10:33:25.281" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:33:25.473" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:33:25.473" starttime="20170918 10:33:25.283" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:25.473" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:33:25.473" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:25.473" starttime="20170918 10:33:25.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:33:25.474" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:25.474" starttime="20170918 10:33:25.474" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:25.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:25.475" starttime="20170918 10:33:25.474" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.475" starttime="20170918 10:33:25.279" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.475" starttime="20170918 10:33:25.278" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.475" starttime="20170918 10:33:25.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:33:25.476" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:33:25.476" starttime="20170918 10:33:25.475" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:25.478" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:25.478" starttime="20170918 10:33:25.477" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:25.479" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:25.479" starttime="20170918 10:33:25.478" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.479" starttime="20170918 10:33:25.478" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.479" starttime="20170918 10:33:25.476" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.479" starttime="20170918 10:33:25.476" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:33:25.542" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:33:25.543" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:25.543" starttime="20170918 10:33:25.479" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:25.545" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:25.545" starttime="20170918 10:33:25.544" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:25.546" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:25.546" starttime="20170918 10:33:25.545" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.546" starttime="20170918 10:33:25.545" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.546" starttime="20170918 10:33:25.544" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.546" starttime="20170918 10:33:25.543" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:33:25.546" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:33:25.546" starttime="20170918 10:33:25.546" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:25.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:25.547" starttime="20170918 10:33:25.277" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:25.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:25.547" starttime="20170918 10:33:25.547" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:33:25.548" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:33:25.548" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:33:25.548" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:33:25.548" starttime="20170918 10:33:25.548" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:25.548" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:33:25.548" starttime="20170918 10:33:25.276" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:25.549" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:33:25.549" starttime="20170918 10:33:25.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:33:25.549" starttime="20170918 10:33:25.549" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.549" starttime="20170918 10:33:25.276" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:33:25.553" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:33:25.554" starttime="20170918 10:33:25.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:33:25.554" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:33:25.554" starttime="20170918 10:33:25.554" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:33:25.555" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:33:25.555" starttime="20170918 10:33:25.554" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:33:25.556" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:33:25.556" starttime="20170918 10:33:25.555" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:33:25.748" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:33:25.748" starttime="20170918 10:33:25.557" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:25.748" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:33:25.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:25.748" starttime="20170918 10:33:25.556" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:33:25.749" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:25.749" starttime="20170918 10:33:25.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:25.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:25.750" starttime="20170918 10:33:25.749" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.750" starttime="20170918 10:33:25.552" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.750" starttime="20170918 10:33:25.552" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.750" starttime="20170918 10:33:25.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:33:25.751" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:33:25.751" starttime="20170918 10:33:25.750" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:25.753" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:25.753" starttime="20170918 10:33:25.752" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:25.754" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:25.754" starttime="20170918 10:33:25.753" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.754" starttime="20170918 10:33:25.753" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.754" starttime="20170918 10:33:25.751" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.754" starttime="20170918 10:33:25.751" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:33:25.856" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:33:25.856" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:25.856" starttime="20170918 10:33:25.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:25.859" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:25.859" starttime="20170918 10:33:25.858" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:25.860" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:25.861" starttime="20170918 10:33:25.860" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.861" starttime="20170918 10:33:25.859" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.861" starttime="20170918 10:33:25.857" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:25.861" starttime="20170918 10:33:25.857" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:33:25.861" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:33:25.861" starttime="20170918 10:33:25.861" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:25.861" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:25.862" starttime="20170918 10:33:25.550" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:25.862" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:25.862" starttime="20170918 10:33:25.862" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:33:25.863" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:33:25.863" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:33:25.863" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:33:25.863" starttime="20170918 10:33:25.862" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:25.863" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:33:25.863" starttime="20170918 10:33:25.550" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:25.864" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:33:25.864" starttime="20170918 10:33:25.549" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:33:25.864" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:33:25.864" starttime="20170918 10:33:25.864" status="FAIL"></status>
</kw>
<status endtime="20170918 10:33:25.865" starttime="20170918 10:33:25.275" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:33:35.870" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:33:35.871" starttime="20170918 10:33:35.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:33:35.871" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:33:35.871" starttime="20170918 10:33:35.871" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:33:35.872" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:33:35.872" starttime="20170918 10:33:35.872" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:33:35.873" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:33:35.873" starttime="20170918 10:33:35.873" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:33:36.082" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:33:36.082" starttime="20170918 10:33:35.874" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:36.082" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:33:36.082" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:36.082" starttime="20170918 10:33:35.874" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:33:36.083" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:36.083" starttime="20170918 10:33:36.083" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:36.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:36.084" starttime="20170918 10:33:36.083" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.084" starttime="20170918 10:33:35.869" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.084" starttime="20170918 10:33:35.868" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.084" starttime="20170918 10:33:35.868" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:33:36.085" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:33:36.085" starttime="20170918 10:33:36.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:36.087" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:36.087" starttime="20170918 10:33:36.086" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:36.088" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:36.088" starttime="20170918 10:33:36.088" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.088" starttime="20170918 10:33:36.087" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.088" starttime="20170918 10:33:36.086" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.088" starttime="20170918 10:33:36.085" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:33:36.152" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:33:36.152" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:36.152" starttime="20170918 10:33:36.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:36.154" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:36.154" starttime="20170918 10:33:36.154" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:36.155" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:36.155" starttime="20170918 10:33:36.155" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.155" starttime="20170918 10:33:36.154" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.155" starttime="20170918 10:33:36.153" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.156" starttime="20170918 10:33:36.153" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:33:36.156" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:33:36.156" starttime="20170918 10:33:36.156" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:36.156" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:36.156" starttime="20170918 10:33:35.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:36.157" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:36.157" starttime="20170918 10:33:36.157" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:33:36.157" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:33:36.158" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:33:36.158" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:33:36.158" starttime="20170918 10:33:36.157" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:36.158" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:33:36.158" starttime="20170918 10:33:35.866" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:36.158" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:33:36.158" starttime="20170918 10:33:35.866" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:33:36.159" starttime="20170918 10:33:36.159" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.159" starttime="20170918 10:33:35.866" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:33:36.162" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:33:36.163" starttime="20170918 10:33:36.162" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:33:36.164" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:33:36.164" starttime="20170918 10:33:36.163" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:33:36.164" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:33:36.165" starttime="20170918 10:33:36.164" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:33:36.165" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:33:36.165" starttime="20170918 10:33:36.165" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:33:36.343" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:33:36.343" starttime="20170918 10:33:36.166" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:36.343" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:33:36.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:36.343" starttime="20170918 10:33:36.165" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:33:36.344" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:36.344" starttime="20170918 10:33:36.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:36.345" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:36.345" starttime="20170918 10:33:36.345" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.345" starttime="20170918 10:33:36.162" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.345" starttime="20170918 10:33:36.161" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.345" starttime="20170918 10:33:36.161" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:33:36.346" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:33:36.346" starttime="20170918 10:33:36.345" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:36.348" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:36.348" starttime="20170918 10:33:36.347" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:36.349" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:36.349" starttime="20170918 10:33:36.349" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.349" starttime="20170918 10:33:36.348" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.349" starttime="20170918 10:33:36.347" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.349" starttime="20170918 10:33:36.346" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:33:36.452" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:33:36.452" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:36.452" starttime="20170918 10:33:36.350" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:36.454" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:36.454" starttime="20170918 10:33:36.453" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:36.455" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:36.455" starttime="20170918 10:33:36.454" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.455" starttime="20170918 10:33:36.454" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.455" starttime="20170918 10:33:36.453" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:36.455" starttime="20170918 10:33:36.452" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:33:36.455" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:33:36.456" starttime="20170918 10:33:36.455" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:36.456" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:36.456" starttime="20170918 10:33:36.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:36.456" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:36.456" starttime="20170918 10:33:36.456" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:33:36.457" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:33:36.457" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:33:36.457" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:33:36.457" starttime="20170918 10:33:36.457" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:36.457" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:33:36.458" starttime="20170918 10:33:36.159" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:36.458" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:33:36.458" starttime="20170918 10:33:36.159" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:33:36.458" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:33:36.459" starttime="20170918 10:33:36.458" status="FAIL"></status>
</kw>
<status endtime="20170918 10:33:36.459" starttime="20170918 10:33:35.865" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:33:46.464" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:33:46.464" starttime="20170918 10:33:46.464" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:33:46.465" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:33:46.465" starttime="20170918 10:33:46.465" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:33:46.466" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:33:46.466" starttime="20170918 10:33:46.465" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:33:46.466" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:33:46.466" starttime="20170918 10:33:46.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:33:46.757" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:33:46.757" starttime="20170918 10:33:46.467" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:46.757" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:33:46.757" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:46.757" starttime="20170918 10:33:46.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:33:46.758" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:46.758" starttime="20170918 10:33:46.758" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:46.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:46.759" starttime="20170918 10:33:46.758" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:46.759" starttime="20170918 10:33:46.463" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:46.759" starttime="20170918 10:33:46.463" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:46.759" starttime="20170918 10:33:46.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:33:46.760" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:33:46.760" starttime="20170918 10:33:46.759" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:46.762" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:46.762" starttime="20170918 10:33:46.761" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:46.763" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:46.763" starttime="20170918 10:33:46.763" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:46.764" starttime="20170918 10:33:46.762" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:46.764" starttime="20170918 10:33:46.761" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:46.764" starttime="20170918 10:33:46.760" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:33:46.826" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:33:46.826" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:46.826" starttime="20170918 10:33:46.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:46.828" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:46.828" starttime="20170918 10:33:46.827" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:46.829" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:46.829" starttime="20170918 10:33:46.829" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:46.829" starttime="20170918 10:33:46.828" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:46.829" starttime="20170918 10:33:46.827" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:46.829" starttime="20170918 10:33:46.826" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:33:46.830" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:33:46.830" starttime="20170918 10:33:46.829" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:46.830" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:46.830" starttime="20170918 10:33:46.461" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:46.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:46.831" starttime="20170918 10:33:46.830" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:33:46.831" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:33:46.831" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:33:46.831" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:33:46.831" starttime="20170918 10:33:46.831" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:46.832" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:33:46.832" starttime="20170918 10:33:46.460" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:46.832" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:33:46.832" starttime="20170918 10:33:46.460" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:33:46.832" starttime="20170918 10:33:46.832" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:46.833" starttime="20170918 10:33:46.460" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:33:46.836" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:33:46.837" starttime="20170918 10:33:46.836" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:33:46.837" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:33:46.837" starttime="20170918 10:33:46.837" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:33:46.838" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:33:46.838" starttime="20170918 10:33:46.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:33:46.838" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:33:46.839" starttime="20170918 10:33:46.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:33:47.092" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:33:47.092" starttime="20170918 10:33:46.839" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:47.092" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:33:47.092" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:47.092" starttime="20170918 10:33:46.839" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:33:47.093" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:47.093" starttime="20170918 10:33:47.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:47.094" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:47.094" starttime="20170918 10:33:47.093" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:47.094" starttime="20170918 10:33:46.835" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:47.094" starttime="20170918 10:33:46.835" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:47.094" starttime="20170918 10:33:46.834" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:33:47.095" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:33:47.095" starttime="20170918 10:33:47.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:47.097" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:47.097" starttime="20170918 10:33:47.096" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:47.098" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:47.098" starttime="20170918 10:33:47.098" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:47.098" starttime="20170918 10:33:47.097" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:47.098" starttime="20170918 10:33:47.096" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:47.098" starttime="20170918 10:33:47.095" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:33:47.186" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:33:47.186" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:47.186" starttime="20170918 10:33:47.098" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:47.188" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:47.188" starttime="20170918 10:33:47.187" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:47.189" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:47.189" starttime="20170918 10:33:47.188" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:47.189" starttime="20170918 10:33:47.188" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:47.189" starttime="20170918 10:33:47.187" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:47.189" starttime="20170918 10:33:47.186" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:33:47.189" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:33:47.190" starttime="20170918 10:33:47.189" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:47.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:47.190" starttime="20170918 10:33:46.834" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:47.190" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:47.191" starttime="20170918 10:33:47.190" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:33:47.191" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:33:47.191" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:33:47.192" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:33:47.192" starttime="20170918 10:33:47.191" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:47.192" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:33:47.192" starttime="20170918 10:33:46.833" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:47.193" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:33:47.193" starttime="20170918 10:33:46.833" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:33:47.194" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:33:47.194" starttime="20170918 10:33:47.193" status="FAIL"></status>
</kw>
<status endtime="20170918 10:33:47.194" starttime="20170918 10:33:46.459" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:33:57.199" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:33:57.200" starttime="20170918 10:33:57.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:33:57.200" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:33:57.200" starttime="20170918 10:33:57.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:33:57.201" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:33:57.201" starttime="20170918 10:33:57.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:33:57.201" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:33:57.201" starttime="20170918 10:33:57.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:33:57.438" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:33:57.439" starttime="20170918 10:33:57.202" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:57.439" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:33:57.439" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:57.439" starttime="20170918 10:33:57.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:33:57.439" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:57.440" starttime="20170918 10:33:57.439" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:57.440" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:57.440" starttime="20170918 10:33:57.440" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.440" starttime="20170918 10:33:57.198" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.441" starttime="20170918 10:33:57.197" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.441" starttime="20170918 10:33:57.197" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:33:57.441" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:33:57.441" starttime="20170918 10:33:57.441" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:57.443" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:57.443" starttime="20170918 10:33:57.443" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:57.444" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:57.444" starttime="20170918 10:33:57.444" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.445" starttime="20170918 10:33:57.444" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.445" starttime="20170918 10:33:57.442" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.445" starttime="20170918 10:33:57.442" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:33:57.590" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:33:57.590" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:57.590" starttime="20170918 10:33:57.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:57.592" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:57.592" starttime="20170918 10:33:57.591" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:57.593" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:57.593" starttime="20170918 10:33:57.593" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.593" starttime="20170918 10:33:57.592" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.593" starttime="20170918 10:33:57.591" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.593" starttime="20170918 10:33:57.590" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:33:57.594" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:33:57.594" starttime="20170918 10:33:57.594" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:57.594" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:57.594" starttime="20170918 10:33:57.196" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:57.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:57.595" starttime="20170918 10:33:57.594" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:33:57.595" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:33:57.595" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:33:57.596" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:33:57.596" starttime="20170918 10:33:57.595" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:57.596" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:33:57.596" starttime="20170918 10:33:57.196" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:57.596" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:33:57.596" starttime="20170918 10:33:57.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:33:57.597" starttime="20170918 10:33:57.596" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.597" starttime="20170918 10:33:57.195" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:33:57.600" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:33:57.601" starttime="20170918 10:33:57.600" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:33:57.601" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:33:57.601" starttime="20170918 10:33:57.601" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:33:57.602" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:33:57.602" starttime="20170918 10:33:57.602" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:33:57.603" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:33:57.603" starttime="20170918 10:33:57.602" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:33:57.799" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:33:57.799" starttime="20170918 10:33:57.603" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:57.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:33:57.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:57.799" starttime="20170918 10:33:57.603" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:33:57.800" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:57.800" starttime="20170918 10:33:57.799" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:57.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:57.800" starttime="20170918 10:33:57.800" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.800" starttime="20170918 10:33:57.600" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.801" starttime="20170918 10:33:57.599" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.801" starttime="20170918 10:33:57.599" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:33:57.801" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:33:57.801" starttime="20170918 10:33:57.801" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:57.804" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:57.804" starttime="20170918 10:33:57.803" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:57.805" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:33:57.805" starttime="20170918 10:33:57.804" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.805" starttime="20170918 10:33:57.804" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.805" starttime="20170918 10:33:57.802" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.805" starttime="20170918 10:33:57.802" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:33:57.906" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:33:57.907" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:57.907" starttime="20170918 10:33:57.805" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:33:57.909" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:57.909" starttime="20170918 10:33:57.908" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:33:57.910" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:33:57.910" starttime="20170918 10:33:57.910" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.910" starttime="20170918 10:33:57.909" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.910" starttime="20170918 10:33:57.907" status="PASS"></status>
</kw>
<status endtime="20170918 10:33:57.910" starttime="20170918 10:33:57.907" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:33:57.911" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:33:57.911" starttime="20170918 10:33:57.911" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:57.911" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:33:57.911" starttime="20170918 10:33:57.598" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:33:57.912" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:33:57.912" starttime="20170918 10:33:57.911" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:33:57.912" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:33:57.912" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:33:57.912" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:33:57.912" starttime="20170918 10:33:57.912" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:57.913" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:33:57.913" starttime="20170918 10:33:57.597" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:33:57.913" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:33:57.913" starttime="20170918 10:33:57.597" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:33:57.914" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:33:57.914" starttime="20170918 10:33:57.913" status="FAIL"></status>
</kw>
<status endtime="20170918 10:33:57.914" starttime="20170918 10:33:57.194" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:34:07.919" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:34:07.920" starttime="20170918 10:34:07.919" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:34:07.920" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:34:07.920" starttime="20170918 10:34:07.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:34:07.921" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:34:07.921" starttime="20170918 10:34:07.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:34:07.922" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:34:07.922" starttime="20170918 10:34:07.921" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:34:08.164" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:34:08.164" starttime="20170918 10:34:07.923" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:08.164" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:34:08.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:08.164" starttime="20170918 10:34:07.922" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:34:08.165" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:08.165" starttime="20170918 10:34:08.165" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:08.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:08.166" starttime="20170918 10:34:08.165" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.166" starttime="20170918 10:34:07.918" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.166" starttime="20170918 10:34:07.918" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.166" starttime="20170918 10:34:07.917" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:34:08.167" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:34:08.167" starttime="20170918 10:34:08.166" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:08.169" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:08.169" starttime="20170918 10:34:08.168" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:08.170" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:08.170" starttime="20170918 10:34:08.169" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.170" starttime="20170918 10:34:08.169" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.170" starttime="20170918 10:34:08.167" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.170" starttime="20170918 10:34:08.167" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:34:08.268" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:34:08.268" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:08.268" starttime="20170918 10:34:08.170" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:08.270" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:08.270" starttime="20170918 10:34:08.270" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:08.271" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:08.271" starttime="20170918 10:34:08.271" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.271" starttime="20170918 10:34:08.270" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.271" starttime="20170918 10:34:08.269" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.271" starttime="20170918 10:34:08.269" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:34:08.272" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:34:08.272" starttime="20170918 10:34:08.272" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:08.272" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:08.272" starttime="20170918 10:34:07.917" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:08.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:08.273" starttime="20170918 10:34:08.272" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:34:08.273" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:34:08.273" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:34:08.274" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:34:08.274" starttime="20170918 10:34:08.273" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:08.274" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:34:08.274" starttime="20170918 10:34:07.916" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:08.274" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:34:08.274" starttime="20170918 10:34:07.916" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:34:08.275" starttime="20170918 10:34:08.275" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.275" starttime="20170918 10:34:07.915" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:34:08.280" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:34:08.280" starttime="20170918 10:34:08.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:34:08.280" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:34:08.281" starttime="20170918 10:34:08.280" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:34:08.281" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:34:08.281" starttime="20170918 10:34:08.281" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:34:08.282" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:34:08.282" starttime="20170918 10:34:08.281" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:34:08.541" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:34:08.541" starttime="20170918 10:34:08.282" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:08.541" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:34:08.541" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:08.541" starttime="20170918 10:34:08.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:34:08.542" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:08.542" starttime="20170918 10:34:08.541" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:08.542" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:08.543" starttime="20170918 10:34:08.542" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.543" starttime="20170918 10:34:08.279" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.543" starttime="20170918 10:34:08.278" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.543" starttime="20170918 10:34:08.277" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:34:08.543" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:34:08.543" starttime="20170918 10:34:08.543" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:08.546" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:08.546" starttime="20170918 10:34:08.545" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:08.547" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:08.547" starttime="20170918 10:34:08.546" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.547" starttime="20170918 10:34:08.546" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.547" starttime="20170918 10:34:08.544" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.547" starttime="20170918 10:34:08.544" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:34:08.634" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:34:08.634" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:08.634" starttime="20170918 10:34:08.547" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:08.636" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:08.636" starttime="20170918 10:34:08.636" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:08.638" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:08.638" starttime="20170918 10:34:08.637" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.638" starttime="20170918 10:34:08.636" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.638" starttime="20170918 10:34:08.635" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:08.638" starttime="20170918 10:34:08.635" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:34:08.638" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:34:08.638" starttime="20170918 10:34:08.638" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:08.639" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:08.639" starttime="20170918 10:34:08.277" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:08.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:08.639" starttime="20170918 10:34:08.639" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:34:08.640" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:34:08.640" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:34:08.640" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:34:08.640" starttime="20170918 10:34:08.640" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:08.640" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:34:08.640" starttime="20170918 10:34:08.276" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:08.641" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:34:08.641" starttime="20170918 10:34:08.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:34:08.641" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:34:08.641" starttime="20170918 10:34:08.641" status="FAIL"></status>
</kw>
<status endtime="20170918 10:34:08.642" starttime="20170918 10:34:07.914" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:34:18.646" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:34:18.647" starttime="20170918 10:34:18.646" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:34:18.647" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:34:18.647" starttime="20170918 10:34:18.647" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:34:18.648" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:34:18.648" starttime="20170918 10:34:18.648" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:34:18.649" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:34:18.649" starttime="20170918 10:34:18.648" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:34:18.843" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:34:18.843" starttime="20170918 10:34:18.649" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:18.844" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:34:18.844" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:18.844" starttime="20170918 10:34:18.649" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:34:18.845" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:18.845" starttime="20170918 10:34:18.844" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:18.845" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:18.845" starttime="20170918 10:34:18.845" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:18.845" starttime="20170918 10:34:18.646" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:18.845" starttime="20170918 10:34:18.645" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:18.846" starttime="20170918 10:34:18.644" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:34:18.846" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:34:18.846" starttime="20170918 10:34:18.846" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:18.848" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:18.848" starttime="20170918 10:34:18.848" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:18.849" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:18.849" starttime="20170918 10:34:18.849" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:18.849" starttime="20170918 10:34:18.848" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:18.850" starttime="20170918 10:34:18.847" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:18.850" starttime="20170918 10:34:18.846" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:34:18.912" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:34:18.912" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:18.912" starttime="20170918 10:34:18.850" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:18.914" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:18.914" starttime="20170918 10:34:18.913" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:18.915" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:18.915" starttime="20170918 10:34:18.914" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:18.915" starttime="20170918 10:34:18.914" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:18.915" starttime="20170918 10:34:18.913" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:18.915" starttime="20170918 10:34:18.912" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:34:18.915" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:34:18.916" starttime="20170918 10:34:18.915" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:18.916" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:18.916" starttime="20170918 10:34:18.644" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:18.916" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:18.917" starttime="20170918 10:34:18.916" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:34:18.917" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:34:18.917" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:34:18.917" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:34:18.917" starttime="20170918 10:34:18.917" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:18.918" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:34:18.918" starttime="20170918 10:34:18.643" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:18.918" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:34:18.918" starttime="20170918 10:34:18.643" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:34:18.918" starttime="20170918 10:34:18.918" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:18.919" starttime="20170918 10:34:18.642" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:34:18.922" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:34:18.923" starttime="20170918 10:34:18.922" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:34:18.923" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:34:18.923" starttime="20170918 10:34:18.923" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:34:18.924" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:34:18.924" starttime="20170918 10:34:18.924" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:34:18.925" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:34:18.925" starttime="20170918 10:34:18.924" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:34:19.129" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:34:19.129" starttime="20170918 10:34:18.925" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:19.129" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:34:19.129" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:19.129" starttime="20170918 10:34:18.925" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:34:19.130" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:19.130" starttime="20170918 10:34:19.129" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:19.130" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:19.131" starttime="20170918 10:34:19.130" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:19.131" starttime="20170918 10:34:18.921" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:19.131" starttime="20170918 10:34:18.921" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:19.131" starttime="20170918 10:34:18.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:34:19.131" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:34:19.131" starttime="20170918 10:34:19.131" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:19.134" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:19.134" starttime="20170918 10:34:19.133" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:19.135" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:19.135" starttime="20170918 10:34:19.134" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:19.135" starttime="20170918 10:34:19.134" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:19.135" starttime="20170918 10:34:19.132" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:19.135" starttime="20170918 10:34:19.132" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:34:19.256" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:34:19.256" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:19.256" starttime="20170918 10:34:19.135" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:19.258" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:19.258" starttime="20170918 10:34:19.257" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:19.259" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:19.259" starttime="20170918 10:34:19.259" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:19.259" starttime="20170918 10:34:19.258" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:19.259" starttime="20170918 10:34:19.257" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:19.259" starttime="20170918 10:34:19.256" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:34:19.260" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:34:19.260" starttime="20170918 10:34:19.259" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:19.260" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:19.260" starttime="20170918 10:34:18.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:19.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:19.261" starttime="20170918 10:34:19.260" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:34:19.261" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:34:19.261" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:34:19.261" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:34:19.261" starttime="20170918 10:34:19.261" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:19.262" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:34:19.262" starttime="20170918 10:34:18.919" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:19.262" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:34:19.262" starttime="20170918 10:34:18.919" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:34:19.263" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:34:19.263" starttime="20170918 10:34:19.262" status="FAIL"></status>
</kw>
<status endtime="20170918 10:34:19.263" starttime="20170918 10:34:18.642" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:34:29.269" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:34:29.269" starttime="20170918 10:34:29.268" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:34:29.270" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:34:29.270" starttime="20170918 10:34:29.269" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:34:29.270" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:34:29.270" starttime="20170918 10:34:29.270" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:34:29.271" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:34:29.271" starttime="20170918 10:34:29.271" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:34:29.449" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:34:29.449" starttime="20170918 10:34:29.272" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:29.449" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:34:29.449" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:29.449" starttime="20170918 10:34:29.271" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:34:29.449" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:29.450" starttime="20170918 10:34:29.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:29.450" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:29.450" starttime="20170918 10:34:29.450" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.450" starttime="20170918 10:34:29.268" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.450" starttime="20170918 10:34:29.267" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.451" starttime="20170918 10:34:29.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:34:29.451" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:34:29.451" starttime="20170918 10:34:29.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:29.454" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:29.454" starttime="20170918 10:34:29.453" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:29.456" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:29.456" starttime="20170918 10:34:29.455" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.456" starttime="20170918 10:34:29.455" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.456" starttime="20170918 10:34:29.452" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.456" starttime="20170918 10:34:29.452" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:34:29.518" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:34:29.519" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:29.519" starttime="20170918 10:34:29.457" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:29.520" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:29.520" starttime="20170918 10:34:29.520" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:29.521" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:29.521" starttime="20170918 10:34:29.521" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.521" starttime="20170918 10:34:29.520" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.522" starttime="20170918 10:34:29.519" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.522" starttime="20170918 10:34:29.519" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:34:29.522" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:34:29.522" starttime="20170918 10:34:29.522" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:29.522" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:29.522" starttime="20170918 10:34:29.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:29.523" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:29.523" starttime="20170918 10:34:29.523" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:34:29.524" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:34:29.524" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:34:29.524" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:34:29.524" starttime="20170918 10:34:29.523" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:29.524" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:34:29.524" starttime="20170918 10:34:29.265" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:29.524" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:34:29.524" starttime="20170918 10:34:29.264" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:34:29.525" starttime="20170918 10:34:29.525" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.525" starttime="20170918 10:34:29.264" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:34:29.529" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:34:29.529" starttime="20170918 10:34:29.528" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:34:29.529" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:34:29.530" starttime="20170918 10:34:29.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:34:29.530" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:34:29.530" starttime="20170918 10:34:29.530" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:34:29.531" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:34:29.531" starttime="20170918 10:34:29.530" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:34:29.723" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:34:29.723" starttime="20170918 10:34:29.531" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:29.723" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:34:29.723" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:29.723" starttime="20170918 10:34:29.531" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:34:29.723" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:29.724" starttime="20170918 10:34:29.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:29.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:29.724" starttime="20170918 10:34:29.724" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.724" starttime="20170918 10:34:29.528" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.724" starttime="20170918 10:34:29.527" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.725" starttime="20170918 10:34:29.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:34:29.725" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:34:29.725" starttime="20170918 10:34:29.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:29.727" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:29.727" starttime="20170918 10:34:29.727" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:29.728" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:29.728" starttime="20170918 10:34:29.728" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.729" starttime="20170918 10:34:29.728" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.729" starttime="20170918 10:34:29.726" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.729" starttime="20170918 10:34:29.726" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:34:29.846" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:34:29.846" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:29.846" starttime="20170918 10:34:29.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:29.848" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:29.848" starttime="20170918 10:34:29.847" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:29.849" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:29.849" starttime="20170918 10:34:29.848" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.849" starttime="20170918 10:34:29.848" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.849" starttime="20170918 10:34:29.847" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:29.849" starttime="20170918 10:34:29.846" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:34:29.849" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:34:29.850" starttime="20170918 10:34:29.849" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:29.850" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:29.850" starttime="20170918 10:34:29.526" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:29.850" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:29.851" starttime="20170918 10:34:29.850" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:34:29.851" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:34:29.851" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:34:29.851" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:34:29.851" starttime="20170918 10:34:29.851" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:29.852" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:34:29.852" starttime="20170918 10:34:29.526" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:29.852" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:34:29.852" starttime="20170918 10:34:29.525" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:34:29.853" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:34:29.853" starttime="20170918 10:34:29.852" status="FAIL"></status>
</kw>
<status endtime="20170918 10:34:29.853" starttime="20170918 10:34:29.263" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:34:39.860" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:34:39.861" starttime="20170918 10:34:39.860" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:34:39.862" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:34:39.862" starttime="20170918 10:34:39.861" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:34:39.862" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:34:39.862" starttime="20170918 10:34:39.862" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:34:39.863" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:34:39.863" starttime="20170918 10:34:39.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:34:40.082" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:34:40.082" starttime="20170918 10:34:39.864" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:40.083" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:34:40.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:40.083" starttime="20170918 10:34:39.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:34:40.083" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:40.083" starttime="20170918 10:34:40.083" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:40.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:40.084" starttime="20170918 10:34:40.084" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.084" starttime="20170918 10:34:39.859" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.084" starttime="20170918 10:34:39.856" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.084" starttime="20170918 10:34:39.856" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:34:40.085" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:34:40.085" starttime="20170918 10:34:40.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:40.087" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:40.087" starttime="20170918 10:34:40.086" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:40.088" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:40.088" starttime="20170918 10:34:40.088" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.088" starttime="20170918 10:34:40.087" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.088" starttime="20170918 10:34:40.086" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.088" starttime="20170918 10:34:40.085" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:34:40.151" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:34:40.151" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:40.151" starttime="20170918 10:34:40.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:40.153" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:40.153" starttime="20170918 10:34:40.152" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:40.154" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:40.154" starttime="20170918 10:34:40.154" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.154" starttime="20170918 10:34:40.153" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.154" starttime="20170918 10:34:40.152" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.154" starttime="20170918 10:34:40.151" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:34:40.155" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:34:40.155" starttime="20170918 10:34:40.154" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:40.155" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:40.155" starttime="20170918 10:34:39.855" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:40.156" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:40.156" starttime="20170918 10:34:40.155" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:34:40.156" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:34:40.156" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:34:40.156" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:34:40.156" starttime="20170918 10:34:40.156" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:40.157" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:34:40.157" starttime="20170918 10:34:39.854" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:40.157" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:34:40.157" starttime="20170918 10:34:39.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:34:40.157" starttime="20170918 10:34:40.157" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.158" starttime="20170918 10:34:39.854" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:34:40.161" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:34:40.161" starttime="20170918 10:34:40.161" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:34:40.162" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:34:40.162" starttime="20170918 10:34:40.162" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:34:40.163" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:34:40.163" starttime="20170918 10:34:40.162" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:34:40.163" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:34:40.163" starttime="20170918 10:34:40.163" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:34:40.353" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:34:40.353" starttime="20170918 10:34:40.164" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:40.353" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:34:40.353" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:40.353" starttime="20170918 10:34:40.163" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:34:40.354" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:40.354" starttime="20170918 10:34:40.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:40.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:40.355" starttime="20170918 10:34:40.354" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.355" starttime="20170918 10:34:40.160" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.355" starttime="20170918 10:34:40.160" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.355" starttime="20170918 10:34:40.159" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:34:40.356" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:34:40.356" starttime="20170918 10:34:40.355" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:40.358" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:40.358" starttime="20170918 10:34:40.357" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:40.359" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:40.359" starttime="20170918 10:34:40.359" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.359" starttime="20170918 10:34:40.358" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.359" starttime="20170918 10:34:40.356" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.359" starttime="20170918 10:34:40.356" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:34:40.448" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:34:40.448" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:40.448" starttime="20170918 10:34:40.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:40.450" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:40.450" starttime="20170918 10:34:40.449" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:40.451" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:40.451" starttime="20170918 10:34:40.451" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.451" starttime="20170918 10:34:40.450" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.451" starttime="20170918 10:34:40.449" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:40.451" starttime="20170918 10:34:40.449" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:34:40.452" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:34:40.452" starttime="20170918 10:34:40.451" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:40.452" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:40.452" starttime="20170918 10:34:40.159" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:40.453" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:40.453" starttime="20170918 10:34:40.452" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:34:40.453" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:34:40.453" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:34:40.453" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:34:40.453" starttime="20170918 10:34:40.453" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:40.454" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:34:40.454" starttime="20170918 10:34:40.158" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:40.454" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:34:40.454" starttime="20170918 10:34:40.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:34:40.455" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:34:40.455" starttime="20170918 10:34:40.454" status="FAIL"></status>
</kw>
<status endtime="20170918 10:34:40.455" starttime="20170918 10:34:39.853" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:34:50.460" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:34:50.460" starttime="20170918 10:34:50.459" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:34:50.461" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:34:50.461" starttime="20170918 10:34:50.460" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:34:50.461" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:34:50.461" starttime="20170918 10:34:50.461" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:34:50.462" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:34:50.462" starttime="20170918 10:34:50.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:34:50.799" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:34:50.799" starttime="20170918 10:34:50.463" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:50.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:34:50.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:50.799" starttime="20170918 10:34:50.463" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:34:50.800" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:50.800" starttime="20170918 10:34:50.800" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:50.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:50.801" starttime="20170918 10:34:50.800" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:50.801" starttime="20170918 10:34:50.459" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:50.801" starttime="20170918 10:34:50.458" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:50.801" starttime="20170918 10:34:50.458" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:34:50.802" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:34:50.802" starttime="20170918 10:34:50.801" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:50.804" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:50.804" starttime="20170918 10:34:50.803" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:50.805" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:50.805" starttime="20170918 10:34:50.804" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:50.805" starttime="20170918 10:34:50.804" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:50.805" starttime="20170918 10:34:50.802" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:50.805" starttime="20170918 10:34:50.802" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:34:50.867" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:34:50.867" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:50.867" starttime="20170918 10:34:50.805" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:50.869" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:50.869" starttime="20170918 10:34:50.868" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:50.870" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:50.870" starttime="20170918 10:34:50.869" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:50.870" starttime="20170918 10:34:50.869" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:50.870" starttime="20170918 10:34:50.868" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:50.870" starttime="20170918 10:34:50.867" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:34:50.870" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:34:50.871" starttime="20170918 10:34:50.870" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:50.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:50.871" starttime="20170918 10:34:50.457" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:50.871" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:50.871" starttime="20170918 10:34:50.871" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:34:50.872" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:34:50.872" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:34:50.872" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:34:50.872" starttime="20170918 10:34:50.872" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:50.872" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:34:50.872" starttime="20170918 10:34:50.457" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:50.873" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:34:50.873" starttime="20170918 10:34:50.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:34:50.873" starttime="20170918 10:34:50.873" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:50.873" starttime="20170918 10:34:50.456" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:34:50.877" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:34:50.878" starttime="20170918 10:34:50.877" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:34:50.878" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:34:50.878" starttime="20170918 10:34:50.878" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:34:50.879" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:34:50.879" starttime="20170918 10:34:50.878" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:34:50.879" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:34:50.879" starttime="20170918 10:34:50.879" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:34:51.069" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:34:51.069" starttime="20170918 10:34:50.880" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:51.069" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:34:51.069" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:51.069" starttime="20170918 10:34:50.880" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:34:51.070" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:51.070" starttime="20170918 10:34:51.069" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:51.070" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:51.070" starttime="20170918 10:34:51.070" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:51.071" starttime="20170918 10:34:50.876" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:51.071" starttime="20170918 10:34:50.876" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:51.071" starttime="20170918 10:34:50.875" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:34:51.071" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:34:51.071" starttime="20170918 10:34:51.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:51.073" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:51.073" starttime="20170918 10:34:51.073" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:51.074" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:34:51.074" starttime="20170918 10:34:51.074" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:51.074" starttime="20170918 10:34:51.074" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:51.075" starttime="20170918 10:34:51.072" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:51.075" starttime="20170918 10:34:51.072" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:34:51.162" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:34:51.162" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:51.162" starttime="20170918 10:34:51.075" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:34:51.163" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:51.163" starttime="20170918 10:34:51.163" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:34:51.165" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:34:51.165" starttime="20170918 10:34:51.164" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:51.165" starttime="20170918 10:34:51.164" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:51.165" starttime="20170918 10:34:51.162" status="PASS"></status>
</kw>
<status endtime="20170918 10:34:51.165" starttime="20170918 10:34:51.162" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:34:51.166" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:34:51.166" starttime="20170918 10:34:51.165" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:51.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:34:51.166" starttime="20170918 10:34:50.874" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:34:51.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:34:51.167" starttime="20170918 10:34:51.166" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:34:51.167" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:34:51.167" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:34:51.167" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:34:51.167" starttime="20170918 10:34:51.167" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:51.168" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:34:51.168" starttime="20170918 10:34:50.874" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:34:51.168" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:34:51.168" starttime="20170918 10:34:50.874" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:34:51.169" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:34:51.169" starttime="20170918 10:34:51.168" status="FAIL"></status>
</kw>
<status endtime="20170918 10:34:51.169" starttime="20170918 10:34:50.455" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:01.174" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:01.174" starttime="20170918 10:35:01.174" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:01.175" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:01.175" starttime="20170918 10:35:01.175" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:01.176" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:01.176" starttime="20170918 10:35:01.175" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:01.176" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:01.176" starttime="20170918 10:35:01.176" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:01.377" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:01.377" starttime="20170918 10:35:01.177" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:01.378" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:01.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:01.378" starttime="20170918 10:35:01.177" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:01.378" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:01.378" starttime="20170918 10:35:01.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:01.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:01.379" starttime="20170918 10:35:01.379" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.379" starttime="20170918 10:35:01.173" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.379" starttime="20170918 10:35:01.173" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.379" starttime="20170918 10:35:01.172" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:01.380" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:35:01.380" starttime="20170918 10:35:01.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:01.382" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:01.382" starttime="20170918 10:35:01.381" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:01.383" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:01.383" starttime="20170918 10:35:01.383" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.383" starttime="20170918 10:35:01.382" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.383" starttime="20170918 10:35:01.381" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.384" starttime="20170918 10:35:01.380" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:01.472" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:35:01.472" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:01.472" starttime="20170918 10:35:01.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:01.474" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:01.474" starttime="20170918 10:35:01.473" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:01.475" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:01.475" starttime="20170918 10:35:01.474" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.475" starttime="20170918 10:35:01.474" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.475" starttime="20170918 10:35:01.473" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.475" starttime="20170918 10:35:01.472" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:01.476" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:01.476" starttime="20170918 10:35:01.475" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:01.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:01.476" starttime="20170918 10:35:01.171" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:01.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:01.477" starttime="20170918 10:35:01.476" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:01.477" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:01.477" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:01.477" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:35:01.477" starttime="20170918 10:35:01.477" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:01.478" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:35:01.478" starttime="20170918 10:35:01.171" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:01.478" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:35:01.478" starttime="20170918 10:35:01.170" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:35:01.478" starttime="20170918 10:35:01.478" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.479" starttime="20170918 10:35:01.170" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:01.482" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:01.483" starttime="20170918 10:35:01.482" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:01.483" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:01.483" starttime="20170918 10:35:01.483" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:01.484" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:01.484" starttime="20170918 10:35:01.484" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:01.485" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:01.485" starttime="20170918 10:35:01.484" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:01.749" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:01.749" starttime="20170918 10:35:01.486" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:01.749" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:01.749" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:01.749" starttime="20170918 10:35:01.485" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:01.750" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:01.750" starttime="20170918 10:35:01.750" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:01.751" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:01.751" starttime="20170918 10:35:01.750" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.751" starttime="20170918 10:35:01.481" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.751" starttime="20170918 10:35:01.481" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.751" starttime="20170918 10:35:01.480" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:01.752" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:35:01.752" starttime="20170918 10:35:01.751" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:01.754" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:01.754" starttime="20170918 10:35:01.753" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:01.755" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:01.755" starttime="20170918 10:35:01.755" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.755" starttime="20170918 10:35:01.754" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.755" starttime="20170918 10:35:01.753" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.755" starttime="20170918 10:35:01.752" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:01.855" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:35:01.855" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:01.855" starttime="20170918 10:35:01.755" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:01.857" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:01.857" starttime="20170918 10:35:01.856" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:01.858" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:01.858" starttime="20170918 10:35:01.857" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.858" starttime="20170918 10:35:01.857" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.858" starttime="20170918 10:35:01.856" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:01.858" starttime="20170918 10:35:01.855" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:01.858" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:01.859" starttime="20170918 10:35:01.858" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:01.859" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:01.859" starttime="20170918 10:35:01.480" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:01.859" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:01.860" starttime="20170918 10:35:01.859" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:01.860" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:01.860" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:01.860" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:35:01.860" starttime="20170918 10:35:01.860" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:01.861" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:35:01.861" starttime="20170918 10:35:01.479" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:01.861" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:35:01.861" starttime="20170918 10:35:01.479" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:35:01.862" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:35:01.862" starttime="20170918 10:35:01.861" status="FAIL"></status>
</kw>
<status endtime="20170918 10:35:01.862" starttime="20170918 10:35:01.169" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:11.867" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:11.868" starttime="20170918 10:35:11.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:11.868" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:11.868" starttime="20170918 10:35:11.868" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:11.869" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:11.869" starttime="20170918 10:35:11.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:11.870" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:11.870" starttime="20170918 10:35:11.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:12.072" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:12.072" starttime="20170918 10:35:11.870" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:12.073" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:12.073" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:12.073" starttime="20170918 10:35:11.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:12.073" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:12.073" starttime="20170918 10:35:12.073" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:12.074" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:12.074" starttime="20170918 10:35:12.074" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.074" starttime="20170918 10:35:11.866" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.074" starttime="20170918 10:35:11.866" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.074" starttime="20170918 10:35:11.865" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:12.075" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:35:12.075" starttime="20170918 10:35:12.075" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:12.077" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:12.077" starttime="20170918 10:35:12.077" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:12.078" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:12.079" starttime="20170918 10:35:12.078" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.079" starttime="20170918 10:35:12.077" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.079" starttime="20170918 10:35:12.076" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.079" starttime="20170918 10:35:12.075" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:12.141" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:35:12.141" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:12.142" starttime="20170918 10:35:12.079" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:12.143" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:12.143" starttime="20170918 10:35:12.143" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:12.144" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:12.144" starttime="20170918 10:35:12.144" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.144" starttime="20170918 10:35:12.143" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.145" starttime="20170918 10:35:12.142" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.145" starttime="20170918 10:35:12.142" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:12.145" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:12.145" starttime="20170918 10:35:12.145" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:12.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:12.145" starttime="20170918 10:35:11.865" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:12.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:12.146" starttime="20170918 10:35:12.146" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:12.147" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:12.147" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:12.147" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:35:12.147" starttime="20170918 10:35:12.146" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:12.147" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:35:12.147" starttime="20170918 10:35:11.864" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:12.147" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:35:12.147" starttime="20170918 10:35:11.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:35:12.148" starttime="20170918 10:35:12.148" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.148" starttime="20170918 10:35:11.863" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:12.152" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:12.152" starttime="20170918 10:35:12.151" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:12.153" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:12.153" starttime="20170918 10:35:12.152" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:12.153" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:12.153" starttime="20170918 10:35:12.153" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:12.154" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:12.154" starttime="20170918 10:35:12.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:12.390" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:12.390" starttime="20170918 10:35:12.155" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:12.391" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:12.391" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:12.391" starttime="20170918 10:35:12.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:12.391" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:12.391" starttime="20170918 10:35:12.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:12.392" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:12.392" starttime="20170918 10:35:12.392" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.392" starttime="20170918 10:35:12.151" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.392" starttime="20170918 10:35:12.150" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.392" starttime="20170918 10:35:12.150" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:12.393" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:35:12.393" starttime="20170918 10:35:12.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:12.395" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:12.395" starttime="20170918 10:35:12.394" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:12.396" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:12.396" starttime="20170918 10:35:12.396" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.396" starttime="20170918 10:35:12.395" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.397" starttime="20170918 10:35:12.394" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.397" starttime="20170918 10:35:12.393" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:12.554" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:35:12.555" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:12.555" starttime="20170918 10:35:12.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:12.556" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:12.557" starttime="20170918 10:35:12.556" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:12.557" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:12.558" starttime="20170918 10:35:12.557" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.558" starttime="20170918 10:35:12.557" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.558" starttime="20170918 10:35:12.555" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:12.558" starttime="20170918 10:35:12.555" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:12.558" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:12.558" starttime="20170918 10:35:12.558" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:12.559" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:12.559" starttime="20170918 10:35:12.149" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:12.559" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:12.559" starttime="20170918 10:35:12.559" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:12.560" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:12.560" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:12.560" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:35:12.560" starttime="20170918 10:35:12.560" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:12.560" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:35:12.560" starttime="20170918 10:35:12.149" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:12.561" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:35:12.561" starttime="20170918 10:35:12.148" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:35:12.561" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:35:12.561" starttime="20170918 10:35:12.561" status="FAIL"></status>
</kw>
<status endtime="20170918 10:35:12.562" starttime="20170918 10:35:11.862" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:22.567" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:22.568" starttime="20170918 10:35:22.567" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:22.568" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:22.569" starttime="20170918 10:35:22.568" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:22.569" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:22.569" starttime="20170918 10:35:22.569" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:22.570" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:22.570" starttime="20170918 10:35:22.569" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:22.754" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:22.754" starttime="20170918 10:35:22.571" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:22.754" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:22.754" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:22.754" starttime="20170918 10:35:22.570" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:22.755" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:22.755" starttime="20170918 10:35:22.755" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:22.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:22.756" starttime="20170918 10:35:22.755" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:22.756" starttime="20170918 10:35:22.566" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:22.756" starttime="20170918 10:35:22.566" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:22.756" starttime="20170918 10:35:22.565" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:22.757" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:35:22.757" starttime="20170918 10:35:22.757" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:22.759" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:22.759" starttime="20170918 10:35:22.759" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:22.760" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:22.760" starttime="20170918 10:35:22.760" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:22.760" starttime="20170918 10:35:22.759" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:22.760" starttime="20170918 10:35:22.758" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:22.761" starttime="20170918 10:35:22.757" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:22.866" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:35:22.866" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:22.866" starttime="20170918 10:35:22.761" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:22.868" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:22.868" starttime="20170918 10:35:22.867" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:22.872" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:22.872" starttime="20170918 10:35:22.871" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:22.872" starttime="20170918 10:35:22.868" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:22.872" starttime="20170918 10:35:22.867" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:22.872" starttime="20170918 10:35:22.866" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:22.873" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:22.873" starttime="20170918 10:35:22.873" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:22.873" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:22.873" starttime="20170918 10:35:22.564" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:22.874" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:22.874" starttime="20170918 10:35:22.874" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:22.875" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:22.875" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:22.875" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:35:22.875" starttime="20170918 10:35:22.875" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:22.876" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:35:22.876" starttime="20170918 10:35:22.564" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:22.877" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:35:22.877" starttime="20170918 10:35:22.563" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:35:22.878" starttime="20170918 10:35:22.877" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:22.878" starttime="20170918 10:35:22.563" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:22.883" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:22.883" starttime="20170918 10:35:22.882" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:22.884" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:22.884" starttime="20170918 10:35:22.883" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:22.884" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:22.884" starttime="20170918 10:35:22.884" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:22.885" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:22.885" starttime="20170918 10:35:22.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:23.122" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:23.122" starttime="20170918 10:35:22.886" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:23.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:23.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:23.123" starttime="20170918 10:35:22.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:23.123" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:23.123" starttime="20170918 10:35:23.123" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:23.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:23.124" starttime="20170918 10:35:23.124" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:23.124" starttime="20170918 10:35:22.882" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:23.124" starttime="20170918 10:35:22.881" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:23.124" starttime="20170918 10:35:22.880" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:23.125" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:35:23.125" starttime="20170918 10:35:23.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:23.128" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:23.128" starttime="20170918 10:35:23.127" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:23.129" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:23.129" starttime="20170918 10:35:23.129" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:23.129" starttime="20170918 10:35:23.128" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:23.130" starttime="20170918 10:35:23.126" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:23.130" starttime="20170918 10:35:23.125" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:23.324" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:35:23.324" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:23.324" starttime="20170918 10:35:23.130" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:23.326" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:23.326" starttime="20170918 10:35:23.325" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:23.327" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:23.327" starttime="20170918 10:35:23.327" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:23.327" starttime="20170918 10:35:23.326" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:23.327" starttime="20170918 10:35:23.325" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:23.327" starttime="20170918 10:35:23.324" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:23.328" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:23.328" starttime="20170918 10:35:23.328" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:23.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:23.328" starttime="20170918 10:35:22.879" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:23.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:23.329" starttime="20170918 10:35:23.328" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:23.329" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:23.329" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:23.329" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:35:23.329" starttime="20170918 10:35:23.329" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:23.330" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:35:23.330" starttime="20170918 10:35:22.879" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:23.330" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:35:23.330" starttime="20170918 10:35:22.878" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:35:23.331" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:35:23.331" starttime="20170918 10:35:23.331" status="FAIL"></status>
</kw>
<status endtime="20170918 10:35:23.332" starttime="20170918 10:35:22.562" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:33.337" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:33.337" starttime="20170918 10:35:33.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:33.338" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:33.338" starttime="20170918 10:35:33.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:33.339" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:33.339" starttime="20170918 10:35:33.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:33.340" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:33.340" starttime="20170918 10:35:33.339" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:33.516" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:33.517" starttime="20170918 10:35:33.340" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:33.517" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:33.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:33.517" starttime="20170918 10:35:33.340" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:33.518" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:33.518" starttime="20170918 10:35:33.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:33.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:33.518" starttime="20170918 10:35:33.518" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.518" starttime="20170918 10:35:33.336" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.519" starttime="20170918 10:35:33.335" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.519" starttime="20170918 10:35:33.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:33.519" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:35:33.519" starttime="20170918 10:35:33.519" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:33.521" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:33.521" starttime="20170918 10:35:33.521" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:33.522" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:33.522" starttime="20170918 10:35:33.522" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.522" starttime="20170918 10:35:33.521" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.523" starttime="20170918 10:35:33.520" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.523" starttime="20170918 10:35:33.520" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:33.600" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:35:33.601" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:33.601" starttime="20170918 10:35:33.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:33.602" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:33.602" starttime="20170918 10:35:33.602" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:33.603" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:33.603" starttime="20170918 10:35:33.603" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.604" starttime="20170918 10:35:33.603" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.604" starttime="20170918 10:35:33.601" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.604" starttime="20170918 10:35:33.601" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:33.604" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:33.604" starttime="20170918 10:35:33.604" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:33.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:33.604" starttime="20170918 10:35:33.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:33.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:33.605" starttime="20170918 10:35:33.605" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:33.606" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:33.606" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:33.606" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:35:33.606" starttime="20170918 10:35:33.605" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:33.606" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:35:33.606" starttime="20170918 10:35:33.334" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:33.607" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:35:33.607" starttime="20170918 10:35:33.333" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:35:33.607" starttime="20170918 10:35:33.607" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.607" starttime="20170918 10:35:33.333" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:33.611" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:33.612" starttime="20170918 10:35:33.611" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:33.612" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:33.612" starttime="20170918 10:35:33.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:33.613" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:33.613" starttime="20170918 10:35:33.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:33.613" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:33.613" starttime="20170918 10:35:33.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:33.792" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:33.792" starttime="20170918 10:35:33.614" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:33.792" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:33.792" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:33.792" starttime="20170918 10:35:33.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:33.793" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:33.793" starttime="20170918 10:35:33.792" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:33.793" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:33.793" starttime="20170918 10:35:33.793" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.794" starttime="20170918 10:35:33.610" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.794" starttime="20170918 10:35:33.610" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.794" starttime="20170918 10:35:33.609" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:33.794" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:35:33.794" starttime="20170918 10:35:33.794" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:33.797" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:33.797" starttime="20170918 10:35:33.796" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:33.799" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:33.799" starttime="20170918 10:35:33.798" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.799" starttime="20170918 10:35:33.798" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.799" starttime="20170918 10:35:33.795" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.799" starttime="20170918 10:35:33.795" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:33.896" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:35:33.896" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:33.897" starttime="20170918 10:35:33.799" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:33.898" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:33.898" starttime="20170918 10:35:33.898" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:33.900" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:33.900" starttime="20170918 10:35:33.899" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.900" starttime="20170918 10:35:33.898" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.900" starttime="20170918 10:35:33.897" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:33.900" starttime="20170918 10:35:33.897" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:33.901" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:33.901" starttime="20170918 10:35:33.901" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:33.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:33.901" starttime="20170918 10:35:33.608" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:33.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:33.902" starttime="20170918 10:35:33.901" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:33.902" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:33.902" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:33.902" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:35:33.902" starttime="20170918 10:35:33.902" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:33.903" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:35:33.903" starttime="20170918 10:35:33.608" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:33.903" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:35:33.903" starttime="20170918 10:35:33.607" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:35:33.904" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:35:33.904" starttime="20170918 10:35:33.903" status="FAIL"></status>
</kw>
<status endtime="20170918 10:35:33.904" starttime="20170918 10:35:33.332" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:43.909" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:43.910" starttime="20170918 10:35:43.909" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:43.910" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:43.910" starttime="20170918 10:35:43.910" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:43.911" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:43.911" starttime="20170918 10:35:43.911" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:43.912" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:43.912" starttime="20170918 10:35:43.911" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:44.089" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:44.090" starttime="20170918 10:35:43.912" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:44.090" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:44.090" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:44.090" starttime="20170918 10:35:43.912" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:44.091" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:44.091" starttime="20170918 10:35:44.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:44.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:44.091" starttime="20170918 10:35:44.091" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.091" starttime="20170918 10:35:43.908" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.092" starttime="20170918 10:35:43.908" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.092" starttime="20170918 10:35:43.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:44.092" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:35:44.093" starttime="20170918 10:35:44.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:44.095" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:44.095" starttime="20170918 10:35:44.094" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:44.096" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:44.096" starttime="20170918 10:35:44.095" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.096" starttime="20170918 10:35:44.095" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.096" starttime="20170918 10:35:44.093" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.096" starttime="20170918 10:35:44.093" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:44.158" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:35:44.158" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:44.158" starttime="20170918 10:35:44.096" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:44.160" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:44.160" starttime="20170918 10:35:44.160" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:44.162" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:44.162" starttime="20170918 10:35:44.161" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.162" starttime="20170918 10:35:44.161" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.162" starttime="20170918 10:35:44.159" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.162" starttime="20170918 10:35:44.159" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:44.163" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:44.163" starttime="20170918 10:35:44.162" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:44.163" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:44.163" starttime="20170918 10:35:43.906" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:44.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:44.164" starttime="20170918 10:35:44.163" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:44.164" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:44.164" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:44.164" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:35:44.164" starttime="20170918 10:35:44.164" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:44.165" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:35:44.165" starttime="20170918 10:35:43.906" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:44.165" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:35:44.165" starttime="20170918 10:35:43.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:35:44.166" starttime="20170918 10:35:44.165" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.166" starttime="20170918 10:35:43.905" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:44.169" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:44.170" starttime="20170918 10:35:44.169" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:44.171" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:44.171" starttime="20170918 10:35:44.170" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:44.171" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:44.171" starttime="20170918 10:35:44.171" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:44.172" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:44.172" starttime="20170918 10:35:44.172" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:44.390" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:44.390" starttime="20170918 10:35:44.173" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:44.390" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:44.390" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:44.390" starttime="20170918 10:35:44.172" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:44.391" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:44.391" starttime="20170918 10:35:44.390" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:44.391" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:44.392" starttime="20170918 10:35:44.391" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.392" starttime="20170918 10:35:44.168" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.392" starttime="20170918 10:35:44.168" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.392" starttime="20170918 10:35:44.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:44.392" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:35:44.392" starttime="20170918 10:35:44.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:44.395" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:44.395" starttime="20170918 10:35:44.394" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:44.396" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:44.396" starttime="20170918 10:35:44.395" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.396" starttime="20170918 10:35:44.395" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.396" starttime="20170918 10:35:44.393" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.396" starttime="20170918 10:35:44.393" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:44.510" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:35:44.510" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:44.510" starttime="20170918 10:35:44.396" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:44.512" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:44.512" starttime="20170918 10:35:44.512" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:44.513" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:44.513" starttime="20170918 10:35:44.513" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.513" starttime="20170918 10:35:44.512" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.513" starttime="20170918 10:35:44.511" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.514" starttime="20170918 10:35:44.511" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:44.514" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:44.514" starttime="20170918 10:35:44.514" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:44.514" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:44.514" starttime="20170918 10:35:44.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:44.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:44.515" starttime="20170918 10:35:44.515" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:44.516" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:44.516" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:44.516" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:35:44.517" starttime="20170918 10:35:44.516" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:44.517" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:35:44.517" starttime="20170918 10:35:44.166" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:44.517" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:35:44.517" starttime="20170918 10:35:44.166" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:35:44.518" level="FAIL">Running != Quiesced</msg>
<status endtime="20170918 10:35:44.518" starttime="20170918 10:35:44.518" status="FAIL"></status>
</kw>
<status endtime="20170918 10:35:44.519" starttime="20170918 10:35:43.904" status="FAIL"></status>
</kw>
<msg timestamp="20170918 10:35:44.519" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</msg>
<status endtime="20170918 10:35:44.519" starttime="20170918 10:25:38.321" status="FAIL"></status>
</kw>
<status endtime="20170918 10:35:44.519" starttime="20170918 10:25:36.984" status="FAIL"></status>
</kw>
<status endtime="20170918 10:35:44.519" starttime="20170918 10:25:29.466" status="FAIL"></status>
</kw>
<status endtime="20170918 10:35:44.520" starttime="20170918 10:25:29.465" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:44.527" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:44.528" starttime="20170918 10:35:44.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:44.528" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:44.528" starttime="20170918 10:35:44.528" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:44.529" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:44.529" starttime="20170918 10:35:44.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:44.530" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:44.530" starttime="20170918 10:35:44.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:44.727" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:44.727" starttime="20170918 10:35:44.530" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:44.728" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:44.728" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:44.728" starttime="20170918 10:35:44.530" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:44.729" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:44.729" starttime="20170918 10:35:44.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:44.730" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:44.730" starttime="20170918 10:35:44.729" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.730" starttime="20170918 10:35:44.526" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.730" starttime="20170918 10:35:44.525" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.730" starttime="20170918 10:35:44.524" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:44.731" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:35:44.731" starttime="20170918 10:35:44.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:44.734" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:44.734" starttime="20170918 10:35:44.733" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:44.736" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:35:44.736" starttime="20170918 10:35:44.735" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.736" starttime="20170918 10:35:44.735" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.736" starttime="20170918 10:35:44.732" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.736" starttime="20170918 10:35:44.732" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:44.859" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:35:44.860" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:44.860" starttime="20170918 10:35:44.736" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:35:44.861" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:44.861" starttime="20170918 10:35:44.861" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:35:44.862" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:35:44.863" starttime="20170918 10:35:44.862" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.863" starttime="20170918 10:35:44.862" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.863" starttime="20170918 10:35:44.860" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:44.863" starttime="20170918 10:35:44.860" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:44.863" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:44.864" starttime="20170918 10:35:44.863" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:44.864" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:44.864" starttime="20170918 10:35:44.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:44.865" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:44.865" starttime="20170918 10:35:44.864" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:44.866" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:44.866" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:44.866" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:35:44.866" starttime="20170918 10:35:44.865" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:44.867" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:35:44.867" starttime="20170918 10:35:44.522" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:44.867" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:35:44.867" starttime="20170918 10:35:44.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170918 10:35:44.868" starttime="20170918 10:35:44.868" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:44.869" level="INFO">${status} = True</msg>
<status endtime="20170918 10:35:44.869" starttime="20170918 10:35:44.867" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:44.869" level="INFO">${status} = True</msg>
<status endtime="20170918 10:35:44.869" starttime="20170918 10:35:44.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170918 10:35:44.893" level="INFO">Length is 12</msg>
<status endtime="20170918 10:35:44.893" starttime="20170918 10:35:44.893" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170918 10:35:44.903" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170918 10:35:47.918" level="INFO">${RC} = 0</msg>
<msg timestamp="20170918 10:35:47.918" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.721 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.521 ms
64 bytes from 9.41.166.16...</msg>
<status endtime="20170918 10:35:47.919" starttime="20170918 10:35:44.894" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170918 10:35:47.934" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.721 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.521 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.518 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.523 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.518/0.570/0.721/0.091 ms</msg>
<status endtime="20170918 10:35:47.935" starttime="20170918 10:35:47.932" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170918 10:35:47.936" starttime="20170918 10:35:47.935" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:47.936" starttime="20170918 10:35:44.892" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170918 10:35:47.974" level="INFO">${cur_time} = 2017-09-18 10:35:47:973500</msg>
<status endtime="20170918 10:35:47.974" starttime="20170918 10:35:47.973" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170918 10:35:47.975" level="INFO">${cur_time} = 20170918103547973500</msg>
<status endtime="20170918 10:35:47.975" starttime="20170918 10:35:47.974" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:47.975" starttime="20170918 10:35:47.973" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:47.977" level="INFO">${FFDC_TIME} = 20170918103547973500</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170918 10:35:47.991" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170918 10:35:47.991" starttime="20170918 10:35:47.990" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170918 10:35:47.991" level="INFO">${suite_name} = 20170918103547973500_TestsTestBasicPoweron</msg>
<status endtime="20170918 10:35:47.991" starttime="20170918 10:35:47.991" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170918 10:35:47.992" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170918 10:35:47.992" starttime="20170918 10:35:47.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170918 10:35:47.993" level="INFO">${test_name} = 20170918103547973500_PowerOnTest</msg>
<status endtime="20170918 10:35:47.993" starttime="20170918 10:35:47.992" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:47.993" starttime="20170918 10:35:47.990" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:47.993" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/</msg>
<msg timestamp="20170918 10:35:47.993" level="INFO">${FFDC_PREFIX} = 20170918103547973500_</msg>
<msg timestamp="20170918 10:35:48.014" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.017" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.017" starttime="20170918 10:35:48.014" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:48.022" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.044" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.044" starttime="20170918 10:35:48.043" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.044" starttime="20170918 10:35:48.042" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.046" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.046" starttime="20170918 10:35:48.045" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.046" starttime="20170918 10:35:48.044" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.047" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.048" starttime="20170918 10:35:48.047" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.048" starttime="20170918 10:35:48.046" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.049" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.049" starttime="20170918 10:35:48.048" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.049" starttime="20170918 10:35:48.048" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.050" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.050" starttime="20170918 10:35:48.050" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.050" starttime="20170918 10:35:48.049" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.051" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.052" starttime="20170918 10:35:48.051" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.052" starttime="20170918 10:35:48.050" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.053" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.053" starttime="20170918 10:35:48.053" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.053" starttime="20170918 10:35:48.052" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.055" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.055" starttime="20170918 10:35:48.054" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.055" starttime="20170918 10:35:48.053" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.056" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.056" starttime="20170918 10:35:48.055" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.056" starttime="20170918 10:35:48.055" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.057" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.058" starttime="20170918 10:35:48.057" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.058" starttime="20170918 10:35:48.057" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.059" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.059" starttime="20170918 10:35:48.058" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.059" starttime="20170918 10:35:48.058" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.060" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.060" starttime="20170918 10:35:48.060" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.060" starttime="20170918 10:35:48.059" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.061" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.061" starttime="20170918 10:35:48.061" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.062" starttime="20170918 10:35:48.060" status="PASS"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170918 10:35:48.098" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:35:48.098" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170918 10:35:48.178" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170918 10:35:48.187" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170918 10:35:48.187" level="INFO">${stderr} = </msg>
<msg timestamp="20170918 10:35:48.188" level="INFO">${rc} = 0</msg>
<status endtime="20170918 10:35:48.188" starttime="20170918 10:35:48.062" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170918 10:35:48.188" level="INFO">Length is 0</msg>
<status endtime="20170918 10:35:48.188" starttime="20170918 10:35:48.188" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170918 10:35:48.189" level="INFO">Length is 11</msg>
<status endtime="20170918 10:35:48.189" starttime="20170918 10:35:48.189" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:48.189" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170918 10:35:48.189" starttime="20170918 10:35:48.062" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.191" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.191" starttime="20170918 10:35:48.190" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.191" starttime="20170918 10:35:48.189" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.191" starttime="20170918 10:35:48.056" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.192" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.192" starttime="20170918 10:35:48.192" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.192" starttime="20170918 10:35:48.191" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170918 10:35:48.193" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status endtime="20170918 10:35:48.193" starttime="20170918 10:35:48.193" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.209" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.210" starttime="20170918 10:35:48.194" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.210" starttime="20170918 10:35:48.193" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.211" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.211" starttime="20170918 10:35:48.210" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.211" starttime="20170918 10:35:48.210" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.211" starttime="20170918 10:35:48.193" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.212" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.213" starttime="20170918 10:35:48.212" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.213" starttime="20170918 10:35:48.211" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.214" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.214" starttime="20170918 10:35:48.213" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.214" starttime="20170918 10:35:48.213" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.214" starttime="20170918 10:35:48.211" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.216" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.216" starttime="20170918 10:35:48.215" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.216" starttime="20170918 10:35:48.214" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.217" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.217" starttime="20170918 10:35:48.217" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.217" starttime="20170918 10:35:48.216" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.217" starttime="20170918 10:35:48.214" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.217" starttime="20170918 10:35:48.193" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:48.218" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:48.218" starttime="20170918 10:35:48.218" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.219" starttime="20170918 10:35:48.217" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:48.219" starttime="20170918 10:35:48.042" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170918 10:35:48.225" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170918 10:35:48.225" starttime="20170918 10:35:48.225" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170918 10:35:48.226" level="INFO">@{method_list} = [ ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('SEL Log', 'Collect eSEL Log') | ('BMC Specific Files', 'BMC FFDC Files') | ('S...</msg>
<status endtime="20170918 10:35:48.226" starttime="20170918 10:35:48.226" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170918 10:35:48.228" starttime="20170918 10:35:48.227" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:48.228" level="INFO">@{ffdc_function_list} = [ Core Files | OS FFDC | Get Request FFDC | SEL Log | BMC Specific Files | Sys Inventory Files | FFDC Generic Report ]</msg>
<status endtime="20170918 10:35:48.228" starttime="20170918 10:35:48.227" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170918 10:35:48.230" starttime="20170918 10:35:48.229" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:48.230" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:48.230" level="INFO">${ret_values} = None</msg>
<status endtime="20170918 10:35:48.230" starttime="20170918 10:35:48.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170918 10:35:48.231" starttime="20170918 10:35:48.230" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170918 10:35:48.289" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:35:48.290" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170918 10:35:48.337" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170918 10:35:48.349" level="INFO">${core_files} = None</msg>
<msg timestamp="20170918 10:35:48.349" level="INFO">${stderr} = None</msg>
<msg timestamp="20170918 10:35:48.349" level="INFO">${rc} = None</msg>
<msg timestamp="20170918 10:35:48.350" level="FAIL">#(UTC) 2017/09/18 10:35:48.348427 -    0.059405 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status endtime="20170918 10:35:48.350" starttime="20170918 10:35:48.257" status="FAIL"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170918 10:35:48.350" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170918 10:35:48.351" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status endtime="20170918 10:35:48.351" starttime="20170918 10:35:48.350" status="FAIL"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170918 10:35:48.416" starttime="20170918 10:35:48.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170918 10:35:49.193" starttime="20170918 10:35:48.418" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.193" starttime="20170918 10:35:48.417" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.193" starttime="20170918 10:35:48.417" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.193" starttime="20170918 10:35:48.360" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.193" starttime="20170918 10:35:48.351" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status endtime="20170918 10:35:49.193" starttime="20170918 10:35:49.193" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.193" starttime="20170918 10:35:48.257" status="FAIL"></status>
</kw>
<status endtime="20170918 10:35:49.194" starttime="20170918 10:35:48.231" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.194" starttime="20170918 10:35:48.228" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.194" starttime="20170918 10:35:48.228" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170918 10:35:49.196" starttime="20170918 10:35:49.195" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:49.196" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:49.196" level="INFO">${ret_values} = None</msg>
<status endtime="20170918 10:35:49.196" starttime="20170918 10:35:49.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170918 10:35:49.197" starttime="20170918 10:35:49.196" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170918 10:35:49.230" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170918 10:35:49.230" starttime="20170918 10:35:49.229" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.230" starttime="20170918 10:35:49.229" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.230" starttime="20170918 10:35:49.197" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.230" starttime="20170918 10:35:49.194" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.230" starttime="20170918 10:35:49.194" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170918 10:35:49.232" starttime="20170918 10:35:49.232" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:49.232" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:49.232" level="INFO">${ret_values} = None</msg>
<status endtime="20170918 10:35:49.232" starttime="20170918 10:35:49.231" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170918 10:35:49.233" starttime="20170918 10:35:49.232" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170918 10:35:49.259" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170918 10:35:49.259" starttime="20170918 10:35:49.259" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170918 10:35:49.261" level="INFO">@{cmd_list} = [ ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('BMC_le...</msg>
<status endtime="20170918 10:35:49.261" starttime="20170918 10:35:49.260" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170918 10:35:49.262" level="INFO">${logpath} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_FIRMWARE_list.txt</msg>
<status endtime="20170918 10:35:49.262" starttime="20170918 10:35:49.261" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:49.266" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:49.267" starttime="20170918 10:35:49.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:49.267" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:49.268" starttime="20170918 10:35:49.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:49.269" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:49.269" starttime="20170918 10:35:49.268" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:49.270" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:49.270" starttime="20170918 10:35:49.269" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:49.461" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:49.461" starttime="20170918 10:35:49.271" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:49.461" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:49.461" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:49.462" starttime="20170918 10:35:49.270" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:49.462" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:49.462" starttime="20170918 10:35:49.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:49.463" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:49.463" starttime="20170918 10:35:49.463" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.463" starttime="20170918 10:35:49.265" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.463" starttime="20170918 10:35:49.264" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.463" starttime="20170918 10:35:49.263" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:49.464" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status endtime="20170918 10:35:49.464" starttime="20170918 10:35:49.464" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:35:49.465" starttime="20170918 10:35:49.464" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:49.694" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170918 10:35:49.694" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:49.694" starttime="20170918 10:35:49.465" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:35:49.695" starttime="20170918 10:35:49.695" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:49.696" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:49.696" starttime="20170918 10:35:49.695" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:49.696" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:49.696" starttime="20170918 10:35:49.262" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:49.697" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:49.697" starttime="20170918 10:35:49.697" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:49.697" level="INFO">${status} = True</msg>
<status endtime="20170918 10:35:49.697" starttime="20170918 10:35:49.696" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170918 10:35:49.698" starttime="20170918 10:35:49.698" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170918 10:35:49.699" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:49.699" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170918 10:35:49.699" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/8764baa3": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-v1....</msg>
<status endtime="20170918 10:35:49.699" starttime="20170918 10:35:49.698" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:49.700" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_FIRMWARE_list.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:49.700" starttime="20170918 10:35:49.700" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.701" starttime="20170918 10:35:49.699" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:49.701" starttime="20170918 10:35:49.261" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170918 10:35:49.702" level="INFO">${logpath} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_elog.txt</msg>
<status endtime="20170918 10:35:49.702" starttime="20170918 10:35:49.701" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:49.704" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:49.705" starttime="20170918 10:35:49.704" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:49.705" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:49.705" starttime="20170918 10:35:49.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:49.706" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:49.706" starttime="20170918 10:35:49.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:49.707" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:49.707" starttime="20170918 10:35:49.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:50.032" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:50.032" starttime="20170918 10:35:49.708" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:50.032" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:50.032" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:50.032" starttime="20170918 10:35:49.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:50.033" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:50.033" starttime="20170918 10:35:50.033" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:50.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:50.034" starttime="20170918 10:35:50.033" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:50.034" starttime="20170918 10:35:49.704" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:50.034" starttime="20170918 10:35:49.703" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:50.034" starttime="20170918 10:35:49.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:50.035" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170918 10:35:50.035" starttime="20170918 10:35:50.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:35:50.035" starttime="20170918 10:35:50.035" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:50.454" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170918 10:35:50.454" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:50.454" starttime="20170918 10:35:50.036" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:35:50.455" starttime="20170918 10:35:50.455" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:50.455" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:50.455" starttime="20170918 10:35:50.455" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:50.456" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:50.456" starttime="20170918 10:35:49.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:50.457" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:50.457" starttime="20170918 10:35:50.456" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:50.457" level="INFO">${status} = True</msg>
<status endtime="20170918 10:35:50.457" starttime="20170918 10:35:50.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170918 10:35:50.458" starttime="20170918 10:35:50.457" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170918 10:35:50.460" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "_PID=2836"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493209382, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "_PID=2844"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493318110, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 3d 6d ff a1 00 00 00 0a 3d 6e 66 ea 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 00 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 0d 10 3c 51 b3 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3c 65 41 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3c 70 80 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3c 94 ee 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3c a0 71 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3c b3 c8 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3c bf 15 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3c d2 20 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3c dc fd 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3c f0 54 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3c fb 43 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3d 0e 0c 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3d 18 d3 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 55 31 b7 cb be 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 55 32 59 5a e5 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 55 35 95 bb f5 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1213"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505492947552, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 3d 6e 15 90 00 00 00 0a 3f b6 d1 31 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0f 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 0e 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 0e 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1213"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505492948901, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/3/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "_PID=1708"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505492955309, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 90 e4 c9 6f 00 00 00 09 90 e5 32 65 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 03 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 06 08 da e7 d3 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 da fb 0f 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db 05 fe 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 db 2b 24 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db 36 6c 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 db 49 4b 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db 53 e9 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 db 67 39 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db 72 29 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 db 85 0d 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db 90 4e 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 db a3 26 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db ae 5f 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 50 0c 2b 5c 38 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 50 0c 9c 41 47 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 50 0e 9f b0 1a 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1213"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493073827, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 90 e4 e0 10 00 00 00 09 92 24 83 12 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 15 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 14 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 03 55 44 00 10 01 03 09 00 90 00 00 14 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1213"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493074896, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "_PID=2276"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493080889, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 88 ee ce 69 00 00 00 09 88 ef 37 cd 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1a 90 00 00 1a 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 00 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 06 0d ef bf ac 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d ef d2 71 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d ef dd db 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d f0 03 83 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d f0 0e 70 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d f0 21 1b 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d f0 2b cc 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d f0 3e f8 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d f0 49 ef 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d f0 5d 1f 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d f0 67 e4 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d f0 7a e2 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d f0 85 b5 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 4f 38 45 27 c5 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 4f 38 cd b5 35 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 4f 3a ae 0c 37 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1213"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493202000, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 88 ee e4 d5 00 00 00 09 8a 28 bf 55 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1a 90 00 00 1b 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 1a 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 1a 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1213"
      ], 
      "Id": 9, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493203368, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:50.460" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170918 10:35:50.461" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/10": {
            "AdditionalData": [
                "_PID=2836"
            ],
            "Id": 10,
            "Message": "org.open_pow...</msg>
<status endtime="20170918 10:35:50.461" starttime="20170918 10:35:50.458" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:50.463" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_elog.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:50.463" starttime="20170918 10:35:50.462" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:50.463" starttime="20170918 10:35:50.461" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:50.463" starttime="20170918 10:35:49.701" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170918 10:35:50.464" level="INFO">${logpath} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_sensor_list.txt</msg>
<status endtime="20170918 10:35:50.464" starttime="20170918 10:35:50.463" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:50.466" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:50.467" starttime="20170918 10:35:50.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:50.467" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:50.467" starttime="20170918 10:35:50.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:50.468" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:50.468" starttime="20170918 10:35:50.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:50.469" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:50.469" starttime="20170918 10:35:50.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:50.651" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:50.651" starttime="20170918 10:35:50.469" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:50.651" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:50.651" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:50.651" starttime="20170918 10:35:50.469" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:50.652" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:50.652" starttime="20170918 10:35:50.652" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:50.653" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:50.653" starttime="20170918 10:35:50.652" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:50.653" starttime="20170918 10:35:50.465" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:50.653" starttime="20170918 10:35:50.465" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:50.653" starttime="20170918 10:35:50.464" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:50.654" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status endtime="20170918 10:35:50.654" starttime="20170918 10:35:50.653" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:35:50.654" starttime="20170918 10:35:50.654" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:51.264" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170918 10:35:51.264" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:51.264" starttime="20170918 10:35:50.655" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:35:51.265" starttime="20170918 10:35:51.264" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:51.265" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:51.265" starttime="20170918 10:35:51.265" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:51.266" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:51.266" starttime="20170918 10:35:50.464" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:51.267" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:51.267" starttime="20170918 10:35:51.266" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:51.267" level="INFO">${status} = True</msg>
<status endtime="20170918 10:35:51.267" starttime="20170918 10:35:51.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170918 10:35:51.267" starttime="20170918 10:35:51.267" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170918 10:35:51.269" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 19000
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 15250
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9689
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10330
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10775
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 11538
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9541
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10107
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9765
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10330
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 264000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 218000000
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30660
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 34000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 34000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 201500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 12250
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 200500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 12250
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:51.269" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170918 10:35:51.269" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status endtime="20170918 10:35:51.269" starttime="20170918 10:35:51.268" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:51.271" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_sensor_list.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:51.271" starttime="20170918 10:35:51.270" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:51.271" starttime="20170918 10:35:51.269" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:51.271" starttime="20170918 10:35:50.463" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170918 10:35:51.272" level="INFO">${logpath} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_led.txt</msg>
<status endtime="20170918 10:35:51.272" starttime="20170918 10:35:51.271" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:51.275" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:51.275" starttime="20170918 10:35:51.274" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:51.276" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:51.276" starttime="20170918 10:35:51.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:51.277" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:51.277" starttime="20170918 10:35:51.277" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:51.278" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:51.278" starttime="20170918 10:35:51.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:51.455" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:51.455" starttime="20170918 10:35:51.279" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:51.455" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:51.455" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:51.455" starttime="20170918 10:35:51.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:51.456" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:51.456" starttime="20170918 10:35:51.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:51.457" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:51.457" starttime="20170918 10:35:51.456" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:51.457" starttime="20170918 10:35:51.274" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:51.457" starttime="20170918 10:35:51.273" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:51.458" starttime="20170918 10:35:51.273" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:51.458" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status endtime="20170918 10:35:51.458" starttime="20170918 10:35:51.458" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:35:51.459" starttime="20170918 10:35:51.458" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:53.190" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170918 10:35:53.191" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:53.191" starttime="20170918 10:35:51.459" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:35:53.191" starttime="20170918 10:35:53.191" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:53.192" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:53.192" starttime="20170918 10:35:53.192" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:53.192" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:53.192" starttime="20170918 10:35:51.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:53.193" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:53.193" starttime="20170918 10:35:53.193" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:53.194" level="INFO">${status} = True</msg>
<status endtime="20170918 10:35:53.194" starttime="20170918 10:35:53.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170918 10:35:53.194" starttime="20170918 10:35:53.194" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170918 10:35:53.196" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:53.196" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170918 10:35:53.197" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status endtime="20170918 10:35:53.197" starttime="20170918 10:35:53.194" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:53.198" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_led.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_led.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:53.198" starttime="20170918 10:35:53.198" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:53.199" starttime="20170918 10:35:53.197" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:53.199" starttime="20170918 10:35:51.271" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170918 10:35:53.199" level="INFO">${logpath} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_inventory.txt</msg>
<status endtime="20170918 10:35:53.199" starttime="20170918 10:35:53.199" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:53.202" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:53.202" starttime="20170918 10:35:53.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:53.203" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:53.203" starttime="20170918 10:35:53.203" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:53.204" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:53.204" starttime="20170918 10:35:53.203" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:53.204" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:53.204" starttime="20170918 10:35:53.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:53.508" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:53.508" starttime="20170918 10:35:53.205" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:53.508" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:53.508" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:53.508" starttime="20170918 10:35:53.205" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:53.509" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:53.509" starttime="20170918 10:35:53.509" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:53.510" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:53.510" starttime="20170918 10:35:53.509" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:53.510" starttime="20170918 10:35:53.201" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:53.510" starttime="20170918 10:35:53.201" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:53.510" starttime="20170918 10:35:53.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:53.511" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170918 10:35:53.511" starttime="20170918 10:35:53.510" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:35:53.511" starttime="20170918 10:35:53.511" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:55.956" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170918 10:35:55.956" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:55.956" starttime="20170918 10:35:53.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:35:55.957" starttime="20170918 10:35:55.956" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:55.957" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:55.957" starttime="20170918 10:35:55.957" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:55.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:55.958" starttime="20170918 10:35:53.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:55.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:55.959" starttime="20170918 10:35:55.958" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:55.959" level="INFO">${status} = True</msg>
<status endtime="20170918 10:35:55.959" starttime="20170918 10:35:55.958" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170918 10:35:55.959" starttime="20170918 10:35:55.959" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170918 10:35:55.962" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y230UF72R00C    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA766", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3934032258", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA766", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3934032252", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }, 
    "/xyz/openbmc_project/inventory/system/fault": {
      "endpoints": [
        "/xyz/openbmc_project/logging/entry/9", 
        "/xyz/openbmc_project/logging/entry/8", 
        "/xyz/openbmc_project/logging/entry/3", 
        "/xyz/openbmc_project/logging/entry/2", 
        "/xyz/openbmc_project/logging/entry/6", 
        "/xyz/openbmc_project/logging/entry/5"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:55.963" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170918 10:35:55.963" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status endtime="20170918 10:35:55.963" starttime="20170918 10:35:55.960" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:55.965" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_inventory.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:55.965" starttime="20170918 10:35:55.964" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:55.965" starttime="20170918 10:35:55.963" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:55.965" starttime="20170918 10:35:53.199" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170918 10:35:55.966" level="INFO">${logpath} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_control_list.txt</msg>
<status endtime="20170918 10:35:55.966" starttime="20170918 10:35:55.966" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:55.969" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:55.969" starttime="20170918 10:35:55.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:55.970" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:55.970" starttime="20170918 10:35:55.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:55.970" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:55.970" starttime="20170918 10:35:55.970" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:55.971" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:55.971" starttime="20170918 10:35:55.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:56.165" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:56.166" starttime="20170918 10:35:55.972" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:56.166" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:56.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:56.166" starttime="20170918 10:35:55.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:56.166" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:56.166" starttime="20170918 10:35:56.166" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:56.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:56.167" starttime="20170918 10:35:56.167" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.167" starttime="20170918 10:35:55.968" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.167" starttime="20170918 10:35:55.967" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.167" starttime="20170918 10:35:55.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:56.168" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status endtime="20170918 10:35:56.168" starttime="20170918 10:35:56.168" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:35:56.169" starttime="20170918 10:35:56.168" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:56.526" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170918 10:35:56.526" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:56.526" starttime="20170918 10:35:56.169" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:35:56.526" starttime="20170918 10:35:56.526" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:56.527" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:56.527" starttime="20170918 10:35:56.527" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:56.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:56.527" starttime="20170918 10:35:55.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:56.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:56.528" starttime="20170918 10:35:56.528" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:56.528" level="INFO">${status} = True</msg>
<status endtime="20170918 10:35:56.528" starttime="20170918 10:35:56.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170918 10:35:56.529" starttime="20170918 10:35:56.529" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170918 10:35:56.530" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.AlwaysOff"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:56.530" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170918 10:35:56.530" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status endtime="20170918 10:35:56.530" starttime="20170918 10:35:56.529" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:56.531" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_control_list.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:56.531" starttime="20170918 10:35:56.531" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.531" starttime="20170918 10:35:56.530" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.532" starttime="20170918 10:35:55.965" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.532" starttime="20170918 10:35:49.261" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.532" starttime="20170918 10:35:49.260" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.532" starttime="20170918 10:35:49.260" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.532" starttime="20170918 10:35:49.260" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.532" starttime="20170918 10:35:49.259" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.532" starttime="20170918 10:35:49.233" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.532" starttime="20170918 10:35:49.230" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.532" starttime="20170918 10:35:49.230" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170918 10:35:56.534" starttime="20170918 10:35:56.534" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:56.534" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:56.534" level="INFO">${ret_values} = None</msg>
<status endtime="20170918 10:35:56.534" starttime="20170918 10:35:56.533" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170918 10:35:56.535" starttime="20170918 10:35:56.534" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:56.563" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:56.564" starttime="20170918 10:35:56.563" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:56.565" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:56.565" starttime="20170918 10:35:56.564" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:56.565" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:56.565" starttime="20170918 10:35:56.565" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:56.566" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:56.566" starttime="20170918 10:35:56.566" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:56.789" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:56.789" starttime="20170918 10:35:56.567" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:56.789" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:56.789" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:56.790" starttime="20170918 10:35:56.566" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:56.790" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:56.790" starttime="20170918 10:35:56.790" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:56.791" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:56.791" starttime="20170918 10:35:56.791" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.791" starttime="20170918 10:35:56.562" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.791" starttime="20170918 10:35:56.562" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:56.791" starttime="20170918 10:35:56.561" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:56.792" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170918 10:35:56.792" starttime="20170918 10:35:56.792" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:35:56.793" starttime="20170918 10:35:56.792" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:57.225" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170918 10:35:57.225" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:57.225" starttime="20170918 10:35:56.793" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:35:57.225" starttime="20170918 10:35:57.225" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:57.226" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:57.226" starttime="20170918 10:35:57.226" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:57.226" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:57.226" starttime="20170918 10:35:56.561" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:57.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:57.227" starttime="20170918 10:35:57.227" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:57.227" level="INFO">${status} = True</msg>
<status endtime="20170918 10:35:57.227" starttime="20170918 10:35:57.226" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170918 10:35:57.228" starttime="20170918 10:35:57.228" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:57.229" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "_PID=2836"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493209382, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "_PID=2844"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493318110, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 3d 6d ff a1 00 00 00 0a 3d 6e 66 ea 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 00 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 0d 10 3c 51 b3 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3c 65 41 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3c 70 80 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3c 94 ee 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3c a0 71 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3c b3 c8 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3c bf 15 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3c d2 20 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3c dc fd 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3c f0 54 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3c fb 43 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3d 0e 0c 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3d 18 d3 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 55 31 b7 cb be 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 55 32 59 5a e5 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 55 35 95 bb f5 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1213"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505492947552, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 3d 6e 15 90 00 00 00 0a 3f b6 d1 31 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0f 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 0e 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 0e 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1213"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505492948901, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/3/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "_PID=1708"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505492955309, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 90 e4 c9 6f 00 00 00 09 90 e5 32 65 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 03 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 06 08 da e7 d3 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 da fb 0f 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db 05 fe 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 db 2b 24 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db 36 6c 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 db 49 4b 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db 53 e9 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 db 67 39 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db 72 29 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 db 85 0d 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db 90 4e 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 db a3 26 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db ae 5f 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 50 0c 2b 5c 38 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 50 0c 9c 41 47 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 50 0e 9f b0 1a 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1213"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493073827, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 90 e4 e0 10 00 00 00 09 92 24 83 12 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 15 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 14 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 03 55 44 00 10 01 03 09 00 90 00 00 14 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1213"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493074896, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "_PID=2276"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493080889, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 88 ee ce 69 00 00 00 09 88 ef 37 cd 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1a 90 00 00 1a 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 00 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 06 0d ef bf ac 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d ef d2 71 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d ef dd db 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d f0 03 83 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d f0 0e 70 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d f0 21 1b 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d f0 2b cc 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d f0 3e f8 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d f0 49 ef 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d f0 5d 1f 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d f0 67 e4 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d f0 7a e2 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d f0 85 b5 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 4f 38 45 27 c5 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 4f 38 cd b5 35 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 4f 3a ae 0c 37 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1213"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493202000, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 88 ee e4 d5 00 00 00 09 8a 28 bf 55 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1a 90 00 00 1b 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 1a 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 1a 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1213"
      ], 
      "Id": 9, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493203368, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:57.230" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:57.230" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/9/callout': {u'endpoints': [u'/xyz/openbmc_project/inventory/system']}, u'/xyz/openbmc_project/logging/entry/9'...</msg>
<status endtime="20170918 10:35:57.230" starttime="20170918 10:35:57.228" status="PASS"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170918 10:35:57.231" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/10', u'/xyz/openbmc_project/logging/entry/11', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/2/callout', u'/xyz/openbmc_project/lo...</msg>
<status endtime="20170918 10:35:57.231" starttime="20170918 10:35:57.230" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170918 10:35:57.231" level="INFO">${logpath} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel</msg>
<status endtime="20170918 10:35:57.231" starttime="20170918 10:35:57.231" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:57.232" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:57.232" starttime="20170918 10:35:57.232" status="PASS"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/10" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170918 10:35:57.233" starttime="20170918 10:35:57.233" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:57.237" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:57.237" starttime="20170918 10:35:57.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:57.238" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:57.238" starttime="20170918 10:35:57.237" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:57.238" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:57.238" starttime="20170918 10:35:57.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:57.239" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:57.239" starttime="20170918 10:35:57.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:57.462" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:57.463" starttime="20170918 10:35:57.240" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:57.463" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:57.463" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:57.463" starttime="20170918 10:35:57.239" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:57.463" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:57.463" starttime="20170918 10:35:57.463" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:57.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:57.464" starttime="20170918 10:35:57.464" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:57.464" starttime="20170918 10:35:57.236" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:57.464" starttime="20170918 10:35:57.235" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:57.464" starttime="20170918 10:35:57.234" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:57.465" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/10/attr/AdditionalData</msg>
<status endtime="20170918 10:35:57.465" starttime="20170918 10:35:57.465" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:35:57.466" starttime="20170918 10:35:57.465" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:57.580" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/10/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170918 10:35:57.580" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:57.580" starttime="20170918 10:35:57.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:35:57.581" starttime="20170918 10:35:57.581" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:57.581" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:57.582" starttime="20170918 10:35:57.581" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:57.582" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:57.582" starttime="20170918 10:35:57.234" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:57.582" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:57.582" starttime="20170918 10:35:57.582" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:57.583" level="INFO">To JSON using : content={
  "data": [
    "_PID=2836"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:57.583" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:57.583" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'_PID=2836']}</msg>
<status endtime="20170918 10:35:57.583" starttime="20170918 10:35:57.583" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:57.583" level="INFO">${esel_data} = [u'_PID=2836']</msg>
<status endtime="20170918 10:35:57.583" starttime="20170918 10:35:57.233" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170918 10:35:57.584" level="INFO">Length is 1</msg>
<msg timestamp="20170918 10:35:57.584" level="INFO">${length} = 1</msg>
<status endtime="20170918 10:35:57.584" starttime="20170918 10:35:57.584" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170918 10:35:57.585" starttime="20170918 10:35:57.584" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170918 10:35:57.585" level="INFO">${index} = None</msg>
<msg timestamp="20170918 10:35:57.586" level="FAIL">IndexError: list index out of range</msg>
<status endtime="20170918 10:35:57.586" starttime="20170918 10:35:57.585" status="FAIL"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170918 10:35:57.586" level="FAIL">Resolving variable '${esel_data[None]}' failed: TypeError: list indices must be integers, not NoneType</msg>
<status endtime="20170918 10:35:57.586" starttime="20170918 10:35:57.586" status="FAIL"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:57.587" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:57.587" starttime="20170918 10:35:57.587" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:57.588" starttime="20170918 10:35:57.586" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:57.588" starttime="20170918 10:35:57.232" status="FAIL"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/11" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170918 10:35:57.589" starttime="20170918 10:35:57.588" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:57.596" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:57.597" starttime="20170918 10:35:57.596" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:57.597" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:57.597" starttime="20170918 10:35:57.597" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:57.598" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:57.598" starttime="20170918 10:35:57.598" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:57.599" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:57.599" starttime="20170918 10:35:57.598" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:57.912" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:57.912" starttime="20170918 10:35:57.600" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:57.912" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:57.912" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:57.912" starttime="20170918 10:35:57.599" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:57.913" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:57.913" starttime="20170918 10:35:57.913" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:57.914" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:57.914" starttime="20170918 10:35:57.913" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:57.914" starttime="20170918 10:35:57.595" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:57.914" starttime="20170918 10:35:57.594" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:57.914" starttime="20170918 10:35:57.593" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:57.914" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/11/attr/AdditionalData</msg>
<status endtime="20170918 10:35:57.915" starttime="20170918 10:35:57.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:35:57.915" starttime="20170918 10:35:57.915" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:57.999" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/11/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170918 10:35:57.999" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:57.999" starttime="20170918 10:35:57.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:35:58.000" starttime="20170918 10:35:57.999" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:58.000" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:58.000" starttime="20170918 10:35:58.000" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:58.000" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:58.000" starttime="20170918 10:35:57.590" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:58.001" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:58.001" starttime="20170918 10:35:58.001" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:58.002" level="INFO">To JSON using : content={
  "data": [
    "_PID=2844"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:58.002" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:58.002" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'_PID=2844']}</msg>
<status endtime="20170918 10:35:58.002" starttime="20170918 10:35:58.001" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:58.002" level="INFO">${esel_data} = [u'_PID=2844']</msg>
<status endtime="20170918 10:35:58.002" starttime="20170918 10:35:57.589" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170918 10:35:58.003" level="INFO">Length is 1</msg>
<msg timestamp="20170918 10:35:58.003" level="INFO">${length} = 1</msg>
<status endtime="20170918 10:35:58.003" starttime="20170918 10:35:58.002" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170918 10:35:58.003" starttime="20170918 10:35:58.003" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170918 10:35:58.004" level="INFO">${index} = None</msg>
<msg timestamp="20170918 10:35:58.004" level="FAIL">IndexError: list index out of range</msg>
<status endtime="20170918 10:35:58.004" starttime="20170918 10:35:58.003" status="FAIL"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170918 10:35:58.005" level="FAIL">Resolving variable '${esel_data[None]}' failed: TypeError: list indices must be integers, not NoneType</msg>
<status endtime="20170918 10:35:58.005" starttime="20170918 10:35:58.004" status="FAIL"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:58.006" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:58.006" starttime="20170918 10:35:58.006" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.006" starttime="20170918 10:35:58.005" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.006" starttime="20170918 10:35:57.588" status="FAIL"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170918 10:35:58.007" starttime="20170918 10:35:58.007" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:58.010" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:58.011" starttime="20170918 10:35:58.010" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:58.011" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:58.011" starttime="20170918 10:35:58.011" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:58.012" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:58.012" starttime="20170918 10:35:58.012" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:58.013" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:58.013" starttime="20170918 10:35:58.012" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:58.218" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:58.218" starttime="20170918 10:35:58.013" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:58.218" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:58.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:58.218" starttime="20170918 10:35:58.013" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:58.219" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:58.219" starttime="20170918 10:35:58.218" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:58.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:58.219" starttime="20170918 10:35:58.219" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.219" starttime="20170918 10:35:58.010" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.219" starttime="20170918 10:35:58.009" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.220" starttime="20170918 10:35:58.009" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:58.220" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170918 10:35:58.220" starttime="20170918 10:35:58.220" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:35:58.221" starttime="20170918 10:35:58.220" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:58.309" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170918 10:35:58.310" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:58.310" starttime="20170918 10:35:58.221" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:35:58.310" starttime="20170918 10:35:58.310" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:58.311" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:58.311" starttime="20170918 10:35:58.310" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:58.311" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:58.311" starttime="20170918 10:35:58.008" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:58.311" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:58.312" starttime="20170918 10:35:58.311" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:58.312" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 3d 6d ff a1 00 00 00 0a 3d 6e 66 ea 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 00 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 0d 10 3c 51 b3 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3c 65 41 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3c 70 80 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3c 94 ee 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3c a0 71 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3c b3 c8 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3c bf 15 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3c d2 20 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3c dc fd 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3c f0 54 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3c fb 43 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0d 10 3d 0e 0c 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 0d 10 3d 18 d3 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 55 31 b7 cb be 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 55 32 59 5a e5 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 55 35 95 bb f5 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
    "_PID=1213"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:58.312" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:58.313" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 0...</msg>
<status endtime="20170918 10:35:58.313" starttime="20170918 10:35:58.312" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:58.313" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 3d 6d ff a1 00 00 00 0a 3d 6e 66 ea 42 00 0...</msg>
<status endtime="20170918 10:35:58.313" starttime="20170918 10:35:58.007" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170918 10:35:58.313" level="INFO">Length is 3</msg>
<msg timestamp="20170918 10:35:58.314" level="INFO">${length} = 3</msg>
<status endtime="20170918 10:35:58.314" starttime="20170918 10:35:58.313" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170918 10:35:58.314" starttime="20170918 10:35:58.314" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170918 10:35:58.315" level="INFO">${index} = 1</msg>
<status endtime="20170918 10:35:58.315" starttime="20170918 10:35:58.314" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:58.316" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:58.316" starttime="20170918 10:35:58.316" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.316" starttime="20170918 10:35:58.315" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:58.317" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:58.317" starttime="20170918 10:35:58.317" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.318" starttime="20170918 10:35:58.316" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.318" starttime="20170918 10:35:58.006" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170918 10:35:58.318" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170918 10:35:58.318" starttime="20170918 10:35:58.318" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.319" starttime="20170918 10:35:58.318" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170918 10:35:58.319" starttime="20170918 10:35:58.319" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:58.323" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:58.323" starttime="20170918 10:35:58.322" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:58.323" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:58.323" starttime="20170918 10:35:58.323" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:58.324" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:58.324" starttime="20170918 10:35:58.324" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:58.325" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:58.325" starttime="20170918 10:35:58.324" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:58.525" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:58.525" starttime="20170918 10:35:58.325" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:58.525" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:58.526" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:58.526" starttime="20170918 10:35:58.325" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:58.526" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:58.526" starttime="20170918 10:35:58.526" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:58.527" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:58.527" starttime="20170918 10:35:58.527" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.527" starttime="20170918 10:35:58.322" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.527" starttime="20170918 10:35:58.321" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.527" starttime="20170918 10:35:58.321" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:58.528" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170918 10:35:58.528" starttime="20170918 10:35:58.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:35:58.529" starttime="20170918 10:35:58.528" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:58.611" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170918 10:35:58.612" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:58.612" starttime="20170918 10:35:58.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:35:58.612" starttime="20170918 10:35:58.612" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:58.613" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:58.613" starttime="20170918 10:35:58.612" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:58.613" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:58.613" starttime="20170918 10:35:58.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:58.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:58.614" starttime="20170918 10:35:58.613" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:58.614" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 3d 6e 15 90 00 00 00 0a 3f b6 d1 31 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0f 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 0e 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 0e 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
    "_PID=1213"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:58.614" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:58.614" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 0...</msg>
<status endtime="20170918 10:35:58.614" starttime="20170918 10:35:58.614" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:58.615" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 3d 6e 15 90 00 00 00 0a 3f b6 d1 31 42 00 0...</msg>
<status endtime="20170918 10:35:58.615" starttime="20170918 10:35:58.319" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170918 10:35:58.615" level="INFO">Length is 3</msg>
<msg timestamp="20170918 10:35:58.615" level="INFO">${length} = 3</msg>
<status endtime="20170918 10:35:58.615" starttime="20170918 10:35:58.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170918 10:35:58.616" starttime="20170918 10:35:58.616" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170918 10:35:58.616" level="INFO">${index} = 1</msg>
<status endtime="20170918 10:35:58.616" starttime="20170918 10:35:58.616" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:58.618" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:58.618" starttime="20170918 10:35:58.617" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.618" starttime="20170918 10:35:58.617" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:58.619" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:58.619" starttime="20170918 10:35:58.619" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.619" starttime="20170918 10:35:58.618" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.619" starttime="20170918 10:35:58.319" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170918 10:35:58.620" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170918 10:35:58.620" starttime="20170918 10:35:58.620" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.620" starttime="20170918 10:35:58.619" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170918 10:35:58.621" starttime="20170918 10:35:58.621" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:58.626" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:58.626" starttime="20170918 10:35:58.625" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:58.627" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:58.627" starttime="20170918 10:35:58.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:58.628" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:58.628" starttime="20170918 10:35:58.627" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:58.629" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:58.629" starttime="20170918 10:35:58.628" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:58.957" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:58.957" starttime="20170918 10:35:58.630" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:58.957" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:58.957" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:58.958" starttime="20170918 10:35:58.629" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:58.958" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:58.958" starttime="20170918 10:35:58.958" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:58.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:58.959" starttime="20170918 10:35:58.958" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.959" starttime="20170918 10:35:58.624" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.959" starttime="20170918 10:35:58.623" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:58.959" starttime="20170918 10:35:58.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:58.960" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170918 10:35:58.960" starttime="20170918 10:35:58.959" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:35:58.960" starttime="20170918 10:35:58.960" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:59.061" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170918 10:35:59.061" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:59.061" starttime="20170918 10:35:58.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:35:59.062" starttime="20170918 10:35:59.062" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:59.062" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:59.063" starttime="20170918 10:35:59.062" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:59.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:59.063" starttime="20170918 10:35:58.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:59.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:59.063" starttime="20170918 10:35:59.063" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:59.064" level="INFO">To JSON using : content={
  "data": [
    "_PID=1708"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:59.064" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:59.064" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'_PID=1708']}</msg>
<status endtime="20170918 10:35:59.064" starttime="20170918 10:35:59.064" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:59.064" level="INFO">${esel_data} = [u'_PID=1708']</msg>
<status endtime="20170918 10:35:59.064" starttime="20170918 10:35:58.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170918 10:35:59.065" level="INFO">Length is 1</msg>
<msg timestamp="20170918 10:35:59.065" level="INFO">${length} = 1</msg>
<status endtime="20170918 10:35:59.065" starttime="20170918 10:35:59.065" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170918 10:35:59.066" starttime="20170918 10:35:59.065" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170918 10:35:59.066" level="INFO">${index} = None</msg>
<msg timestamp="20170918 10:35:59.066" level="FAIL">IndexError: list index out of range</msg>
<status endtime="20170918 10:35:59.066" starttime="20170918 10:35:59.066" status="FAIL"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170918 10:35:59.067" level="FAIL">Resolving variable '${esel_data[None]}' failed: TypeError: list indices must be integers, not NoneType</msg>
<status endtime="20170918 10:35:59.067" starttime="20170918 10:35:59.067" status="FAIL"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:59.068" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:59.068" starttime="20170918 10:35:59.068" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.068" starttime="20170918 10:35:59.067" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.068" starttime="20170918 10:35:58.620" status="FAIL"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170918 10:35:59.069" starttime="20170918 10:35:59.069" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:59.073" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:59.073" starttime="20170918 10:35:59.072" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:59.074" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:59.074" starttime="20170918 10:35:59.073" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:59.074" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:59.074" starttime="20170918 10:35:59.074" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:59.075" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:59.075" starttime="20170918 10:35:59.075" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:59.359" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:59.360" starttime="20170918 10:35:59.076" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:59.360" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:59.360" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:59.360" starttime="20170918 10:35:59.075" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:59.360" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:59.360" starttime="20170918 10:35:59.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:59.361" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:59.361" starttime="20170918 10:35:59.361" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.361" starttime="20170918 10:35:59.072" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.361" starttime="20170918 10:35:59.071" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.361" starttime="20170918 10:35:59.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:59.362" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status endtime="20170918 10:35:59.362" starttime="20170918 10:35:59.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:35:59.363" starttime="20170918 10:35:59.362" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:59.447" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170918 10:35:59.447" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:59.448" starttime="20170918 10:35:59.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:35:59.448" starttime="20170918 10:35:59.448" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:59.448" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:59.449" starttime="20170918 10:35:59.448" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:59.449" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:59.449" starttime="20170918 10:35:59.070" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:59.449" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:59.449" starttime="20170918 10:35:59.449" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:59.450" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 90 e4 c9 6f 00 00 00 09 90 e5 32 65 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 03 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 06 08 da e7 d3 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 da fb 0f 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db 05 fe 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 db 2b 24 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db 36 6c 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 db 49 4b 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db 53 e9 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 db 67 39 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db 72 29 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 db 85 0d 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db 90 4e 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 08 db a3 26 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 06 08 db ae 5f 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 50 0c 2b 5c 38 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 50 0c 9c 41 47 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 50 0e 9f b0 1a 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
    "_PID=1213"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:59.450" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:59.450" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 0...</msg>
<status endtime="20170918 10:35:59.450" starttime="20170918 10:35:59.450" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:59.451" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 90 e4 c9 6f 00 00 00 09 90 e5 32 65 42 00 0...</msg>
<status endtime="20170918 10:35:59.451" starttime="20170918 10:35:59.069" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170918 10:35:59.451" level="INFO">Length is 3</msg>
<msg timestamp="20170918 10:35:59.452" level="INFO">${length} = 3</msg>
<status endtime="20170918 10:35:59.452" starttime="20170918 10:35:59.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170918 10:35:59.452" starttime="20170918 10:35:59.452" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170918 10:35:59.453" level="INFO">${index} = 1</msg>
<status endtime="20170918 10:35:59.453" starttime="20170918 10:35:59.453" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:59.455" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:59.455" starttime="20170918 10:35:59.455" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.455" starttime="20170918 10:35:59.454" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:59.456" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:59.457" starttime="20170918 10:35:59.456" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.457" starttime="20170918 10:35:59.455" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.457" starttime="20170918 10:35:59.069" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170918 10:35:59.457" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170918 10:35:59.458" starttime="20170918 10:35:59.457" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.458" starttime="20170918 10:35:59.457" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170918 10:35:59.458" starttime="20170918 10:35:59.458" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:59.462" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:59.462" starttime="20170918 10:35:59.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:59.463" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:59.463" starttime="20170918 10:35:59.463" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:59.464" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:59.464" starttime="20170918 10:35:59.463" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:59.464" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:59.464" starttime="20170918 10:35:59.464" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:35:59.673" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:35:59.673" starttime="20170918 10:35:59.465" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:59.673" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:35:59.673" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:59.673" starttime="20170918 10:35:59.465" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:35:59.673" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:59.673" starttime="20170918 10:35:59.673" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:59.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:59.674" starttime="20170918 10:35:59.674" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.674" starttime="20170918 10:35:59.461" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.674" starttime="20170918 10:35:59.461" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.674" starttime="20170918 10:35:59.460" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:35:59.675" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status endtime="20170918 10:35:59.675" starttime="20170918 10:35:59.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:35:59.676" starttime="20170918 10:35:59.675" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:35:59.759" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170918 10:35:59.759" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:59.759" starttime="20170918 10:35:59.676" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:35:59.760" starttime="20170918 10:35:59.759" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:35:59.760" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:35:59.760" starttime="20170918 10:35:59.760" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:59.760" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:35:59.760" starttime="20170918 10:35:59.459" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:35:59.761" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:35:59.761" starttime="20170918 10:35:59.761" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:35:59.762" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 90 e4 e0 10 00 00 00 09 92 24 83 12 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 15 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 14 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 03 55 44 00 10 01 03 09 00 90 00 00 14 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
    "_PID=1213"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:35:59.762" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:35:59.762" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 0...</msg>
<status endtime="20170918 10:35:59.762" starttime="20170918 10:35:59.761" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:35:59.762" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 90 e4 e0 10 00 00 00 09 92 24 83 12 42 00 0...</msg>
<status endtime="20170918 10:35:59.762" starttime="20170918 10:35:59.459" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170918 10:35:59.763" level="INFO">Length is 3</msg>
<msg timestamp="20170918 10:35:59.763" level="INFO">${length} = 3</msg>
<status endtime="20170918 10:35:59.763" starttime="20170918 10:35:59.763" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170918 10:35:59.763" starttime="20170918 10:35:59.763" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170918 10:35:59.764" level="INFO">${index} = 1</msg>
<status endtime="20170918 10:35:59.764" starttime="20170918 10:35:59.764" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:59.766" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:59.766" starttime="20170918 10:35:59.765" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.766" starttime="20170918 10:35:59.765" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:35:59.767" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:35:59.767" starttime="20170918 10:35:59.767" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.767" starttime="20170918 10:35:59.766" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.767" starttime="20170918 10:35:59.458" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170918 10:35:59.768" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170918 10:35:59.768" starttime="20170918 10:35:59.768" status="PASS"></status>
</kw>
<status endtime="20170918 10:35:59.768" starttime="20170918 10:35:59.767" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/7" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170918 10:35:59.769" starttime="20170918 10:35:59.769" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:35:59.772" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:35:59.773" starttime="20170918 10:35:59.772" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:35:59.773" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:35:59.773" starttime="20170918 10:35:59.773" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:35:59.774" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:35:59.774" starttime="20170918 10:35:59.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:35:59.775" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:35:59.775" starttime="20170918 10:35:59.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:36:00.021" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:36:00.021" starttime="20170918 10:35:59.775" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:00.021" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:00.021" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:00.021" starttime="20170918 10:35:59.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:36:00.022" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:00.022" starttime="20170918 10:36:00.021" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:00.022" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:00.022" starttime="20170918 10:36:00.022" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.023" starttime="20170918 10:35:59.771" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.023" starttime="20170918 10:35:59.771" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.023" starttime="20170918 10:35:59.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:36:00.023" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status endtime="20170918 10:36:00.023" starttime="20170918 10:36:00.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:36:00.024" starttime="20170918 10:36:00.024" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:36:00.129" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170918 10:36:00.130" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:00.130" starttime="20170918 10:36:00.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:36:00.130" starttime="20170918 10:36:00.130" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:36:00.131" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:36:00.131" starttime="20170918 10:36:00.130" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:00.131" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:00.131" starttime="20170918 10:35:59.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:00.132" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:00.132" starttime="20170918 10:36:00.131" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:36:00.132" level="INFO">To JSON using : content={
  "data": [
    "_PID=2276"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:36:00.132" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:36:00.132" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'_PID=2276']}</msg>
<status endtime="20170918 10:36:00.132" starttime="20170918 10:36:00.132" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:00.133" level="INFO">${esel_data} = [u'_PID=2276']</msg>
<status endtime="20170918 10:36:00.133" starttime="20170918 10:35:59.769" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170918 10:36:00.133" level="INFO">Length is 1</msg>
<msg timestamp="20170918 10:36:00.134" level="INFO">${length} = 1</msg>
<status endtime="20170918 10:36:00.134" starttime="20170918 10:36:00.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170918 10:36:00.135" starttime="20170918 10:36:00.134" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170918 10:36:00.135" level="INFO">${index} = None</msg>
<msg timestamp="20170918 10:36:00.135" level="FAIL">IndexError: list index out of range</msg>
<status endtime="20170918 10:36:00.136" starttime="20170918 10:36:00.135" status="FAIL"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170918 10:36:00.136" level="FAIL">Resolving variable '${esel_data[None]}' failed: TypeError: list indices must be integers, not NoneType</msg>
<status endtime="20170918 10:36:00.136" starttime="20170918 10:36:00.136" status="FAIL"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:00.137" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:00.137" starttime="20170918 10:36:00.137" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.137" starttime="20170918 10:36:00.136" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.138" starttime="20170918 10:35:59.768" status="FAIL"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/8" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170918 10:36:00.138" starttime="20170918 10:36:00.138" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:36:00.142" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:36:00.142" starttime="20170918 10:36:00.141" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:36:00.143" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:36:00.143" starttime="20170918 10:36:00.142" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:36:00.143" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:36:00.143" starttime="20170918 10:36:00.143" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:36:00.144" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:36:00.144" starttime="20170918 10:36:00.143" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:36:00.411" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:36:00.411" starttime="20170918 10:36:00.145" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:00.411" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:00.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:00.411" starttime="20170918 10:36:00.144" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:36:00.412" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:00.412" starttime="20170918 10:36:00.412" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:00.413" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:00.413" starttime="20170918 10:36:00.412" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.413" starttime="20170918 10:36:00.141" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.413" starttime="20170918 10:36:00.140" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.413" starttime="20170918 10:36:00.140" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:36:00.414" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/8/attr/AdditionalData</msg>
<status endtime="20170918 10:36:00.414" starttime="20170918 10:36:00.413" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:36:00.414" starttime="20170918 10:36:00.414" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:36:00.498" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/8/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170918 10:36:00.498" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:00.498" starttime="20170918 10:36:00.415" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:36:00.499" starttime="20170918 10:36:00.498" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:36:00.499" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:36:00.499" starttime="20170918 10:36:00.499" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:00.499" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:00.499" starttime="20170918 10:36:00.139" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:00.500" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:00.500" starttime="20170918 10:36:00.500" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:36:00.501" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 88 ee ce 69 00 00 00 09 88 ef 37 cd 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1a 90 00 00 1a 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 00 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 06 0d ef bf ac 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d ef d2 71 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d ef dd db 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d f0 03 83 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d f0 0e 70 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d f0 21 1b 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d f0 2b cc 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d f0 3e f8 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d f0 49 ef 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d f0 5d 1f 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d f0 67 e4 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d f0 7a e2 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d f0 85 b5 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 4f 38 45 27 c5 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 4f 38 cd b5 35 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 4f 3a ae 0c 37 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
    "_PID=1213"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:36:00.501" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:36:00.501" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 0...</msg>
<status endtime="20170918 10:36:00.501" starttime="20170918 10:36:00.500" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:00.501" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 88 ee ce 69 00 00 00 09 88 ef 37 cd 42 00 0...</msg>
<status endtime="20170918 10:36:00.502" starttime="20170918 10:36:00.139" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170918 10:36:00.502" level="INFO">Length is 3</msg>
<msg timestamp="20170918 10:36:00.502" level="INFO">${length} = 3</msg>
<status endtime="20170918 10:36:00.502" starttime="20170918 10:36:00.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170918 10:36:00.503" starttime="20170918 10:36:00.502" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170918 10:36:00.503" level="INFO">${index} = 1</msg>
<status endtime="20170918 10:36:00.503" starttime="20170918 10:36:00.503" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:00.505" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:00.505" starttime="20170918 10:36:00.504" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.505" starttime="20170918 10:36:00.503" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:00.506" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:00.506" starttime="20170918 10:36:00.505" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.506" starttime="20170918 10:36:00.505" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.506" starttime="20170918 10:36:00.138" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/8/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170918 10:36:00.507" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170918 10:36:00.507" starttime="20170918 10:36:00.506" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.507" starttime="20170918 10:36:00.506" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/9" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170918 10:36:00.508" starttime="20170918 10:36:00.507" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:36:00.511" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:36:00.512" starttime="20170918 10:36:00.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:36:00.512" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:36:00.512" starttime="20170918 10:36:00.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:36:00.513" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:36:00.513" starttime="20170918 10:36:00.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:36:00.514" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:36:00.514" starttime="20170918 10:36:00.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:36:00.702" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:36:00.703" starttime="20170918 10:36:00.514" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:00.703" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:00.703" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:00.703" starttime="20170918 10:36:00.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:36:00.703" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:00.703" starttime="20170918 10:36:00.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:00.704" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:00.704" starttime="20170918 10:36:00.704" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.704" starttime="20170918 10:36:00.510" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.704" starttime="20170918 10:36:00.510" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.704" starttime="20170918 10:36:00.509" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:36:00.705" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/9/attr/AdditionalData</msg>
<status endtime="20170918 10:36:00.705" starttime="20170918 10:36:00.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170918 10:36:00.706" starttime="20170918 10:36:00.705" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:36:00.788" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/9/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170918 10:36:00.788" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:00.788" starttime="20170918 10:36:00.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170918 10:36:00.789" starttime="20170918 10:36:00.788" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:36:00.789" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:36:00.789" starttime="20170918 10:36:00.789" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:00.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:00.790" starttime="20170918 10:36:00.509" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:00.790" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:00.790" starttime="20170918 10:36:00.790" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:36:00.791" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 88 ee e4 d5 00 00 00 09 8a 28 bf 55 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1a 90 00 00 1b 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 1a 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 1a 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
    "_PID=1213"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:36:00.791" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:36:00.791" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 0...</msg>
<status endtime="20170918 10:36:00.791" starttime="20170918 10:36:00.791" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:00.792" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 88 ee e4 d5 00 00 00 09 8a 28 bf 55 42 00 0...</msg>
<status endtime="20170918 10:36:00.792" starttime="20170918 10:36:00.508" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170918 10:36:00.792" level="INFO">Length is 3</msg>
<msg timestamp="20170918 10:36:00.792" level="INFO">${length} = 3</msg>
<status endtime="20170918 10:36:00.792" starttime="20170918 10:36:00.792" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170918 10:36:00.793" starttime="20170918 10:36:00.792" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170918 10:36:00.793" level="INFO">${index} = 1</msg>
<status endtime="20170918 10:36:00.793" starttime="20170918 10:36:00.793" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:00.795" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:00.795" starttime="20170918 10:36:00.794" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.795" starttime="20170918 10:36:00.794" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:00.796" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_esel&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:00.796" starttime="20170918 10:36:00.796" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.796" starttime="20170918 10:36:00.795" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.796" starttime="20170918 10:36:00.507" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/9/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170918 10:36:00.797" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170918 10:36:00.797" starttime="20170918 10:36:00.797" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.797" starttime="20170918 10:36:00.796" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.797" starttime="20170918 10:35:57.232" status="FAIL"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170918 10:36:00.801" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170918 10:36:00.805" level="INFO">${out} = </msg>
<status endtime="20170918 10:36:00.805" starttime="20170918 10:36:00.798" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170918 10:36:00.812" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170918 10:36:00.812" starttime="20170918 10:36:00.808" status="FAIL"></status>
</kw>
<msg timestamp="20170918 10:36:00.812" level="INFO">${status} = False</msg>
<status endtime="20170918 10:36:00.812" starttime="20170918 10:36:00.808" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170918 10:36:00.813" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170918 10:36:00.813" starttime="20170918 10:36:00.812" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.813" starttime="20170918 10:35:56.561" status="FAIL"></status>
</kw>
<status endtime="20170918 10:36:00.813" starttime="20170918 10:35:56.535" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.813" starttime="20170918 10:35:56.532" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:00.814" starttime="20170918 10:35:56.532" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170918 10:36:00.816" starttime="20170918 10:36:00.815" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:00.816" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:00.816" level="INFO">${ret_values} = None</msg>
<status endtime="20170918 10:36:00.816" starttime="20170918 10:36:00.815" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170918 10:36:00.816" starttime="20170918 10:36:00.816" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170918 10:36:00.844" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170918 10:36:00.844" starttime="20170918 10:36:00.844" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170918 10:36:00.845" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pa...</msg>
<status endtime="20170918 10:36:00.845" starttime="20170918 10:36:00.845" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170918 10:36:00.846" level="INFO">${logpath} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_proc_list.txt</msg>
<status endtime="20170918 10:36:00.846" starttime="20170918 10:36:00.846" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170918 10:36:00.848" starttime="20170918 10:36:00.847" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:00.849" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170918 10:36:00.849" starttime="20170918 10:36:00.848" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170918 10:36:00.924" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:36:00.924" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170918 10:36:01.236" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170918 10:36:01.236" starttime="20170918 10:36:00.886" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:01.236" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:01.236" level="INFO">${ret_values} = (u'Mem: 190568K used, 241672K free, 14736K shrd, 16576K buff, 74680K cached\nCPU:   0% usr  25% sys   0% nic  75% idle   0% io   0% irq   0% sirq\nLoad average: 0.70 1.27 1.17 1/158 2855\n  PID  PPID ...</msg>
<status endtime="20170918 10:36:01.236" starttime="20170918 10:36:00.850" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170918 10:36:01.237" level="INFO">${stdout} = Mem: 190568K used, 241672K free, 14736K shrd, 16576K buff, 74680K cached
CPU:   0% usr  25% sys   0% nic  75% idle   0% io   0% irq   0% sirq
Load average: 0.70 1.27 1.17 1/158 2855
  PID  PPID USER  ...</msg>
<status endtime="20170918 10:36:01.237" starttime="20170918 10:36:01.237" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170918 10:36:01.238" level="INFO">${stderr} = </msg>
<status endtime="20170918 10:36:01.238" starttime="20170918 10:36:01.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:01.249" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_proc_list.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:01.249" starttime="20170918 10:36:01.248" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:01.249" starttime="20170918 10:36:01.247" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:01.249" starttime="20170918 10:36:01.238" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:01.249" starttime="20170918 10:36:00.846" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:01.250" starttime="20170918 10:36:00.845" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170918 10:36:01.250" level="INFO">${logpath} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_dmesg.txt</msg>
<status endtime="20170918 10:36:01.250" starttime="20170918 10:36:01.250" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170918 10:36:01.252" starttime="20170918 10:36:01.252" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:01.253" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170918 10:36:01.253" starttime="20170918 10:36:01.253" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170918 10:36:01.322" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:36:01.322" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170918 10:36:01.409" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170918 10:36:01.410" starttime="20170918 10:36:01.285" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:01.410" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:01.410" level="INFO">${ret_values} = (u'[    0.120000] Setting up static identity map for 0x80008200 - 0x8000825c\n[    0.130000] devtmpfs: initialized\n[    0.140000] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_id...</msg>
<status endtime="20170918 10:36:01.410" starttime="20170918 10:36:01.254" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170918 10:36:01.411" level="INFO">${stdout} = [    0.120000] Setting up static identity map for 0x80008200 - 0x8000825c
[    0.130000] devtmpfs: initialized
[    0.140000] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns...</msg>
<status endtime="20170918 10:36:01.411" starttime="20170918 10:36:01.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170918 10:36:01.411" level="INFO">${stderr} = </msg>
<status endtime="20170918 10:36:01.412" starttime="20170918 10:36:01.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:01.419" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_dmesg.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:01.419" starttime="20170918 10:36:01.418" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:01.419" starttime="20170918 10:36:01.417" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:01.419" starttime="20170918 10:36:01.412" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:01.419" starttime="20170918 10:36:01.251" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:01.419" starttime="20170918 10:36:01.250" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170918 10:36:01.420" level="INFO">${logpath} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_procinfo.txt</msg>
<status endtime="20170918 10:36:01.420" starttime="20170918 10:36:01.420" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170918 10:36:01.421" starttime="20170918 10:36:01.421" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:01.422" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170918 10:36:01.422" starttime="20170918 10:36:01.422" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170918 10:36:01.494" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:36:01.495" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170918 10:36:01.551" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170918 10:36:01.552" starttime="20170918 10:36:01.457" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:01.552" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:01.552" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170918 10:36:01.552" starttime="20170918 10:36:01.423" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170918 10:36:01.553" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170918 10:36:01.553" starttime="20170918 10:36:01.552" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170918 10:36:01.553" level="INFO">${stderr} = </msg>
<status endtime="20170918 10:36:01.553" starttime="20170918 10:36:01.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:01.563" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_procinfo.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:01.563" starttime="20170918 10:36:01.562" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:01.563" starttime="20170918 10:36:01.561" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:01.563" starttime="20170918 10:36:01.553" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:01.563" starttime="20170918 10:36:01.420" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:01.563" starttime="20170918 10:36:01.419" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170918 10:36:01.564" level="INFO">${logpath} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170918 10:36:01.564" starttime="20170918 10:36:01.563" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170918 10:36:01.565" starttime="20170918 10:36:01.565" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:01.566" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170918 10:36:01.566" starttime="20170918 10:36:01.565" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170918 10:36:01.634" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:36:01.635" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170918 10:36:02.204" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170918 10:36:02.204" starttime="20170918 10:36:01.598" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:02.204" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:02.206" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 15 16:37 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 15 16:37 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170918 10:36:02.206" starttime="20170918 10:36:01.566" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170918 10:36:02.207" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 15 16:37 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 15 16:37 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170918 10:36:02.207" starttime="20170918 10:36:02.206" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170918 10:36:02.208" level="INFO">${stderr} = ls: /proc/2858/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170918 10:36:02.208" starttime="20170918 10:36:02.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:02.219" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:02.219" starttime="20170918 10:36:02.218" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:02.220" starttime="20170918 10:36:02.217" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:02.220" starttime="20170918 10:36:02.208" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:02.220" starttime="20170918 10:36:01.564" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:02.220" starttime="20170918 10:36:01.563" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170918 10:36:02.221" level="INFO">${logpath} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_journalctl_nopager.txt</msg>
<status endtime="20170918 10:36:02.221" starttime="20170918 10:36:02.220" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170918 10:36:02.222" starttime="20170918 10:36:02.222" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:02.223" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170918 10:36:02.223" starttime="20170918 10:36:02.222" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170918 10:36:02.292" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:36:02.292" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170918 10:36:05.681" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170918 10:36:05.682" starttime="20170918 10:36:02.255" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:05.682" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:05.687" level="INFO">${ret_values} = (u'-- Logs begin at Fri 2017-09-15 16:23:54 UTC, end at Fri 2017-09-15 16:37:45 UTC. --\nSep 15 16:23:54 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 15 16:23:54 witherspoon kernel: Linu...</msg>
<status endtime="20170918 10:36:05.687" starttime="20170918 10:36:02.223" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170918 10:36:05.688" level="INFO">${stdout} = -- Logs begin at Fri 2017-09-15 16:23:54 UTC, end at Fri 2017-09-15 16:37:45 UTC. --
Sep 15 16:23:54 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 15 16:23:54 witherspoon kernel: Linux ver...</msg>
<status endtime="20170918 10:36:05.688" starttime="20170918 10:36:05.687" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170918 10:36:05.689" level="INFO">${stderr} = </msg>
<status endtime="20170918 10:36:05.689" starttime="20170918 10:36:05.689" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:05.698" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_journalctl_nopager.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:05.698" starttime="20170918 10:36:05.697" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:05.698" starttime="20170918 10:36:05.695" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:05.698" starttime="20170918 10:36:05.689" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:05.699" starttime="20170918 10:36:02.221" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:05.699" starttime="20170918 10:36:02.220" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170918 10:36:05.699" level="INFO">${logpath} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_meminfo.txt</msg>
<status endtime="20170918 10:36:05.699" starttime="20170918 10:36:05.699" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170918 10:36:05.701" starttime="20170918 10:36:05.700" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:05.701" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170918 10:36:05.702" starttime="20170918 10:36:05.701" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170918 10:36:05.776" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:36:05.777" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170918 10:36:05.915" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170918 10:36:05.915" starttime="20170918 10:36:05.735" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:05.915" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:05.916" level="INFO">${ret_values} = (u'MemTotal:         432240 kB\nMemFree:          241332 kB\nMemAvailable:     316884 kB\nBuffers:           16576 kB\nCached:            74684 kB\nSwapCached:            0 kB\nActive:           12823...</msg>
<status endtime="20170918 10:36:05.916" starttime="20170918 10:36:05.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170918 10:36:05.916" level="INFO">${stdout} = MemTotal:         432240 kB
MemFree:          241332 kB
MemAvailable:     316884 kB
Buffers:           16576 kB
Cached:            74684 kB
SwapCached:            0 kB
Active:           128236 kB
Inac...</msg>
<status endtime="20170918 10:36:05.916" starttime="20170918 10:36:05.916" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170918 10:36:05.917" level="INFO">${stderr} = </msg>
<status endtime="20170918 10:36:05.917" starttime="20170918 10:36:05.917" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:05.924" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_meminfo.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:05.924" starttime="20170918 10:36:05.923" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:05.924" starttime="20170918 10:36:05.923" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:05.924" starttime="20170918 10:36:05.917" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:05.924" starttime="20170918 10:36:05.700" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:05.924" starttime="20170918 10:36:05.699" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170918 10:36:05.925" level="INFO">${logpath} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_journalctl_pretty.txt</msg>
<status endtime="20170918 10:36:05.925" starttime="20170918 10:36:05.925" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170918 10:36:05.926" starttime="20170918 10:36:05.926" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:05.927" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status endtime="20170918 10:36:05.927" starttime="20170918 10:36:05.926" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170918 10:36:05.995" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:36:05.996" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170918 10:36:15.014" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170918 10:36:15.022" starttime="20170918 10:36:05.959" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:15.022" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:15.070" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=92065460785040e9bdd9f696b8c5b591;i=1;b=4940b2d3ad17464da016b4e44713c1f1;m=c9c651;t=5593cd1b18f0a;x=de137a88c72d4857",\n\t"__REALTIME_TIMESTAMP" : "1505492634537738",\n\t"__MONO...</msg>
<status endtime="20170918 10:36:15.070" starttime="20170918 10:36:05.927" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170918 10:36:15.081" level="INFO">${stdout} = {
	"__CURSOR" : "s=92065460785040e9bdd9f696b8c5b591;i=1;b=4940b2d3ad17464da016b4e44713c1f1;m=c9c651;t=5593cd1b18f0a;x=de137a88c72d4857",
	"__REALTIME_TIMESTAMP" : "1505492634537738",
	"__MONOTONIC_TIM...</msg>
<status endtime="20170918 10:36:15.081" starttime="20170918 10:36:15.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170918 10:36:15.082" level="INFO">${stderr} = </msg>
<status endtime="20170918 10:36:15.082" starttime="20170918 10:36:15.081" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:15.112" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_journalctl_pretty.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:15.112" starttime="20170918 10:36:15.104" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.112" starttime="20170918 10:36:15.091" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.112" starttime="20170918 10:36:15.082" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.112" starttime="20170918 10:36:05.925" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.112" starttime="20170918 10:36:05.924" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.112" starttime="20170918 10:36:00.845" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.113" starttime="20170918 10:36:00.844" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.113" starttime="20170918 10:36:00.844" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.113" starttime="20170918 10:36:00.844" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.113" starttime="20170918 10:36:00.843" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.113" starttime="20170918 10:36:00.817" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.113" starttime="20170918 10:36:00.814" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.113" starttime="20170918 10:36:00.814" status="PASS"></status>
</kw>
<kw name="${method} = ('Sys Inventory Files', 'System Inventory Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170918 10:36:15.115" starttime="20170918 10:36:15.115" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:15.115" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:15.115" level="INFO">${ret_values} = None</msg>
<status endtime="20170918 10:36:15.115" starttime="20170918 10:36:15.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170918 10:36:15.116" starttime="20170918 10:36:15.115" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="System Inventory Files">
<doc>Copy systest os_inventory files.</doc>
<kw library="OperatingSystem" name="Copy Files">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status endtime="20170918 10:36:15.143" starttime="20170918 10:36:15.142" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Remove Files">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:15.144" level="INFO">File '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/17304/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status endtime="20170918 10:36:15.144" starttime="20170918 10:36:15.143" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.144" starttime="20170918 10:36:15.142" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.144" starttime="20170918 10:36:15.116" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.144" starttime="20170918 10:36:15.113" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.144" starttime="20170918 10:36:15.113" status="PASS"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170918 10:36:15.146" starttime="20170918 10:36:15.146" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:15.146" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:15.146" level="INFO">${ret_values} = None</msg>
<status endtime="20170918 10:36:15.146" starttime="20170918 10:36:15.145" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170918 10:36:15.147" starttime="20170918 10:36:15.146" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170918 10:36:15.173" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status endtime="20170918 10:36:15.173" starttime="20170918 10:36:15.173" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170918 10:36:15.174" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170918 10:36:15.174" starttime="20170918 10:36:15.174" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170918 10:36:15.180" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170918 10:36:15.180" starttime="20170918 10:36:15.174" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:15.184" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:15.184" starttime="20170918 10:36:15.183" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.184" starttime="20170918 10:36:15.183" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:15.185" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:15.185" starttime="20170918 10:36:15.185" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.185" starttime="20170918 10:36:15.184" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:15.187" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:15.187" starttime="20170918 10:36:15.186" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.187" starttime="20170918 10:36:15.186" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:15.188" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:15.188" starttime="20170918 10:36:15.187" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.188" starttime="20170918 10:36:15.187" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.188" starttime="20170918 10:36:15.182" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:15.188" starttime="20170918 10:36:15.182" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:15.189" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170918 10:36:15.189" starttime="20170918 10:36:15.189" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170918 10:36:15.265" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:36:15.265" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170918 10:36:16.875" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170918 10:36:16.876" starttime="20170918 10:36:15.228" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:16.876" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:16.876" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status endtime="20170918 10:36:16.876" starttime="20170918 10:36:15.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170918 10:36:16.877" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status endtime="20170918 10:36:16.877" starttime="20170918 10:36:16.876" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170918 10:36:16.877" level="INFO">${stderr} = </msg>
<status endtime="20170918 10:36:16.877" starttime="20170918 10:36:16.877" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:16.884" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:16.884" starttime="20170918 10:36:16.884" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:16.885" starttime="20170918 10:36:16.883" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:16.885" starttime="20170918 10:36:16.878" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:16.885" starttime="20170918 10:36:15.181" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:16.885" starttime="20170918 10:36:15.181" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:16.885" starttime="20170918 10:36:15.181" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:16.885" starttime="20170918 10:36:15.173" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:16.885" starttime="20170918 10:36:15.173" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170918 10:36:16.886" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('FW Timestamp', 'cat /etc/timestamp') ]</msg>
<status endtime="20170918 10:36:16.886" starttime="20170918 10:36:16.886" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170918 10:36:16.887" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170918 10:36:16.887" starttime="20170918 10:36:16.886" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:16.890" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:16.890" starttime="20170918 10:36:16.890" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:16.890" starttime="20170918 10:36:16.889" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:16.892" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:16.892" starttime="20170918 10:36:16.891" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:16.892" starttime="20170918 10:36:16.891" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:16.893" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:16.893" starttime="20170918 10:36:16.893" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:16.893" starttime="20170918 10:36:16.892" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:16.894" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:16.894" starttime="20170918 10:36:16.894" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:16.894" starttime="20170918 10:36:16.893" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:16.894" starttime="20170918 10:36:16.889" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:16.895" starttime="20170918 10:36:16.888" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:16.895" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170918 10:36:16.895" starttime="20170918 10:36:16.895" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170918 10:36:16.964" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:36:16.964" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170918 10:36:17.021" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170918 10:36:17.021" starttime="20170918 10:36:16.927" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:17.021" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:17.021" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-12"\nVERSION_ID="v1.99.10-12-gac7bf16"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170918 10:36:17.022" starttime="20170918 10:36:16.896" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170918 10:36:17.022" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-12"
VERSION_ID="v1.99.10-12-gac7bf16"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170918 10:36:17.022" starttime="20170918 10:36:17.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170918 10:36:17.023" level="INFO">${stderr} = </msg>
<status endtime="20170918 10:36:17.023" starttime="20170918 10:36:17.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.030" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.030" starttime="20170918 10:36:17.029" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.030" starttime="20170918 10:36:17.029" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.030" starttime="20170918 10:36:17.023" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.030" starttime="20170918 10:36:16.887" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.030" starttime="20170918 10:36:16.887" status="PASS"></status>
</kw>
<kw name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.033" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.033" starttime="20170918 10:36:17.033" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.033" starttime="20170918 10:36:17.032" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.034" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.035" starttime="20170918 10:36:17.034" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.035" starttime="20170918 10:36:17.033" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.036" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.036" starttime="20170918 10:36:17.035" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.036" starttime="20170918 10:36:17.035" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.037" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.037" starttime="20170918 10:36:17.037" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.037" starttime="20170918 10:36:17.036" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.037" starttime="20170918 10:36:17.032" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.037" starttime="20170918 10:36:17.031" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:17.038" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status endtime="20170918 10:36:17.038" starttime="20170918 10:36:17.038" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170918 10:36:17.107" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:36:17.108" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170918 10:36:17.184" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170918 10:36:17.184" starttime="20170918 10:36:17.070" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:17.185" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:17.185" level="INFO">${ret_values} = (u'20170918100526', u'', 0)</msg>
<status endtime="20170918 10:36:17.185" starttime="20170918 10:36:17.039" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170918 10:36:17.185" level="INFO">${stdout} = 20170918100526</msg>
<status endtime="20170918 10:36:17.185" starttime="20170918 10:36:17.185" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170918 10:36:17.186" level="INFO">${stderr} = </msg>
<status endtime="20170918 10:36:17.186" starttime="20170918 10:36:17.186" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.193" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.193" starttime="20170918 10:36:17.193" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.194" starttime="20170918 10:36:17.192" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.194" starttime="20170918 10:36:17.186" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.194" starttime="20170918 10:36:17.030" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.194" starttime="20170918 10:36:17.030" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.194" starttime="20170918 10:36:16.887" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.194" starttime="20170918 10:36:16.885" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.194" starttime="20170918 10:36:16.885" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170918 10:36:17.195" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170918 10:36:17.195" starttime="20170918 10:36:17.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170918 10:36:17.196" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170918 10:36:17.196" starttime="20170918 10:36:17.195" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.199" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.199" starttime="20170918 10:36:17.198" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.199" starttime="20170918 10:36:17.198" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.200" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.200" starttime="20170918 10:36:17.200" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.201" starttime="20170918 10:36:17.199" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.202" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.202" starttime="20170918 10:36:17.201" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.202" starttime="20170918 10:36:17.201" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.203" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.203" starttime="20170918 10:36:17.203" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.203" starttime="20170918 10:36:17.202" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.203" starttime="20170918 10:36:17.197" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.203" starttime="20170918 10:36:17.197" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:17.204" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170918 10:36:17.204" starttime="20170918 10:36:17.203" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170918 10:36:17.277" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:36:17.277" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170918 10:36:17.334" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170918 10:36:17.334" starttime="20170918 10:36:17.240" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:17.334" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:17.334" level="INFO">${ret_values} = (u' 16:38:02 up 14 min,  load average: 0.92, 1.28, 1.18', u'', 0)</msg>
<status endtime="20170918 10:36:17.334" starttime="20170918 10:36:17.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170918 10:36:17.335" level="INFO">${stdout} =  16:38:02 up 14 min,  load average: 0.92, 1.28, 1.18</msg>
<status endtime="20170918 10:36:17.335" starttime="20170918 10:36:17.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170918 10:36:17.335" level="INFO">${stderr} = </msg>
<status endtime="20170918 10:36:17.335" starttime="20170918 10:36:17.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.343" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.344" starttime="20170918 10:36:17.343" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.344" starttime="20170918 10:36:17.342" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.344" starttime="20170918 10:36:17.336" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.344" starttime="20170918 10:36:17.196" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.344" starttime="20170918 10:36:17.196" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.347" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.347" starttime="20170918 10:36:17.346" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.347" starttime="20170918 10:36:17.346" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.348" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.348" starttime="20170918 10:36:17.348" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.348" starttime="20170918 10:36:17.347" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.350" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.350" starttime="20170918 10:36:17.349" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.350" starttime="20170918 10:36:17.349" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.351" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.351" starttime="20170918 10:36:17.350" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.351" starttime="20170918 10:36:17.350" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.351" starttime="20170918 10:36:17.345" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.351" starttime="20170918 10:36:17.345" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:17.352" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170918 10:36:17.352" starttime="20170918 10:36:17.351" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170918 10:36:17.426" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:36:17.427" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170918 10:36:17.514" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170918 10:36:17.514" starttime="20170918 10:36:17.384" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:17.514" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:17.514" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Mon Sep 18 10:04:16 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170918 10:36:17.514" starttime="20170918 10:36:17.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170918 10:36:17.515" level="INFO">${stdout} = Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Mon Sep 18 10:04:16 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170918 10:36:17.515" starttime="20170918 10:36:17.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170918 10:36:17.515" level="INFO">${stderr} = </msg>
<status endtime="20170918 10:36:17.515" starttime="20170918 10:36:17.515" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.522" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.522" starttime="20170918 10:36:17.522" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.523" starttime="20170918 10:36:17.521" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.523" starttime="20170918 10:36:17.516" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.523" starttime="20170918 10:36:17.344" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.523" starttime="20170918 10:36:17.344" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.526" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.527" starttime="20170918 10:36:17.526" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.527" starttime="20170918 10:36:17.525" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.528" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.528" starttime="20170918 10:36:17.528" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.528" starttime="20170918 10:36:17.527" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.529" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.529" starttime="20170918 10:36:17.529" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.529" starttime="20170918 10:36:17.528" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.530" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.531" starttime="20170918 10:36:17.530" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.531" starttime="20170918 10:36:17.530" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.531" starttime="20170918 10:36:17.524" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.531" starttime="20170918 10:36:17.524" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:17.532" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170918 10:36:17.532" starttime="20170918 10:36:17.531" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170918 10:36:17.601" level="INFO">path_separator=/
prompt=# 
port=22
alias=bmc_connection
width=80
timeout=25 seconds
newline=

term_type=vt100
index=1
host=9.41.166.169
encoding=UTF-8
height=24</msg>
<msg timestamp="20170918 10:36:17.601" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170918 10:36:17.658" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170918 10:36:17.658" starttime="20170918 10:36:17.564" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:17.658" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:17.658" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170918 10:36:17.658" starttime="20170918 10:36:17.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170918 10:36:17.659" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<status endtime="20170918 10:36:17.659" starttime="20170918 10:36:17.659" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170918 10:36:17.660" level="INFO">${stderr} = </msg>
<status endtime="20170918 10:36:17.660" starttime="20170918 10:36:17.659" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:17.667" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/20170918103547973500_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:17.667" starttime="20170918 10:36:17.666" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.667" starttime="20170918 10:36:17.666" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.667" starttime="20170918 10:36:17.660" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.667" starttime="20170918 10:36:17.523" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.667" starttime="20170918 10:36:17.523" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.667" starttime="20170918 10:36:17.196" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.667" starttime="20170918 10:36:17.194" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.667" starttime="20170918 10:36:17.194" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.667" starttime="20170918 10:36:15.173" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.668" starttime="20170918 10:36:15.172" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.668" starttime="20170918 10:36:15.147" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.668" starttime="20170918 10:36:15.144" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.668" starttime="20170918 10:36:15.144" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.668" starttime="20170918 10:35:48.228" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.668" starttime="20170918 10:35:48.225" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.668" starttime="20170918 10:35:48.225" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.668" starttime="20170918 10:35:48.225" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status endtime="20170918 10:36:17.675" starttime="20170918 10:36:17.675" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.675" starttime="20170918 10:36:17.668" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.676" starttime="20170918 10:35:48.224" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.676" starttime="20170918 10:35:44.870" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.676" starttime="20170918 10:35:44.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw library="state_manager" name="Recover Quiesced Host">
<doc>Recover host from quisced state.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:36:17.681" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:36:17.682" starttime="20170918 10:36:17.681" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:36:17.682" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:36:17.682" starttime="20170918 10:36:17.682" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:36:17.683" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:36:17.683" starttime="20170918 10:36:17.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:36:17.684" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:36:17.684" starttime="20170918 10:36:17.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:36:17.958" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:36:17.958" starttime="20170918 10:36:17.684" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:17.958" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:17.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:17.958" starttime="20170918 10:36:17.684" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:36:17.959" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:17.959" starttime="20170918 10:36:17.958" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:17.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:17.959" starttime="20170918 10:36:17.959" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.960" starttime="20170918 10:36:17.680" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.960" starttime="20170918 10:36:17.680" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.960" starttime="20170918 10:36:17.679" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:36:17.960" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:36:17.961" starttime="20170918 10:36:17.960" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:36:17.963" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:36:17.963" starttime="20170918 10:36:17.962" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:36:17.964" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:36:17.964" starttime="20170918 10:36:17.963" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.964" starttime="20170918 10:36:17.963" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.964" starttime="20170918 10:36:17.961" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:17.964" starttime="20170918 10:36:17.961" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:36:18.069" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:36:18.069" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:18.069" starttime="20170918 10:36:17.964" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:36:18.071" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:36:18.071" starttime="20170918 10:36:18.070" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:36:18.072" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:36:18.072" starttime="20170918 10:36:18.072" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:18.072" starttime="20170918 10:36:18.071" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:18.072" starttime="20170918 10:36:18.070" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:18.072" starttime="20170918 10:36:18.069" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:36:18.073" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:36:18.073" starttime="20170918 10:36:18.072" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:18.073" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:18.073" starttime="20170918 10:36:17.679" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:18.074" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:18.074" starttime="20170918 10:36:18.073" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:36:18.074" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:36:18.074" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:36:18.074" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:36:18.074" starttime="20170918 10:36:18.074" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:18.075" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:36:18.075" starttime="20170918 10:36:17.678" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:18.075" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:36:18.075" starttime="20170918 10:36:17.678" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170918 10:36:18.076" starttime="20170918 10:36:18.076" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:18.076" level="INFO">${status} = True</msg>
<status endtime="20170918 10:36:18.076" starttime="20170918 10:36:18.075" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:18.076" starttime="20170918 10:36:17.677" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:18.076" level="INFO">${resp} = True</msg>
<status endtime="20170918 10:36:18.076" starttime="20170918 10:36:17.677" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170918 10:36:18.079" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170918 10:36:18.079" starttime="20170918 10:36:18.078" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:36:18.080" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170918 10:36:18.080" starttime="20170918 10:36:18.079" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:36:18.084" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:36:18.085" starttime="20170918 10:36:18.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:36:18.085" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:36:18.085" starttime="20170918 10:36:18.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:36:18.086" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:36:18.086" starttime="20170918 10:36:18.086" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:36:18.087" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:36:18.087" starttime="20170918 10:36:18.086" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:36:18.293" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:36:18.293" starttime="20170918 10:36:18.088" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:18.293" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:18.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:18.293" starttime="20170918 10:36:18.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:36:18.294" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:18.294" starttime="20170918 10:36:18.294" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:18.295" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:18.295" starttime="20170918 10:36:18.294" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:18.295" starttime="20170918 10:36:18.082" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:18.295" starttime="20170918 10:36:18.081" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:18.295" starttime="20170918 10:36:18.081" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:36:18.296" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170918 10:36:18.296" starttime="20170918 10:36:18.295" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:36:18.296" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:36:18.296" starttime="20170918 10:36:18.296" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170918 10:36:18.297" starttime="20170918 10:36:18.297" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:36:18.299" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status endtime="20170918 10:36:18.299" starttime="20170918 10:36:18.298" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:36:18.300" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170918 10:36:18.300" starttime="20170918 10:36:18.299" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:18.300" starttime="20170918 10:36:18.299" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:18.300" starttime="20170918 10:36:18.297" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:36:18.644" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170918 10:36:18.644" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:18.644" starttime="20170918 10:36:18.300" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:36:18.645" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:36:18.645" starttime="20170918 10:36:18.645" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:36:18.647" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:36:18.647" starttime="20170918 10:36:18.646" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:18.647" starttime="20170918 10:36:18.646" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:18.648" starttime="20170918 10:36:18.644" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:36:18.648" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:36:18.648" starttime="20170918 10:36:18.648" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:18.648" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:18.648" starttime="20170918 10:36:18.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:18.649" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:18.649" starttime="20170918 10:36:18.649" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170918 10:36:18.650" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:36:18.650" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:36:18.650" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status endtime="20170918 10:36:18.650" starttime="20170918 10:36:18.649" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:18.650" starttime="20170918 10:36:18.079" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170918 10:36:18.650" starttime="20170918 10:36:18.650" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:36:18.657" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:36:18.657" starttime="20170918 10:36:18.656" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:36:18.658" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:36:18.658" starttime="20170918 10:36:18.658" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:36:18.659" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:36:18.659" starttime="20170918 10:36:18.658" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:36:18.660" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:36:18.660" starttime="20170918 10:36:18.659" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:36:20.156" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:36:20.156" starttime="20170918 10:36:18.660" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:20.156" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:20.156" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:20.156" starttime="20170918 10:36:18.660" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:36:20.157" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:20.157" starttime="20170918 10:36:20.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:20.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:20.158" starttime="20170918 10:36:20.157" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:20.158" starttime="20170918 10:36:18.655" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:20.158" starttime="20170918 10:36:18.655" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:20.158" starttime="20170918 10:36:18.654" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:36:20.159" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:36:20.159" starttime="20170918 10:36:20.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:36:20.161" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:36:20.162" starttime="20170918 10:36:20.161" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:36:20.163" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:36:20.163" starttime="20170918 10:36:20.163" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:20.163" starttime="20170918 10:36:20.162" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:20.163" starttime="20170918 10:36:20.159" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:20.163" starttime="20170918 10:36:20.159" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:36:21.816" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:36:21.816" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:21.816" starttime="20170918 10:36:20.164" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:36:21.818" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:36:21.818" starttime="20170918 10:36:21.818" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:36:21.819" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:36:21.819" starttime="20170918 10:36:21.819" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:21.819" starttime="20170918 10:36:21.818" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:21.820" starttime="20170918 10:36:21.817" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:21.820" starttime="20170918 10:36:21.817" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:36:21.820" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:36:21.820" starttime="20170918 10:36:21.820" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:21.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:21.820" starttime="20170918 10:36:18.653" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:21.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:21.821" starttime="20170918 10:36:21.821" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:36:21.822" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:36:21.822" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:36:21.822" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170918 10:36:21.822" starttime="20170918 10:36:21.821" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:21.822" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170918 10:36:21.822" starttime="20170918 10:36:18.653" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:21.822" level="INFO">${power_state} = On</msg>
<status endtime="20170918 10:36:21.822" starttime="20170918 10:36:18.653" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170918 10:36:21.823" level="FAIL">Off != On</msg>
<status endtime="20170918 10:36:21.823" starttime="20170918 10:36:21.823" status="FAIL"></status>
</kw>
<status endtime="20170918 10:36:21.823" starttime="20170918 10:36:18.652" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:36:21.827" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:36:21.828" starttime="20170918 10:36:21.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:36:21.828" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:36:21.828" starttime="20170918 10:36:21.828" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:36:21.829" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:36:21.829" starttime="20170918 10:36:21.829" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:36:21.830" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:36:21.830" starttime="20170918 10:36:21.829" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:36:22.673" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:36:22.673" starttime="20170918 10:36:21.831" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:22.673" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:22.673" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:22.673" starttime="20170918 10:36:21.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:36:22.674" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:22.674" starttime="20170918 10:36:22.674" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:22.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:22.675" starttime="20170918 10:36:22.674" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:22.675" starttime="20170918 10:36:21.826" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:22.675" starttime="20170918 10:36:21.826" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:22.675" starttime="20170918 10:36:21.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:36:22.676" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:36:22.676" starttime="20170918 10:36:22.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:36:22.678" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:36:22.678" starttime="20170918 10:36:22.677" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:36:22.679" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:36:22.679" starttime="20170918 10:36:22.679" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:22.679" starttime="20170918 10:36:22.678" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:22.679" starttime="20170918 10:36:22.677" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:22.679" starttime="20170918 10:36:22.676" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:36:27.743" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:36:27.743" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:27.743" starttime="20170918 10:36:22.680" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:36:27.745" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:36:27.745" starttime="20170918 10:36:27.744" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:36:27.746" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:36:27.746" starttime="20170918 10:36:27.746" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:27.746" starttime="20170918 10:36:27.745" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:27.746" starttime="20170918 10:36:27.744" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:27.747" starttime="20170918 10:36:27.743" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:36:27.747" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:36:27.747" starttime="20170918 10:36:27.747" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:27.747" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:27.747" starttime="20170918 10:36:21.824" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:27.748" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:27.748" starttime="20170918 10:36:27.748" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:36:27.749" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:36:27.749" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:36:27.749" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170918 10:36:27.749" starttime="20170918 10:36:27.748" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:27.749" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170918 10:36:27.749" starttime="20170918 10:36:21.824" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:27.749" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170918 10:36:27.749" starttime="20170918 10:36:21.823" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170918 10:36:27.750" level="FAIL">Off != Quiesced</msg>
<status endtime="20170918 10:36:27.750" starttime="20170918 10:36:27.750" status="FAIL"></status>
</kw>
<status endtime="20170918 10:36:27.750" starttime="20170918 10:36:18.652" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:36:37.756" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:36:37.756" starttime="20170918 10:36:37.756" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:36:37.757" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:36:37.757" starttime="20170918 10:36:37.757" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:36:37.758" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:36:37.758" starttime="20170918 10:36:37.757" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:36:37.758" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:36:37.758" starttime="20170918 10:36:37.758" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:36:38.119" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:36:38.119" starttime="20170918 10:36:37.759" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.119" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:38.119" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:38.119" starttime="20170918 10:36:37.759" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:36:38.120" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:38.120" starttime="20170918 10:36:38.120" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:38.121" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:38.121" starttime="20170918 10:36:38.120" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.121" starttime="20170918 10:36:37.755" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.121" starttime="20170918 10:36:37.755" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.121" starttime="20170918 10:36:37.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:36:38.122" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170918 10:36:38.122" starttime="20170918 10:36:38.121" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:36:38.124" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:36:38.124" starttime="20170918 10:36:38.123" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:36:38.125" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170918 10:36:38.125" starttime="20170918 10:36:38.124" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.125" starttime="20170918 10:36:38.124" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.125" starttime="20170918 10:36:38.122" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.125" starttime="20170918 10:36:38.122" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:36:38.439" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170918 10:36:38.439" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:38.439" starttime="20170918 10:36:38.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:36:38.441" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:36:38.441" starttime="20170918 10:36:38.440" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:36:38.442" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:36:38.442" starttime="20170918 10:36:38.442" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.442" starttime="20170918 10:36:38.441" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.442" starttime="20170918 10:36:38.440" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.442" starttime="20170918 10:36:38.440" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:36:38.443" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:36:38.443" starttime="20170918 10:36:38.443" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.443" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:38.443" starttime="20170918 10:36:37.753" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:38.444" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:38.444" starttime="20170918 10:36:38.443" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:36:38.444" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:36:38.444" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:36:38.444" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170918 10:36:38.444" starttime="20170918 10:36:38.444" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.445" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170918 10:36:38.445" starttime="20170918 10:36:37.752" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.445" level="INFO">${power_state} = Off</msg>
<status endtime="20170918 10:36:38.445" starttime="20170918 10:36:37.752" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170918 10:36:38.446" starttime="20170918 10:36:38.445" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.446" starttime="20170918 10:36:37.751" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170918 10:36:38.449" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170918 10:36:38.450" starttime="20170918 10:36:38.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170918 10:36:38.451" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170918 10:36:38.451" starttime="20170918 10:36:38.450" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170918 10:36:38.451" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170918 10:36:38.451" starttime="20170918 10:36:38.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170918 10:36:38.452" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170918 10:36:38.452" starttime="20170918 10:36:38.452" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170918 10:36:38.637" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170918 10:36:38.637" starttime="20170918 10:36:38.453" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.637" level="INFO">${status} = PASS</msg>
<msg timestamp="20170918 10:36:38.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:38.637" starttime="20170918 10:36:38.452" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170918 10:36:38.638" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:38.638" starttime="20170918 10:36:38.637" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:38.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:38.639" starttime="20170918 10:36:38.638" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.639" starttime="20170918 10:36:38.448" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.639" starttime="20170918 10:36:38.448" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.639" starttime="20170918 10:36:38.447" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170918 10:36:38.639" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170918 10:36:38.639" starttime="20170918 10:36:38.639" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:36:38.642" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:36:38.642" starttime="20170918 10:36:38.641" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:36:38.642" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170918 10:36:38.643" starttime="20170918 10:36:38.642" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.643" starttime="20170918 10:36:38.642" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.643" starttime="20170918 10:36:38.640" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.643" starttime="20170918 10:36:38.640" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170918 10:36:38.742" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170918 10:36:38.742" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:38.742" starttime="20170918 10:36:38.643" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170918 10:36:38.744" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:36:38.744" starttime="20170918 10:36:38.743" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170918 10:36:38.745" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170918 10:36:38.745" starttime="20170918 10:36:38.745" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.745" starttime="20170918 10:36:38.744" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.745" starttime="20170918 10:36:38.743" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.745" starttime="20170918 10:36:38.742" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170918 10:36:38.746" level="INFO">Delete All Sessions</msg>
<status endtime="20170918 10:36:38.746" starttime="20170918 10:36:38.745" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170918 10:36:38.746" starttime="20170918 10:36:38.447" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170918 10:36:38.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170918 10:36:38.747" starttime="20170918 10:36:38.746" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170918 10:36:38.747" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170918 10:36:38.747" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170918 10:36:38.747" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170918 10:36:38.747" starttime="20170918 10:36:38.747" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.748" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170918 10:36:38.748" starttime="20170918 10:36:38.446" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.748" level="INFO">${host_state} = Off</msg>
<status endtime="20170918 10:36:38.748" starttime="20170918 10:36:38.446" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170918 10:36:38.748" starttime="20170918 10:36:38.748" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.749" starttime="20170918 10:36:37.751" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.749" starttime="20170918 10:36:18.651" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.749" starttime="20170918 10:36:18.651" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.749" level="INFO">${status} = True</msg>
<status endtime="20170918 10:36:38.749" starttime="20170918 10:36:18.651" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status endtime="20170918 10:36:38.750" starttime="20170918 10:36:38.749" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.750" starttime="20170918 10:36:18.078" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg timestamp="20170918 10:36:38.750" level="INFO">HOST is recovered from quiesced state</msg>
<status endtime="20170918 10:36:38.750" starttime="20170918 10:36:38.750" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.750" starttime="20170918 10:36:18.077" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.750" starttime="20170918 10:36:18.077" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.750" starttime="20170918 10:36:17.677" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.750" starttime="20170918 10:36:17.676" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170918 10:36:38.767" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170918 10:36:38.767" starttime="20170918 10:36:38.751" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170918 10:36:38.768" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/17304/obmc-robot/logs/20170918103547973500_TestsTestBasicPoweron/20170918103547973500_PowerOnTest/</msg>
<status endtime="20170918 10:36:38.768" starttime="20170918 10:36:38.768" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170918 10:36:38.769" starttime="20170918 10:36:38.769" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170918 10:36:38.770" starttime="20170918 10:36:38.769" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:38.771" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs"&gt;/tmp/fspcibld/17304/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170918 10:36:38.771" starttime="20170918 10:36:38.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:38.772" level="INFO">File '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170918 10:36:38.772" starttime="20170918 10:36:38.772" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.772" level="INFO">${exist} = True</msg>
<status endtime="20170918 10:36:38.772" starttime="20170918 10:36:38.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170918 10:36:38.773" starttime="20170918 10:36:38.772" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170918 10:36:38.773" starttime="20170918 10:36:38.773" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170918 10:36:38.774" level="INFO">${cur_time} = 2017-09-18 10:36:38:774029</msg>
<status endtime="20170918 10:36:38.774" starttime="20170918 10:36:38.774" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170918 10:36:38.775" level="INFO">${cur_time} = 20170918103638774029</msg>
<status endtime="20170918 10:36:38.775" starttime="20170918 10:36:38.774" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.775" level="INFO">${cur_time} = 20170918103638774029</msg>
<status endtime="20170918 10:36:38.775" starttime="20170918 10:36:38.773" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:38.776" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/17304/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:38.776" starttime="20170918 10:36:38.775" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.776" starttime="20170918 10:36:38.751" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.777" starttime="20170918 10:35:44.520" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170918 10:36:38.779" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170918 10:36:38.779" starttime="20170918 10:36:38.779" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170918 10:36:38.780" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170918 10:36:38.780" starttime="20170918 10:36:38.780" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.780" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170918 10:36:38.780" starttime="20170918 10:36:38.778" status="PASS"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:38.781" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170918 10:36:38.781" starttime="20170918 10:36:38.781" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170918 10:36:38.782" starttime="20170918 10:36:38.782" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170918 10:36:38.788" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170918 10:36:38.806" level="INFO">${rc} = 0</msg>
<msg timestamp="20170918 10:36:38.806" level="INFO">${output} = /tmp/fspcibld/17304/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170918 10:36:38.806" starttime="20170918 10:36:38.782" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170918 10:36:38.821" starttime="20170918 10:36:38.819" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170918 10:36:38.823" starttime="20170918 10:36:38.822" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:38.825" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170918 10:36:38.825" starttime="20170918 10:36:38.824" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.827" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170918 10:36:38.827" starttime="20170918 10:36:38.781" status="PASS"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20170918 10:36:38.829" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169</msg>
<status endtime="20170918 10:36:38.829" starttime="20170918 10:36:38.828" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:38.830" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170918 10:36:38.830" starttime="20170918 10:36:38.829" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170918 10:36:38.831" starttime="20170918 10:36:38.830" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170918 10:36:38.841" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170918 10:36:38.854" level="INFO">${rc} = 0</msg>
<msg timestamp="20170918 10:36:38.854" level="INFO">${os_con_pid} = 182</msg>
<status endtime="20170918 10:36:38.854" starttime="20170918 10:36:38.831" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170918 10:36:38.870" starttime="20170918 10:36:38.867" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.873" level="INFO">${os_con_pid} = 182</msg>
<status endtime="20170918 10:36:38.874" starttime="20170918 10:36:38.780" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170918 10:36:38.875" level="INFO">${cmd_buf} = kill -9 182</msg>
<status endtime="20170918 10:36:38.875" starttime="20170918 10:36:38.874" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170918 10:36:38.877" starttime="20170918 10:36:38.877" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.877" starttime="20170918 10:36:38.875" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20170918 10:36:38.886" level="INFO">Running command 'kill -9 182 2&gt;&amp;1'.</msg>
<status endtime="20170918 10:36:38.889" starttime="20170918 10:36:38.879" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.890" level="INFO">${rc} = 0</msg>
<msg timestamp="20170918 10:36:38.890" level="INFO">${output} = </msg>
<status endtime="20170918 10:36:38.890" starttime="20170918 10:36:38.878" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170918 10:36:38.895" starttime="20170918 10:36:38.895" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.895" starttime="20170918 10:36:38.893" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170918 10:36:38.900" level="INFO">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/17304/obmc-robot/logs/9.41.166.169_os_console"&gt;/tmp/fspcibld/17304/obmc-robot/logs/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status endtime="20170918 10:36:38.900" starttime="20170918 10:36:38.896" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.900" starttime="20170918 10:36:38.896" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.900" starttime="20170918 10:36:38.895" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170918 10:36:38.901" level="INFO">${output} = </msg>
<status endtime="20170918 10:36:38.901" starttime="20170918 10:36:38.901" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170918 10:36:38.902" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170918 10:36:38.902" starttime="20170918 10:36:38.901" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170918 10:36:38.939" starttime="20170918 10:36:38.903" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.941" level="INFO">${rc} = 0</msg>
<msg timestamp="20170918 10:36:38.941" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status endtime="20170918 10:36:38.941" starttime="20170918 10:36:38.903" status="PASS"></status>
</kw>
<msg timestamp="20170918 10:36:38.942" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status endtime="20170918 10:36:38.942" starttime="20170918 10:36:38.778" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170918 10:36:38.944" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome to Hostboot hostboot-c68be97/hbicore.bin ==--

  3.90933|secure|Booting in non-secure mode.
  3.90934|secure|SecureROM valid - enabling functionality
  7.73927|ISTEP  6. 5 - host_init_fsi
  7.85333|ISTEP  6. 6 - host_set_ipl_parms
  7.88464|ISTEP  6. 7 - host_discover_targets
 13.25144|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.25145|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 13.27300|ISTEP  6. 8 - host_update_master_tpm
 85.83236|SECURE|Security Access Bit&gt; 0x0000000000000000
 85.83236|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 85.83276|ISTEP  6. 9 - host_gard
 85.94362|================================================
 85.94697|Error reported by istep (0x1700) PLID 0x9000000E
 85.95034|  host_gard: no masterCore found
 85.95035|  ModuleId   0x0c ISTEP::MOD_HOST_GARD
 85.95035|  ReasonCode 0x1710 ISTEP::RC_MASTER_CORE_NULL
 85.95373|  UserData1  0 : 0x0000000000000000
 85.95373|  UserData2  0 : 0x0000000000000000
 85.95373|------------------------------------------------
 85.95374|  Callout type             : Procedure Callout
 85.95374|  Procedure                : EPUB_PRC_HB_CODE
 85.95375|  Priority                 : SRCI_PRIORITY_HIGH
 85.95375|------------------------------------------------
 85.95376|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 85.95376|================================================
 85.97385|System shutting down with error status 0x9000000E
 85.98086|================================================
 85.98087|Error reported by istep (0x1700) PLID 0x9000000E
 85.98424|  IStep failed, see other log(s) with the same PLID for reason.
 85.98424|  ModuleId   0x01 MOD_REPORTING_ERROR
 85.98425|  ReasonCode 0x1703 RC_FAILURE
 85.98425|  UserData1  eid of first error : 0x9000000e00001710
 85.98426|  UserData2  Reason code of first error : 0x0000000100000609
 85.98426|------------------------------------------------
 85.98427|  host_gard
 85.98427|------------------------------------------------
 85.98427|  Callout type             : Procedure Callout
 85.98428|  Procedure                : EPUB_PRC_HB_CODE
 85.98428|  Priority                 : SRCI_PRIORITY_LOW
 85.98429|------------------------------------------------
 85.98429|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 85.98430|================================================


--== Welcome to Hostboot hostboot-c68be97/hbicore.bin ==--

  3.91060|secure|Booting in non-secure mode.
  3.91061|secure|SecureROM valid - enabling functionality
  5.60573|ISTEP  6. 5 - host_init_fsi
  5.71306|ISTEP  6. 6 - host_set_ipl_parms
  5.72228|ISTEP  6. 7 - host_discover_targets
  6.12956|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  6.12957|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  6.14906|ISTEP  6. 8 - host_update_master_tpm
 80.20186|SECURE|Security Access Bit&gt; 0x0000000000000000
 80.20187|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 80.20196|ISTEP  6. 9 - host_gard
 80.26276|================================================
 80.26608|Error reported by istep (0x1700) PLID 0x90000014
 80.26943|  host_gard: no masterCore found
 80.26944|  ModuleId   0x0c ISTEP::MOD_HOST_GARD
 80.26944|  ReasonCode 0x1710 ISTEP::RC_MASTER_CORE_NULL
 80.27279|  UserData1  0 : 0x0000000000000000
 80.27280|  UserData2  0 : 0x0000000000000000
 80.27280|------------------------------------------------
 80.27281|  Callout type             : Procedure Callout
 80.27281|  Procedure                : EPUB_PRC_HB_CODE
 80.27282|  Priority                 : SRCI_PRIORITY_HIGH
 80.27282|------------------------------------------------
 80.27283|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 80.27283|================================================
 80.28626|System shutting down with error status 0x90000014
 80.29322|================================================
 80.29322|Error reported by istep (0x1700) PLID 0x90000014
 80.29659|  IStep failed, see other log(s) with the same PLID for reason.
 80.29660|  ModuleId   0x01 MOD_REPORTING_ERROR
 80.29660|  ReasonCode 0x1703 RC_FAILURE
 80.29661|  UserData1  eid of first error : 0x9000001400001710
 80.29661|  UserData2  Reason code of first error : 0x0000000100000609
 80.29662|------------------------------------------------
 80.29662|  host_gard
 80.29662|------------------------------------------------
 80.29663|  Callout type             : Procedure Callout
 80.29663|  Procedure                : EPUB_PRC_HB_CODE
 80.29664|  Priority                 : SRCI_PRIORITY_LOW
 80.29664|------------------------------------------------
 80.29665|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 80.29665|================================================


--== Welcome to Hostboot hostboot-c68be97/hbicore.bin ==--

  3.90975|secure|Booting in non-secure mode.
  3.90976|secure|SecureROM valid - enabling functionality
  5.64853|ISTEP  6. 5 - host_init_fsi
  5.77081|ISTEP  6. 6 - host_set_ipl_parms
  5.78121|ISTEP  6. 7 - host_discover_targets
  6.21456|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  6.21457|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  6.23428|ISTEP  6. 8 - host_update_master_tpm
 79.94257|SECURE|Security Access Bit&gt; 0x0000000000000000
 79.94257|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 79.94268|ISTEP  6. 9 - host_gard
 80.00159|================================================
 80.00494|Error reported by istep (0x1700) PLID 0x9000001A
 80.00832|  host_gard: no masterCore found
 80.00832|  ModuleId   0x0c ISTEP::MOD_HOST_GARD
 80.00833|  ReasonCode 0x1710 ISTEP::RC_MASTER_CORE_NULL
 80.01170|  UserData1  0 : 0x0000000000000000
 80.01170|  UserData2  0 : 0x0000000000000000
 80.01171|------------------------------------------------
 80.01171|  Callout type             : Procedure Callout
 80.01172|  Procedure                : EPUB_PRC_HB_CODE
 80.01172|  Priority                 : SRCI_PRIORITY_HIGH
 80.01173|------------------------------------------------
 80.01173|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 80.01174|================================================
 80.02466|System shutting down with error status 0x9000001A
 80.03180|================================================
 80.03181|Error reported by istep (0x1700) PLID 0x9000001A
 80.03517|  IStep failed, see other log(s) with the same PLID for reason.
 80.03518|  ModuleId   0x01 MOD_REPORTING_ERROR
 80.03518|  ReasonCode 0x1703 RC_FAILURE
 80.03519|  UserData1  eid of first error : 0x9000001a00001710
 80.03519|  UserData2  Reason code of first error : 0x0000000100000609
 80.03520|------------------------------------------------
 80.03520|  host_gard
 80.03520|------------------------------------------------
 80.03521|  Callout type             : Procedure Callout
 80.03521|  Procedure                : EPUB_PRC_HB_CODE
 80.03522|  Priority                 : SRCI_PRIORITY_LOW
 80.03522|------------------------------------------------
 80.03523|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 80.03523|================================================
</msg>
<status endtime="20170918 10:36:38.944" starttime="20170918 10:36:38.944" status="PASS"></status>
</kw>
<status endtime="20170918 10:36:38.945" starttime="20170918 10:35:44.520" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170918 10:36:38.945" starttime="20170918 10:25:28.265" status="FAIL" critical="yes">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170918 10:36:38.946" starttime="20170918 10:25:28.231" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170918 10:36:38.949" starttime="20170918 10:25:21.070" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" name="Tests" fail="1" id="s1">Tests</stat>
<stat pass="1" name="Security" fail="0" id="s1-s1">Tests.Security</stat>
<stat pass="1" name="Test Ssl" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat pass="0" name="Test Basic Poweron" fail="1" id="s1-s2">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
