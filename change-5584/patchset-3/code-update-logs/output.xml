<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170809 22:39:02.022" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_KNOWN_GOOD_VERSION}' != '${EMPTY}'</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Validate BMC Version</arg>
<arg>${LAST_KNOWN_GOOD_VERSION}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170809 22:39:02.932" level="INFO">${status} = None</msg>
<status status="PASS" endtime="20170809 22:39:02.932" starttime="20170809 22:39:02.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>Pass Execution</arg>
<arg>The BMC already has the requested build loaded so no further action will be taken.</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:02.933" starttime="20170809 22:39:02.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 22:39:02.938" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 22:39:02.938" starttime="20170809 22:39:02.938"></status>
</kw>
<msg timestamp="20170809 22:39:02.939" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 22:39:02.939" starttime="20170809 22:39:02.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:02.940" starttime="20170809 22:39:02.940"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:02.940" starttime="20170809 22:39:02.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:02.941" starttime="20170809 22:39:02.940"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 22:39:02.942" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 22:39:02.942" starttime="20170809 22:39:02.942"></status>
</kw>
<msg timestamp="20170809 22:39:02.942" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 22:39:02.942" starttime="20170809 22:39:02.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:02.945" starttime="20170809 22:39:02.944"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:02.945" starttime="20170809 22:39:02.944"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:02.945" starttime="20170809 22:39:02.943"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 22:39:02.946" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 22:39:04.677" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 22:39:04.678" starttime="20170809 22:39:02.945"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:04.678" starttime="20170809 22:39:02.936"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:39:04.679" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170809 22:39:04.747" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 22:39:04.747" level="INFO">${output} = 1502316746</msg>
<msg timestamp="20170809 22:39:04.747" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:39:04.747" starttime="20170809 22:39:04.678"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 22:39:04.748" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 22:39:04.748" starttime="20170809 22:39:04.747"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170809 22:39:04.748" level="INFO">${btime} = 1502316746</msg>
<status status="PASS" endtime="20170809 22:39:04.748" starttime="20170809 22:39:04.748"></status>
</kw>
<msg timestamp="20170809 22:39:04.749" level="INFO">${cur_btime} = 1502316746</msg>
<status status="PASS" endtime="20170809 22:39:04.749" starttime="20170809 22:39:02.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170809 22:39:04.750" level="INFO">${BOOT_TIME} = 1502316746</msg>
<status status="PASS" endtime="20170809 22:39:04.750" starttime="20170809 22:39:04.750"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:04.750" starttime="20170809 22:39:04.749"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:04.751" starttime="20170809 22:39:02.936"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:04.751" starttime="20170809 22:39:04.751"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:04.752" starttime="20170809 22:39:04.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:04.753" starttime="20170809 22:39:04.753"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:04.753" starttime="20170809 22:39:02.935"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 22:39:04.756" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 22:39:04.756" starttime="20170809 22:39:04.756"></status>
</kw>
<msg timestamp="20170809 22:39:04.756" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 22:39:04.756" starttime="20170809 22:39:04.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:04.758" starttime="20170809 22:39:04.757"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:04.758" starttime="20170809 22:39:04.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:04.758" starttime="20170809 22:39:04.758"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 22:39:04.759" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 22:39:04.759" starttime="20170809 22:39:04.759"></status>
</kw>
<msg timestamp="20170809 22:39:04.760" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 22:39:04.760" starttime="20170809 22:39:04.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:04.763" starttime="20170809 22:39:04.762"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:04.763" starttime="20170809 22:39:04.761"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:04.763" starttime="20170809 22:39:04.760"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 22:39:04.763" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 22:39:06.445" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 22:39:06.445" starttime="20170809 22:39:04.763"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:06.445" starttime="20170809 22:39:04.754"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170809 22:39:06.446" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170809 22:39:06.524" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 22:39:06.524" level="INFO">${output} = </msg>
<msg timestamp="20170809 22:39:06.524" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/cc6e1404d87444e8a089dfdb00a18f7d.</msg>
<msg timestamp="20170809 22:39:06.524" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170809 22:39:06.524" starttime="20170809 22:39:06.446"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:06.525" starttime="20170809 22:39:06.524"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:06.525" starttime="20170809 22:39:04.754"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170809 22:39:06.528" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170809 22:39:06.528" starttime="20170809 22:39:06.527"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:39:06.529" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170809 22:39:06.529" starttime="20170809 22:39:06.529"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:39:06.532" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:39:06.533" starttime="20170809 22:39:06.532"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:39:06.534" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:39:06.534" starttime="20170809 22:39:06.534"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:39:06.535" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:39:06.535" starttime="20170809 22:39:06.535"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:39:06.536" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:39:06.536" starttime="20170809 22:39:06.536"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:39:06.770" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:39:06.770" starttime="20170809 22:39:06.538"></status>
</kw>
<msg timestamp="20170809 22:39:06.771" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:39:06.771" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:06.771" starttime="20170809 22:39:06.537"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:39:06.771" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:06.772" starttime="20170809 22:39:06.771"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:39:06.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:06.772" starttime="20170809 22:39:06.772"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:06.773" starttime="20170809 22:39:06.531"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:06.773" starttime="20170809 22:39:06.531"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:06.773" starttime="20170809 22:39:06.530"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:39:06.774" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170809 22:39:06.774" starttime="20170809 22:39:06.773"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:39:06.774" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:39:06.775" starttime="20170809 22:39:06.774"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:06.775" starttime="20170809 22:39:06.775"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 22:39:06.777" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type...</msg>
<status status="PASS" endtime="20170809 22:39:06.777" starttime="20170809 22:39:06.776"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 22:39:06.778" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170809 22:39:06.778" starttime="20170809 22:39:06.778"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:06.778" starttime="20170809 22:39:06.777"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:06.778" starttime="20170809 22:39:06.775"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:39:07.034" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170809 22:39:07.034" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:07.034" starttime="20170809 22:39:06.779"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 22:39:07.035" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 22:39:07.035" starttime="20170809 22:39:07.035"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 22:39:07.037" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 22:39:07.037" starttime="20170809 22:39:07.036"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:07.037" starttime="20170809 22:39:07.036"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:07.037" starttime="20170809 22:39:07.034"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:39:07.038" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:39:07.038" starttime="20170809 22:39:07.037"></status>
</kw>
<msg timestamp="20170809 22:39:07.038" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:07.038" starttime="20170809 22:39:06.529"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:39:07.039" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:07.039" starttime="20170809 22:39:07.038"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170809 22:39:07.039" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:39:07.039" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:39:07.039" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170809 22:39:07.039" starttime="20170809 22:39:07.039"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:07.039" starttime="20170809 22:39:06.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:07.040" starttime="20170809 22:39:07.040"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:39:07.046" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:39:07.046" starttime="20170809 22:39:07.045"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:39:07.047" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:39:07.047" starttime="20170809 22:39:07.047"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:39:07.048" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:39:07.048" starttime="20170809 22:39:07.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:39:07.049" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:39:07.049" starttime="20170809 22:39:07.048"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:39:07.543" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:39:07.543" starttime="20170809 22:39:07.050"></status>
</kw>
<msg timestamp="20170809 22:39:07.543" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:39:07.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:07.543" starttime="20170809 22:39:07.049"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:39:07.544" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:07.544" starttime="20170809 22:39:07.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:39:07.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:07.545" starttime="20170809 22:39:07.544"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:07.545" starttime="20170809 22:39:07.044"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:07.545" starttime="20170809 22:39:07.044"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:07.545" starttime="20170809 22:39:07.043"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:39:07.546" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170809 22:39:07.546" starttime="20170809 22:39:07.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:07.547" starttime="20170809 22:39:07.546"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:39:07.653" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 22:39:07.653" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:07.653" starttime="20170809 22:39:07.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:07.654" starttime="20170809 22:39:07.654"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:39:07.655" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:39:07.655" starttime="20170809 22:39:07.654"></status>
</kw>
<msg timestamp="20170809 22:39:07.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:07.655" starttime="20170809 22:39:07.043"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:39:07.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:07.656" starttime="20170809 22:39:07.655"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 22:39:07.656" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:39:07.656" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:39:07.656" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170809 22:39:07.656" starttime="20170809 22:39:07.656"></status>
</kw>
<msg timestamp="20170809 22:39:07.657" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170809 22:39:07.657" starttime="20170809 22:39:07.042"></status>
</kw>
<msg timestamp="20170809 22:39:07.657" level="INFO">${power_state} = Off</msg>
<status status="PASS" endtime="20170809 22:39:07.657" starttime="20170809 22:39:07.042"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:07.658" starttime="20170809 22:39:07.657"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:07.658" starttime="20170809 22:39:07.041"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:39:07.662" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:39:07.662" starttime="20170809 22:39:07.661"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:39:07.663" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:39:07.663" starttime="20170809 22:39:07.662"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:39:07.664" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:39:07.664" starttime="20170809 22:39:07.663"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:39:07.664" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:39:07.664" starttime="20170809 22:39:07.664"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:39:08.090" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:39:08.091" starttime="20170809 22:39:07.665"></status>
</kw>
<msg timestamp="20170809 22:39:08.091" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:39:08.091" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:08.091" starttime="20170809 22:39:07.665"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:39:08.092" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:08.092" starttime="20170809 22:39:08.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:39:08.092" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:08.092" starttime="20170809 22:39:08.092"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.093" starttime="20170809 22:39:07.661"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.093" starttime="20170809 22:39:07.660"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.093" starttime="20170809 22:39:07.660"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:39:08.093" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170809 22:39:08.094" starttime="20170809 22:39:08.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:08.094" starttime="20170809 22:39:08.094"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:39:08.298" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 22:39:08.299" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:08.299" starttime="20170809 22:39:08.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:08.300" starttime="20170809 22:39:08.299"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:39:08.300" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:39:08.300" starttime="20170809 22:39:08.300"></status>
</kw>
<msg timestamp="20170809 22:39:08.300" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:08.300" starttime="20170809 22:39:07.659"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:39:08.301" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:08.301" starttime="20170809 22:39:08.301"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 22:39:08.302" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:39:08.302" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:39:08.302" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170809 22:39:08.302" starttime="20170809 22:39:08.301"></status>
</kw>
<msg timestamp="20170809 22:39:08.302" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170809 22:39:08.302" starttime="20170809 22:39:07.658"></status>
</kw>
<msg timestamp="20170809 22:39:08.302" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170809 22:39:08.302" starttime="20170809 22:39:07.658"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:08.303" starttime="20170809 22:39:08.303"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.303" starttime="20170809 22:39:07.041"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.303" starttime="20170809 22:39:07.040"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.303" starttime="20170809 22:39:06.526"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.304" starttime="20170809 22:39:06.526"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.304" starttime="20170809 22:39:06.525"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170809 22:39:08.305" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170809 22:39:08.305" starttime="20170809 22:39:08.304"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:39:08.306" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170809 22:39:08.306" starttime="20170809 22:39:08.306"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:39:08.309" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:39:08.310" starttime="20170809 22:39:08.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:39:08.310" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:39:08.310" starttime="20170809 22:39:08.310"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:39:08.311" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:39:08.311" starttime="20170809 22:39:08.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:39:08.312" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:39:08.312" starttime="20170809 22:39:08.311"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:39:08.522" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:39:08.522" starttime="20170809 22:39:08.312"></status>
</kw>
<msg timestamp="20170809 22:39:08.523" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:39:08.523" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:08.523" starttime="20170809 22:39:08.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:39:08.523" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:08.524" starttime="20170809 22:39:08.523"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:39:08.524" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:08.524" starttime="20170809 22:39:08.524"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.525" starttime="20170809 22:39:08.308"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.525" starttime="20170809 22:39:08.308"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.525" starttime="20170809 22:39:08.307"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:39:08.526" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170809 22:39:08.526" starttime="20170809 22:39:08.525"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:39:08.527" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:39:08.527" starttime="20170809 22:39:08.526"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:08.527" starttime="20170809 22:39:08.527"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 22:39:08.529" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170809 22:39:08.529" starttime="20170809 22:39:08.528"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 22:39:08.530" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170809 22:39:08.530" starttime="20170809 22:39:08.530"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.530" starttime="20170809 22:39:08.529"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.530" starttime="20170809 22:39:08.528"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:39:08.735" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170809 22:39:08.736" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:08.736" starttime="20170809 22:39:08.531"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 22:39:08.737" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 22:39:08.737" starttime="20170809 22:39:08.737"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 22:39:08.738" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 22:39:08.738" starttime="20170809 22:39:08.738"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.738" starttime="20170809 22:39:08.737"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.739" starttime="20170809 22:39:08.736"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:39:08.740" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:39:08.740" starttime="20170809 22:39:08.739"></status>
</kw>
<msg timestamp="20170809 22:39:08.740" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:08.740" starttime="20170809 22:39:08.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:39:08.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:08.741" starttime="20170809 22:39:08.741"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170809 22:39:08.742" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:39:08.742" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:39:08.742" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170809 22:39:08.742" starttime="20170809 22:39:08.742"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.742" starttime="20170809 22:39:08.305"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:39:08.749" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:39:08.750" starttime="20170809 22:39:08.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:39:08.750" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:39:08.750" starttime="20170809 22:39:08.750"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:39:08.751" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:39:08.752" starttime="20170809 22:39:08.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:39:08.752" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:39:08.752" starttime="20170809 22:39:08.752"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:39:08.966" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:39:08.966" starttime="20170809 22:39:08.753"></status>
</kw>
<msg timestamp="20170809 22:39:08.966" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:39:08.966" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:08.966" starttime="20170809 22:39:08.753"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:39:08.967" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:08.967" starttime="20170809 22:39:08.967"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:39:08.968" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:08.968" starttime="20170809 22:39:08.967"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.968" starttime="20170809 22:39:08.748"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.968" starttime="20170809 22:39:08.747"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:08.968" starttime="20170809 22:39:08.744"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:39:08.969" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170809 22:39:08.969" starttime="20170809 22:39:08.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:08.970" starttime="20170809 22:39:08.969"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:39:09.085" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170809 22:39:09.085" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:09.085" starttime="20170809 22:39:08.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:09.086" starttime="20170809 22:39:09.086"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:39:09.087" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:39:09.087" starttime="20170809 22:39:09.086"></status>
</kw>
<msg timestamp="20170809 22:39:09.087" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:09.087" starttime="20170809 22:39:08.743"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:39:09.088" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:09.088" starttime="20170809 22:39:09.087"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 22:39:09.088" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:39:09.088" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:39:09.089" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170809 22:39:09.089" starttime="20170809 22:39:09.088"></status>
</kw>
<msg timestamp="20170809 22:39:09.089" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170809 22:39:09.089" starttime="20170809 22:39:08.742"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:09.090" starttime="20170809 22:39:09.089"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:09.090" starttime="20170809 22:39:08.304"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:39:09.091" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170809 22:39:09.091" starttime="20170809 22:39:09.091"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:39:09.094" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:39:09.095" starttime="20170809 22:39:09.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:39:09.095" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:39:09.095" starttime="20170809 22:39:09.095"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:39:09.096" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:39:09.096" starttime="20170809 22:39:09.096"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:39:09.097" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:39:09.097" starttime="20170809 22:39:09.096"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:39:09.302" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:39:09.302" starttime="20170809 22:39:09.097"></status>
</kw>
<msg timestamp="20170809 22:39:09.302" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:39:09.302" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:09.302" starttime="20170809 22:39:09.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:39:09.303" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:09.303" starttime="20170809 22:39:09.303"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:39:09.304" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:09.304" starttime="20170809 22:39:09.304"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:09.304" starttime="20170809 22:39:09.093"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:09.304" starttime="20170809 22:39:09.092"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:09.304" starttime="20170809 22:39:09.092"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:39:09.305" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170809 22:39:09.305" starttime="20170809 22:39:09.305"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:39:09.306" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:39:09.306" starttime="20170809 22:39:09.305"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:09.306" starttime="20170809 22:39:09.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:09.307" starttime="20170809 22:39:09.307"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:39:09.702" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170809 22:39:09.702" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:09.702" starttime="20170809 22:39:09.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:09.703" starttime="20170809 22:39:09.702"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:39:09.703" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:39:09.703" starttime="20170809 22:39:09.703"></status>
</kw>
<msg timestamp="20170809 22:39:09.704" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:39:09.704" starttime="20170809 22:39:09.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:39:09.704" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:39:09.704" starttime="20170809 22:39:09.704"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170809 22:39:19.705" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170809 22:39:19.705" starttime="20170809 22:39:09.705"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:19.705" starttime="20170809 22:39:09.090"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170809 22:39:19.709" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170809 22:39:19.709" starttime="20170809 22:39:19.709"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 22:39:19.714" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 22:39:22.719" level="INFO">${RC} = 0</msg>
<msg timestamp="20170809 22:39:22.720" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.71 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.648 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170809 22:39:22.720" starttime="20170809 22:39:19.709"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170809 22:39:22.723" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.71 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.648 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.594 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.651 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.594/0.902/1.716/0.470 ms</msg>
<status status="PASS" endtime="20170809 22:39:22.723" starttime="20170809 22:39:22.722"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:22.724" starttime="20170809 22:39:22.723"></status>
</kw>
<status status="PASS" endtime="20170809 22:39:22.724" starttime="20170809 22:39:19.708"></status>
</kw>
<msg timestamp="20170809 22:39:22.724" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170809 22:39:22.724" starttime="20170809 22:39:19.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170809 22:39:22.725" starttime="20170809 22:39:22.724"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:39:22.728" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:39:22.729" starttime="20170809 22:39:22.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:39:22.729" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:39:22.729" starttime="20170809 22:39:22.729"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:39:22.730" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:39:22.730" starttime="20170809 22:39:22.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:39:22.731" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:39:22.731" starttime="20170809 22:39:22.730"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:39:24.216" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="FAIL" endtime="20170809 22:39:24.216" starttime="20170809 22:39:22.731"></status>
</kw>
<msg timestamp="20170809 22:39:24.216" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170809 22:39:24.216" level="INFO">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="PASS" endtime="20170809 22:39:24.216" starttime="20170809 22:39:22.731"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:39:24.217" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 22:39:24.217" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170809 22:39:24.217" starttime="20170809 22:39:24.216"></status>
</kw>
<status status="FAIL" endtime="20170809 22:39:24.217" starttime="20170809 22:39:22.727"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:39:44.220" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:39:44.221" starttime="20170809 22:39:44.220"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:39:44.221" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:39:44.221" starttime="20170809 22:39:44.221"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:39:44.222" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:39:44.222" starttime="20170809 22:39:44.222"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:39:44.223" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:39:44.223" starttime="20170809 22:39:44.222"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:40:04.247" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff804bc290&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170809 22:40:24.470" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff804bc210&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170809 22:40:59.524" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170809 22:40:59.525" starttime="20170809 22:39:44.224"></status>
</kw>
<msg timestamp="20170809 22:40:59.526" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170809 22:40:59.526" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170809 22:40:59.526" starttime="20170809 22:39:44.223"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:40:59.528" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 22:40:59.528" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170809 22:40:59.528" starttime="20170809 22:40:59.527"></status>
</kw>
<status status="FAIL" endtime="20170809 22:40:59.528" starttime="20170809 22:39:44.218"></status>
</kw>
<msg timestamp="20170809 22:40:59.528" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170809 22:40:59.528" starttime="20170809 22:39:22.726"></status>
</kw>
<status status="FAIL" endtime="20170809 22:40:59.528" starttime="20170809 22:39:22.725"></status>
</kw>
<msg timestamp="20170809 22:40:59.528" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170809 22:40:59.529" starttime="20170809 22:39:22.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170809 22:40:59.530" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170809 22:40:59.530" starttime="20170809 22:40:59.530"></status>
</kw>
<status status="FAIL" endtime="20170809 22:40:59.530" starttime="20170809 22:40:59.529"></status>
</kw>
<status status="FAIL" endtime="20170809 22:40:59.531" starttime="20170809 22:39:19.707"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170809 22:41:09.534" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170809 22:41:09.534" starttime="20170809 22:41:09.533"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 22:41:09.539" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 22:41:12.545" level="INFO">${RC} = 0</msg>
<msg timestamp="20170809 22:41:12.545" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.943 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.618 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170809 22:41:12.545" starttime="20170809 22:41:09.534"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170809 22:41:12.549" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.943 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.618 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=1.56 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.749 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.618/0.969/1.568/0.365 ms</msg>
<status status="PASS" endtime="20170809 22:41:12.549" starttime="20170809 22:41:12.548"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:12.550" starttime="20170809 22:41:12.550"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:12.551" starttime="20170809 22:41:09.533"></status>
</kw>
<msg timestamp="20170809 22:41:12.551" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170809 22:41:12.551" starttime="20170809 22:41:09.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:12.552" starttime="20170809 22:41:12.551"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:41:12.555" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:41:12.556" starttime="20170809 22:41:12.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:41:12.557" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:41:12.557" starttime="20170809 22:41:12.557"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:41:12.558" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:41:12.558" starttime="20170809 22:41:12.557"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:41:12.558" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:41:12.558" starttime="20170809 22:41:12.558"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:41:32.589" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170809 22:41:32.589" starttime="20170809 22:41:12.559"></status>
</kw>
<msg timestamp="20170809 22:41:32.590" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170809 22:41:32.590" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170809 22:41:32.590" starttime="20170809 22:41:12.559"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:41:32.591" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 22:41:32.591" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170809 22:41:32.591" starttime="20170809 22:41:32.590"></status>
</kw>
<status status="FAIL" endtime="20170809 22:41:32.591" starttime="20170809 22:41:12.554"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:41:52.595" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:41:52.595" starttime="20170809 22:41:52.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:41:52.596" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:41:52.596" starttime="20170809 22:41:52.596"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:41:52.597" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:41:52.597" starttime="20170809 22:41:52.596"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:41:52.598" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:41:52.598" starttime="20170809 22:41:52.597"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:41:52.798" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:41:52.799" starttime="20170809 22:41:52.598"></status>
</kw>
<msg timestamp="20170809 22:41:52.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:41:52.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:41:52.800" starttime="20170809 22:41:52.598"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:41:52.800" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:41:52.800" starttime="20170809 22:41:52.800"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:41:52.803" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:41:52.803" starttime="20170809 22:41:52.801"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:52.803" starttime="20170809 22:41:52.593"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:52.803" starttime="20170809 22:41:12.553"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:52.803" starttime="20170809 22:41:12.552"></status>
</kw>
<msg timestamp="20170809 22:41:52.803" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170809 22:41:52.803" starttime="20170809 22:41:12.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:52.804" starttime="20170809 22:41:52.804"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 22:41:52.806" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 22:41:52.806" starttime="20170809 22:41:52.805"></status>
</kw>
<msg timestamp="20170809 22:41:52.806" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 22:41:52.806" starttime="20170809 22:41:52.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:52.807" starttime="20170809 22:41:52.807"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:52.808" starttime="20170809 22:41:52.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:52.808" starttime="20170809 22:41:52.808"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 22:41:52.809" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 22:41:52.809" starttime="20170809 22:41:52.809"></status>
</kw>
<msg timestamp="20170809 22:41:52.809" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 22:41:52.810" starttime="20170809 22:41:52.809"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:52.814" starttime="20170809 22:41:52.811"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:52.814" starttime="20170809 22:41:52.811"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:52.814" starttime="20170809 22:41:52.810"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 22:41:52.815" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 22:41:54.746" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 22:41:54.747" starttime="20170809 22:41:52.815"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:54.747" starttime="20170809 22:41:52.804"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:41:54.748" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170809 22:41:54.816" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 22:41:54.816" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170809 22:41:54.816" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:41:54.816" starttime="20170809 22:41:54.747"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 22:41:54.817" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 22:41:54.817" starttime="20170809 22:41:54.817"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:54.817" starttime="20170809 22:41:09.531"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:54.817" starttime="20170809 22:39:19.707"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:54.818" starttime="20170809 22:39:19.706"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 22:41:54.821" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 22:41:54.821" starttime="20170809 22:41:54.821"></status>
</kw>
<msg timestamp="20170809 22:41:54.821" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 22:41:54.821" starttime="20170809 22:41:54.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:54.823" starttime="20170809 22:41:54.822"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:54.823" starttime="20170809 22:41:54.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:54.823" starttime="20170809 22:41:54.823"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 22:41:54.824" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 22:41:54.825" starttime="20170809 22:41:54.824"></status>
</kw>
<msg timestamp="20170809 22:41:54.825" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 22:41:54.825" starttime="20170809 22:41:54.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:54.826" starttime="20170809 22:41:54.826"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:54.827" starttime="20170809 22:41:54.826"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:54.827" starttime="20170809 22:41:54.825"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 22:41:54.827" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 22:41:56.842" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 22:41:56.842" starttime="20170809 22:41:54.827"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:56.843" starttime="20170809 22:41:54.819"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:41:56.843" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170809 22:41:56.932" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 22:41:56.932" level="INFO">${output} = 1502318395</msg>
<msg timestamp="20170809 22:41:56.932" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:41:56.932" starttime="20170809 22:41:56.843"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 22:41:56.933" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 22:41:56.933" starttime="20170809 22:41:56.932"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170809 22:41:56.934" level="INFO">${btime} = 1502318395</msg>
<status status="PASS" endtime="20170809 22:41:56.934" starttime="20170809 22:41:56.933"></status>
</kw>
<msg timestamp="20170809 22:41:56.934" level="INFO">${cur_btime} = 1502318395</msg>
<status status="PASS" endtime="20170809 22:41:56.934" starttime="20170809 22:41:54.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170809 22:41:56.936" level="INFO">${BOOT_TIME} = 1502318395</msg>
<status status="PASS" endtime="20170809 22:41:56.936" starttime="20170809 22:41:56.936"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<msg timestamp="20170809 22:41:56.937" level="INFO">${BOOT_COUNT} = 1</msg>
<status status="PASS" endtime="20170809 22:41:56.937" starttime="20170809 22:41:56.937"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:56.937" starttime="20170809 22:41:56.935"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:56.937" starttime="20170809 22:41:56.934"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:56.938" starttime="20170809 22:41:54.818"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:56.938" starttime="20170809 22:41:56.938"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:56.939" starttime="20170809 22:41:56.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:56.939" starttime="20170809 22:41:56.939"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:56.940" starttime="20170809 22:41:54.818"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:41:56.944" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:41:56.944" starttime="20170809 22:41:56.943"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:41:56.945" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:41:56.945" starttime="20170809 22:41:56.945"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:41:56.946" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:41:56.946" starttime="20170809 22:41:56.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:41:56.946" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:41:56.946" starttime="20170809 22:41:56.946"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:41:57.395" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:41:57.395" starttime="20170809 22:41:56.947"></status>
</kw>
<msg timestamp="20170809 22:41:57.395" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:41:57.395" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:41:57.395" starttime="20170809 22:41:56.947"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:41:57.396" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:41:57.396" starttime="20170809 22:41:57.396"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:41:57.397" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:41:57.397" starttime="20170809 22:41:57.397"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:57.398" starttime="20170809 22:41:56.943"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:57.398" starttime="20170809 22:41:56.942"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:57.398" starttime="20170809 22:41:56.941"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:41:57.398" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170809 22:41:57.398" starttime="20170809 22:41:57.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:57.399" starttime="20170809 22:41:57.399"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:41:57.923" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170809 22:41:57.923" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 22:41:57.923" starttime="20170809 22:41:57.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:57.924" starttime="20170809 22:41:57.924"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:41:57.925" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:41:57.925" starttime="20170809 22:41:57.924"></status>
</kw>
<msg timestamp="20170809 22:41:57.925" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 22:41:57.925" starttime="20170809 22:41:56.941"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:41:57.926" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 22:41:57.926" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170809 22:41:57.926" starttime="20170809 22:41:57.925"></status>
</kw>
<status status="FAIL" endtime="20170809 22:41:57.926" starttime="20170809 22:41:56.940"></status>
</kw>
<msg timestamp="20170809 22:41:57.926" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 22:41:57.926" starttime="20170809 22:41:56.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170809 22:41:57.928" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170809 22:41:57.928" starttime="20170809 22:41:57.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:41:57.935" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:41:57.935" starttime="20170809 22:41:57.934"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:41:57.936" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:41:57.936" starttime="20170809 22:41:57.936"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:41:57.937" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:41:57.937" starttime="20170809 22:41:57.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:41:57.939" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:41:57.939" starttime="20170809 22:41:57.938"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:41:58.117" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:41:58.117" starttime="20170809 22:41:57.940"></status>
</kw>
<msg timestamp="20170809 22:41:58.117" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:41:58.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:41:58.117" starttime="20170809 22:41:57.939"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:41:58.118" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:41:58.118" starttime="20170809 22:41:58.118"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:41:58.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:41:58.119" starttime="20170809 22:41:58.118"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.119" starttime="20170809 22:41:57.934"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.119" starttime="20170809 22:41:57.933"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.119" starttime="20170809 22:41:57.932"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:41:58.120" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170809 22:41:58.120" starttime="20170809 22:41:58.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:58.121" starttime="20170809 22:41:58.120"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:41:58.199" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170809 22:41:58.199" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:41:58.199" starttime="20170809 22:41:58.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:58.200" starttime="20170809 22:41:58.200"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:41:58.200" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:41:58.200" starttime="20170809 22:41:58.200"></status>
</kw>
<msg timestamp="20170809 22:41:58.201" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:41:58.201" starttime="20170809 22:41:57.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:41:58.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:41:58.201" starttime="20170809 22:41:58.201"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 22:41:58.202" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:41:58.202" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:41:58.202" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170809 22:41:58.202" starttime="20170809 22:41:58.202"></status>
</kw>
<msg timestamp="20170809 22:41:58.202" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170809 22:41:58.203" starttime="20170809 22:41:57.930"></status>
</kw>
<msg timestamp="20170809 22:41:58.203" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170809 22:41:58.203" starttime="20170809 22:41:57.930"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:58.203" starttime="20170809 22:41:58.203"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.204" starttime="20170809 22:41:57.929"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.204" starttime="20170809 22:41:57.929"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.204" starttime="20170809 22:41:57.928"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.204" starttime="20170809 22:41:57.927"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.204" starttime="20170809 22:41:57.927"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.204" starttime="20170809 22:39:02.935"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.204" starttime="20170809 22:39:02.935"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170809 22:41:58.210" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170809 22:41:58.210" starttime="20170809 22:41:58.210"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170809 22:41:58.211" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170809 22:41:58.211" starttime="20170809 22:41:58.211"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:41:58.212" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170809 22:41:58.212" starttime="20170809 22:41:58.212"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:41:58.215" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:41:58.216" starttime="20170809 22:41:58.215"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:41:58.217" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:41:58.217" starttime="20170809 22:41:58.216"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:41:58.218" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:41:58.218" starttime="20170809 22:41:58.217"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:41:58.218" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:41:58.219" starttime="20170809 22:41:58.218"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:41:58.402" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:41:58.402" starttime="20170809 22:41:58.219"></status>
</kw>
<msg timestamp="20170809 22:41:58.402" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:41:58.402" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:41:58.402" starttime="20170809 22:41:58.219"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:41:58.403" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:41:58.403" starttime="20170809 22:41:58.403"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:41:58.404" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:41:58.404" starttime="20170809 22:41:58.404"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.404" starttime="20170809 22:41:58.214"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.404" starttime="20170809 22:41:58.214"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.404" starttime="20170809 22:41:58.213"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:41:58.405" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170809 22:41:58.405" starttime="20170809 22:41:58.405"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:41:58.406" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:41:58.406" starttime="20170809 22:41:58.405"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:58.406" starttime="20170809 22:41:58.406"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 22:41:58.408" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170809 22:41:58.408" starttime="20170809 22:41:58.407"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 22:41:58.409" level="INFO">URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170809 22:41:58.409" starttime="20170809 22:41:58.409"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.409" starttime="20170809 22:41:58.408"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.409" starttime="20170809 22:41:58.406"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:41:58.788" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170809 22:41:58.788" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:41:58.788" starttime="20170809 22:41:58.409"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 22:41:58.789" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 22:41:58.789" starttime="20170809 22:41:58.789"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 22:41:58.790" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 22:41:58.791" starttime="20170809 22:41:58.790"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.791" starttime="20170809 22:41:58.790"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.791" starttime="20170809 22:41:58.788"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:41:58.791" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:41:58.791" starttime="20170809 22:41:58.791"></status>
</kw>
<msg timestamp="20170809 22:41:58.792" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:41:58.792" starttime="20170809 22:41:58.213"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:41:58.793" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:41:58.794" starttime="20170809 22:41:58.793"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170809 22:41:58.794" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:41:58.794" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:41:58.794" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170809 22:41:58.794" starttime="20170809 22:41:58.794"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.795" starttime="20170809 22:41:58.211"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:41:58.798" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:41:58.799" starttime="20170809 22:41:58.798"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:41:58.799" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:41:58.799" starttime="20170809 22:41:58.799"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:41:58.800" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:41:58.800" starttime="20170809 22:41:58.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:41:58.801" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:41:58.801" starttime="20170809 22:41:58.800"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:41:58.984" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:41:58.984" starttime="20170809 22:41:58.801"></status>
</kw>
<msg timestamp="20170809 22:41:58.984" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:41:58.984" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:41:58.984" starttime="20170809 22:41:58.801"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:41:58.985" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:41:58.985" starttime="20170809 22:41:58.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:41:58.986" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:41:58.986" starttime="20170809 22:41:58.985"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.986" starttime="20170809 22:41:58.797"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.986" starttime="20170809 22:41:58.797"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:58.986" starttime="20170809 22:41:58.796"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:41:58.987" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170809 22:41:58.987" starttime="20170809 22:41:58.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:58.987" starttime="20170809 22:41:58.987"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:41:59.092" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170809 22:41:59.093" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:41:59.093" starttime="20170809 22:41:58.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:59.093" starttime="20170809 22:41:59.093"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:41:59.094" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:41:59.094" starttime="20170809 22:41:59.094"></status>
</kw>
<msg timestamp="20170809 22:41:59.094" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:41:59.094" starttime="20170809 22:41:58.795"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:41:59.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:41:59.095" starttime="20170809 22:41:59.094"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 22:41:59.095" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:41:59.095" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:41:59.096" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20170809 22:41:59.096" starttime="20170809 22:41:59.095"></status>
</kw>
<msg timestamp="20170809 22:41:59.096" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170809 22:41:59.096" starttime="20170809 22:41:58.795"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:59.097" starttime="20170809 22:41:59.096"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:59.097" starttime="20170809 22:41:58.210"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:59.097" starttime="20170809 22:41:58.204"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<doc>Copy BMC tar image to BMC.</doc>
<arguments>
<arg>/home/fspcibld/witherspoon-20170809222447.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:59.113" starttime="20170809 22:41:59.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:59.781" starttime="20170809 22:41:59.114"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:59.781" starttime="20170809 22:41:59.114"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:59.781" starttime="20170809 22:41:59.104"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 22:41:59.783" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 22:41:59.784" starttime="20170809 22:41:59.783"></status>
</kw>
<msg timestamp="20170809 22:41:59.784" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 22:41:59.784" starttime="20170809 22:41:59.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:59.785" starttime="20170809 22:41:59.785"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:59.785" starttime="20170809 22:41:59.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:59.786" starttime="20170809 22:41:59.785"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 22:41:59.787" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 22:41:59.787" starttime="20170809 22:41:59.787"></status>
</kw>
<msg timestamp="20170809 22:41:59.787" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 22:41:59.787" starttime="20170809 22:41:59.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:41:59.789" starttime="20170809 22:41:59.789"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:59.790" starttime="20170809 22:41:59.789"></status>
</kw>
<status status="PASS" endtime="20170809 22:41:59.790" starttime="20170809 22:41:59.788"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 22:41:59.790" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 22:42:01.504" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 22:42:01.505" starttime="20170809 22:41:59.790"></status>
</kw>
<status status="PASS" endtime="20170809 22:42:01.505" starttime="20170809 22:41:59.782"></status>
</kw>
<kw name="Loop SCP Retry" library="code_update_utils">
<doc>Try transferring the file 4 times.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${index} = 0">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170809 22:42:01.507" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 22:42:01.507" starttime="20170809 22:42:01.507"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:42:01.508" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170809 22:42:01.555" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 22:42:01.555" level="INFO">${stdout} = </msg>
<msg timestamp="20170809 22:42:01.555" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:42:01.555" starttime="20170809 22:42:01.508"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 22:42:01.556" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 22:42:01.556" starttime="20170809 22:42:01.556"></status>
</kw>
<status status="PASS" endtime="20170809 22:42:01.556" starttime="20170809 22:42:01.507"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:42:17.958" starttime="20170809 22:42:01.556"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:42:17.963" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170809 22:42:18.030" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 22:42:18.030" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  9 22:42 /tmp/flashimg</msg>
<msg timestamp="20170809 22:42:18.030" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:42:18.030" starttime="20170809 22:42:17.962"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 22:42:18.031" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 22:42:18.031" starttime="20170809 22:42:18.030"></status>
</kw>
<msg timestamp="20170809 22:42:18.031" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  9 22:42 /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 22:42:18.031" starttime="20170809 22:42:17.960"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170809 22:42:18.032" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  9 22:42 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170809 22:42:18.032" starttime="20170809 22:42:18.032"></status>
</kw>
<msg timestamp="20170809 22:42:18.033" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 22:42:18.033" starttime="20170809 22:42:18.031"></status>
</kw>
<msg timestamp="20170809 22:42:18.033" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 22:42:18.033" starttime="20170809 22:42:01.506"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170809 22:42:18.034" starttime="20170809 22:42:18.033"></status>
</kw>
<status status="PASS" endtime="20170809 22:42:18.034" starttime="20170809 22:42:01.506"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170809 22:42:18.035" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 22:42:18.035" starttime="20170809 22:42:18.035"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:42:18.036" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170809 22:42:18.130" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 22:42:18.131" level="INFO">${stdout} = </msg>
<msg timestamp="20170809 22:42:18.131" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:42:18.131" starttime="20170809 22:42:18.036"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 22:42:18.131" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 22:42:18.131" starttime="20170809 22:42:18.131"></status>
</kw>
<status status="PASS" endtime="20170809 22:42:18.132" starttime="20170809 22:42:18.035"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:42:34.743" starttime="20170809 22:42:18.132"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:42:34.744" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170809 22:42:34.801" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 22:42:34.801" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  9 22:42 /tmp/flashimg</msg>
<msg timestamp="20170809 22:42:34.801" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:42:34.801" starttime="20170809 22:42:34.744"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 22:42:34.802" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 22:42:34.802" starttime="20170809 22:42:34.802"></status>
</kw>
<msg timestamp="20170809 22:42:34.802" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  9 22:42 /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 22:42:34.802" starttime="20170809 22:42:34.743"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170809 22:42:34.803" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  9 22:42 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170809 22:42:34.804" starttime="20170809 22:42:34.803"></status>
</kw>
<msg timestamp="20170809 22:42:34.804" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 22:42:34.804" starttime="20170809 22:42:34.803"></status>
</kw>
<msg timestamp="20170809 22:42:34.804" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 22:42:34.804" starttime="20170809 22:42:18.034"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170809 22:42:34.805" starttime="20170809 22:42:34.804"></status>
</kw>
<status status="PASS" endtime="20170809 22:42:34.805" starttime="20170809 22:42:18.034"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170809 22:42:34.806" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 22:42:34.806" starttime="20170809 22:42:34.806"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:42:34.807" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170809 22:42:34.933" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 22:42:34.933" level="INFO">${stdout} = </msg>
<msg timestamp="20170809 22:42:34.934" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:42:34.934" starttime="20170809 22:42:34.806"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 22:42:34.934" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 22:42:34.934" starttime="20170809 22:42:34.934"></status>
</kw>
<status status="PASS" endtime="20170809 22:42:34.934" starttime="20170809 22:42:34.806"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:42:51.832" starttime="20170809 22:42:34.935"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:42:51.834" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170809 22:42:51.901" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 22:42:51.901" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  9 22:42 /tmp/flashimg</msg>
<msg timestamp="20170809 22:42:51.901" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:42:51.901" starttime="20170809 22:42:51.834"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 22:42:51.902" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 22:42:51.902" starttime="20170809 22:42:51.902"></status>
</kw>
<msg timestamp="20170809 22:42:51.902" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  9 22:42 /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 22:42:51.902" starttime="20170809 22:42:51.833"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170809 22:42:51.903" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  9 22:42 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170809 22:42:51.903" starttime="20170809 22:42:51.903"></status>
</kw>
<msg timestamp="20170809 22:42:51.904" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 22:42:51.904" starttime="20170809 22:42:51.903"></status>
</kw>
<msg timestamp="20170809 22:42:51.904" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 22:42:51.904" starttime="20170809 22:42:34.805"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170809 22:42:51.905" starttime="20170809 22:42:51.904"></status>
</kw>
<status status="PASS" endtime="20170809 22:42:51.905" starttime="20170809 22:42:34.805"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170809 22:42:51.906" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 22:42:51.906" starttime="20170809 22:42:51.905"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:42:51.907" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170809 22:42:52.001" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 22:42:52.002" level="INFO">${stdout} = </msg>
<msg timestamp="20170809 22:42:52.002" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:42:52.002" starttime="20170809 22:42:51.906"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 22:42:52.002" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 22:42:52.002" starttime="20170809 22:42:52.002"></status>
</kw>
<status status="PASS" endtime="20170809 22:42:52.003" starttime="20170809 22:42:51.906"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:08.540" starttime="20170809 22:42:52.003"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:43:08.542" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170809 22:43:08.607" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 22:43:08.607" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  9 22:43 /tmp/flashimg</msg>
<msg timestamp="20170809 22:43:08.607" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:43:08.607" starttime="20170809 22:43:08.542"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 22:43:08.608" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 22:43:08.608" starttime="20170809 22:43:08.608"></status>
</kw>
<msg timestamp="20170809 22:43:08.608" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  9 22:43 /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 22:43:08.608" starttime="20170809 22:43:08.541"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170809 22:43:08.610" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  9 22:43 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170809 22:43:08.610" starttime="20170809 22:43:08.609"></status>
</kw>
<msg timestamp="20170809 22:43:08.610" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 22:43:08.610" starttime="20170809 22:43:08.609"></status>
</kw>
<msg timestamp="20170809 22:43:08.610" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 22:43:08.610" starttime="20170809 22:42:51.905"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:08.611" starttime="20170809 22:43:08.610"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:08.611" starttime="20170809 22:42:51.905"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:08.611" starttime="20170809 22:42:01.506"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:08.611" starttime="20170809 22:42:01.505"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:08.611" starttime="20170809 22:41:59.104"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:08.611" starttime="20170809 22:41:59.097"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Activate BMC Flash Image</arg>
</arguments>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20170809 22:43:08.620" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20170809 22:43:08.621" starttime="20170809 22:43:08.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:43:08.622" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20170809 22:43:08.622" starttime="20170809 22:43:08.621"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:43:08.627" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:43:08.628" starttime="20170809 22:43:08.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:43:08.629" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:43:08.629" starttime="20170809 22:43:08.628"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:43:08.630" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:43:08.630" starttime="20170809 22:43:08.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:43:08.631" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:43:08.631" starttime="20170809 22:43:08.630"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:43:08.816" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:43:08.816" starttime="20170809 22:43:08.632"></status>
</kw>
<msg timestamp="20170809 22:43:08.816" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:08.816" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:08.816" starttime="20170809 22:43:08.631"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:43:08.817" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:08.817" starttime="20170809 22:43:08.816"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:08.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:08.818" starttime="20170809 22:43:08.817"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:08.818" starttime="20170809 22:43:08.626"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:08.818" starttime="20170809 22:43:08.625"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:08.818" starttime="20170809 22:43:08.624"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:43:08.819" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20170809 22:43:08.819" starttime="20170809 22:43:08.818"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:43:08.819" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:43:08.819" starttime="20170809 22:43:08.819"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:08.820" starttime="20170809 22:43:08.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:08.821" starttime="20170809 22:43:08.820"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:43:12.642" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170809 22:43:12.642" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:12.642" starttime="20170809 22:43:08.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:12.643" starttime="20170809 22:43:12.643"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:43:12.643" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:43:12.644" starttime="20170809 22:43:12.643"></status>
</kw>
<msg timestamp="20170809 22:43:12.644" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:12.644" starttime="20170809 22:43:08.623"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:12.644" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:12.645" starttime="20170809 22:43:12.644"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:43:12.648" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:43:12.648" starttime="20170809 22:43:12.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:43:12.649" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:43:12.649" starttime="20170809 22:43:12.649"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:43:12.650" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:43:12.650" starttime="20170809 22:43:12.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:43:12.651" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:43:12.651" starttime="20170809 22:43:12.651"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:43:12.842" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:43:12.842" starttime="20170809 22:43:12.652"></status>
</kw>
<msg timestamp="20170809 22:43:12.842" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:12.842" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:12.843" starttime="20170809 22:43:12.652"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:43:12.843" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:12.843" starttime="20170809 22:43:12.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:12.844" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:12.844" starttime="20170809 22:43:12.844"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:12.844" starttime="20170809 22:43:12.647"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:12.844" starttime="20170809 22:43:12.647"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:12.844" starttime="20170809 22:43:12.646"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:43:12.845" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170809 22:43:12.845" starttime="20170809 22:43:12.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:12.846" starttime="20170809 22:43:12.845"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:43:12.974" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170809 22:43:12.974" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:12.974" starttime="20170809 22:43:12.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:12.975" starttime="20170809 22:43:12.975"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:43:12.976" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:43:12.976" starttime="20170809 22:43:12.976"></status>
</kw>
<msg timestamp="20170809 22:43:12.976" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:12.976" starttime="20170809 22:43:12.645"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:12.977" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:12.977" starttime="20170809 22:43:12.976"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 22:43:12.977" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:43:12.977" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:43:12.978" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too b...</msg>
<status status="PASS" endtime="20170809 22:43:12.978" starttime="20170809 22:43:12.977"></status>
</kw>
<msg timestamp="20170809 22:43:12.978" level="INFO">${data} = {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n', u'update_kernel_and_apps': 0, u'cl...</msg>
<status status="PASS" endtime="20170809 22:43:12.978" starttime="20170809 22:43:12.645"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:12.979" starttime="20170809 22:43:12.978"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<msg timestamp="20170809 22:43:12.979" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170809 22:43:12.979" starttime="20170809 22:43:12.979"></status>
</kw>
<status status="FAIL" endtime="20170809 22:43:12.980" starttime="20170809 22:43:08.620"></status>
</kw>
<msg timestamp="20170809 22:43:12.982" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170809 22:43:12.982" starttime="20170809 22:43:08.612"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:43:12.994" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:43:12.994" starttime="20170809 22:43:12.993"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:43:12.995" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:43:12.995" starttime="20170809 22:43:12.994"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:43:12.995" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:43:12.995" starttime="20170809 22:43:12.995"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:43:12.996" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:43:12.996" starttime="20170809 22:43:12.996"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:43:13.197" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:43:13.197" starttime="20170809 22:43:12.997"></status>
</kw>
<msg timestamp="20170809 22:43:13.197" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:13.197" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:13.197" starttime="20170809 22:43:12.996"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:43:13.198" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:13.198" starttime="20170809 22:43:13.198"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:13.199" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:13.199" starttime="20170809 22:43:13.198"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:13.199" starttime="20170809 22:43:12.993"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:13.199" starttime="20170809 22:43:12.992"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:13.199" starttime="20170809 22:43:12.992"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:43:13.200" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170809 22:43:13.200" starttime="20170809 22:43:13.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:13.200" starttime="20170809 22:43:13.200"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:43:13.289" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 22:43:13.289" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:13.289" starttime="20170809 22:43:13.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:13.290" starttime="20170809 22:43:13.290"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:43:13.290" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:43:13.291" starttime="20170809 22:43:13.290"></status>
</kw>
<msg timestamp="20170809 22:43:13.291" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:13.291" starttime="20170809 22:43:12.991"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:13.292" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:13.292" starttime="20170809 22:43:13.291"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 22:43:13.292" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:43:13.292" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:43:13.292" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170809 22:43:13.292" starttime="20170809 22:43:13.292"></status>
</kw>
<msg timestamp="20170809 22:43:13.293" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170809 22:43:13.293" starttime="20170809 22:43:12.990"></status>
</kw>
<msg timestamp="20170809 22:43:13.293" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170809 22:43:13.293" starttime="20170809 22:43:12.990"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170809 22:43:13.294" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170809 22:43:13.294" starttime="20170809 22:43:13.294"></status>
</kw>
<msg timestamp="20170809 22:43:13.294" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 22:43:13.294" starttime="20170809 22:43:13.293"></status>
</kw>
<msg timestamp="20170809 22:43:13.295" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 22:43:13.295" starttime="20170809 22:43:12.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170809 22:43:13.306" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170809 22:43:13.306" starttime="20170809 22:43:13.306"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 22:43:13.319" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 22:43:16.327" level="INFO">${RC} = 0</msg>
<msg timestamp="20170809 22:43:16.327" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.745 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.616 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170809 22:43:16.327" starttime="20170809 22:43:13.306"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170809 22:43:16.330" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.745 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.616 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.567 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.629 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.567/0.639/0.745/0.067 ms</msg>
<status status="PASS" endtime="20170809 22:43:16.331" starttime="20170809 22:43:16.330"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:16.332" starttime="20170809 22:43:16.331"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.332" starttime="20170809 22:43:13.305"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 22:43:16.354" level="INFO">${cur_time} = 2017-08-09 22:43:16:353713</msg>
<status status="PASS" endtime="20170809 22:43:16.354" starttime="20170809 22:43:16.353"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 22:43:16.355" level="INFO">${cur_time} = 20170809224316353713</msg>
<status status="PASS" endtime="20170809 22:43:16.355" starttime="20170809 22:43:16.355"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.355" starttime="20170809 22:43:16.353"></status>
</kw>
<msg timestamp="20170809 22:43:16.363" level="INFO">${FFDC_TIME} = 20170809224316353713</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 22:43:16.365" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170809 22:43:16.365" starttime="20170809 22:43:16.364"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 22:43:16.365" level="INFO">${suite_name} = 20170809224316353713_UpdateBmc</msg>
<status status="PASS" endtime="20170809 22:43:16.365" starttime="20170809 22:43:16.365"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 22:43:16.366" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170809 22:43:16.366" starttime="20170809 22:43:16.366"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 22:43:16.367" level="INFO">${test_name} = 20170809224316353713_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170809 22:43:16.367" starttime="20170809 22:43:16.366"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.367" starttime="20170809 22:43:16.364"></status>
</kw>
<msg timestamp="20170809 22:43:16.372" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170809 22:43:16.377" level="INFO">${FFDC_PREFIX} = 20170809224316353713_</msg>
<msg timestamp="20170809 22:43:16.402" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170809 22:43:16.404" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:16.404" starttime="20170809 22:43:16.403"></status>
</kw>
<msg timestamp="20170809 22:43:16.409" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:16.420" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:16.420" starttime="20170809 22:43:16.420"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.421" starttime="20170809 22:43:16.419"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:16.422" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:16.422" starttime="20170809 22:43:16.421"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.422" starttime="20170809 22:43:16.421"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:16.423" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:16.423" starttime="20170809 22:43:16.423"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.423" starttime="20170809 22:43:16.422"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:16.425" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:16.425" starttime="20170809 22:43:16.424"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.425" starttime="20170809 22:43:16.424"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:16.426" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:16.426" starttime="20170809 22:43:16.426"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.426" starttime="20170809 22:43:16.425"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:16.428" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:16.428" starttime="20170809 22:43:16.427"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.428" starttime="20170809 22:43:16.426"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:16.429" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:16.429" starttime="20170809 22:43:16.429"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.429" starttime="20170809 22:43:16.428"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:16.430" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:16.431" starttime="20170809 22:43:16.430"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.431" starttime="20170809 22:43:16.429"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:16.432" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:16.432" starttime="20170809 22:43:16.431"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.432" starttime="20170809 22:43:16.431"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:16.433" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:16.434" starttime="20170809 22:43:16.433"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.434" starttime="20170809 22:43:16.433"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:16.435" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:16.435" starttime="20170809 22:43:16.434"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.435" starttime="20170809 22:43:16.434"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:16.436" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:16.436" starttime="20170809 22:43:16.436"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.436" starttime="20170809 22:43:16.435"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:16.437" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:16.438" starttime="20170809 22:43:16.437"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:16.438" starttime="20170809 22:43:16.437"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170809 22:43:16.455" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 22:43:16.456" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 22:43:17.190" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170809 22:43:17.191" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170809 22:43:17.257" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 22:43:17.266" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170809 22:43:17.266" level="INFO">${stderr} = </msg>
<msg timestamp="20170809 22:43:17.266" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170809 22:43:17.267" starttime="20170809 22:43:16.438"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.267" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 22:43:17.268" starttime="20170809 22:43:17.267"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.268" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170809 22:43:17.268" starttime="20170809 22:43:17.268"></status>
</kw>
<msg timestamp="20170809 22:43:17.269" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170809 22:43:17.269" starttime="20170809 22:43:16.438"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.271" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:17.271" starttime="20170809 22:43:17.270"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.271" starttime="20170809 22:43:17.269"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.271" starttime="20170809 22:43:16.432"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.272" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:17.272" starttime="20170809 22:43:17.272"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.272" starttime="20170809 22:43:17.271"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 22:43:17.273" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170809 22:43:17.273" starttime="20170809 22:43:17.273"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.274" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:17.275" starttime="20170809 22:43:17.274"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.275" starttime="20170809 22:43:17.273"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.276" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:17.276" starttime="20170809 22:43:17.275"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.276" starttime="20170809 22:43:17.275"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.276" starttime="20170809 22:43:17.273"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.277" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:17.277" starttime="20170809 22:43:17.277"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.278" starttime="20170809 22:43:17.276"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.279" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:17.279" starttime="20170809 22:43:17.279"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.279" starttime="20170809 22:43:17.278"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.279" starttime="20170809 22:43:17.276"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.281" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:17.281" starttime="20170809 22:43:17.280"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.281" starttime="20170809 22:43:17.280"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.282" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:17.282" starttime="20170809 22:43:17.282"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.282" starttime="20170809 22:43:17.281"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.283" starttime="20170809 22:43:17.279"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.283" starttime="20170809 22:43:17.273"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.284" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:17.284" starttime="20170809 22:43:17.283"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.284" starttime="20170809 22:43:17.283"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.284" starttime="20170809 22:43:16.419"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 22:43:17.289" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170809 22:43:17.289" starttime="20170809 22:43:17.289"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170809 22:43:17.291" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170809 22:43:17.291" starttime="20170809 22:43:17.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:17.292" starttime="20170809 22:43:17.292"></status>
</kw>
<msg timestamp="20170809 22:43:17.292" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170809 22:43:17.292" starttime="20170809 22:43:17.291"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:17.294" starttime="20170809 22:43:17.294"></status>
</kw>
<msg timestamp="20170809 22:43:17.295" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:17.295" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 22:43:17.295" starttime="20170809 22:43:17.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:17.295" starttime="20170809 22:43:17.295"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 22:43:17.311" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170809 22:43:17.311" starttime="20170809 22:43:17.311"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 22:43:17.312" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170809 22:43:17.312" starttime="20170809 22:43:17.312"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.318" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170809 22:43:17.318" starttime="20170809 22:43:17.313"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.322" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:17.322" starttime="20170809 22:43:17.321"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.322" starttime="20170809 22:43:17.321"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.323" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:17.323" starttime="20170809 22:43:17.323"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.323" starttime="20170809 22:43:17.322"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.324" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:17.325" starttime="20170809 22:43:17.324"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.325" starttime="20170809 22:43:17.323"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:17.326" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:17.326" starttime="20170809 22:43:17.325"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.326" starttime="20170809 22:43:17.325"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.326" starttime="20170809 22:43:17.320"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:17.326" starttime="20170809 22:43:17.320"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 22:43:17.327" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170809 22:43:17.327" starttime="20170809 22:43:17.326"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 22:43:17.368" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 22:43:17.369" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170809 22:43:18.866" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 22:43:18.866" starttime="20170809 22:43:17.345"></status>
</kw>
<msg timestamp="20170809 22:43:18.866" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:18.866" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170809 22:43:18.866" starttime="20170809 22:43:17.327"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 22:43:18.867" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170809 22:43:18.867" starttime="20170809 22:43:18.867"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:43:18.868" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:43:18.868" starttime="20170809 22:43:18.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:18.883" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:18.883" starttime="20170809 22:43:18.882"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:18.883" starttime="20170809 22:43:18.881"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:18.883" starttime="20170809 22:43:18.868"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:18.883" starttime="20170809 22:43:17.319"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:18.883" starttime="20170809 22:43:17.318"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:18.883" starttime="20170809 22:43:17.318"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:18.883" starttime="20170809 22:43:17.311"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:18.883" starttime="20170809 22:43:17.311"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 22:43:18.885" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170809 22:43:18.885" starttime="20170809 22:43:18.884"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170809 22:43:18.886" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170809 22:43:18.886" starttime="20170809 22:43:18.885"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:18.889" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:18.889" starttime="20170809 22:43:18.889"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:18.889" starttime="20170809 22:43:18.888"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:18.891" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:18.891" starttime="20170809 22:43:18.890"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:18.891" starttime="20170809 22:43:18.890"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:18.892" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:18.892" starttime="20170809 22:43:18.892"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:18.892" starttime="20170809 22:43:18.891"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:18.893" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:18.894" starttime="20170809 22:43:18.893"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:18.894" starttime="20170809 22:43:18.892"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:18.894" starttime="20170809 22:43:18.888"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:18.894" starttime="20170809 22:43:18.887"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 22:43:18.895" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170809 22:43:18.895" starttime="20170809 22:43:18.894"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 22:43:18.937" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 22:43:18.937" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170809 22:43:19.018" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 22:43:19.018" starttime="20170809 22:43:18.913"></status>
</kw>
<msg timestamp="20170809 22:43:19.018" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:19.018" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-208"\nVERSION_ID="v1.99.8-208-g4ee6757"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170809 22:43:19.018" starttime="20170809 22:43:18.895"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 22:43:19.019" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-208"
VERSION_ID="v1.99.8-208-g4ee6757"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170809 22:43:19.019" starttime="20170809 22:43:19.019"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:43:19.020" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:43:19.020" starttime="20170809 22:43:19.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.028" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.028" starttime="20170809 22:43:19.027"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.028" starttime="20170809 22:43:19.026"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.028" starttime="20170809 22:43:19.020"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.028" starttime="20170809 22:43:18.886"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.028" starttime="20170809 22:43:18.886"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.028" starttime="20170809 22:43:18.886"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.028" starttime="20170809 22:43:18.884"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.028" starttime="20170809 22:43:18.883"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 22:43:19.029" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170809 22:43:19.030" starttime="20170809 22:43:19.029"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.030" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170809 22:43:19.030" starttime="20170809 22:43:19.030"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.034" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.034" starttime="20170809 22:43:19.033"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.034" starttime="20170809 22:43:19.033"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.035" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.035" starttime="20170809 22:43:19.035"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.035" starttime="20170809 22:43:19.034"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.036" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.036" starttime="20170809 22:43:19.036"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.037" starttime="20170809 22:43:19.035"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.038" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.038" starttime="20170809 22:43:19.037"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.038" starttime="20170809 22:43:19.037"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.038" starttime="20170809 22:43:19.032"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.038" starttime="20170809 22:43:19.032"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 22:43:19.039" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170809 22:43:19.039" starttime="20170809 22:43:19.038"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 22:43:19.080" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 22:43:19.081" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170809 22:43:19.150" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 22:43:19.150" starttime="20170809 22:43:19.057"></status>
</kw>
<msg timestamp="20170809 22:43:19.150" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:19.150" level="INFO">${ret_values} = (u' 22:43:24 up 3 min,  load average: 1.71, 1.51, 0.65', u'', 0)</msg>
<status status="PASS" endtime="20170809 22:43:19.150" starttime="20170809 22:43:19.039"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 22:43:19.151" level="INFO">${stdout} =  22:43:24 up 3 min,  load average: 1.71, 1.51, 0.65</msg>
<status status="PASS" endtime="20170809 22:43:19.151" starttime="20170809 22:43:19.151"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:43:19.152" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:43:19.152" starttime="20170809 22:43:19.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.159" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.159" starttime="20170809 22:43:19.159"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.159" starttime="20170809 22:43:19.158"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.159" starttime="20170809 22:43:19.152"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.159" starttime="20170809 22:43:19.031"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.160" starttime="20170809 22:43:19.031"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.163" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.163" starttime="20170809 22:43:19.162"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.163" starttime="20170809 22:43:19.162"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.164" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.164" starttime="20170809 22:43:19.164"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.164" starttime="20170809 22:43:19.163"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.165" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.166" starttime="20170809 22:43:19.165"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.166" starttime="20170809 22:43:19.164"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.167" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.167" starttime="20170809 22:43:19.166"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.167" starttime="20170809 22:43:19.166"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.167" starttime="20170809 22:43:19.161"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.167" starttime="20170809 22:43:19.161"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 22:43:19.168" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170809 22:43:19.168" starttime="20170809 22:43:19.167"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 22:43:19.210" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 22:43:19.210" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170809 22:43:19.267" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 22:43:19.267" starttime="20170809 22:43:19.186"></status>
</kw>
<msg timestamp="20170809 22:43:19.267" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:19.267" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170809 22:43:19.267" starttime="20170809 22:43:19.168"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 22:43:19.268" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     74.0...</msg>
<status status="PASS" endtime="20170809 22:43:19.268" starttime="20170809 22:43:19.268"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:43:19.269" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:43:19.269" starttime="20170809 22:43:19.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.276" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.276" starttime="20170809 22:43:19.275"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.276" starttime="20170809 22:43:19.274"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.276" starttime="20170809 22:43:19.269"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.276" starttime="20170809 22:43:19.160"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.276" starttime="20170809 22:43:19.160"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.279" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.280" starttime="20170809 22:43:19.279"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.280" starttime="20170809 22:43:19.279"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.282" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.282" starttime="20170809 22:43:19.282"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.282" starttime="20170809 22:43:19.281"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.283" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.283" starttime="20170809 22:43:19.283"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.284" starttime="20170809 22:43:19.282"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.285" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.285" starttime="20170809 22:43:19.284"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.285" starttime="20170809 22:43:19.284"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.285" starttime="20170809 22:43:19.278"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.285" starttime="20170809 22:43:19.277"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 22:43:19.286" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170809 22:43:19.286" starttime="20170809 22:43:19.285"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 22:43:19.328" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 22:43:19.328" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170809 22:43:19.386" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 22:43:19.386" starttime="20170809 22:43:19.305"></status>
</kw>
<msg timestamp="20170809 22:43:19.386" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:19.386" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Wed Aug 9 21:47:39 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170809 22:43:19.387" starttime="20170809 22:43:19.286"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 22:43:19.387" level="INFO">${stdout} = Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Wed Aug 9 21:47:39 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170809 22:43:19.387" starttime="20170809 22:43:19.387"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:43:19.388" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:43:19.388" starttime="20170809 22:43:19.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.395" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.396" starttime="20170809 22:43:19.395"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.396" starttime="20170809 22:43:19.394"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.396" starttime="20170809 22:43:19.388"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.396" starttime="20170809 22:43:19.276"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.396" starttime="20170809 22:43:19.276"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.396" starttime="20170809 22:43:19.030"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.396" starttime="20170809 22:43:19.029"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.396" starttime="20170809 22:43:19.028"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.396" starttime="20170809 22:43:17.311"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.396" starttime="20170809 22:43:17.310"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.396" starttime="20170809 22:43:17.295"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.397" starttime="20170809 22:43:17.293"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.397" starttime="20170809 22:43:17.292"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:19.399" starttime="20170809 22:43:19.399"></status>
</kw>
<msg timestamp="20170809 22:43:19.399" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:19.399" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 22:43:19.399" starttime="20170809 22:43:19.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:19.400" starttime="20170809 22:43:19.399"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 22:43:19.415" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170809 22:43:19.415" starttime="20170809 22:43:19.414"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 22:43:19.416" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170809 22:43:19.416" starttime="20170809 22:43:19.416"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 22:43:19.417" level="INFO">${logpath} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_elog.txt</msg>
<status status="PASS" endtime="20170809 22:43:19.417" starttime="20170809 22:43:19.417"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:43:19.420" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:43:19.421" starttime="20170809 22:43:19.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:43:19.421" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:43:19.421" starttime="20170809 22:43:19.421"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:43:19.422" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:43:19.422" starttime="20170809 22:43:19.422"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:43:19.423" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:43:19.423" starttime="20170809 22:43:19.422"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.609" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:43:19.609" starttime="20170809 22:43:19.424"></status>
</kw>
<msg timestamp="20170809 22:43:19.610" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:19.610" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:19.610" starttime="20170809 22:43:19.423"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.610" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:19.611" starttime="20170809 22:43:19.610"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.611" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:19.611" starttime="20170809 22:43:19.611"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.611" starttime="20170809 22:43:19.419"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.612" starttime="20170809 22:43:19.419"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.612" starttime="20170809 22:43:19.418"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:43:19.612" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170809 22:43:19.612" starttime="20170809 22:43:19.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:19.613" starttime="20170809 22:43:19.613"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:43:19.746" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 22:43:19.746" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:19.746" starttime="20170809 22:43:19.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:19.747" starttime="20170809 22:43:19.746"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:43:19.747" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:43:19.747" starttime="20170809 22:43:19.747"></status>
</kw>
<msg timestamp="20170809 22:43:19.747" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:19.747" starttime="20170809 22:43:19.418"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.749" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:19.749" starttime="20170809 22:43:19.748"></status>
</kw>
<msg timestamp="20170809 22:43:19.749" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170809 22:43:19.749" starttime="20170809 22:43:19.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:19.749" starttime="20170809 22:43:19.749"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170809 22:43:19.751" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502318478901, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:43:19.751" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170809 22:43:19.751" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Common.Error.InternalFailure",
    ...</msg>
<status status="PASS" endtime="20170809 22:43:19.751" starttime="20170809 22:43:19.750"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.753" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_elog.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:19.753" starttime="20170809 22:43:19.752"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.754" starttime="20170809 22:43:19.751"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.754" starttime="20170809 22:43:19.416"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 22:43:19.754" level="INFO">${logpath} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170809 22:43:19.755" starttime="20170809 22:43:19.754"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:43:19.757" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:43:19.758" starttime="20170809 22:43:19.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:43:19.758" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:43:19.758" starttime="20170809 22:43:19.758"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:43:19.759" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:43:19.759" starttime="20170809 22:43:19.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:43:19.760" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:43:19.760" starttime="20170809 22:43:19.759"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.952" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:43:19.952" starttime="20170809 22:43:19.761"></status>
</kw>
<msg timestamp="20170809 22:43:19.952" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:19.953" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:19.953" starttime="20170809 22:43:19.760"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.953" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:19.954" starttime="20170809 22:43:19.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:19.955" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:19.955" starttime="20170809 22:43:19.954"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.955" starttime="20170809 22:43:19.756"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.955" starttime="20170809 22:43:19.756"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:19.955" starttime="20170809 22:43:19.755"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:43:19.956" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170809 22:43:19.956" starttime="20170809 22:43:19.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:19.957" starttime="20170809 22:43:19.957"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:43:20.143" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 22:43:20.143" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:20.143" starttime="20170809 22:43:19.958"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:20.144" starttime="20170809 22:43:20.143"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:43:20.144" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:43:20.145" starttime="20170809 22:43:20.144"></status>
</kw>
<msg timestamp="20170809 22:43:20.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:20.145" starttime="20170809 22:43:19.755"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:20.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:20.146" starttime="20170809 22:43:20.146"></status>
</kw>
<msg timestamp="20170809 22:43:20.146" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170809 22:43:20.146" starttime="20170809 22:43:20.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:20.147" starttime="20170809 22:43:20.147"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170809 22:43:20.148" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:43:20.148" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170809 22:43:20.148" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170809 22:43:20.148" starttime="20170809 22:43:20.147"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:20.149" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:20.150" starttime="20170809 22:43:20.149"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:20.150" starttime="20170809 22:43:20.148"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:20.150" starttime="20170809 22:43:19.754"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 22:43:20.150" level="INFO">${logpath} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170809 22:43:20.150" starttime="20170809 22:43:20.150"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:43:20.154" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:43:20.154" starttime="20170809 22:43:20.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:43:20.155" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:43:20.155" starttime="20170809 22:43:20.154"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:43:20.155" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:43:20.155" starttime="20170809 22:43:20.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:43:20.156" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:43:20.156" starttime="20170809 22:43:20.156"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:43:20.405" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:43:20.405" starttime="20170809 22:43:20.157"></status>
</kw>
<msg timestamp="20170809 22:43:20.406" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:20.406" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:20.406" starttime="20170809 22:43:20.156"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:43:20.406" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:20.407" starttime="20170809 22:43:20.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:20.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:20.408" starttime="20170809 22:43:20.407"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:20.408" starttime="20170809 22:43:20.153"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:20.408" starttime="20170809 22:43:20.152"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:20.408" starttime="20170809 22:43:20.151"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:43:20.409" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170809 22:43:20.409" starttime="20170809 22:43:20.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:20.409" starttime="20170809 22:43:20.409"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:43:20.598" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 22:43:20.598" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:20.598" starttime="20170809 22:43:20.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:20.599" starttime="20170809 22:43:20.599"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:43:20.600" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:43:20.600" starttime="20170809 22:43:20.599"></status>
</kw>
<msg timestamp="20170809 22:43:20.600" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:20.600" starttime="20170809 22:43:20.151"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:20.601" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:20.601" starttime="20170809 22:43:20.601"></status>
</kw>
<msg timestamp="20170809 22:43:20.601" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170809 22:43:20.601" starttime="20170809 22:43:20.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:20.602" starttime="20170809 22:43:20.602"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170809 22:43:20.603" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:43:20.603" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170809 22:43:20.603" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170809 22:43:20.603" starttime="20170809 22:43:20.602"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:20.604" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:20.604" starttime="20170809 22:43:20.604"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:20.605" starttime="20170809 22:43:20.603"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:20.605" starttime="20170809 22:43:20.150"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 22:43:20.605" level="INFO">${logpath} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_led.txt</msg>
<status status="PASS" endtime="20170809 22:43:20.605" starttime="20170809 22:43:20.605"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:43:20.608" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:43:20.609" starttime="20170809 22:43:20.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:43:20.609" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:43:20.609" starttime="20170809 22:43:20.609"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:43:20.610" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:43:20.610" starttime="20170809 22:43:20.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:43:20.611" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:43:20.611" starttime="20170809 22:43:20.610"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:43:20.788" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:43:20.788" starttime="20170809 22:43:20.611"></status>
</kw>
<msg timestamp="20170809 22:43:20.788" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:20.788" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:20.788" starttime="20170809 22:43:20.611"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:43:20.789" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:20.789" starttime="20170809 22:43:20.789"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:20.790" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:20.790" starttime="20170809 22:43:20.790"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:20.790" starttime="20170809 22:43:20.607"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:20.790" starttime="20170809 22:43:20.607"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:20.790" starttime="20170809 22:43:20.606"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:43:20.791" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170809 22:43:20.791" starttime="20170809 22:43:20.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:20.792" starttime="20170809 22:43:20.791"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:43:20.864" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 22:43:20.864" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:20.864" starttime="20170809 22:43:20.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:20.865" starttime="20170809 22:43:20.864"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:43:20.865" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:43:20.865" starttime="20170809 22:43:20.865"></status>
</kw>
<msg timestamp="20170809 22:43:20.865" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:20.865" starttime="20170809 22:43:20.606"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:20.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 22:43:20.867" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170809 22:43:20.867" starttime="20170809 22:43:20.866"></status>
</kw>
<msg timestamp="20170809 22:43:20.867" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 22:43:20.867" starttime="20170809 22:43:20.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170809 22:43:20.868" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170809 22:43:20.868" starttime="20170809 22:43:20.868"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:20.868" starttime="20170809 22:43:20.867"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:20.868" starttime="20170809 22:43:20.605"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 22:43:20.869" level="INFO">${logpath} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170809 22:43:20.869" starttime="20170809 22:43:20.869"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:43:20.872" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:43:20.872" starttime="20170809 22:43:20.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:43:20.873" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:43:20.873" starttime="20170809 22:43:20.873"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:43:20.874" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:43:20.874" starttime="20170809 22:43:20.873"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:43:20.874" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:43:20.874" starttime="20170809 22:43:20.874"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:43:21.072" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:43:21.072" starttime="20170809 22:43:20.875"></status>
</kw>
<msg timestamp="20170809 22:43:21.072" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:21.072" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:21.072" starttime="20170809 22:43:20.875"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:43:21.073" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:21.073" starttime="20170809 22:43:21.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:21.074" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:21.074" starttime="20170809 22:43:21.073"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.074" starttime="20170809 22:43:20.871"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.074" starttime="20170809 22:43:20.870"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.074" starttime="20170809 22:43:20.870"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:43:21.075" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170809 22:43:21.075" starttime="20170809 22:43:21.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:21.076" starttime="20170809 22:43:21.075"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:43:21.122" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 22:43:21.123" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:21.123" starttime="20170809 22:43:21.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:21.123" starttime="20170809 22:43:21.123"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:43:21.124" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:43:21.124" starttime="20170809 22:43:21.124"></status>
</kw>
<msg timestamp="20170809 22:43:21.124" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:21.124" starttime="20170809 22:43:20.869"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:21.125" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 22:43:21.126" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170809 22:43:21.126" starttime="20170809 22:43:21.125"></status>
</kw>
<msg timestamp="20170809 22:43:21.126" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 22:43:21.126" starttime="20170809 22:43:21.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170809 22:43:21.127" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170809 22:43:21.127" starttime="20170809 22:43:21.127"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.127" starttime="20170809 22:43:21.126"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.127" starttime="20170809 22:43:20.868"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.127" starttime="20170809 22:43:19.416"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.127" starttime="20170809 22:43:19.415"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.127" starttime="20170809 22:43:19.415"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.127" starttime="20170809 22:43:19.415"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.127" starttime="20170809 22:43:19.414"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.128" starttime="20170809 22:43:19.400"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.128" starttime="20170809 22:43:19.397"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.128" starttime="20170809 22:43:19.397"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:21.130" starttime="20170809 22:43:21.129"></status>
</kw>
<msg timestamp="20170809 22:43:21.130" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:21.130" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 22:43:21.130" starttime="20170809 22:43:21.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:21.130" starttime="20170809 22:43:21.130"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170809 22:43:21.164" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 22:43:21.165" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170809 22:43:21.211" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170809 22:43:21.222" level="INFO">${core_files} = None</msg>
<msg timestamp="20170809 22:43:21.222" level="INFO">${stderr} = None</msg>
<msg timestamp="20170809 22:43:21.222" level="INFO">${rc} = None</msg>
<msg timestamp="20170809 22:43:21.223" level="FAIL">#(UTC) 2017/08/09 22:43:21.221238 -    3.955419 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170809 22:43:21.223" starttime="20170809 22:43:21.145"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170809 22:43:21.224" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170809 22:43:21.224" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170809 22:43:21.224" starttime="20170809 22:43:21.223"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:21.235" starttime="20170809 22:43:21.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:21.971" starttime="20170809 22:43:21.236"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.971" starttime="20170809 22:43:21.235"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.972" starttime="20170809 22:43:21.233"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.972" starttime="20170809 22:43:21.224"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170809 22:43:21.972" starttime="20170809 22:43:21.972"></status>
</kw>
<status status="FAIL" endtime="20170809 22:43:21.972" starttime="20170809 22:43:21.144"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.972" starttime="20170809 22:43:21.131"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.972" starttime="20170809 22:43:21.128"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:21.972" starttime="20170809 22:43:21.128"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:21.975" starttime="20170809 22:43:21.974"></status>
</kw>
<msg timestamp="20170809 22:43:21.975" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:21.975" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 22:43:21.975" starttime="20170809 22:43:21.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:21.975" starttime="20170809 22:43:21.975"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 22:43:21.990" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170809 22:43:21.990" starttime="20170809 22:43:21.990"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 22:43:21.992" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170809 22:43:21.992" starttime="20170809 22:43:21.991"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 22:43:21.992" level="INFO">${logpath} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170809 22:43:21.993" starttime="20170809 22:43:21.992"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:21.994" starttime="20170809 22:43:21.994"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 22:43:21.995" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170809 22:43:21.995" starttime="20170809 22:43:21.994"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 22:43:22.037" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 22:43:22.038" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170809 22:43:22.559" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 22:43:22.559" starttime="20170809 22:43:22.013"></status>
</kw>
<msg timestamp="20170809 22:43:22.559" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:22.560" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  9 22:43 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  9 22:43 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170809 22:43:22.560" starttime="20170809 22:43:21.995"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 22:43:22.561" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  9 22:43 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  9 22:43 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170809 22:43:22.561" starttime="20170809 22:43:22.561"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:43:22.562" level="INFO">${stderr} = ls: /proc/1324/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170809 22:43:22.562" starttime="20170809 22:43:22.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:22.571" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:22.571" starttime="20170809 22:43:22.570"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:22.571" starttime="20170809 22:43:22.569"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:22.571" starttime="20170809 22:43:22.562"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:22.571" starttime="20170809 22:43:21.993"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:22.571" starttime="20170809 22:43:21.992"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 22:43:22.572" level="INFO">${logpath} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170809 22:43:22.572" starttime="20170809 22:43:22.572"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:22.574" starttime="20170809 22:43:22.573"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 22:43:22.574" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170809 22:43:22.574" starttime="20170809 22:43:22.574"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 22:43:22.616" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 22:43:22.617" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170809 22:43:22.665" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 22:43:22.665" starttime="20170809 22:43:22.593"></status>
</kw>
<msg timestamp="20170809 22:43:22.665" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:22.665" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170809 22:43:22.665" starttime="20170809 22:43:22.575"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 22:43:22.666" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170809 22:43:22.666" starttime="20170809 22:43:22.665"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:43:22.666" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:43:22.666" starttime="20170809 22:43:22.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:22.675" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:22.675" starttime="20170809 22:43:22.674"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:22.675" starttime="20170809 22:43:22.673"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:22.675" starttime="20170809 22:43:22.667"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:22.675" starttime="20170809 22:43:22.572"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:22.675" starttime="20170809 22:43:22.572"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 22:43:22.676" level="INFO">${logpath} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170809 22:43:22.676" starttime="20170809 22:43:22.675"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:22.677" starttime="20170809 22:43:22.677"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 22:43:22.678" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170809 22:43:22.678" starttime="20170809 22:43:22.678"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 22:43:22.723" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 22:43:22.723" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170809 22:43:22.780" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 22:43:22.780" starttime="20170809 22:43:22.696"></status>
</kw>
<msg timestamp="20170809 22:43:22.780" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:22.780" level="INFO">${ret_values} = (u'MemTotal:         432256 kB\nMemFree:          178464 kB\nMemAvailable:     226920 kB\nBuffers:           11680 kB\nCached:           152224 kB\nSwapCached:            0 kB\nActive:           14445...</msg>
<status status="PASS" endtime="20170809 22:43:22.780" starttime="20170809 22:43:22.678"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 22:43:22.781" level="INFO">${stdout} = MemTotal:         432256 kB
MemFree:          178464 kB
MemAvailable:     226920 kB
Buffers:           11680 kB
Cached:           152224 kB
SwapCached:            0 kB
Active:           144452 kB
Inac...</msg>
<status status="PASS" endtime="20170809 22:43:22.781" starttime="20170809 22:43:22.780"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:43:22.781" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:43:22.781" starttime="20170809 22:43:22.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:22.789" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:22.789" starttime="20170809 22:43:22.788"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:22.789" starttime="20170809 22:43:22.787"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:22.789" starttime="20170809 22:43:22.782"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:22.789" starttime="20170809 22:43:22.676"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:22.789" starttime="20170809 22:43:22.675"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 22:43:22.790" level="INFO">${logpath} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170809 22:43:22.790" starttime="20170809 22:43:22.789"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:22.791" starttime="20170809 22:43:22.791"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 22:43:22.792" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170809 22:43:22.792" starttime="20170809 22:43:22.792"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 22:43:22.834" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 22:43:22.834" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170809 22:43:23.214" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 22:43:23.214" starttime="20170809 22:43:22.810"></status>
</kw>
<msg timestamp="20170809 22:43:23.214" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:23.215" level="INFO">${ret_values} = (u'Mem: 253792K used, 178464K free, 113168K shrd, 11680K buff, 152228K cached\nCPU:   6% usr   6% sys   0% nic  86% idle   0% io   0% irq   0% sirq\nLoad average: 1.58 1.49 0.65 1/159 1327\n  PID  PPI...</msg>
<status status="PASS" endtime="20170809 22:43:23.215" starttime="20170809 22:43:22.792"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 22:43:23.215" level="INFO">${stdout} = Mem: 253792K used, 178464K free, 113168K shrd, 11680K buff, 152228K cached
CPU:   6% usr   6% sys   0% nic  86% idle   0% io   0% irq   0% sirq
Load average: 1.58 1.49 0.65 1/159 1327
  PID  PPID USER...</msg>
<status status="PASS" endtime="20170809 22:43:23.216" starttime="20170809 22:43:23.215"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:43:23.216" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:43:23.216" starttime="20170809 22:43:23.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:23.223" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:23.224" starttime="20170809 22:43:23.223"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:23.224" starttime="20170809 22:43:23.222"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:23.224" starttime="20170809 22:43:23.216"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:23.224" starttime="20170809 22:43:22.790"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:23.224" starttime="20170809 22:43:22.789"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 22:43:23.225" level="INFO">${logpath} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170809 22:43:23.225" starttime="20170809 22:43:23.224"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:23.226" starttime="20170809 22:43:23.226"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 22:43:23.227" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170809 22:43:23.227" starttime="20170809 22:43:23.226"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 22:43:23.268" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 22:43:23.269" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170809 22:43:23.329" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 22:43:23.329" starttime="20170809 22:43:23.245"></status>
</kw>
<msg timestamp="20170809 22:43:23.330" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:23.330" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 (fspcibld@tulpok01p4) (gcc version 6.2.0 (GCC) ) #1 Wed Aug 9 21:47:3...</msg>
<status status="PASS" endtime="20170809 22:43:23.330" starttime="20170809 22:43:23.227"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 22:43:23.331" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 (fspcibld@tulpok01p4) (gcc version 6.2.0 (GCC) ) #1 Wed Aug 9 21:47:39 UT...</msg>
<status status="PASS" endtime="20170809 22:43:23.331" starttime="20170809 22:43:23.330"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:43:23.331" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:43:23.331" starttime="20170809 22:43:23.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:23.339" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:23.339" starttime="20170809 22:43:23.338"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:23.339" starttime="20170809 22:43:23.337"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:23.339" starttime="20170809 22:43:23.332"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:23.339" starttime="20170809 22:43:23.225"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:23.339" starttime="20170809 22:43:23.224"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 22:43:23.340" level="INFO">${logpath} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170809 22:43:23.340" starttime="20170809 22:43:23.339"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:23.342" starttime="20170809 22:43:23.341"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 22:43:23.343" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170809 22:43:23.343" starttime="20170809 22:43:23.342"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 22:43:23.384" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 22:43:23.385" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170809 22:43:24.280" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 22:43:24.280" starttime="20170809 22:43:23.361"></status>
</kw>
<msg timestamp="20170809 22:43:24.281" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:24.282" level="INFO">${ret_values} = (u'-- Logs begin at Wed 2017-08-09 22:40:12 UTC, end at Wed 2017-08-09 22:43:28 UTC. --\nAug 09 22:40:12 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 09 22:40:12 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170809 22:43:24.282" starttime="20170809 22:43:23.343"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 22:43:24.284" level="INFO">${stdout} = -- Logs begin at Wed 2017-08-09 22:40:12 UTC, end at Wed 2017-08-09 22:43:28 UTC. --
Aug 09 22:40:12 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 09 22:40:12 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170809 22:43:24.284" starttime="20170809 22:43:24.283"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:43:24.284" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:43:24.285" starttime="20170809 22:43:24.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 22:43:24.296" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:24.296" starttime="20170809 22:43:24.295"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.296" starttime="20170809 22:43:24.293"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.296" starttime="20170809 22:43:24.285"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.296" starttime="20170809 22:43:23.340"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.296" starttime="20170809 22:43:23.339"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.296" starttime="20170809 22:43:21.992"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.296" starttime="20170809 22:43:21.991"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.296" starttime="20170809 22:43:21.990"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.296" starttime="20170809 22:43:21.990"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.297" starttime="20170809 22:43:21.989"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.297" starttime="20170809 22:43:21.976"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.297" starttime="20170809 22:43:21.973"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.297" starttime="20170809 22:43:21.973"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:24.299" starttime="20170809 22:43:24.298"></status>
</kw>
<msg timestamp="20170809 22:43:24.299" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:24.299" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 22:43:24.299" starttime="20170809 22:43:24.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:24.300" starttime="20170809 22:43:24.299"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:43:24.317" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:43:24.317" starttime="20170809 22:43:24.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:43:24.318" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:43:24.318" starttime="20170809 22:43:24.317"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:43:24.318" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:43:24.318" starttime="20170809 22:43:24.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:43:24.319" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:43:24.319" starttime="20170809 22:43:24.319"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:43:24.511" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:43:24.511" starttime="20170809 22:43:24.320"></status>
</kw>
<msg timestamp="20170809 22:43:24.511" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:24.511" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:24.511" starttime="20170809 22:43:24.319"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:43:24.512" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:24.512" starttime="20170809 22:43:24.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:24.513" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:24.513" starttime="20170809 22:43:24.512"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.513" starttime="20170809 22:43:24.315"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.513" starttime="20170809 22:43:24.315"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.513" starttime="20170809 22:43:24.314"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:43:24.514" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170809 22:43:24.514" starttime="20170809 22:43:24.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:24.514" starttime="20170809 22:43:24.514"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:43:24.666" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170809 22:43:24.666" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:24.666" starttime="20170809 22:43:24.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:24.667" starttime="20170809 22:43:24.666"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:43:24.667" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:43:24.667" starttime="20170809 22:43:24.667"></status>
</kw>
<msg timestamp="20170809 22:43:24.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:24.668" starttime="20170809 22:43:24.314"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:24.669" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:24.669" starttime="20170809 22:43:24.669"></status>
</kw>
<msg timestamp="20170809 22:43:24.669" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170809 22:43:24.669" starttime="20170809 22:43:24.668"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:24.670" starttime="20170809 22:43:24.669"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 22:43:24.670" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502318478901, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:43:24.670" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:43:24.671" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Ti...</msg>
<status status="PASS" endtime="20170809 22:43:24.671" starttime="20170809 22:43:24.670"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170809 22:43:24.671" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170809 22:43:24.671" starttime="20170809 22:43:24.671"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 22:43:24.672" level="INFO">${logpath} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_esel</msg>
<status status="PASS" endtime="20170809 22:43:24.672" starttime="20170809 22:43:24.672"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170809 22:43:24.673" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_esel"&gt;/home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/20170809224316353713_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:24.673" starttime="20170809 22:43:24.672"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:24.674" starttime="20170809 22:43:24.673"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:43:24.678" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:43:24.678" starttime="20170809 22:43:24.678"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:43:24.679" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:43:24.679" starttime="20170809 22:43:24.679"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:43:24.680" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:43:24.681" starttime="20170809 22:43:24.680"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:43:24.682" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:43:24.682" starttime="20170809 22:43:24.681"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:43:24.871" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:43:24.871" starttime="20170809 22:43:24.683"></status>
</kw>
<msg timestamp="20170809 22:43:24.871" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:24.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:24.871" starttime="20170809 22:43:24.682"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:43:24.872" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:24.872" starttime="20170809 22:43:24.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:24.873" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:24.873" starttime="20170809 22:43:24.873"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.873" starttime="20170809 22:43:24.677"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.873" starttime="20170809 22:43:24.676"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.873" starttime="20170809 22:43:24.675"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:43:24.874" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170809 22:43:24.874" starttime="20170809 22:43:24.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:24.875" starttime="20170809 22:43:24.874"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:43:24.958" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 22:43:24.959" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:24.959" starttime="20170809 22:43:24.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:24.959" starttime="20170809 22:43:24.959"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:43:24.960" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:43:24.960" starttime="20170809 22:43:24.960"></status>
</kw>
<msg timestamp="20170809 22:43:24.960" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:43:24.960" starttime="20170809 22:43:24.675"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:43:24.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:43:24.961" starttime="20170809 22:43:24.960"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 22:43:24.962" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:43:24.962" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:43:24.962" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170809 22:43:24.962" starttime="20170809 22:43:24.961"></status>
</kw>
<msg timestamp="20170809 22:43:24.962" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170809 22:43:24.962" starttime="20170809 22:43:24.674"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 22:43:24.963" level="INFO">Length is 0</msg>
<msg timestamp="20170809 22:43:24.963" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170809 22:43:24.963" starttime="20170809 22:43:24.962"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170809 22:43:24.963" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170809 22:43:24.963" starttime="20170809 22:43:24.963"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.964" starttime="20170809 22:43:24.673"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:24.964" starttime="20170809 22:43:24.673"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170809 22:43:24.977" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 22:43:24.991" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170809 22:43:24.991" starttime="20170809 22:43:24.964"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170809 22:43:25.014" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170809 22:43:25.015" starttime="20170809 22:43:25.011"></status>
</kw>
<msg timestamp="20170809 22:43:25.015" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 22:43:25.015" starttime="20170809 22:43:25.007"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170809 22:43:25.016" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170809 22:43:25.017" starttime="20170809 22:43:25.015"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.018" starttime="20170809 22:43:24.313"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.018" starttime="20170809 22:43:24.300"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.018" starttime="20170809 22:43:24.297"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.018" starttime="20170809 22:43:24.297"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:25.023" starttime="20170809 22:43:25.023"></status>
</kw>
<msg timestamp="20170809 22:43:25.023" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:43:25.023" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 22:43:25.023" starttime="20170809 22:43:25.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:25.025" starttime="20170809 22:43:25.025"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170809 22:43:25.051" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170809 22:43:25.051" starttime="20170809 22:43:25.051"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.051" starttime="20170809 22:43:25.050"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.051" starttime="20170809 22:43:25.026"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.052" starttime="20170809 22:43:25.020"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.052" starttime="20170809 22:43:25.019"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.052" starttime="20170809 22:43:17.292"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.052" starttime="20170809 22:43:17.290"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.052" starttime="20170809 22:43:17.290"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.052" starttime="20170809 22:43:17.290"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170809 22:43:25.137" starttime="20170809 22:43:25.059"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.137" starttime="20170809 22:43:25.052"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.137" starttime="20170809 22:43:17.289"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.139" starttime="20170809 22:43:13.295"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.139" starttime="20170809 22:43:13.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:25.140" starttime="20170809 22:43:25.139"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170809 22:43:25.141" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170809 22:43:25.141" starttime="20170809 22:43:25.141"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170809 22:43:25.142" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170809224316353713_UpdateBmc/20170809224316353713_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170809 22:43:25.142" starttime="20170809 22:43:25.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:25.142" starttime="20170809 22:43:25.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:25.143" starttime="20170809 22:43:25.143"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170809 22:43:25.144" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170809 22:43:25.144" starttime="20170809 22:43:25.143"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170809 22:43:25.146" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170809 22:43:25.146" starttime="20170809 22:43:25.145"></status>
</kw>
<msg timestamp="20170809 22:43:25.146" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170809 22:43:25.146" starttime="20170809 22:43:25.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:25.146" starttime="20170809 22:43:25.146"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170809 22:43:25.148" starttime="20170809 22:43:25.147"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 22:43:25.149" level="INFO">${cur_time} = 2017-08-09 22:43:25:148749</msg>
<status status="PASS" endtime="20170809 22:43:25.149" starttime="20170809 22:43:25.149"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 22:43:25.150" level="INFO">${cur_time} = 20170809224325148749</msg>
<status status="PASS" endtime="20170809 22:43:25.150" starttime="20170809 22:43:25.149"></status>
</kw>
<msg timestamp="20170809 22:43:25.150" level="INFO">${cur_time} = 20170809224325148749</msg>
<status status="PASS" endtime="20170809 22:43:25.150" starttime="20170809 22:43:25.148"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170809 22:43:25.152" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 22:43:25.152" starttime="20170809 22:43:25.150"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.152" starttime="20170809 22:43:25.140"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.152" starttime="20170809 22:43:12.989"></status>
</kw>
<status status="PASS" endtime="20170809 22:43:25.152" starttime="20170809 22:43:12.983"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170809 22:43:25.152" critical="yes" starttime="20170809 22:39:02.927">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170809 22:43:25.153" starttime="20170809 22:39:02.023"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170809 22:40:04.247" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff804bc290&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170809 22:40:24.470" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff804bc210&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
</errors>
</robot>
