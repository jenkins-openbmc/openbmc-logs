<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170706 22:20:03.639" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite id="s1" name="Tests" source="/tmp/fspcibld/2877/obmc-robot/tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:20:04.219">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170706 22:20:04.218" endtime="20170706 22:20:04.219"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:04.219">${has_host} = False</msg>
<status status="PASS" starttime="20170706 22:20:04.218" endtime="20170706 22:20:04.219"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:04.220" endtime="20170706 22:20:04.220"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:04.219" endtime="20170706 22:20:04.220"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:04.222">${port_num} = 22</msg>
<status status="PASS" starttime="20170706 22:20:04.222" endtime="20170706 22:20:04.222"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:04.223">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170706 22:20:04.222" endtime="20170706 22:20:04.223"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:04.223">${https_num} = 443</msg>
<status status="PASS" starttime="20170706 22:20:04.223" endtime="20170706 22:20:04.223"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:04.224">${AUTH_URI} = https://9.3.21.61:443</msg>
<status status="PASS" starttime="20170706 22:20:04.223" endtime="20170706 22:20:04.224"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:04.221" endtime="20170706 22:20:04.224"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:04.221" endtime="20170706 22:20:04.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:20:04.225">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170706 22:20:04.225" endtime="20170706 22:20:04.225"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:04.225">${has_port} = False</msg>
<status status="PASS" starttime="20170706 22:20:04.224" endtime="20170706 22:20:04.225"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:04.227" endtime="20170706 22:20:04.227"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:04.227" endtime="20170706 22:20:04.227"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:04.226" endtime="20170706 22:20:04.228"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:04.226" endtime="20170706 22:20:04.228"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:04.228">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 22:20:06.087">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170706 22:20:04.228" endtime="20170706 22:20:06.087"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:04.217" endtime="20170706 22:20:06.087"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:06.089">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170706 22:20:06.166">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 22:20:06.167">${output} = VERSION_ID="v1.99.7-83-gd9780be"</msg>
<msg level="INFO" timestamp="20170706 22:20:06.167">${stderr} = </msg>
<status status="PASS" starttime="20170706 22:20:06.088" endtime="20170706 22:20:06.167"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:06.167">Length is 0</msg>
<status status="PASS" starttime="20170706 22:20:06.167" endtime="20170706 22:20:06.168"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:06.168">VERSION_ID="v1.99.7-83-gd9780be"</msg>
<status status="PASS" starttime="20170706 22:20:06.168" endtime="20170706 22:20:06.168"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:06.088" endtime="20170706 22:20:06.168"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:06.088" endtime="20170706 22:20:06.168"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:06.170">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170706 22:20:06.307">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 22:20:06.307">${stdout} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<msg level="INFO" timestamp="20170706 22:20:06.307">${stderr} = </msg>
<status status="PASS" starttime="20170706 22:20:06.169" endtime="20170706 22:20:06.307"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:06.307">Length is 0</msg>
<status status="PASS" starttime="20170706 22:20:06.307" endtime="20170706 22:20:06.307"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:06.308">${pnor_details} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<status status="PASS" starttime="20170706 22:20:06.169" endtime="20170706 22:20:06.308"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:06.308">PNOR_INFO=Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17_1.46
	op-build-v1.17-101-g1c57f18-dirty
	buildroot-2017.02.2-7-g23118ce
	skiboot-5.6.0-158-ga1e0a047b2a0
	hostboot-0ffbb55
	linux-4.11.6-openpower1-p57dd16e
	petitboot-v1.4.3-pfac92ff
	machine-xml-5b59a1d
	occ-1dc97a6
	hostboot-binaries-711147e
	capp-ucode-9c73e9f
	sbe-0df81aa
</msg>
<status status="PASS" starttime="20170706 22:20:06.308" endtime="20170706 22:20:06.309"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:06.169" endtime="20170706 22:20:06.309"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:06.168" endtime="20170706 22:20:06.309"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:20:06.312">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170706 22:20:06.311" endtime="20170706 22:20:06.312"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:06.312">${has_host} = False</msg>
<status status="PASS" starttime="20170706 22:20:06.311" endtime="20170706 22:20:06.312"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:06.313" endtime="20170706 22:20:06.313"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:06.312" endtime="20170706 22:20:06.313"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:06.315">${port_num} = 22</msg>
<status status="PASS" starttime="20170706 22:20:06.314" endtime="20170706 22:20:06.315"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:06.315">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170706 22:20:06.315" endtime="20170706 22:20:06.315"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:06.316">${https_num} = 443</msg>
<status status="PASS" starttime="20170706 22:20:06.315" endtime="20170706 22:20:06.316"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:06.317">${AUTH_URI} = https://9.3.21.61:443</msg>
<status status="PASS" starttime="20170706 22:20:06.316" endtime="20170706 22:20:06.317"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:06.314" endtime="20170706 22:20:06.317"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:06.313" endtime="20170706 22:20:06.317"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:20:06.318">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170706 22:20:06.317" endtime="20170706 22:20:06.318"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:06.318">${has_port} = False</msg>
<status status="PASS" starttime="20170706 22:20:06.317" endtime="20170706 22:20:06.318"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:06.319" endtime="20170706 22:20:06.320"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:06.320" endtime="20170706 22:20:06.320"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:06.319" endtime="20170706 22:20:06.320"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:06.318" endtime="20170706 22:20:06.320"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:06.321">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 22:20:08.100">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170706 22:20:06.320" endtime="20170706 22:20:08.100"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:06.310" endtime="20170706 22:20:08.100"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:08.101">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170706 22:20:08.178">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 22:20:08.179">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170706 22:20:08.179">${stderr} = </msg>
<status status="PASS" starttime="20170706 22:20:08.100" endtime="20170706 22:20:08.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:08.179">Length is 0</msg>
<status status="PASS" starttime="20170706 22:20:08.179" endtime="20170706 22:20:08.179"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:08.180">Length is 11</msg>
<status status="PASS" starttime="20170706 22:20:08.179" endtime="20170706 22:20:08.180"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:08.180">${bmc_model} = Witherspoon</msg>
<status status="PASS" starttime="20170706 22:20:06.310" endtime="20170706 22:20:08.180"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:08.180">BMC Model=Witherspoon</msg>
<status status="PASS" starttime="20170706 22:20:08.180" endtime="20170706 22:20:08.180"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:06.310" endtime="20170706 22:20:08.181"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:06.310" endtime="20170706 22:20:08.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:20:08.183">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170706 22:20:08.182" endtime="20170706 22:20:08.183"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:08.183">${has_host} = False</msg>
<status status="PASS" starttime="20170706 22:20:08.182" endtime="20170706 22:20:08.183"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:08.184" endtime="20170706 22:20:08.184"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:08.183" endtime="20170706 22:20:08.184"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:08.186">${port_num} = 22</msg>
<status status="PASS" starttime="20170706 22:20:08.186" endtime="20170706 22:20:08.186"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:08.187">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170706 22:20:08.186" endtime="20170706 22:20:08.187"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:08.187">${https_num} = 443</msg>
<status status="PASS" starttime="20170706 22:20:08.187" endtime="20170706 22:20:08.187"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:08.188">${AUTH_URI} = https://9.3.21.61:443</msg>
<status status="PASS" starttime="20170706 22:20:08.188" endtime="20170706 22:20:08.188"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:08.185" endtime="20170706 22:20:08.188"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:08.184" endtime="20170706 22:20:08.188"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:20:08.189">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170706 22:20:08.189" endtime="20170706 22:20:08.189"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:08.189">${has_port} = False</msg>
<status status="PASS" starttime="20170706 22:20:08.188" endtime="20170706 22:20:08.189"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:08.191" endtime="20170706 22:20:08.191"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:08.191" endtime="20170706 22:20:08.192"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:08.190" endtime="20170706 22:20:08.192"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:08.190" endtime="20170706 22:20:08.192"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:08.192">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 22:20:09.898">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170706 22:20:08.192" endtime="20170706 22:20:09.899"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:08.181" endtime="20170706 22:20:09.899"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:09.900">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170706 22:20:10.021">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 22:20:10.022">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170706 22:20:10.022">${stderr} = </msg>
<status status="PASS" starttime="20170706 22:20:09.900" endtime="20170706 22:20:10.022"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:10.022">Length is 0</msg>
<status status="PASS" starttime="20170706 22:20:10.022" endtime="20170706 22:20:10.022"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:10.023">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" starttime="20170706 22:20:09.899" endtime="20170706 22:20:10.023"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:10.023" endtime="20170706 22:20:10.023"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:08.181" endtime="20170706 22:20:10.023"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:08.181" endtime="20170706 22:20:10.023"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:10.024" endtime="20170706 22:20:10.024"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:04.217" endtime="20170706 22:20:10.024"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/2877/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/2877/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:10.107">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:20:10.106" endtime="20170706 22:20:10.107"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.108">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:20:10.107" endtime="20170706 22:20:10.108"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.108">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:20:10.108" endtime="20170706 22:20:10.108"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.109">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:20:10.109" endtime="20170706 22:20:10.109"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:10.413">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:20:10.110" endtime="20170706 22:20:10.413"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:10.414">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:20:10.414">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:10.109" endtime="20170706 22:20:10.414"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:10.415">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:10.414" endtime="20170706 22:20:10.415"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:10.416">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:10.415" endtime="20170706 22:20:10.416"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.106" endtime="20170706 22:20:10.416"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.105" endtime="20170706 22:20:10.416"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.105" endtime="20170706 22:20:10.416"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:10.423">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:20:10.422" endtime="20170706 22:20:10.424"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.424">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:20:10.424" endtime="20170706 22:20:10.424"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.425">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:20:10.425" endtime="20170706 22:20:10.425"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.426">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:20:10.426" endtime="20170706 22:20:10.426"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:10.630">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:20:10.427" endtime="20170706 22:20:10.630"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:10.630">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:20:10.630">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:10.427" endtime="20170706 22:20:10.630"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:10.631">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:10.630" endtime="20170706 22:20:10.631"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:10.631">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:10.631" endtime="20170706 22:20:10.632"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.422" endtime="20170706 22:20:10.632"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.421" endtime="20170706 22:20:10.632"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.420" endtime="20170706 22:20:10.632"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.632">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:20:10.632" endtime="20170706 22:20:10.632"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.635">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:20:10.634" endtime="20170706 22:20:10.635"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:10.636">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:20:10.635" endtime="20170706 22:20:10.636"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.635" endtime="20170706 22:20:10.636"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.633" endtime="20170706 22:20:10.636"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.633" endtime="20170706 22:20:10.636"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.703">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:20:10.703">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:10.636" endtime="20170706 22:20:10.703"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.705">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:20:10.704" endtime="20170706 22:20:10.705"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:10.706">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:20:10.705" endtime="20170706 22:20:10.706"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.705" endtime="20170706 22:20:10.706"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.704" endtime="20170706 22:20:10.706"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.703" endtime="20170706 22:20:10.706"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:10.706">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:10.419" endtime="20170706 22:20:10.706"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:10.707">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:10.707" endtime="20170706 22:20:10.707"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.708">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:20:10.708">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:20:10.708">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:20:10.707" endtime="20170706 22:20:10.708"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:10.708">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:20:10.418" endtime="20170706 22:20:10.708"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:10.708">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:20:10.418" endtime="20170706 22:20:10.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:20:10.710">Running != Quiesced</msg>
<status status="FAIL" starttime="20170706 22:20:10.709" endtime="20170706 22:20:10.710"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:10.710">${status} = False</msg>
<status status="PASS" starttime="20170706 22:20:10.709" endtime="20170706 22:20:10.710"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:10.710">${status} = False</msg>
<status status="PASS" starttime="20170706 22:20:10.417" endtime="20170706 22:20:10.710"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:10.710" endtime="20170706 22:20:10.711"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:10.711" endtime="20170706 22:20:10.711"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.721">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170706 22:20:10.712" endtime="20170706 22:20:10.721"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.729">${FFDC_DIR_PATH} = </msg>
<status status="PASS" starttime="20170706 22:20:10.721" endtime="20170706 22:20:10.730"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.732">${cur_time} = 2017-07-06 22:20:10:731977</msg>
<status status="PASS" starttime="20170706 22:20:10.732" endtime="20170706 22:20:10.732"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.733">${cur_time} = 20170706222010731977</msg>
<status status="PASS" starttime="20170706 22:20:10.733" endtime="20170706 22:20:10.733"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.731" endtime="20170706 22:20:10.733"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:10.739">${FFDC_TIME} = 20170706222010731977</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.741">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170706 22:20:10.741" endtime="20170706 22:20:10.741"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.741">${suite_name} = 20170706222010731977_TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170706 22:20:10.741" endtime="20170706 22:20:10.741"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.742">${test_name} = TestSSLConnection</msg>
<status status="PASS" starttime="20170706 22:20:10.742" endtime="20170706 22:20:10.742"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.743">${test_name} = 20170706222010731977_TestSSLConnection</msg>
<status status="PASS" starttime="20170706 22:20:10.742" endtime="20170706 22:20:10.743"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.740" endtime="20170706 22:20:10.743"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:10.743">${FFDC_DIR_PATH} = /tmp/fspcibld/2877/obmc-robot/logs/20170706222010731977_TestsSecurityTestSsl/20170706222010731977_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170706 22:20:10.747">${FFDC_PREFIX} = 20170706222010731977_</msg>
<status status="PASS" starttime="20170706 22:20:10.731" endtime="20170706 22:20:10.748"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.730" endtime="20170706 22:20:10.748"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:10.748" endtime="20170706 22:20:10.748"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:10.749" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs"&gt;/tmp/fspcibld/2877/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:20:10.749" endtime="20170706 22:20:10.749"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:20:10.750">File '/tmp/fspcibld/2877/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" starttime="20170706 22:20:10.750" endtime="20170706 22:20:10.750"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:10.750">${exist} = False</msg>
<status status="PASS" starttime="20170706 22:20:10.749" endtime="20170706 22:20:10.750"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:10.751" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:20:10.751" endtime="20170706 22:20:10.752"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.751" endtime="20170706 22:20:10.752"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:10.752" endtime="20170706 22:20:10.752"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.753">${cur_time} = 2017-07-06 22:20:10:752977</msg>
<status status="PASS" starttime="20170706 22:20:10.753" endtime="20170706 22:20:10.753"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.754">${cur_time} = 20170706222010752977</msg>
<status status="PASS" starttime="20170706 22:20:10.753" endtime="20170706 22:20:10.754"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:10.754">${cur_time} = 20170706222010752977</msg>
<status status="PASS" starttime="20170706 22:20:10.752" endtime="20170706 22:20:10.754"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:10.755" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:20:10.754" endtime="20170706 22:20:10.755"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.711" endtime="20170706 22:20:10.755"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.417" endtime="20170706 22:20:10.755"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" starttime="20170706 22:20:10.104" critical="yes" endtime="20170706 22:20:10.755"></status>
</test>
<kw type="teardown" library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170706 22:20:10.756">Delete All Sessions</msg>
<status status="PASS" starttime="20170706 22:20:10.756" endtime="20170706 22:20:10.756"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" starttime="20170706 22:20:10.027" endtime="20170706 22:20:10.756"></status>
</suite>
<status status="PASS" starttime="20170706 22:20:10.025" endtime="20170706 22:20:10.758"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/2877/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" library="utils" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.793">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170706 22:20:10.793" endtime="20170706 22:20:10.793"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.794">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170706 22:20:10.793" endtime="20170706 22:20:10.794"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:10.794">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170706 22:20:10.792" endtime="20170706 22:20:10.794"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.796">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170706 22:20:10.796" endtime="20170706 22:20:10.796"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.797">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170706 22:20:10.796" endtime="20170706 22:20:10.797"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:10.797">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170706 22:20:10.795" endtime="20170706 22:20:10.797"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.798">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170706 22:20:10.797" endtime="20170706 22:20:10.798"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:10.798" endtime="20170706 22:20:10.798"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.804">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170706 22:20:10.807">${rc} = 0</msg>
<msg level="INFO" timestamp="20170706 22:20:10.807">${output} = /tmp/fspcibld/2877/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170706 22:20:10.798" endtime="20170706 22:20:10.807"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:10.809" endtime="20170706 22:20:10.810"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:10.810" endtime="20170706 22:20:10.811"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.812">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" starttime="20170706 22:20:10.811" endtime="20170706 22:20:10.812"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:10.812">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" starttime="20170706 22:20:10.797" endtime="20170706 22:20:10.812"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.812">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170706 22:20:10.812" endtime="20170706 22:20:10.813"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:10.813" endtime="20170706 22:20:10.813"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.817">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170706 22:20:10.836">${rc} = 0</msg>
<msg level="INFO" timestamp="20170706 22:20:10.836">${os_con_pid} = </msg>
<status status="PASS" starttime="20170706 22:20:10.813" endtime="20170706 22:20:10.836"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:10.838" endtime="20170706 22:20:10.838"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.839">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20170706 22:20:10.839" endtime="20170706 22:20:10.839"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:10.839" endtime="20170706 22:20:10.840"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.841">${rc} = None</msg>
<msg level="INFO" timestamp="20170706 22:20:10.841">${output} = None</msg>
<status status="PASS" starttime="20170706 22:20:10.840" endtime="20170706 22:20:10.841"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:10.842" endtime="20170706 22:20:10.843"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:20:10.846">Source file '/tmp/9.3.21.61_os_console' does not exist.</msg>
<status status="FAIL" starttime="20170706 22:20:10.844" endtime="20170706 22:20:10.846"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.844" endtime="20170706 22:20:10.846"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.843" endtime="20170706 22:20:10.846"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.847">${output} = </msg>
<status status="PASS" starttime="20170706 22:20:10.846" endtime="20170706 22:20:10.847"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:10.847">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20170706 22:20:10.847" endtime="20170706 22:20:10.847"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:10.848" endtime="20170706 22:20:11.303"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:11.304">${rc} = 1</msg>
<msg level="INFO" timestamp="20170706 22:20:11.304">${output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status status="PASS" starttime="20170706 22:20:10.848" endtime="20170706 22:20:11.304"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:11.305">${log_output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status status="PASS" starttime="20170706 22:20:10.794" endtime="20170706 22:20:11.305"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:11.307" html="yes">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:20:11.306" endtime="20170706 22:20:11.307"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:11.308">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170706 22:20:11.308" endtime="20170706 22:20:11.308"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:11.308" endtime="20170706 22:20:11.308"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:11.312">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170706 22:20:11.316">${rc} = 0</msg>
<msg level="INFO" timestamp="20170706 22:20:11.316">${output} = /tmp/fspcibld/2877/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170706 22:20:11.309" endtime="20170706 22:20:11.316"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:11.318" endtime="20170706 22:20:11.319"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:11.320" endtime="20170706 22:20:11.321"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:11.322">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" starttime="20170706 22:20:11.321" endtime="20170706 22:20:11.322"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:11.322">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" starttime="20170706 22:20:11.307" endtime="20170706 22:20:11.322"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:11.323">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" starttime="20170706 22:20:11.323" endtime="20170706 22:20:11.323"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:11.323" endtime="20170706 22:20:11.324"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:11.328">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170706 22:20:11.331">${rc} = 0</msg>
<msg level="INFO" timestamp="20170706 22:20:11.331">${output} = </msg>
<status status="PASS" starttime="20170706 22:20:11.324" endtime="20170706 22:20:11.331"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:11.333" endtime="20170706 22:20:11.334"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:10.791" endtime="20170706 22:20:11.334"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:11.335">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:11.337">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20170706 22:20:11.336" endtime="20170706 22:20:11.337"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:11.338">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170706 22:20:11.338" endtime="20170706 22:20:11.338"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:11.343">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:20:11.342" endtime="20170706 22:20:11.344"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:11.345">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:20:11.344" endtime="20170706 22:20:11.345"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:11.346">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:20:11.346" endtime="20170706 22:20:11.346"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:11.347">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:20:11.346" endtime="20170706 22:20:11.347"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:11.880">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:20:11.347" endtime="20170706 22:20:11.880"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:11.880">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:20:11.880">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:11.347" endtime="20170706 22:20:11.880"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:11.881">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:11.880" endtime="20170706 22:20:11.881"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:11.881">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:11.881" endtime="20170706 22:20:11.881"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:11.341" endtime="20170706 22:20:11.881"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:11.340" endtime="20170706 22:20:11.882"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:11.339" endtime="20170706 22:20:11.882"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:11.882">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170706 22:20:11.882" endtime="20170706 22:20:11.882"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:11.883">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:20:11.883" endtime="20170706 22:20:11.883"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:11.883" endtime="20170706 22:20:11.884"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:11.885">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status status="PASS" starttime="20170706 22:20:11.885" endtime="20170706 22:20:11.885"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:11.886">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170706 22:20:11.886" endtime="20170706 22:20:11.886"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:11.886" endtime="20170706 22:20:11.887"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:11.884" endtime="20170706 22:20:11.887"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:12.809">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170706 22:20:12.809">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:11.887" endtime="20170706 22:20:12.809"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:12.813">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:20:12.810" endtime="20170706 22:20:12.813"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:12.814">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:20:12.814" endtime="20170706 22:20:12.814"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:12.813" endtime="20170706 22:20:12.815"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:12.810" endtime="20170706 22:20:12.815"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:12.815">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:11.338" endtime="20170706 22:20:12.815"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:12.815">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:12.815" endtime="20170706 22:20:12.816"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:12.816">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:20:12.816">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:20:12.816">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:20:12.816" endtime="20170706 22:20:12.816"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:11.337" endtime="20170706 22:20:12.816"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170706 22:20:12.817" endtime="20170706 22:20:12.817"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:12.821">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:20:12.821" endtime="20170706 22:20:12.822"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:12.822">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:20:12.822" endtime="20170706 22:20:12.822"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:12.823">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:20:12.822" endtime="20170706 22:20:12.823"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:12.823">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:20:12.823" endtime="20170706 22:20:12.824"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:14.308">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:20:12.824" endtime="20170706 22:20:14.308"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:14.308">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:20:14.308">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:12.824" endtime="20170706 22:20:14.308"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:14.309">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:14.308" endtime="20170706 22:20:14.309"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:14.309">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:14.309" endtime="20170706 22:20:14.310"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:12.820" endtime="20170706 22:20:14.310"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:12.820" endtime="20170706 22:20:14.310"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:12.820" endtime="20170706 22:20:14.310"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:14.310">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:20:14.310" endtime="20170706 22:20:14.310"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:14.313">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:20:14.312" endtime="20170706 22:20:14.313"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:14.314">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:20:14.313" endtime="20170706 22:20:14.314"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:14.313" endtime="20170706 22:20:14.314"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:14.311" endtime="20170706 22:20:14.314"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:14.311" endtime="20170706 22:20:14.314"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:21.164">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:20:21.164">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:14.314" endtime="20170706 22:20:21.165"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:21.167">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:20:21.166" endtime="20170706 22:20:21.167"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:21.168">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:20:21.167" endtime="20170706 22:20:21.168"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:21.167" endtime="20170706 22:20:21.168"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:21.166" endtime="20170706 22:20:21.168"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:21.165" endtime="20170706 22:20:21.168"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:21.168">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:12.819" endtime="20170706 22:20:21.168"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:21.169">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:21.169" endtime="20170706 22:20:21.169"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:21.170">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:20:21.170">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:20:21.170">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:20:21.169" endtime="20170706 22:20:21.170"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:21.170">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:20:12.818" endtime="20170706 22:20:21.170"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:21.170">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:20:12.818" endtime="20170706 22:20:21.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:20:21.171">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:20:21.171" endtime="20170706 22:20:21.171"></status>
</kw>
<status status="FAIL" starttime="20170706 22:20:12.818" endtime="20170706 22:20:21.171"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:31.177">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:20:31.176" endtime="20170706 22:20:31.177"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:31.178">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:20:31.178" endtime="20170706 22:20:31.178"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:31.178">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:20:31.178" endtime="20170706 22:20:31.179"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:31.179">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:20:31.179" endtime="20170706 22:20:31.179"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:31.367">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:20:31.180" endtime="20170706 22:20:31.367"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:31.367">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:20:31.367">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:31.179" endtime="20170706 22:20:31.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:31.368">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:31.368" endtime="20170706 22:20:31.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:31.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:31.368" endtime="20170706 22:20:31.369"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:31.175" endtime="20170706 22:20:31.369"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:31.175" endtime="20170706 22:20:31.369"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:31.174" endtime="20170706 22:20:31.369"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:31.370">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:20:31.369" endtime="20170706 22:20:31.370"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:31.372">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:20:31.371" endtime="20170706 22:20:31.373"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:31.374">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:20:31.373" endtime="20170706 22:20:31.374"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:31.373" endtime="20170706 22:20:31.374"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:31.371" endtime="20170706 22:20:31.374"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:31.370" endtime="20170706 22:20:31.374"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:31.440">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:20:31.440">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:31.375" endtime="20170706 22:20:31.440"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:31.442">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:20:31.442" endtime="20170706 22:20:31.442"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:31.443">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:20:31.443" endtime="20170706 22:20:31.443"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:31.442" endtime="20170706 22:20:31.444"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:31.441" endtime="20170706 22:20:31.444"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:31.441" endtime="20170706 22:20:31.444"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:31.444">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:31.174" endtime="20170706 22:20:31.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:31.445">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:31.444" endtime="20170706 22:20:31.445"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:31.445">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:20:31.445">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:20:31.446">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:20:31.445" endtime="20170706 22:20:31.446"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:31.446">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:20:31.173" endtime="20170706 22:20:31.446"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:31.446">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:20:31.173" endtime="20170706 22:20:31.446"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:20:31.447">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:20:31.446" endtime="20170706 22:20:31.447"></status>
</kw>
<status status="FAIL" starttime="20170706 22:20:31.172" endtime="20170706 22:20:31.447"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:41.452">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:20:41.451" endtime="20170706 22:20:41.452"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:41.453">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:20:41.453" endtime="20170706 22:20:41.453"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:41.454">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:20:41.453" endtime="20170706 22:20:41.454"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:41.454">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:20:41.454" endtime="20170706 22:20:41.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:41.646">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:20:41.455" endtime="20170706 22:20:41.647"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:41.647">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:20:41.647">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:41.455" endtime="20170706 22:20:41.647"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:41.647">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:41.647" endtime="20170706 22:20:41.648"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:41.648">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:41.648" endtime="20170706 22:20:41.649"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:41.451" endtime="20170706 22:20:41.649"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:41.451" endtime="20170706 22:20:41.649"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:41.450" endtime="20170706 22:20:41.649"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:41.650">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:20:41.649" endtime="20170706 22:20:41.650"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:41.652">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:20:41.651" endtime="20170706 22:20:41.652"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:41.653">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:20:41.653" endtime="20170706 22:20:41.653"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:41.652" endtime="20170706 22:20:41.653"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:41.650" endtime="20170706 22:20:41.653"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:41.650" endtime="20170706 22:20:41.653"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:41.722">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:20:41.722">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:41.654" endtime="20170706 22:20:41.722"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:41.724">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:20:41.723" endtime="20170706 22:20:41.724"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:41.725">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:20:41.724" endtime="20170706 22:20:41.725"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:41.724" endtime="20170706 22:20:41.725"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:41.723" endtime="20170706 22:20:41.725"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:41.722" endtime="20170706 22:20:41.725"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:41.725">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:41.449" endtime="20170706 22:20:41.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:41.726">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:41.725" endtime="20170706 22:20:41.726"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:41.727">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:20:41.727">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:20:41.727">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:20:41.726" endtime="20170706 22:20:41.727"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:41.727">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:20:41.449" endtime="20170706 22:20:41.727"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:41.728">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:20:41.448" endtime="20170706 22:20:41.728"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:20:41.729">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:20:41.728" endtime="20170706 22:20:41.729"></status>
</kw>
<status status="FAIL" starttime="20170706 22:20:41.448" endtime="20170706 22:20:41.729"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:51.735">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:20:51.734" endtime="20170706 22:20:51.735"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:51.736">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:20:51.735" endtime="20170706 22:20:51.736"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:51.736">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:20:51.736" endtime="20170706 22:20:51.736"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:51.737">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:20:51.737" endtime="20170706 22:20:51.737"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:51.945">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:20:51.738" endtime="20170706 22:20:51.946"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:51.946">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:20:51.946">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:51.737" endtime="20170706 22:20:51.947"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:51.947">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:51.947" endtime="20170706 22:20:51.947"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:51.948">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:51.948" endtime="20170706 22:20:51.948"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:51.733" endtime="20170706 22:20:51.948"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:51.733" endtime="20170706 22:20:51.948"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:51.732" endtime="20170706 22:20:51.948"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:51.949">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:20:51.949" endtime="20170706 22:20:51.949"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:51.951">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:20:51.950" endtime="20170706 22:20:51.951"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:51.952">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:20:51.952" endtime="20170706 22:20:51.952"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:51.951" endtime="20170706 22:20:51.952"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:51.950" endtime="20170706 22:20:51.952"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:51.949" endtime="20170706 22:20:51.952"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:52.019">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:20:52.019">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:51.953" endtime="20170706 22:20:52.019"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:52.021">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:20:52.021" endtime="20170706 22:20:52.021"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:52.022">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:20:52.022" endtime="20170706 22:20:52.022"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:52.021" endtime="20170706 22:20:52.023"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:52.020" endtime="20170706 22:20:52.023"></status>
</kw>
<status status="PASS" starttime="20170706 22:20:52.020" endtime="20170706 22:20:52.023"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:52.023">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:20:51.731" endtime="20170706 22:20:52.023"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:20:52.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:20:52.023" endtime="20170706 22:20:52.024"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:20:52.024">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:20:52.024">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:20:52.024">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:20:52.024" endtime="20170706 22:20:52.024"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:52.025">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:20:51.731" endtime="20170706 22:20:52.025"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:20:52.025">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:20:51.730" endtime="20170706 22:20:52.025"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:20:52.026">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:20:52.025" endtime="20170706 22:20:52.026"></status>
</kw>
<status status="FAIL" starttime="20170706 22:20:51.730" endtime="20170706 22:20:52.026"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:02.031">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:21:02.031" endtime="20170706 22:21:02.031"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:02.032">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:21:02.032" endtime="20170706 22:21:02.032"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:02.033">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:21:02.032" endtime="20170706 22:21:02.033"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:02.033">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:21:02.033" endtime="20170706 22:21:02.033"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:02.241">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:21:02.034" endtime="20170706 22:21:02.241"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:02.241">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:21:02.241">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:02.033" endtime="20170706 22:21:02.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:02.242">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:02.241" endtime="20170706 22:21:02.242"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:02.243">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:02.242" endtime="20170706 22:21:02.243"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:02.030" endtime="20170706 22:21:02.243"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:02.030" endtime="20170706 22:21:02.243"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:02.029" endtime="20170706 22:21:02.243"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:02.244">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:21:02.243" endtime="20170706 22:21:02.244"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:02.246">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:21:02.245" endtime="20170706 22:21:02.246"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:02.247">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:21:02.247" endtime="20170706 22:21:02.247"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:02.246" endtime="20170706 22:21:02.247"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:02.245" endtime="20170706 22:21:02.247"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:02.244" endtime="20170706 22:21:02.247"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:02.314">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:21:02.315">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:02.247" endtime="20170706 22:21:02.315"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:02.316">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:21:02.316" endtime="20170706 22:21:02.316"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:02.317">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:21:02.317" endtime="20170706 22:21:02.317"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:02.317" endtime="20170706 22:21:02.317"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:02.315" endtime="20170706 22:21:02.318"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:02.315" endtime="20170706 22:21:02.318"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:02.318">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:02.028" endtime="20170706 22:21:02.318"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:02.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:02.318" endtime="20170706 22:21:02.319"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:02.319">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:21:02.319">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:21:02.319">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:21:02.319" endtime="20170706 22:21:02.319"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:02.320">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:21:02.028" endtime="20170706 22:21:02.320"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:02.320">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:21:02.027" endtime="20170706 22:21:02.320"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:21:02.321">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:21:02.320" endtime="20170706 22:21:02.321"></status>
</kw>
<status status="FAIL" starttime="20170706 22:21:02.026" endtime="20170706 22:21:02.321"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:12.326">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:21:12.326" endtime="20170706 22:21:12.327"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:12.328">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:21:12.327" endtime="20170706 22:21:12.328"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:12.328">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:21:12.328" endtime="20170706 22:21:12.328"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:12.329">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:21:12.329" endtime="20170706 22:21:12.329"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:12.619">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:21:12.330" endtime="20170706 22:21:12.619"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:12.619">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:21:12.619">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:12.329" endtime="20170706 22:21:12.619"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:12.620">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:12.620" endtime="20170706 22:21:12.620"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:12.621">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:12.620" endtime="20170706 22:21:12.621"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:12.325" endtime="20170706 22:21:12.621"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:12.324" endtime="20170706 22:21:12.621"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:12.324" endtime="20170706 22:21:12.621"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:12.622">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:21:12.621" endtime="20170706 22:21:12.622"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:12.624">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:21:12.623" endtime="20170706 22:21:12.624"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:12.625">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:21:12.625" endtime="20170706 22:21:12.625"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:12.624" endtime="20170706 22:21:12.625"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:12.623" endtime="20170706 22:21:12.625"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:12.622" endtime="20170706 22:21:12.625"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:12.692">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:21:12.692">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:12.625" endtime="20170706 22:21:12.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:12.694">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:21:12.693" endtime="20170706 22:21:12.694"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:12.695">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:21:12.695" endtime="20170706 22:21:12.696"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:12.694" endtime="20170706 22:21:12.696"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:12.693" endtime="20170706 22:21:12.696"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:12.693" endtime="20170706 22:21:12.696"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:12.696">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:12.323" endtime="20170706 22:21:12.696"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:12.697">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:12.696" endtime="20170706 22:21:12.697"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:12.698">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:21:12.698">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:21:12.698">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:21:12.697" endtime="20170706 22:21:12.698"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:12.698">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:21:12.322" endtime="20170706 22:21:12.698"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:12.698">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:21:12.322" endtime="20170706 22:21:12.698"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:21:12.699">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:21:12.699" endtime="20170706 22:21:12.699"></status>
</kw>
<status status="FAIL" starttime="20170706 22:21:12.321" endtime="20170706 22:21:12.699"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:22.704">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:21:22.704" endtime="20170706 22:21:22.705"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:22.705">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:21:22.705" endtime="20170706 22:21:22.705"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:22.706">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:21:22.705" endtime="20170706 22:21:22.706"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:22.706">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:21:22.706" endtime="20170706 22:21:22.706"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:22.919">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:21:22.707" endtime="20170706 22:21:22.919"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:22.919">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:21:22.919">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:22.707" endtime="20170706 22:21:22.919"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:22.920">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:22.919" endtime="20170706 22:21:22.920"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:22.921">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:22.920" endtime="20170706 22:21:22.921"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:22.703" endtime="20170706 22:21:22.921"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:22.703" endtime="20170706 22:21:22.921"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:22.702" endtime="20170706 22:21:22.921"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:22.922">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:21:22.922" endtime="20170706 22:21:22.922"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:22.924">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:21:22.923" endtime="20170706 22:21:22.924"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:22.925">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:21:22.925" endtime="20170706 22:21:22.925"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:22.924" endtime="20170706 22:21:22.925"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:22.923" endtime="20170706 22:21:22.925"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:22.922" endtime="20170706 22:21:22.925"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:23.005">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:21:23.006">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:22.926" endtime="20170706 22:21:23.006"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:23.008">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:21:23.007" endtime="20170706 22:21:23.008"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:23.009">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:21:23.008" endtime="20170706 22:21:23.009"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:23.008" endtime="20170706 22:21:23.009"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:23.007" endtime="20170706 22:21:23.009"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:23.006" endtime="20170706 22:21:23.009"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:23.009">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:22.701" endtime="20170706 22:21:23.009"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:23.010">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:23.009" endtime="20170706 22:21:23.010"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:23.010">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:21:23.010">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:21:23.011">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:21:23.010" endtime="20170706 22:21:23.011"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:23.011">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:21:22.701" endtime="20170706 22:21:23.011"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:23.011">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:21:22.701" endtime="20170706 22:21:23.011"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:21:23.012">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:21:23.011" endtime="20170706 22:21:23.012"></status>
</kw>
<status status="FAIL" starttime="20170706 22:21:22.700" endtime="20170706 22:21:23.012"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:33.017">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:21:33.017" endtime="20170706 22:21:33.017"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:33.018">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:21:33.018" endtime="20170706 22:21:33.018"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:33.019">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:21:33.018" endtime="20170706 22:21:33.019"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:33.019">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:21:33.019" endtime="20170706 22:21:33.019"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:33.215">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:21:33.020" endtime="20170706 22:21:33.215"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:33.215">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:21:33.215">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:33.020" endtime="20170706 22:21:33.215"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:33.216">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:33.215" endtime="20170706 22:21:33.216"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:33.216">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:33.216" endtime="20170706 22:21:33.217"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:33.016" endtime="20170706 22:21:33.217"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:33.015" endtime="20170706 22:21:33.217"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:33.015" endtime="20170706 22:21:33.217"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:33.217">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:21:33.217" endtime="20170706 22:21:33.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:33.219">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:21:33.219" endtime="20170706 22:21:33.219"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:33.220">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:21:33.220" endtime="20170706 22:21:33.220"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:33.220" endtime="20170706 22:21:33.221"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:33.218" endtime="20170706 22:21:33.221"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:33.218" endtime="20170706 22:21:33.221"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:33.287">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:21:33.287">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:33.221" endtime="20170706 22:21:33.287"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:33.289">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:21:33.289" endtime="20170706 22:21:33.289"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:33.292">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:21:33.290" endtime="20170706 22:21:33.292"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:33.289" endtime="20170706 22:21:33.292"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:33.288" endtime="20170706 22:21:33.292"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:33.288" endtime="20170706 22:21:33.292"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:33.293">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:33.014" endtime="20170706 22:21:33.293"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:33.293">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:33.293" endtime="20170706 22:21:33.293"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:33.294">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:21:33.294">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:21:33.294">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:21:33.294" endtime="20170706 22:21:33.294"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:33.294">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:21:33.013" endtime="20170706 22:21:33.294"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:33.295">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:21:33.013" endtime="20170706 22:21:33.295"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:21:33.296">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:21:33.295" endtime="20170706 22:21:33.296"></status>
</kw>
<status status="FAIL" starttime="20170706 22:21:33.013" endtime="20170706 22:21:33.296"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:43.301">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:21:43.301" endtime="20170706 22:21:43.301"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:43.302">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:21:43.302" endtime="20170706 22:21:43.302"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:43.303">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:21:43.302" endtime="20170706 22:21:43.303"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:43.303">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:21:43.303" endtime="20170706 22:21:43.303"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:43.496">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:21:43.304" endtime="20170706 22:21:43.496"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:43.497">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:21:43.497">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:43.303" endtime="20170706 22:21:43.497"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:43.497">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:43.497" endtime="20170706 22:21:43.498"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:43.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:43.498" endtime="20170706 22:21:43.498"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:43.300" endtime="20170706 22:21:43.498"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:43.299" endtime="20170706 22:21:43.498"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:43.299" endtime="20170706 22:21:43.499"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:43.499">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:21:43.499" endtime="20170706 22:21:43.499"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:43.501">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:21:43.501" endtime="20170706 22:21:43.502"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:43.502">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:21:43.502" endtime="20170706 22:21:43.502"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:43.502" endtime="20170706 22:21:43.503"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:43.500" endtime="20170706 22:21:43.503"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:43.499" endtime="20170706 22:21:43.503"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:43.570">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:21:43.570">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:43.503" endtime="20170706 22:21:43.570"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:43.572">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:21:43.571" endtime="20170706 22:21:43.572"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:43.573">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:21:43.573" endtime="20170706 22:21:43.573"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:43.572" endtime="20170706 22:21:43.573"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:43.571" endtime="20170706 22:21:43.573"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:43.571" endtime="20170706 22:21:43.573"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:43.574">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:43.298" endtime="20170706 22:21:43.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:43.574">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:43.574" endtime="20170706 22:21:43.574"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:43.575">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:21:43.575">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:21:43.575">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:21:43.574" endtime="20170706 22:21:43.575"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:43.575">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:21:43.298" endtime="20170706 22:21:43.575"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:43.576">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:21:43.297" endtime="20170706 22:21:43.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:21:43.576">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:21:43.576" endtime="20170706 22:21:43.576"></status>
</kw>
<status status="FAIL" starttime="20170706 22:21:43.297" endtime="20170706 22:21:43.576"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:53.581">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:21:53.581" endtime="20170706 22:21:53.582"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:53.583">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:21:53.582" endtime="20170706 22:21:53.583"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:53.584">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:21:53.583" endtime="20170706 22:21:53.584"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:53.585">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:21:53.584" endtime="20170706 22:21:53.585"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:53.767">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:21:53.586" endtime="20170706 22:21:53.767"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:53.767">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:21:53.767">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:53.585" endtime="20170706 22:21:53.767"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:53.768">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:53.768" endtime="20170706 22:21:53.768"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:53.769">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:53.769" endtime="20170706 22:21:53.769"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:53.580" endtime="20170706 22:21:53.769"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:53.580" endtime="20170706 22:21:53.770"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:53.579" endtime="20170706 22:21:53.770"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:53.771">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:21:53.770" endtime="20170706 22:21:53.771"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:53.774">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:21:53.773" endtime="20170706 22:21:53.774"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:53.775">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:21:53.775" endtime="20170706 22:21:53.775"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:53.774" endtime="20170706 22:21:53.775"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:53.772" endtime="20170706 22:21:53.775"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:53.771" endtime="20170706 22:21:53.775"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:53.850">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:21:53.851">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:53.776" endtime="20170706 22:21:53.851"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:53.852">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:21:53.852" endtime="20170706 22:21:53.852"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:53.853">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:21:53.853" endtime="20170706 22:21:53.853"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:53.853" endtime="20170706 22:21:53.854"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:53.851" endtime="20170706 22:21:53.854"></status>
</kw>
<status status="PASS" starttime="20170706 22:21:53.851" endtime="20170706 22:21:53.854"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:53.854">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:21:53.579" endtime="20170706 22:21:53.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:21:53.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:21:53.854" endtime="20170706 22:21:53.855"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:21:53.855">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:21:53.855">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:21:53.855">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:21:53.855" endtime="20170706 22:21:53.855"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:53.856">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:21:53.578" endtime="20170706 22:21:53.856"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:21:53.856">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:21:53.578" endtime="20170706 22:21:53.856"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:21:53.857">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:21:53.856" endtime="20170706 22:21:53.857"></status>
</kw>
<status status="FAIL" starttime="20170706 22:21:53.577" endtime="20170706 22:21:53.857"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:03.862">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:22:03.861" endtime="20170706 22:22:03.862"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:03.863">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:22:03.862" endtime="20170706 22:22:03.863"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:03.863">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:22:03.863" endtime="20170706 22:22:03.863"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:03.864">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:22:03.864" endtime="20170706 22:22:03.864"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:04.133">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:22:03.865" endtime="20170706 22:22:04.133"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:04.134">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:22:04.134">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:03.864" endtime="20170706 22:22:04.134"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:04.134">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:04.134" endtime="20170706 22:22:04.134"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:04.135">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:04.135" endtime="20170706 22:22:04.135"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:03.861" endtime="20170706 22:22:04.136"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:03.861" endtime="20170706 22:22:04.136"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:03.860" endtime="20170706 22:22:04.136"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:04.137">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:22:04.136" endtime="20170706 22:22:04.137"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:04.140">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:22:04.139" endtime="20170706 22:22:04.140"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:04.141">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:22:04.141" endtime="20170706 22:22:04.141"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:04.140" endtime="20170706 22:22:04.142"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:04.138" endtime="20170706 22:22:04.142"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:04.137" endtime="20170706 22:22:04.142"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:04.237">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:22:04.237">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:04.142" endtime="20170706 22:22:04.237"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:04.239">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:22:04.239" endtime="20170706 22:22:04.239"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:04.240">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:22:04.240" endtime="20170706 22:22:04.240"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:04.239" endtime="20170706 22:22:04.240"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:04.238" endtime="20170706 22:22:04.241"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:04.238" endtime="20170706 22:22:04.241"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:04.241">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:03.859" endtime="20170706 22:22:04.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:04.241">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:04.241" endtime="20170706 22:22:04.242"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:04.242">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:22:04.242">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:22:04.242">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:22:04.242" endtime="20170706 22:22:04.243"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:04.243">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:22:03.858" endtime="20170706 22:22:04.243"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:04.243">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:22:03.858" endtime="20170706 22:22:04.243"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:22:04.244">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:22:04.244" endtime="20170706 22:22:04.244"></status>
</kw>
<status status="FAIL" starttime="20170706 22:22:03.857" endtime="20170706 22:22:04.245"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:14.249">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:22:14.249" endtime="20170706 22:22:14.250"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:14.250">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:22:14.250" endtime="20170706 22:22:14.250"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:14.251">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:22:14.250" endtime="20170706 22:22:14.251"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:14.251">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:22:14.251" endtime="20170706 22:22:14.251"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:14.454">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:22:14.252" endtime="20170706 22:22:14.454"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:14.454">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:22:14.454">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:14.252" endtime="20170706 22:22:14.454"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:14.455">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:14.455" endtime="20170706 22:22:14.455"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:14.456">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:14.455" endtime="20170706 22:22:14.456"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:14.248" endtime="20170706 22:22:14.456"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:14.248" endtime="20170706 22:22:14.456"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:14.247" endtime="20170706 22:22:14.456"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:14.457">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:22:14.456" endtime="20170706 22:22:14.457"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:14.460">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:22:14.459" endtime="20170706 22:22:14.460"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:14.461">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:22:14.461" endtime="20170706 22:22:14.461"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:14.460" endtime="20170706 22:22:14.461"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:14.458" endtime="20170706 22:22:14.461"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:14.457" endtime="20170706 22:22:14.461"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:14.529">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:22:14.529">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:14.462" endtime="20170706 22:22:14.529"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:14.531">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:22:14.531" endtime="20170706 22:22:14.531"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:14.532">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:22:14.532" endtime="20170706 22:22:14.532"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:14.531" endtime="20170706 22:22:14.532"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:14.530" endtime="20170706 22:22:14.532"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:14.530" endtime="20170706 22:22:14.532"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:14.533">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:14.247" endtime="20170706 22:22:14.533"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:14.533">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:14.533" endtime="20170706 22:22:14.533"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:14.534">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:22:14.534">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:22:14.534">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:22:14.533" endtime="20170706 22:22:14.534"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:14.534">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:22:14.246" endtime="20170706 22:22:14.534"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:14.535">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:22:14.246" endtime="20170706 22:22:14.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:22:14.535">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:22:14.535" endtime="20170706 22:22:14.535"></status>
</kw>
<status status="FAIL" starttime="20170706 22:22:14.245" endtime="20170706 22:22:14.535"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:24.541">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:22:24.541" endtime="20170706 22:22:24.542"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:24.542">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:22:24.542" endtime="20170706 22:22:24.542"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:24.543">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:22:24.543" endtime="20170706 22:22:24.543"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:24.544">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:22:24.543" endtime="20170706 22:22:24.544"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:24.772">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:22:24.544" endtime="20170706 22:22:24.772"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:24.772">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:22:24.772">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:24.544" endtime="20170706 22:22:24.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:24.773">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:24.772" endtime="20170706 22:22:24.773"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:24.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:24.773" endtime="20170706 22:22:24.773"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:24.540" endtime="20170706 22:22:24.774"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:24.539" endtime="20170706 22:22:24.774"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:24.538" endtime="20170706 22:22:24.774"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:24.774">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:22:24.774" endtime="20170706 22:22:24.774"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:24.777">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:22:24.776" endtime="20170706 22:22:24.777"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:24.777">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:22:24.777" endtime="20170706 22:22:24.778"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:24.777" endtime="20170706 22:22:24.778"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:24.775" endtime="20170706 22:22:24.778"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:24.775" endtime="20170706 22:22:24.778"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:24.848">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:22:24.848">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:24.778" endtime="20170706 22:22:24.848"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:24.850">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:22:24.850" endtime="20170706 22:22:24.850"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:24.851">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:22:24.851" endtime="20170706 22:22:24.852"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:24.850" endtime="20170706 22:22:24.852"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:24.849" endtime="20170706 22:22:24.852"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:24.849" endtime="20170706 22:22:24.852"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:24.852">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:24.538" endtime="20170706 22:22:24.852"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:24.853">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:24.852" endtime="20170706 22:22:24.853"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:24.853">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:22:24.853">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:22:24.853">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:22:24.853" endtime="20170706 22:22:24.854"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:24.854">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:22:24.537" endtime="20170706 22:22:24.854"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:24.854">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:22:24.537" endtime="20170706 22:22:24.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:22:24.855">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:22:24.854" endtime="20170706 22:22:24.855"></status>
</kw>
<status status="FAIL" starttime="20170706 22:22:24.536" endtime="20170706 22:22:24.855"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:34.860">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:22:34.860" endtime="20170706 22:22:34.861"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:34.861">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:22:34.861" endtime="20170706 22:22:34.861"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:34.862">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:22:34.861" endtime="20170706 22:22:34.862"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:34.862">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:22:34.862" endtime="20170706 22:22:34.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:35.162">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:22:34.863" endtime="20170706 22:22:35.162"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:35.162">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:22:35.162">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:34.863" endtime="20170706 22:22:35.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:35.163">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:35.162" endtime="20170706 22:22:35.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:35.163">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:35.163" endtime="20170706 22:22:35.164"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:34.859" endtime="20170706 22:22:35.164"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:34.859" endtime="20170706 22:22:35.164"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:34.858" endtime="20170706 22:22:35.164"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:35.165">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:22:35.164" endtime="20170706 22:22:35.165"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:35.167">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:22:35.166" endtime="20170706 22:22:35.167"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:35.168">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:22:35.168" endtime="20170706 22:22:35.168"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:35.167" endtime="20170706 22:22:35.168"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:35.165" endtime="20170706 22:22:35.168"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:35.165" endtime="20170706 22:22:35.169"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:35.266">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:22:35.266">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:35.169" endtime="20170706 22:22:35.266"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:35.268">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:22:35.267" endtime="20170706 22:22:35.268"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:35.269">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:22:35.269" endtime="20170706 22:22:35.269"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:35.268" endtime="20170706 22:22:35.269"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:35.267" endtime="20170706 22:22:35.269"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:35.266" endtime="20170706 22:22:35.269"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:35.270">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:34.857" endtime="20170706 22:22:35.270"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:35.271">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:35.270" endtime="20170706 22:22:35.271"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:35.272">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:22:35.272">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:22:35.272">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:22:35.271" endtime="20170706 22:22:35.272"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:35.272">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:22:34.857" endtime="20170706 22:22:35.272"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:35.273">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:22:34.856" endtime="20170706 22:22:35.273"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:22:35.273">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:22:35.273" endtime="20170706 22:22:35.273"></status>
</kw>
<status status="FAIL" starttime="20170706 22:22:34.856" endtime="20170706 22:22:35.273"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:45.278">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:22:45.278" endtime="20170706 22:22:45.279"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:45.280">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:22:45.279" endtime="20170706 22:22:45.280"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:45.280">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:22:45.280" endtime="20170706 22:22:45.281"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:45.281">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:22:45.281" endtime="20170706 22:22:45.281"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:45.463">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:22:45.282" endtime="20170706 22:22:45.463"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:45.463">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:22:45.463">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:45.281" endtime="20170706 22:22:45.463"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:45.464">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:45.463" endtime="20170706 22:22:45.464"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:45.464">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:45.464" endtime="20170706 22:22:45.465"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:45.277" endtime="20170706 22:22:45.465"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:45.277" endtime="20170706 22:22:45.465"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:45.276" endtime="20170706 22:22:45.465"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:45.465">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:22:45.465" endtime="20170706 22:22:45.465"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:45.468">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:22:45.467" endtime="20170706 22:22:45.468"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:45.468">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:22:45.468" endtime="20170706 22:22:45.469"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:45.468" endtime="20170706 22:22:45.469"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:45.466" endtime="20170706 22:22:45.469"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:45.466" endtime="20170706 22:22:45.469"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:45.535">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:22:45.536">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:45.469" endtime="20170706 22:22:45.536"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:45.538">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:22:45.537" endtime="20170706 22:22:45.538"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:45.539">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:22:45.538" endtime="20170706 22:22:45.539"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:45.538" endtime="20170706 22:22:45.539"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:45.537" endtime="20170706 22:22:45.539"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:45.536" endtime="20170706 22:22:45.539"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:45.539">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:45.276" endtime="20170706 22:22:45.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:45.540">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:45.540" endtime="20170706 22:22:45.540"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:45.541">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:22:45.541">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:22:45.541">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:22:45.540" endtime="20170706 22:22:45.541"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:45.541">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:22:45.275" endtime="20170706 22:22:45.541"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:45.541">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:22:45.275" endtime="20170706 22:22:45.541"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:22:45.542">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:22:45.542" endtime="20170706 22:22:45.542"></status>
</kw>
<status status="FAIL" starttime="20170706 22:22:45.274" endtime="20170706 22:22:45.542"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:55.548">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:22:55.548" endtime="20170706 22:22:55.548"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:55.549">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:22:55.549" endtime="20170706 22:22:55.549"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:55.550">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:22:55.549" endtime="20170706 22:22:55.550"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:55.550">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:22:55.550" endtime="20170706 22:22:55.550"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:55.762">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:22:55.551" endtime="20170706 22:22:55.762"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:55.762">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:22:55.762">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:55.551" endtime="20170706 22:22:55.762"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:55.763">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:55.763" endtime="20170706 22:22:55.763"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:55.764">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:55.763" endtime="20170706 22:22:55.764"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:55.547" endtime="20170706 22:22:55.764"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:55.547" endtime="20170706 22:22:55.764"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:55.546" endtime="20170706 22:22:55.764"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:55.765">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:22:55.764" endtime="20170706 22:22:55.765"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:55.767">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:22:55.766" endtime="20170706 22:22:55.767"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:55.768">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:22:55.768" endtime="20170706 22:22:55.768"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:55.767" endtime="20170706 22:22:55.768"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:55.765" endtime="20170706 22:22:55.768"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:55.765" endtime="20170706 22:22:55.768"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:55.845">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:22:55.845">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:55.769" endtime="20170706 22:22:55.846"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:55.847">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:22:55.847" endtime="20170706 22:22:55.847"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:55.848">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:22:55.848" endtime="20170706 22:22:55.848"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:55.847" endtime="20170706 22:22:55.848"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:55.846" endtime="20170706 22:22:55.849"></status>
</kw>
<status status="PASS" starttime="20170706 22:22:55.846" endtime="20170706 22:22:55.849"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:55.849">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:22:55.545" endtime="20170706 22:22:55.849"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:22:55.849">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:22:55.849" endtime="20170706 22:22:55.849"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:22:55.850">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:22:55.850">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:22:55.850">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:22:55.850" endtime="20170706 22:22:55.850"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:55.851">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:22:55.544" endtime="20170706 22:22:55.851"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:22:55.851">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:22:55.544" endtime="20170706 22:22:55.851"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:22:55.852">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:22:55.851" endtime="20170706 22:22:55.852"></status>
</kw>
<status status="FAIL" starttime="20170706 22:22:55.543" endtime="20170706 22:22:55.852"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:05.857">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:23:05.857" endtime="20170706 22:23:05.857"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:05.858">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:23:05.858" endtime="20170706 22:23:05.858"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:05.859">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:23:05.858" endtime="20170706 22:23:05.859"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:05.859">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:23:05.859" endtime="20170706 22:23:05.859"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:06.165">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:23:05.860" endtime="20170706 22:23:06.165"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:06.165">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:23:06.165">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:05.860" endtime="20170706 22:23:06.165"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:06.166">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:06.166" endtime="20170706 22:23:06.166"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:06.167">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:06.167" endtime="20170706 22:23:06.167"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:05.856" endtime="20170706 22:23:06.167"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:05.856" endtime="20170706 22:23:06.167"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:05.855" endtime="20170706 22:23:06.167"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:06.168">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:23:06.168" endtime="20170706 22:23:06.168"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:06.170">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:23:06.169" endtime="20170706 22:23:06.170"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:06.171">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:23:06.171" endtime="20170706 22:23:06.171"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:06.170" endtime="20170706 22:23:06.171"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:06.169" endtime="20170706 22:23:06.171"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:06.168" endtime="20170706 22:23:06.171"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:06.238">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:23:06.239">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:06.172" endtime="20170706 22:23:06.239"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:06.240">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:23:06.240" endtime="20170706 22:23:06.240"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:06.241">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:23:06.241" endtime="20170706 22:23:06.241"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:06.240" endtime="20170706 22:23:06.241"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:06.239" endtime="20170706 22:23:06.242"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:06.239" endtime="20170706 22:23:06.242"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:06.242">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:05.854" endtime="20170706 22:23:06.242"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:06.242">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:06.242" endtime="20170706 22:23:06.242"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:06.243">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:23:06.243">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:23:06.243">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:23:06.243" endtime="20170706 22:23:06.243"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:06.244">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:23:05.854" endtime="20170706 22:23:06.244"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:06.244">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:23:05.853" endtime="20170706 22:23:06.244"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:23:06.245">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:23:06.244" endtime="20170706 22:23:06.245"></status>
</kw>
<status status="FAIL" starttime="20170706 22:23:05.852" endtime="20170706 22:23:06.245"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:16.250">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:23:16.250" endtime="20170706 22:23:16.251"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.251">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:23:16.251" endtime="20170706 22:23:16.251"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.252">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:23:16.251" endtime="20170706 22:23:16.252"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.252">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:23:16.252" endtime="20170706 22:23:16.252"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:16.534">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:23:16.253" endtime="20170706 22:23:16.534"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:16.534">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:23:16.534">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:16.253" endtime="20170706 22:23:16.534"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:16.535">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:16.534" endtime="20170706 22:23:16.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:16.535">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:16.535" endtime="20170706 22:23:16.535"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.249" endtime="20170706 22:23:16.536"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.248" endtime="20170706 22:23:16.536"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.248" endtime="20170706 22:23:16.536"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.536">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:23:16.536" endtime="20170706 22:23:16.536"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.539">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:23:16.538" endtime="20170706 22:23:16.539"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:16.539">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:23:16.539" endtime="20170706 22:23:16.540"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.539" endtime="20170706 22:23:16.540"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.537" endtime="20170706 22:23:16.540"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.537" endtime="20170706 22:23:16.540"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.608">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:23:16.608">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:16.540" endtime="20170706 22:23:16.608"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.610">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:23:16.610" endtime="20170706 22:23:16.610"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:16.611">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:23:16.611" endtime="20170706 22:23:16.612"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.610" endtime="20170706 22:23:16.612"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.609" endtime="20170706 22:23:16.612"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.609" endtime="20170706 22:23:16.612"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:16.612">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:16.247" endtime="20170706 22:23:16.612"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:16.613">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:16.612" endtime="20170706 22:23:16.613"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.613">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:23:16.613">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:23:16.613">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:23:16.613" endtime="20170706 22:23:16.613"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:16.614">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:23:16.247" endtime="20170706 22:23:16.614"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:16.614">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:23:16.246" endtime="20170706 22:23:16.614"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:23:16.615">Off != Running</msg>
<status status="FAIL" starttime="20170706 22:23:16.614" endtime="20170706 22:23:16.615"></status>
</kw>
<status status="FAIL" starttime="20170706 22:23:16.245" endtime="20170706 22:23:16.615"></status>
</kw>
<msg level="FAIL" timestamp="20170706 22:23:16.615">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</msg>
<status status="FAIL" starttime="20170706 22:20:12.817" endtime="20170706 22:23:16.615"></status>
</kw>
<status status="FAIL" starttime="20170706 22:20:11.336" endtime="20170706 22:23:16.615"></status>
</kw>
<status status="FAIL" starttime="20170706 22:20:11.335" endtime="20170706 22:23:16.616"></status>
</kw>
<status status="FAIL" starttime="20170706 22:20:11.335" endtime="20170706 22:23:16.616"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:16.621">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:23:16.620" endtime="20170706 22:23:16.621"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.622">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:23:16.621" endtime="20170706 22:23:16.622"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.622">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:23:16.622" endtime="20170706 22:23:16.622"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.623">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:23:16.623" endtime="20170706 22:23:16.623"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:16.804">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:23:16.624" endtime="20170706 22:23:16.804"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:16.804">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:23:16.805">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:16.623" endtime="20170706 22:23:16.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:16.805">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:16.805" endtime="20170706 22:23:16.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:16.806">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:16.806" endtime="20170706 22:23:16.806"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.620" endtime="20170706 22:23:16.806"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.619" endtime="20170706 22:23:16.806"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.619" endtime="20170706 22:23:16.806"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.807">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170706 22:23:16.807" endtime="20170706 22:23:16.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.809">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:23:16.808" endtime="20170706 22:23:16.809"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:16.810">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170706 22:23:16.810" endtime="20170706 22:23:16.810"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.809" endtime="20170706 22:23:16.810"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.808" endtime="20170706 22:23:16.810"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.807" endtime="20170706 22:23:16.811"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.877">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:23:16.877">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:16.811" endtime="20170706 22:23:16.877"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.879">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:23:16.878" endtime="20170706 22:23:16.879"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:16.880">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170706 22:23:16.879" endtime="20170706 22:23:16.880"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.879" endtime="20170706 22:23:16.880"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.878" endtime="20170706 22:23:16.880"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.877" endtime="20170706 22:23:16.880"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:16.880">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:16.618" endtime="20170706 22:23:16.880"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:16.881">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:16.881" endtime="20170706 22:23:16.881"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.882">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:23:16.882">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 22:23:16.882">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170706 22:23:16.881" endtime="20170706 22:23:16.882"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:16.882">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170706 22:23:16.617" endtime="20170706 22:23:16.882"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:16.882">${host_state} = Running</msg>
<status status="PASS" starttime="20170706 22:23:16.617" endtime="20170706 22:23:16.882"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:23:16.884">Running != Quiesced</msg>
<status status="FAIL" starttime="20170706 22:23:16.883" endtime="20170706 22:23:16.884"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:16.884">${status} = False</msg>
<status status="PASS" starttime="20170706 22:23:16.883" endtime="20170706 22:23:16.884"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:16.884">${status} = False</msg>
<status status="PASS" starttime="20170706 22:23:16.617" endtime="20170706 22:23:16.884"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:16.921">Length is 9</msg>
<status status="PASS" starttime="20170706 22:23:16.921" endtime="20170706 22:23:16.921"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:16.928">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170706 22:23:19.936">${RC} = 0</msg>
<msg level="INFO" timestamp="20170706 22:23:19.937">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.792 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.18 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status status="PASS" starttime="20170706 22:23:16.921" endtime="20170706 22:23:19.937"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:19.951">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.792 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.18 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.626 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=1.08 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.626/0.921/1.182/0.222 ms</msg>
<status status="PASS" starttime="20170706 22:23:19.948" endtime="20170706 22:23:19.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:19.951" endtime="20170706 22:23:19.952"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.920" endtime="20170706 22:23:19.952"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:19.985">${cur_time} = 2017-07-06 22:23:19:985134</msg>
<status status="PASS" starttime="20170706 22:23:19.985" endtime="20170706 22:23:19.985"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:19.986">${cur_time} = 20170706222319985134</msg>
<status status="PASS" starttime="20170706 22:23:19.986" endtime="20170706 22:23:19.986"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:19.984" endtime="20170706 22:23:19.986"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:19.987">${FFDC_TIME} = 20170706222319985134</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:19.998">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170706 22:23:19.997" endtime="20170706 22:23:19.998"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:19.998">${suite_name} = 20170706222319985134_TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170706 22:23:19.998" endtime="20170706 22:23:19.998"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:19.999">${test_name} = PowerOnTest</msg>
<status status="PASS" starttime="20170706 22:23:19.999" endtime="20170706 22:23:19.999"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:20.000">${test_name} = 20170706222319985134_PowerOnTest</msg>
<status status="PASS" starttime="20170706 22:23:19.999" endtime="20170706 22:23:20.000"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:19.997" endtime="20170706 22:23:20.000"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:20.000">${FFDC_DIR_PATH} = /tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170706 22:23:20.001">${FFDC_PREFIX} = 20170706222319985134_</msg>
<msg level="INFO" timestamp="20170706 22:23:20.031">${LOG_PREFIX} = /tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.033" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:20.032" endtime="20170706 22:23:20.033"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:20.039">${FFDC_FILE_PATH} = /tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.067" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:20.067" endtime="20170706 22:23:20.067"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.066" endtime="20170706 22:23:20.068"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.071" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:20.071" endtime="20170706 22:23:20.071"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.068" endtime="20170706 22:23:20.072"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.073" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:20.073" endtime="20170706 22:23:20.073"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.072" endtime="20170706 22:23:20.074"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.075" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:20.075" endtime="20170706 22:23:20.075"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.074" endtime="20170706 22:23:20.075"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.076" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:20.076" endtime="20170706 22:23:20.076"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.075" endtime="20170706 22:23:20.077"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.078" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:20.077" endtime="20170706 22:23:20.078"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.077" endtime="20170706 22:23:20.078"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.079" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:20.079" endtime="20170706 22:23:20.079"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.078" endtime="20170706 22:23:20.079"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.081" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:20.080" endtime="20170706 22:23:20.081"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.079" endtime="20170706 22:23:20.081"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.082" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:20.081" endtime="20170706 22:23:20.082"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.081" endtime="20170706 22:23:20.082"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.083" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:20.083" endtime="20170706 22:23:20.084"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.082" endtime="20170706 22:23:20.084"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.085" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:20.084" endtime="20170706 22:23:20.085"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.084" endtime="20170706 22:23:20.085"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.086" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:20.086" endtime="20170706 22:23:20.086"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.085" endtime="20170706 22:23:20.086"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.087" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:20.087" endtime="20170706 22:23:20.088"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.086" endtime="20170706 22:23:20.088"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:23:20.090">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170706 22:23:20.090" endtime="20170706 22:23:20.090"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:20.090">${has_host} = False</msg>
<status status="PASS" starttime="20170706 22:23:20.089" endtime="20170706 22:23:20.090"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:20.091" endtime="20170706 22:23:20.092"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.091" endtime="20170706 22:23:20.092"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:20.093">${port_num} = 22</msg>
<status status="PASS" starttime="20170706 22:23:20.093" endtime="20170706 22:23:20.093"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:20.094">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170706 22:23:20.094" endtime="20170706 22:23:20.094"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:20.094">${https_num} = 443</msg>
<status status="PASS" starttime="20170706 22:23:20.094" endtime="20170706 22:23:20.094"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.095">${AUTH_URI} = https://9.3.21.61:443</msg>
<status status="PASS" starttime="20170706 22:23:20.095" endtime="20170706 22:23:20.095"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.092" endtime="20170706 22:23:20.095"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.092" endtime="20170706 22:23:20.095"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:23:20.096">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170706 22:23:20.096" endtime="20170706 22:23:20.096"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:20.097">${has_port} = False</msg>
<status status="PASS" starttime="20170706 22:23:20.096" endtime="20170706 22:23:20.097"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:20.098" endtime="20170706 22:23:20.098"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:20.099" endtime="20170706 22:23:20.099"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.098" endtime="20170706 22:23:20.099"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.097" endtime="20170706 22:23:20.099"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:20.100">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 22:23:21.759">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170706 22:23:20.100" endtime="20170706 22:23:21.759"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.088" endtime="20170706 22:23:21.759"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:21.760">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170706 22:23:21.837">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 22:23:21.837">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170706 22:23:21.837">${stderr} = </msg>
<status status="PASS" starttime="20170706 22:23:21.760" endtime="20170706 22:23:21.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:21.838">Length is 0</msg>
<status status="PASS" starttime="20170706 22:23:21.838" endtime="20170706 22:23:21.838"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:21.838">Length is 11</msg>
<status status="PASS" starttime="20170706 22:23:21.838" endtime="20170706 22:23:21.839"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:21.839">${model_name} = Witherspoon</msg>
<status status="PASS" starttime="20170706 22:23:20.088" endtime="20170706 22:23:21.839"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:21.841" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:21.840" endtime="20170706 22:23:21.842"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.839" endtime="20170706 22:23:21.842"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.082" endtime="20170706 22:23:21.842"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:21.843" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:21.843" endtime="20170706 22:23:21.843"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.842" endtime="20170706 22:23:21.843"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:21.844">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20170706 22:23:21.844" endtime="20170706 22:23:21.844"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:21.845" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:21.845" endtime="20170706 22:23:21.846"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.844" endtime="20170706 22:23:21.846"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:21.847" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:21.846" endtime="20170706 22:23:21.847"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.846" endtime="20170706 22:23:21.847"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.844" endtime="20170706 22:23:21.847"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:21.848" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:21.848" endtime="20170706 22:23:21.848"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.847" endtime="20170706 22:23:21.849"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:21.850" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:21.849" endtime="20170706 22:23:21.850"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.849" endtime="20170706 22:23:21.850"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.847" endtime="20170706 22:23:21.850"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:21.851" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:21.851" endtime="20170706 22:23:21.851"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.850" endtime="20170706 22:23:21.851"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:21.853" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:21.852" endtime="20170706 22:23:21.853"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.851" endtime="20170706 22:23:21.853"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.850" endtime="20170706 22:23:21.853"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.844" endtime="20170706 22:23:21.853"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:21.854" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:21.854" endtime="20170706 22:23:21.854"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.853" endtime="20170706 22:23:21.854"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:20.066" endtime="20170706 22:23:21.854"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:21.864">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" starttime="20170706 22:23:21.864" endtime="20170706 22:23:21.864"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:21.866">@{method_list} = [ ('SEL Log', 'Collect eSEL Log') | ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files...</msg>
<status status="PASS" starttime="20170706 22:23:21.865" endtime="20170706 22:23:21.866"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:21.867" endtime="20170706 22:23:21.867"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:21.867">@{ffdc_function_list} = [ SEL Log | BMC Specific Files | Get Request FFDC | FFDC Generic Report | OS FFDC | Core Files ]</msg>
<status status="PASS" starttime="20170706 22:23:21.866" endtime="20170706 22:23:21.867"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:21.869" endtime="20170706 22:23:21.870"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:21.870">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:23:21.870">${ret_values} = None</msg>
<status status="PASS" starttime="20170706 22:23:21.869" endtime="20170706 22:23:21.870"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:21.870" endtime="20170706 22:23:21.870"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:21.918">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:23:21.918" endtime="20170706 22:23:21.919"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:21.920">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:23:21.919" endtime="20170706 22:23:21.920"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:21.920">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:23:21.920" endtime="20170706 22:23:21.920"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:21.921">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:23:21.920" endtime="20170706 22:23:21.921"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:22.120">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:23:21.922" endtime="20170706 22:23:22.121"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:22.121">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:23:22.121">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:21.921" endtime="20170706 22:23:22.121"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:22.121">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:22.121" endtime="20170706 22:23:22.121"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:22.122">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:22.122" endtime="20170706 22:23:22.122"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.917" endtime="20170706 22:23:22.122"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.917" endtime="20170706 22:23:22.122"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.916" endtime="20170706 22:23:22.122"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:22.123">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" starttime="20170706 22:23:22.123" endtime="20170706 22:23:22.123"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:22.123" endtime="20170706 22:23:22.124"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:22.186">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:23:22.186">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:22.124" endtime="20170706 22:23:22.186"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:22.186" endtime="20170706 22:23:22.187"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:22.187">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:21.916" endtime="20170706 22:23:22.187"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:22.188">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170706 22:23:22.188">404 != 200</msg>
<status status="FAIL" starttime="20170706 22:23:22.188" endtime="20170706 22:23:22.188"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:22.188">${status} = False</msg>
<status status="PASS" starttime="20170706 22:23:22.187" endtime="20170706 22:23:22.188"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:22.189">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170706 22:23:22.189" endtime="20170706 22:23:22.189"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.915" endtime="20170706 22:23:22.189"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.871" endtime="20170706 22:23:22.189"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.868" endtime="20170706 22:23:22.189"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.868" endtime="20170706 22:23:22.189"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:22.191" endtime="20170706 22:23:22.191"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:22.191">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:23:22.191">${ret_values} = None</msg>
<status status="PASS" starttime="20170706 22:23:22.190" endtime="20170706 22:23:22.191"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:22.192" endtime="20170706 22:23:22.192"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:23:22.236">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170706 22:23:22.235" endtime="20170706 22:23:22.236"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:22.236">${has_host} = False</msg>
<status status="PASS" starttime="20170706 22:23:22.235" endtime="20170706 22:23:22.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:22.237" endtime="20170706 22:23:22.237"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:22.236" endtime="20170706 22:23:22.237"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:22.239">${port_num} = 22</msg>
<status status="PASS" starttime="20170706 22:23:22.239" endtime="20170706 22:23:22.239"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:22.240">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170706 22:23:22.239" endtime="20170706 22:23:22.240"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:22.240">${https_num} = 443</msg>
<status status="PASS" starttime="20170706 22:23:22.240" endtime="20170706 22:23:22.240"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:22.241">${AUTH_URI} = https://9.3.21.61:443</msg>
<status status="PASS" starttime="20170706 22:23:22.241" endtime="20170706 22:23:22.241"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:22.238" endtime="20170706 22:23:22.241"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:22.238" endtime="20170706 22:23:22.242"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:23:22.243">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170706 22:23:22.242" endtime="20170706 22:23:22.243"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:22.243">${has_port} = False</msg>
<status status="PASS" starttime="20170706 22:23:22.242" endtime="20170706 22:23:22.243"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:22.245" endtime="20170706 22:23:22.246"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:22.246" endtime="20170706 22:23:22.247"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:22.245" endtime="20170706 22:23:22.247"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:22.244" endtime="20170706 22:23:22.247"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:22.248">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 22:23:23.960">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170706 22:23:22.247" endtime="20170706 22:23:23.960"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:22.232" endtime="20170706 22:23:23.960"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:23.961">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" starttime="20170706 22:23:23.961" endtime="20170706 22:23:23.961"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:23.962">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_list', 'top -n 1 -b') ]</msg>
<status status="PASS" starttime="20170706 22:23:23.962" endtime="20170706 22:23:23.962"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:23.963">${logpath} = /tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_meminfo.txt</msg>
<status status="PASS" starttime="20170706 22:23:23.963" endtime="20170706 22:23:23.964"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:23.964" endtime="20170706 22:23:23.965"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:23.965">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170706 22:23:24.022">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 22:23:24.022">${stdout} = MemTotal:         432332 kB
MemFree:          274872 kB
MemAvailable:     319276 kB
Buffers:           10932 kB
Cached:            51076 kB
SwapCached:            0 kB
Active:           104732 kB
Inac...</msg>
<msg level="INFO" timestamp="20170706 22:23:24.022">${stderr} = </msg>
<status status="PASS" starttime="20170706 22:23:23.965" endtime="20170706 22:23:24.023"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:24.029" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_meminfo.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:24.028" endtime="20170706 22:23:24.029"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:24.028" endtime="20170706 22:23:24.029"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:24.023" endtime="20170706 22:23:24.029"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:23.964" endtime="20170706 22:23:24.029"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:23.963" endtime="20170706 22:23:24.029"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:24.030">${logpath} = /tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_journalctl.txt</msg>
<status status="PASS" starttime="20170706 22:23:24.030" endtime="20170706 22:23:24.030"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:24.031" endtime="20170706 22:23:24.031"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:24.032">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170706 22:23:27.001">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 22:23:27.003">${stdout} = -- Logs begin at Thu 2017-07-06 22:08:39 UTC, end at Thu 2017-07-06 22:23:23 UTC. --
Jul 06 22:08:39 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 06 22:08:39 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170706 22:23:27.004">${stderr} = </msg>
<status status="PASS" starttime="20170706 22:23:24.032" endtime="20170706 22:23:27.004"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:27.014" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_journalctl.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:27.011" endtime="20170706 22:23:27.014"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.009" endtime="20170706 22:23:27.015"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.004" endtime="20170706 22:23:27.015"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:24.030" endtime="20170706 22:23:27.015"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:24.029" endtime="20170706 22:23:27.015"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:27.016">${logpath} = /tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_dmesg.txt</msg>
<status status="PASS" starttime="20170706 22:23:27.015" endtime="20170706 22:23:27.016"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:27.017" endtime="20170706 22:23:27.017"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:27.018">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170706 22:23:27.146">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 22:23:27.147">${stdout} = [    6.360000] jffs2: notice: (513) jffs2_build_xattr_subsystem: complete building xattr subsystem, 0 of xdatum (0 unchecked, 0 orphan) and 0 of xref (0 dead, 0 orphan) found.
[    8.600000] systemd[1...</msg>
<msg level="INFO" timestamp="20170706 22:23:27.147">${stderr} = </msg>
<status status="PASS" starttime="20170706 22:23:27.018" endtime="20170706 22:23:27.147"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:27.154" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_dmesg.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:27.153" endtime="20170706 22:23:27.154"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.152" endtime="20170706 22:23:27.154"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.147" endtime="20170706 22:23:27.154"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.016" endtime="20170706 22:23:27.154"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.015" endtime="20170706 22:23:27.154"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:27.155">${logpath} = /tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_procinfo.txt</msg>
<status status="PASS" starttime="20170706 22:23:27.154" endtime="20170706 22:23:27.155"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:27.157" endtime="20170706 22:23:27.157"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:27.158">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170706 22:23:27.275">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 22:23:27.275">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170706 22:23:27.275">${stderr} = </msg>
<status status="PASS" starttime="20170706 22:23:27.157" endtime="20170706 22:23:27.275"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:27.281" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_procinfo.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:27.281" endtime="20170706 22:23:27.281"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.280" endtime="20170706 22:23:27.282"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.275" endtime="20170706 22:23:27.282"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.155" endtime="20170706 22:23:27.282"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.154" endtime="20170706 22:23:27.282"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:27.283">${logpath} = /tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_proc_list.txt</msg>
<status status="PASS" starttime="20170706 22:23:27.282" endtime="20170706 22:23:27.283"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:27.283" endtime="20170706 22:23:27.284"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:27.284">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170706 22:23:27.615">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 22:23:27.615">${stdout} = Mem: 157616K used, 274716K free, 14684K shrd, 10932K buff, 51084K cached
CPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.34 0.73 0.80 1/143 1884
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170706 22:23:27.615">${stderr} = </msg>
<status status="PASS" starttime="20170706 22:23:27.284" endtime="20170706 22:23:27.615"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:27.621" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_proc_list.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:27.621" endtime="20170706 22:23:27.622"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.620" endtime="20170706 22:23:27.622"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.615" endtime="20170706 22:23:27.622"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.283" endtime="20170706 22:23:27.622"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.282" endtime="20170706 22:23:27.622"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:23.963" endtime="20170706 22:23:27.622"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:23.962" endtime="20170706 22:23:27.622"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:23.961" endtime="20170706 22:23:27.622"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:23.961" endtime="20170706 22:23:27.622"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:22.231" endtime="20170706 22:23:27.622"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:22.192" endtime="20170706 22:23:27.622"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:22.190" endtime="20170706 22:23:27.622"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:22.189" endtime="20170706 22:23:27.622"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:27.624" endtime="20170706 22:23:27.624"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:27.624">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:23:27.624">${ret_values} = None</msg>
<status status="PASS" starttime="20170706 22:23:27.624" endtime="20170706 22:23:27.624"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:27.625" endtime="20170706 22:23:27.625"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:23:27.669">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170706 22:23:27.668" endtime="20170706 22:23:27.669"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:27.669">${has_host} = False</msg>
<status status="PASS" starttime="20170706 22:23:27.668" endtime="20170706 22:23:27.669"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:27.670" endtime="20170706 22:23:27.670"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.669" endtime="20170706 22:23:27.670"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:27.671">${port_num} = 22</msg>
<status status="PASS" starttime="20170706 22:23:27.671" endtime="20170706 22:23:27.672"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:27.672">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170706 22:23:27.672" endtime="20170706 22:23:27.672"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:27.673">${https_num} = 443</msg>
<status status="PASS" starttime="20170706 22:23:27.672" endtime="20170706 22:23:27.673"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:27.674">${AUTH_URI} = https://9.3.21.61:443</msg>
<status status="PASS" starttime="20170706 22:23:27.673" endtime="20170706 22:23:27.674"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.671" endtime="20170706 22:23:27.674"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.670" endtime="20170706 22:23:27.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:23:27.675">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170706 22:23:27.674" endtime="20170706 22:23:27.675"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:27.675">${has_port} = False</msg>
<status status="PASS" starttime="20170706 22:23:27.674" endtime="20170706 22:23:27.675"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:27.676" endtime="20170706 22:23:27.677"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:27.677" endtime="20170706 22:23:27.677"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.676" endtime="20170706 22:23:27.677"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.675" endtime="20170706 22:23:27.677"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:27.678">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 22:23:29.427">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170706 22:23:27.678" endtime="20170706 22:23:29.427"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.667" endtime="20170706 22:23:29.427"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.428">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" starttime="20170706 22:23:29.428" endtime="20170706 22:23:29.428"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.430">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/...</msg>
<status status="PASS" starttime="20170706 22:23:29.429" endtime="20170706 22:23:29.430"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.431">${logpath} = /tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_elog.txt</msg>
<status status="PASS" starttime="20170706 22:23:29.430" endtime="20170706 22:23:29.431"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:29.434">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:23:29.433" endtime="20170706 22:23:29.434"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.435">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:23:29.435" endtime="20170706 22:23:29.435"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.436">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:23:29.435" endtime="20170706 22:23:29.436"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.437">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:23:29.436" endtime="20170706 22:23:29.437"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:29.618">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:23:29.437" endtime="20170706 22:23:29.618"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:29.618">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:23:29.618">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:29.437" endtime="20170706 22:23:29.618"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:29.619">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:29.619" endtime="20170706 22:23:29.619"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:29.620">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:29.619" endtime="20170706 22:23:29.620"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.433" endtime="20170706 22:23:29.620"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.432" endtime="20170706 22:23:29.620"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.432" endtime="20170706 22:23:29.620"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.621">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" starttime="20170706 22:23:29.620" endtime="20170706 22:23:29.621"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:29.621" endtime="20170706 22:23:29.621"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.670">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:23:29.670">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:29.622" endtime="20170706 22:23:29.670"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:29.671" endtime="20170706 22:23:29.671"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:29.671">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:29.431" endtime="20170706 22:23:29.671"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:29.672">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170706 22:23:29.673">404 != 200</msg>
<status status="FAIL" starttime="20170706 22:23:29.672" endtime="20170706 22:23:29.673"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:29.673">${status} = False</msg>
<status status="PASS" starttime="20170706 22:23:29.672" endtime="20170706 22:23:29.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170706 22:23:29.674">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170706 22:23:29.674" endtime="20170706 22:23:29.674"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.673" endtime="20170706 22:23:29.674"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.430" endtime="20170706 22:23:29.674"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.675">${logpath} = /tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_record_log.txt</msg>
<status status="PASS" starttime="20170706 22:23:29.674" endtime="20170706 22:23:29.675"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:29.678">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:23:29.678" endtime="20170706 22:23:29.678"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.679">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:23:29.679" endtime="20170706 22:23:29.679"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.680">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:23:29.679" endtime="20170706 22:23:29.680"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.680">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:23:29.680" endtime="20170706 22:23:29.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:29.870">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:23:29.681" endtime="20170706 22:23:29.870"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:29.870">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:23:29.870">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:29.681" endtime="20170706 22:23:29.870"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:29.871">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:29.871" endtime="20170706 22:23:29.871"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:29.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:29.872" endtime="20170706 22:23:29.872"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.677" endtime="20170706 22:23:29.872"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.676" endtime="20170706 22:23:29.872"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.676" endtime="20170706 22:23:29.872"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.873">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" starttime="20170706 22:23:29.873" endtime="20170706 22:23:29.873"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:29.873" endtime="20170706 22:23:29.874"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.920">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:23:29.920">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:29.874" endtime="20170706 22:23:29.920"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:29.920" endtime="20170706 22:23:29.921"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:29.921">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:29.675" endtime="20170706 22:23:29.921"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:29.922">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170706 22:23:29.922">404 != 200</msg>
<status status="FAIL" starttime="20170706 22:23:29.922" endtime="20170706 22:23:29.922"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:29.922">${status} = False</msg>
<status status="PASS" starttime="20170706 22:23:29.921" endtime="20170706 22:23:29.922"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170706 22:23:29.924">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170706 22:23:29.923" endtime="20170706 22:23:29.924"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.923" endtime="20170706 22:23:29.924"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.674" endtime="20170706 22:23:29.924"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.925">${logpath} = /tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_sensor_list.txt</msg>
<status status="PASS" starttime="20170706 22:23:29.924" endtime="20170706 22:23:29.925"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:29.928">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:23:29.928" endtime="20170706 22:23:29.929"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.929">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:23:29.929" endtime="20170706 22:23:29.929"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.930">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:23:29.930" endtime="20170706 22:23:29.930"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:29.931">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:23:29.930" endtime="20170706 22:23:29.931"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:30.144">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:23:29.931" endtime="20170706 22:23:30.144"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:30.144">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:23:30.145">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:29.931" endtime="20170706 22:23:30.145"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:30.145">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:30.145" endtime="20170706 22:23:30.145"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:30.146">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:30.146" endtime="20170706 22:23:30.146"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.927" endtime="20170706 22:23:30.146"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.927" endtime="20170706 22:23:30.146"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.926" endtime="20170706 22:23:30.146"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:30.147">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" starttime="20170706 22:23:30.147" endtime="20170706 22:23:30.147"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:30.148" endtime="20170706 22:23:30.148"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:30.383">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:23:30.383">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:30.148" endtime="20170706 22:23:30.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:30.383" endtime="20170706 22:23:30.384"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:30.384">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:29.925" endtime="20170706 22:23:30.384"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:30.385">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:30.385" endtime="20170706 22:23:30.385"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:30.385">${status} = True</msg>
<status status="PASS" starttime="20170706 22:23:30.384" endtime="20170706 22:23:30.385"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:30.385" endtime="20170706 22:23:30.386"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:30.387">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 1
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:23:30.387">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170706 22:23:30.387">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 1
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" starttime="20170706 22:23:30.386" endtime="20170706 22:23:30.387"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:30.388" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_sensor_list.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:30.388" endtime="20170706 22:23:30.389"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:30.387" endtime="20170706 22:23:30.389"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.924" endtime="20170706 22:23:30.389"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:30.390">${logpath} = /tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_inventory.txt</msg>
<status status="PASS" starttime="20170706 22:23:30.389" endtime="20170706 22:23:30.390"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:30.393">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:23:30.392" endtime="20170706 22:23:30.393"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:30.393">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:23:30.393" endtime="20170706 22:23:30.394"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:30.394">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:23:30.394" endtime="20170706 22:23:30.394"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:30.395">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:23:30.394" endtime="20170706 22:23:30.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:30.668">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:23:30.395" endtime="20170706 22:23:30.669"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:30.669">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:23:30.669">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:30.395" endtime="20170706 22:23:30.669"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:30.670">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:30.669" endtime="20170706 22:23:30.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:30.670">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:30.670" endtime="20170706 22:23:30.670"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:30.392" endtime="20170706 22:23:30.671"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:30.391" endtime="20170706 22:23:30.671"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:30.390" endtime="20170706 22:23:30.671"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:30.671">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" starttime="20170706 22:23:30.671" endtime="20170706 22:23:30.671"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:30.672" endtime="20170706 22:23:30.672"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:32.518">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:23:32.518">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:30.672" endtime="20170706 22:23:32.518"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:32.519" endtime="20170706 22:23:32.519"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:32.519">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:30.390" endtime="20170706 22:23:32.519"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:32.520">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:32.520" endtime="20170706 22:23:32.521"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:32.521">${status} = True</msg>
<status status="PASS" starttime="20170706 22:23:32.520" endtime="20170706 22:23:32.521"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:32.521" endtime="20170706 22:23:32.521"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:32.524">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "8335-GTC", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "13186FA"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK614         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "YL30UF759004    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933820456", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817667", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbd9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b8a5", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b974", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbab", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7e64d", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbcf", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 22:23:32.525">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170706 22:23:32.525">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status status="PASS" starttime="20170706 22:23:32.521" endtime="20170706 22:23:32.525"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:32.527" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_inventory.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:32.526" endtime="20170706 22:23:32.527"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.525" endtime="20170706 22:23:32.527"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:30.389" endtime="20170706 22:23:32.527"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:32.528">${logpath} = /tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_led.txt</msg>
<status status="PASS" starttime="20170706 22:23:32.527" endtime="20170706 22:23:32.528"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:32.531">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170706 22:23:32.530" endtime="20170706 22:23:32.531"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:32.532">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170706 22:23:32.532" endtime="20170706 22:23:32.532"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:32.533">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170706 22:23:32.532" endtime="20170706 22:23:32.533"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:32.534">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170706 22:23:32.533" endtime="20170706 22:23:32.534"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:32.715">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170706 22:23:32.535" endtime="20170706 22:23:32.715"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:32.715">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:23:32.715">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:32.534" endtime="20170706 22:23:32.715"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:32.716">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:32.715" endtime="20170706 22:23:32.716"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:32.716">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170706 22:23:32.716" endtime="20170706 22:23:32.717"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.529" endtime="20170706 22:23:32.717"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.529" endtime="20170706 22:23:32.717"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.528" endtime="20170706 22:23:32.717"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:32.717">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" starttime="20170706 22:23:32.717" endtime="20170706 22:23:32.717"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:32.718" endtime="20170706 22:23:32.718"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:32.764">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 22:23:32.764">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:32.718" endtime="20170706 22:23:32.764"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:32.764" endtime="20170706 22:23:32.765"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:32.765">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170706 22:23:32.528" endtime="20170706 22:23:32.765"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:32.766">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170706 22:23:32.766">404 != 200</msg>
<status status="FAIL" starttime="20170706 22:23:32.766" endtime="20170706 22:23:32.766"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:32.766">${status} = False</msg>
<status status="PASS" starttime="20170706 22:23:32.765" endtime="20170706 22:23:32.766"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170706 22:23:32.767">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170706 22:23:32.767" endtime="20170706 22:23:32.767"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.767" endtime="20170706 22:23:32.767"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.527" endtime="20170706 22:23:32.767"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.430" endtime="20170706 22:23:32.768"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.429" endtime="20170706 22:23:32.768"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.429" endtime="20170706 22:23:32.768"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:29.428" endtime="20170706 22:23:32.768"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.667" endtime="20170706 22:23:32.768"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.625" endtime="20170706 22:23:32.768"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.623" endtime="20170706 22:23:32.768"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:27.623" endtime="20170706 22:23:32.768"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:32.771" endtime="20170706 22:23:32.771"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:32.771">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:23:32.771">${ret_values} = None</msg>
<status status="PASS" starttime="20170706 22:23:32.770" endtime="20170706 22:23:32.771"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:32.772" endtime="20170706 22:23:32.772"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:23:32.819">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170706 22:23:32.819" endtime="20170706 22:23:32.819"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:32.819">${has_host} = False</msg>
<status status="PASS" starttime="20170706 22:23:32.818" endtime="20170706 22:23:32.819"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:32.820" endtime="20170706 22:23:32.821"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.819" endtime="20170706 22:23:32.821"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:32.823">${port_num} = 22</msg>
<status status="PASS" starttime="20170706 22:23:32.823" endtime="20170706 22:23:32.823"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:32.823">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170706 22:23:32.823" endtime="20170706 22:23:32.824"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:32.824">${https_num} = 443</msg>
<status status="PASS" starttime="20170706 22:23:32.824" endtime="20170706 22:23:32.824"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:32.825">${AUTH_URI} = https://9.3.21.61:443</msg>
<status status="PASS" starttime="20170706 22:23:32.824" endtime="20170706 22:23:32.825"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.822" endtime="20170706 22:23:32.825"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.822" endtime="20170706 22:23:32.825"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:23:32.826">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170706 22:23:32.826" endtime="20170706 22:23:32.826"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:32.826">${has_port} = False</msg>
<status status="PASS" starttime="20170706 22:23:32.825" endtime="20170706 22:23:32.826"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:32.828" endtime="20170706 22:23:32.828"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:32.828" endtime="20170706 22:23:32.829"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.827" endtime="20170706 22:23:32.829"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.827" endtime="20170706 22:23:32.829"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:32.830">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 22:23:34.681">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170706 22:23:32.829" endtime="20170706 22:23:34.681"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.817" endtime="20170706 22:23:34.682"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:34.682">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20170706 22:23:34.682" endtime="20170706 22:23:34.682"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:34.684">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') ]</msg>
<status status="PASS" starttime="20170706 22:23:34.683" endtime="20170706 22:23:34.684"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:34.688">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" starttime="20170706 22:23:34.684" endtime="20170706 22:23:34.688"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:34.691" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:34.691" endtime="20170706 22:23:34.692"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.690" endtime="20170706 22:23:34.692"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:34.693" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:34.693" endtime="20170706 22:23:34.693"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.692" endtime="20170706 22:23:34.693"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:34.695" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:34.695" endtime="20170706 22:23:34.695"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.694" endtime="20170706 22:23:34.695"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:34.696" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:34.696" endtime="20170706 22:23:34.696"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.695" endtime="20170706 22:23:34.697"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.690" endtime="20170706 22:23:34.697"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.690" endtime="20170706 22:23:34.697"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:34.697">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170706 22:23:34.754">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 22:23:34.754">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<msg level="INFO" timestamp="20170706 22:23:34.754">${stderr} = </msg>
<status status="PASS" starttime="20170706 22:23:34.697" endtime="20170706 22:23:34.754"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:34.761" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:34.761" endtime="20170706 22:23:34.761"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.760" endtime="20170706 22:23:34.761"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.755" endtime="20170706 22:23:34.762"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.689" endtime="20170706 22:23:34.762"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.689" endtime="20170706 22:23:34.762"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:34.765" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:34.764" endtime="20170706 22:23:34.765"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.764" endtime="20170706 22:23:34.765"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:34.766" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:34.766" endtime="20170706 22:23:34.766"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.765" endtime="20170706 22:23:34.766"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:34.767" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:34.767" endtime="20170706 22:23:34.767"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.766" endtime="20170706 22:23:34.768"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:34.769" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:34.768" endtime="20170706 22:23:34.769"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.768" endtime="20170706 22:23:34.769"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.763" endtime="20170706 22:23:34.769"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.763" endtime="20170706 22:23:34.769"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:34.769">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170706 22:23:34.918">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 22:23:34.918">${stdout} = Linux witherspoon 4.10.17-990f06c35b7e119f00967e90f0514dbbd2e1b51b #1 Thu Jul 6 19:21:19 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170706 22:23:34.918">${stderr} = </msg>
<status status="PASS" starttime="20170706 22:23:34.769" endtime="20170706 22:23:34.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:34.925" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:34.924" endtime="20170706 22:23:34.925"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.923" endtime="20170706 22:23:34.925"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.919" endtime="20170706 22:23:34.925"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.762" endtime="20170706 22:23:34.925"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.762" endtime="20170706 22:23:34.925"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:34.928" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:34.928" endtime="20170706 22:23:34.928"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.927" endtime="20170706 22:23:34.928"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:34.930" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:34.929" endtime="20170706 22:23:34.930"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.928" endtime="20170706 22:23:34.930"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:34.931" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:34.931" endtime="20170706 22:23:34.931"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.930" endtime="20170706 22:23:34.931"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:34.932" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:34.932" endtime="20170706 22:23:34.932"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.931" endtime="20170706 22:23:34.933"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.927" endtime="20170706 22:23:34.933"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.926" endtime="20170706 22:23:34.933"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:34.933">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170706 22:23:35.018">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 22:23:35.018">${stdout} =  22:23:35 up 15 min,  load average: 0.47, 0.75, 0.80</msg>
<msg level="INFO" timestamp="20170706 22:23:35.018">${stderr} = </msg>
<status status="PASS" starttime="20170706 22:23:34.933" endtime="20170706 22:23:35.018"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:35.024" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:35.024" endtime="20170706 22:23:35.025"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:35.023" endtime="20170706 22:23:35.025"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:35.019" endtime="20170706 22:23:35.025"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.925" endtime="20170706 22:23:35.025"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.925" endtime="20170706 22:23:35.025"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.688" endtime="20170706 22:23:35.025"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.683" endtime="20170706 22:23:35.025"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.682" endtime="20170706 22:23:35.025"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:35.026">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" starttime="20170706 22:23:35.026" endtime="20170706 22:23:35.026"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:35.027">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" starttime="20170706 22:23:35.026" endtime="20170706 22:23:35.027"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:35.031" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:35.030" endtime="20170706 22:23:35.031"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:35.029" endtime="20170706 22:23:35.031"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:35.032" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:35.032" endtime="20170706 22:23:35.032"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:35.031" endtime="20170706 22:23:35.032"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:35.033" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:35.033" endtime="20170706 22:23:35.033"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:35.032" endtime="20170706 22:23:35.034"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:35.035" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:35.034" endtime="20170706 22:23:35.035"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:35.034" endtime="20170706 22:23:35.035"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:35.029" endtime="20170706 22:23:35.035"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:35.028" endtime="20170706 22:23:35.035"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:35.036">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170706 22:23:36.525">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 22:23:36.526">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg level="INFO" timestamp="20170706 22:23:36.526">${stderr} = </msg>
<status status="PASS" starttime="20170706 22:23:35.035" endtime="20170706 22:23:36.526"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:36.532" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:36.532" endtime="20170706 22:23:36.533"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.531" endtime="20170706 22:23:36.533"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.526" endtime="20170706 22:23:36.533"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:35.027" endtime="20170706 22:23:36.533"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:35.027" endtime="20170706 22:23:36.533"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:35.027" endtime="20170706 22:23:36.533"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:35.025" endtime="20170706 22:23:36.533"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:35.025" endtime="20170706 22:23:36.533"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:36.535">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" starttime="20170706 22:23:36.534" endtime="20170706 22:23:36.535"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:36.536">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" starttime="20170706 22:23:36.535" endtime="20170706 22:23:36.536"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:36.540" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:36.540" endtime="20170706 22:23:36.541"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.539" endtime="20170706 22:23:36.541"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:36.542" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:36.542" endtime="20170706 22:23:36.542"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.541" endtime="20170706 22:23:36.542"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:36.543" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:36.543" endtime="20170706 22:23:36.543"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.542" endtime="20170706 22:23:36.543"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:36.545" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:36.544" endtime="20170706 22:23:36.545"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.544" endtime="20170706 22:23:36.546"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.538" endtime="20170706 22:23:36.546"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.538" endtime="20170706 22:23:36.546"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:36.546">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170706 22:23:36.673">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170706 22:23:36.673">${stdout} = </msg>
<msg level="INFO" timestamp="20170706 22:23:36.674">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" starttime="20170706 22:23:36.546" endtime="20170706 22:23:36.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:36.683" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:36.682" endtime="20170706 22:23:36.683"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.681" endtime="20170706 22:23:36.683"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.674" endtime="20170706 22:23:36.684"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.537" endtime="20170706 22:23:36.684"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.536" endtime="20170706 22:23:36.684"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:36.687" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:36.686" endtime="20170706 22:23:36.687"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.686" endtime="20170706 22:23:36.687"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:36.688" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:36.688" endtime="20170706 22:23:36.688"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.687" endtime="20170706 22:23:36.688"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:36.689" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:36.689" endtime="20170706 22:23:36.690"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.689" endtime="20170706 22:23:36.690"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:36.691" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:36.690" endtime="20170706 22:23:36.691"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.690" endtime="20170706 22:23:36.691"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.685" endtime="20170706 22:23:36.691"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.685" endtime="20170706 22:23:36.691"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:36.692">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170706 22:23:36.762">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 22:23:36.763">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-83"
VERSION_ID="v1.99.7-83-gd9780be"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170706 22:23:36.763">${stderr} = </msg>
<status status="PASS" starttime="20170706 22:23:36.691" endtime="20170706 22:23:36.763"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:36.771" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/20170706222319985134_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:36.771" endtime="20170706 22:23:36.771"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.770" endtime="20170706 22:23:36.772"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.763" endtime="20170706 22:23:36.772"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.684" endtime="20170706 22:23:36.772"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.684" endtime="20170706 22:23:36.772"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.536" endtime="20170706 22:23:36.772"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.534" endtime="20170706 22:23:36.772"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.533" endtime="20170706 22:23:36.772"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:34.682" endtime="20170706 22:23:36.772"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.817" endtime="20170706 22:23:36.772"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.772" endtime="20170706 22:23:36.772"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.768" endtime="20170706 22:23:36.772"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:32.768" endtime="20170706 22:23:36.772"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:36.774" endtime="20170706 22:23:36.774"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:36.774">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:23:36.774">${ret_values} = None</msg>
<status status="PASS" starttime="20170706 22:23:36.773" endtime="20170706 22:23:36.774"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:36.775" endtime="20170706 22:23:36.775"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:36.821">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170706 22:23:36.821" endtime="20170706 22:23:36.821"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.820" endtime="20170706 22:23:36.821"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.775" endtime="20170706 22:23:36.821"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.773" endtime="20170706 22:23:36.821"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.773" endtime="20170706 22:23:36.821"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:36.823" endtime="20170706 22:23:36.823"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:36.823">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 22:23:36.823">${ret_values} = None</msg>
<status status="PASS" starttime="20170706 22:23:36.822" endtime="20170706 22:23:36.823"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:36.824" endtime="20170706 22:23:36.824"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:23:36.865">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170706 22:23:36.865" endtime="20170706 22:23:36.865"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:36.866">${has_host} = False</msg>
<status status="PASS" starttime="20170706 22:23:36.865" endtime="20170706 22:23:36.866"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:36.866" endtime="20170706 22:23:36.867"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.866" endtime="20170706 22:23:36.867"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:36.870">${port_num} = 22</msg>
<status status="PASS" starttime="20170706 22:23:36.869" endtime="20170706 22:23:36.870"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:36.870">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170706 22:23:36.870" endtime="20170706 22:23:36.870"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:36.871">${https_num} = 443</msg>
<status status="PASS" starttime="20170706 22:23:36.871" endtime="20170706 22:23:36.871"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:36.872">${AUTH_URI} = https://9.3.21.61:443</msg>
<status status="PASS" starttime="20170706 22:23:36.871" endtime="20170706 22:23:36.872"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.868" endtime="20170706 22:23:36.872"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.867" endtime="20170706 22:23:36.872"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 22:23:36.874">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170706 22:23:36.873" endtime="20170706 22:23:36.874"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:36.874">${has_port} = False</msg>
<status status="PASS" starttime="20170706 22:23:36.873" endtime="20170706 22:23:36.874"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:36.876" endtime="20170706 22:23:36.877"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:36.877" endtime="20170706 22:23:36.878"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.876" endtime="20170706 22:23:36.878"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.875" endtime="20170706 22:23:36.878"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:36.879">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 22:23:38.527">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170706 22:23:36.878" endtime="20170706 22:23:38.528"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.864" endtime="20170706 22:23:38.528"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:38.529">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170706 22:23:38.586">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170706 22:23:38.586">${core_files} = </msg>
<status status="PASS" starttime="20170706 22:23:38.528" endtime="20170706 22:23:38.586"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:38.587">@{core_list} = [ ]</msg>
<status status="PASS" starttime="20170706 22:23:38.587" endtime="20170706 22:23:38.587"></status>
</kw>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:38.588" endtime="20170706 22:23:38.596"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:38.598" endtime="20170706 22:23:39.298"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:38.598" endtime="20170706 22:23:39.298"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:38.597" endtime="20170706 22:23:39.298"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:38.588" endtime="20170706 22:23:39.298"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" starttime="20170706 22:23:39.298" endtime="20170706 22:23:39.298"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.863" endtime="20170706 22:23:39.298"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.824" endtime="20170706 22:23:39.298"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.822" endtime="20170706 22:23:39.299"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:36.822" endtime="20170706 22:23:39.299"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.868" endtime="20170706 22:23:39.299"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.865" endtime="20170706 22:23:39.299"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.865" endtime="20170706 22:23:39.299"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.864" endtime="20170706 22:23:39.299"></status>
</kw>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20170706 22:23:39.299" endtime="20170706 22:23:39.382"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:21.863" endtime="20170706 22:23:39.382"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.885" endtime="20170706 22:23:39.383"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.884" endtime="20170706 22:23:39.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:39.383" endtime="20170706 22:23:39.383"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:39.398">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170706 22:23:39.384" endtime="20170706 22:23:39.398"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:39.399">${FFDC_DIR_PATH} = /tmp/fspcibld/2877/obmc-robot/logs/20170706222319985134_TestsTestBasicPoweron/20170706222319985134_PowerOnTest/</msg>
<status status="PASS" starttime="20170706 22:23:39.399" endtime="20170706 22:23:39.399"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:39.400" endtime="20170706 22:23:39.400"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:39.400" endtime="20170706 22:23:39.401"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:39.402" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs"&gt;/tmp/fspcibld/2877/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20170706 22:23:39.401" endtime="20170706 22:23:39.402"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:39.403" html="yes">File '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20170706 22:23:39.403" endtime="20170706 22:23:39.403"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:39.403">${exist} = True</msg>
<status status="PASS" starttime="20170706 22:23:39.402" endtime="20170706 22:23:39.403"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:39.403" endtime="20170706 22:23:39.404"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:39.404" endtime="20170706 22:23:39.404"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:39.405">${cur_time} = 2017-07-06 22:23:39:404997</msg>
<status status="PASS" starttime="20170706 22:23:39.405" endtime="20170706 22:23:39.405"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:39.406">${cur_time} = 20170706222339404997</msg>
<status status="PASS" starttime="20170706 22:23:39.406" endtime="20170706 22:23:39.406"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:39.406">${cur_time} = 20170706222339404997</msg>
<status status="PASS" starttime="20170706 22:23:39.404" endtime="20170706 22:23:39.406"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:39.407" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2877/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:39.406" endtime="20170706 22:23:39.407"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:39.384" endtime="20170706 22:23:39.407"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.616" endtime="20170706 22:23:39.407"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:39.409">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170706 22:23:39.409" endtime="20170706 22:23:39.409"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:39.410">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170706 22:23:39.409" endtime="20170706 22:23:39.410"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:39.410">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170706 22:23:39.408" endtime="20170706 22:23:39.410"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:39.411">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170706 22:23:39.410" endtime="20170706 22:23:39.411"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:39.411" endtime="20170706 22:23:39.411"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:39.416">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170706 22:23:39.419">${rc} = 0</msg>
<msg level="INFO" timestamp="20170706 22:23:39.419">${output} = /tmp/fspcibld/2877/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170706 22:23:39.411" endtime="20170706 22:23:39.420"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:39.422" endtime="20170706 22:23:39.423"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:39.423" endtime="20170706 22:23:39.424"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:39.424">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" starttime="20170706 22:23:39.424" endtime="20170706 22:23:39.424"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:39.425">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" starttime="20170706 22:23:39.410" endtime="20170706 22:23:39.425"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:39.426">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170706 22:23:39.425" endtime="20170706 22:23:39.426"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:39.426" endtime="20170706 22:23:39.426"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:39.431">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170706 22:23:39.441">${rc} = 0</msg>
<msg level="INFO" timestamp="20170706 22:23:39.441">${os_con_pid} = </msg>
<status status="PASS" starttime="20170706 22:23:39.426" endtime="20170706 22:23:39.441"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:39.443" endtime="20170706 22:23:39.444"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:39.445">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20170706 22:23:39.445" endtime="20170706 22:23:39.445"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:39.446" endtime="20170706 22:23:39.448"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:39.449">${rc} = None</msg>
<msg level="INFO" timestamp="20170706 22:23:39.449">${output} = None</msg>
<status status="PASS" starttime="20170706 22:23:39.448" endtime="20170706 22:23:39.449"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:39.450" endtime="20170706 22:23:39.450"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:39.456" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/2877/obmc-robot/logs/9.3.21.61_os_console"&gt;/tmp/fspcibld/2877/obmc-robot/logs/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170706 22:23:39.453" endtime="20170706 22:23:39.456"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:39.453" endtime="20170706 22:23:39.456"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:39.452" endtime="20170706 22:23:39.456"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:39.457">${output} = </msg>
<status status="PASS" starttime="20170706 22:23:39.456" endtime="20170706 22:23:39.457"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170706 22:23:39.457">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20170706 22:23:39.457" endtime="20170706 22:23:39.457"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" starttime="20170706 22:23:39.458" endtime="20170706 22:23:39.501"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:39.502">${rc} = 0</msg>
<msg level="INFO" timestamp="20170706 22:23:39.503">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;10HUbuntu          [2...</msg>
<status status="PASS" starttime="20170706 22:23:39.458" endtime="20170706 22:23:39.503"></status>
</kw>
<msg level="INFO" timestamp="20170706 22:23:39.508">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;10HUbuntu          [2...</msg>
<status status="PASS" starttime="20170706 22:23:39.407" endtime="20170706 22:23:39.508"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 22:23:39.518">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;10HUbuntu          [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-2[?7l6[?7h Running boot hooks[K Performing kexec loadreboot[   49.435577696,5] IPMI: Soft shutdown requested
The system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   34.777404] kexec_core: Starting new kernel
[   53.352148688,5] OPAL: Switch to big-endian OS
[   53.432169360,5] OPAL: Switch to little-endian OS
 -&gt; smp_release_cpus()
spinning_secondaries = 15
 &lt;- smp_release_cpus()
[    1.681162] Unable to open file: /etc/keys/x509_ima.der (-2)
[    1.681167] Unable to open file: /etc/keys/x509_evm.der (-2)
[40m[2J[-1;-1f[?25l[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[49m[2J[-1;-1f[?25h
Ubuntu 17.04 ws017p1 hvc0

ws017p1 login: </msg>
<status status="PASS" starttime="20170706 22:23:39.517" endtime="20170706 22:23:39.519"></status>
</kw>
<status status="PASS" starttime="20170706 22:23:16.616" endtime="20170706 22:23:39.519"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="FAIL" starttime="20170706 22:20:10.791" critical="yes" endtime="20170706 22:23:39.521">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" starttime="20170706 22:20:10.758" endtime="20170706 22:23:39.526"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" starttime="20170706 22:20:03.641" endtime="20170706 22:23:39.535"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Tests" pass="1">Tests</stat>
<stat fail="0" id="s1-s1" name="Security" pass="1">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
