<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170419 00:51:15.407" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/tmp/root/28352/obmc-robot/tests" name="Tests" id="s1">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:51:15.792">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 00:51:15.791" status="FAIL" endtime="20170419 00:51:15.792"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:15.792">${has_host} = False</msg>
<status starttime="20170419 00:51:15.791" status="PASS" endtime="20170419 00:51:15.792"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 00:51:15.793" status="PASS" endtime="20170419 00:51:15.793"></status>
</kw>
<status starttime="20170419 00:51:15.792" status="PASS" endtime="20170419 00:51:15.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:15.794">${port_num} = 22</msg>
<status starttime="20170419 00:51:15.794" status="PASS" endtime="20170419 00:51:15.794"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:15.795">${SSH_PORT} = 22</msg>
<status starttime="20170419 00:51:15.795" status="PASS" endtime="20170419 00:51:15.795"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:15.795">${https_num} = 443</msg>
<status starttime="20170419 00:51:15.795" status="PASS" endtime="20170419 00:51:15.795"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:15.796">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170419 00:51:15.796" status="PASS" endtime="20170419 00:51:15.796"></status>
</kw>
<status starttime="20170419 00:51:15.794" status="PASS" endtime="20170419 00:51:15.796"></status>
</kw>
<status starttime="20170419 00:51:15.793" status="PASS" endtime="20170419 00:51:15.796"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:51:15.797">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 00:51:15.797" status="FAIL" endtime="20170419 00:51:15.797"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:15.797">${has_port} = False</msg>
<status starttime="20170419 00:51:15.797" status="PASS" endtime="20170419 00:51:15.797"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 00:51:15.799" status="PASS" endtime="20170419 00:51:15.799"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 00:51:15.799" status="PASS" endtime="20170419 00:51:15.800"></status>
</kw>
<status starttime="20170419 00:51:15.798" status="PASS" endtime="20170419 00:51:15.800"></status>
</kw>
<status starttime="20170419 00:51:15.798" status="PASS" endtime="20170419 00:51:15.800"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:15.800">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 00:51:17.654">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 00:51:15.800" status="PASS" endtime="20170419 00:51:17.654"></status>
</kw>
<status starttime="20170419 00:51:15.790" status="PASS" endtime="20170419 00:51:17.654"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:17.656">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170419 00:51:17.722">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 00:51:17.723">${output} = VERSION_ID="v1.99.4-37-g609aaa1"</msg>
<msg level="INFO" timestamp="20170419 00:51:17.723">${stderr} = </msg>
<status starttime="20170419 00:51:17.656" status="PASS" endtime="20170419 00:51:17.723"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:17.723">Length is 0</msg>
<status starttime="20170419 00:51:17.723" status="PASS" endtime="20170419 00:51:17.723"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:17.724">VERSION_ID="v1.99.4-37-g609aaa1"</msg>
<status starttime="20170419 00:51:17.724" status="PASS" endtime="20170419 00:51:17.724"></status>
</kw>
<status starttime="20170419 00:51:17.655" status="PASS" endtime="20170419 00:51:17.724"></status>
</kw>
<status starttime="20170419 00:51:17.655" status="PASS" endtime="20170419 00:51:17.724"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:17.725">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170419 00:51:17.860">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 00:51:17.861">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg level="INFO" timestamp="20170419 00:51:17.861">${stderr} = </msg>
<status starttime="20170419 00:51:17.725" status="PASS" endtime="20170419 00:51:17.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:17.861">Length is 0</msg>
<status starttime="20170419 00:51:17.861" status="PASS" endtime="20170419 00:51:17.861"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:17.861">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status starttime="20170419 00:51:17.725" status="PASS" endtime="20170419 00:51:17.861"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:17.862">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status starttime="20170419 00:51:17.862" status="PASS" endtime="20170419 00:51:17.863"></status>
</kw>
<status starttime="20170419 00:51:17.724" status="PASS" endtime="20170419 00:51:17.863"></status>
</kw>
<status starttime="20170419 00:51:17.724" status="PASS" endtime="20170419 00:51:17.863"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:17.865">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170419 00:51:17.959">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 00:51:17.959">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170419 00:51:17.960">${stderr} = </msg>
<status starttime="20170419 00:51:17.864" status="PASS" endtime="20170419 00:51:17.960"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:17.960">Length is 0</msg>
<status starttime="20170419 00:51:17.960" status="PASS" endtime="20170419 00:51:17.960"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:17.960">Length is 11</msg>
<status starttime="20170419 00:51:17.960" status="PASS" endtime="20170419 00:51:17.961"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:17.961">${bmc_model} = Witherspoon</msg>
<status starttime="20170419 00:51:17.864" status="PASS" endtime="20170419 00:51:17.961"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:17.961">BMC Model=Witherspoon</msg>
<status starttime="20170419 00:51:17.961" status="PASS" endtime="20170419 00:51:17.961"></status>
</kw>
<status starttime="20170419 00:51:17.864" status="PASS" endtime="20170419 00:51:17.961"></status>
</kw>
<status starttime="20170419 00:51:17.863" status="PASS" endtime="20170419 00:51:17.961"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:51:17.964">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 00:51:17.963" status="FAIL" endtime="20170419 00:51:17.964"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:17.964">${has_host} = False</msg>
<status starttime="20170419 00:51:17.963" status="PASS" endtime="20170419 00:51:17.964"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 00:51:17.965" status="PASS" endtime="20170419 00:51:17.965"></status>
</kw>
<status starttime="20170419 00:51:17.964" status="PASS" endtime="20170419 00:51:17.965"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:17.966">${port_num} = 22</msg>
<status starttime="20170419 00:51:17.966" status="PASS" endtime="20170419 00:51:17.966"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:17.967">${SSH_PORT} = 22</msg>
<status starttime="20170419 00:51:17.966" status="PASS" endtime="20170419 00:51:17.967"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:17.967">${https_num} = 443</msg>
<status starttime="20170419 00:51:17.967" status="PASS" endtime="20170419 00:51:17.967"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:17.968">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170419 00:51:17.968" status="PASS" endtime="20170419 00:51:17.968"></status>
</kw>
<status starttime="20170419 00:51:17.966" status="PASS" endtime="20170419 00:51:17.968"></status>
</kw>
<status starttime="20170419 00:51:17.965" status="PASS" endtime="20170419 00:51:17.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:51:17.969">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 00:51:17.969" status="FAIL" endtime="20170419 00:51:17.969"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:17.969">${has_port} = False</msg>
<status starttime="20170419 00:51:17.968" status="PASS" endtime="20170419 00:51:17.969"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 00:51:17.971" status="PASS" endtime="20170419 00:51:17.971"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 00:51:17.971" status="PASS" endtime="20170419 00:51:17.972"></status>
</kw>
<status starttime="20170419 00:51:17.970" status="PASS" endtime="20170419 00:51:17.972"></status>
</kw>
<status starttime="20170419 00:51:17.969" status="PASS" endtime="20170419 00:51:17.972"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:17.972">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 00:51:19.649">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 00:51:17.972" status="PASS" endtime="20170419 00:51:19.649"></status>
</kw>
<status starttime="20170419 00:51:17.962" status="PASS" endtime="20170419 00:51:19.649"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:19.650">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170419 00:51:19.717">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 00:51:19.717">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170419 00:51:19.717">${stderr} = </msg>
<status starttime="20170419 00:51:19.650" status="PASS" endtime="20170419 00:51:19.717"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:19.718">Length is 0</msg>
<status starttime="20170419 00:51:19.717" status="PASS" endtime="20170419 00:51:19.718"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:19.718">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170419 00:51:19.650" status="PASS" endtime="20170419 00:51:19.718"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170419 00:51:19.718" status="PASS" endtime="20170419 00:51:19.718"></status>
</kw>
<status starttime="20170419 00:51:17.962" status="PASS" endtime="20170419 00:51:19.719"></status>
</kw>
<status starttime="20170419 00:51:17.962" status="PASS" endtime="20170419 00:51:19.719"></status>
</kw>
<status starttime="20170419 00:51:15.790" status="PASS" endtime="20170419 00:51:19.719"></status>
</kw>
<suite source="/tmp/root/28352/obmc-robot/tests/security" name="Security" id="s1-s1">
<suite source="/tmp/root/28352/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:19.790">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:51:19.790" status="PASS" endtime="20170419 00:51:19.790"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:19.791">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:51:19.791" status="PASS" endtime="20170419 00:51:19.791"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:19.792">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:51:19.792" status="PASS" endtime="20170419 00:51:19.792"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:19.793">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:51:19.792" status="PASS" endtime="20170419 00:51:19.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:19.992">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:51:19.793" status="PASS" endtime="20170419 00:51:19.992"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:19.992">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:51:19.992">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:19.793" status="PASS" endtime="20170419 00:51:19.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:19.993">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:19.993" status="PASS" endtime="20170419 00:51:19.993"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:19.994">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:19.993" status="PASS" endtime="20170419 00:51:19.994"></status>
</kw>
<status starttime="20170419 00:51:19.789" status="PASS" endtime="20170419 00:51:19.994"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:19.999">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:51:19.999" status="PASS" endtime="20170419 00:51:19.999"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.000">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:51:20.000" status="PASS" endtime="20170419 00:51:20.000"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.001">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:51:20.000" status="PASS" endtime="20170419 00:51:20.001"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.002">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:51:20.001" status="PASS" endtime="20170419 00:51:20.002"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:20.187">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:51:20.003" status="PASS" endtime="20170419 00:51:20.187"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:20.188">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:51:20.188">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:20.002" status="PASS" endtime="20170419 00:51:20.188"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:20.188">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:20.188" status="PASS" endtime="20170419 00:51:20.188"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:20.189">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:20.189" status="PASS" endtime="20170419 00:51:20.189"></status>
</kw>
<status starttime="20170419 00:51:19.998" status="PASS" endtime="20170419 00:51:20.189"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.190">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:51:20.189" status="PASS" endtime="20170419 00:51:20.190"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.192">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:51:20.191" status="PASS" endtime="20170419 00:51:20.192"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:20.193">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:51:20.193" status="PASS" endtime="20170419 00:51:20.193"></status>
</kw>
<status starttime="20170419 00:51:20.192" status="PASS" endtime="20170419 00:51:20.193"></status>
</kw>
<status starttime="20170419 00:51:20.190" status="PASS" endtime="20170419 00:51:20.193"></status>
</kw>
<status starttime="20170419 00:51:20.190" status="PASS" endtime="20170419 00:51:20.193"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.256">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:51:20.256">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:20.194" status="PASS" endtime="20170419 00:51:20.256"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.258">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:20.257" status="PASS" endtime="20170419 00:51:20.258"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:20.259">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:20.259" status="PASS" endtime="20170419 00:51:20.259"></status>
</kw>
<status starttime="20170419 00:51:20.258" status="PASS" endtime="20170419 00:51:20.259"></status>
</kw>
<status starttime="20170419 00:51:20.257" status="PASS" endtime="20170419 00:51:20.259"></status>
</kw>
<status starttime="20170419 00:51:20.256" status="PASS" endtime="20170419 00:51:20.259"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:20.260">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:19.997" status="PASS" endtime="20170419 00:51:20.260"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:20.260">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:20.260" status="PASS" endtime="20170419 00:51:20.260"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.261">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:51:20.261">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:51:20.261">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:51:20.261" status="PASS" endtime="20170419 00:51:20.261"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:20.261">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:51:19.995" status="PASS" endtime="20170419 00:51:20.261"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:20.262">${host_state} = Off</msg>
<status starttime="20170419 00:51:19.995" status="PASS" endtime="20170419 00:51:20.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:51:20.263">Off != Quiesced</msg>
<status starttime="20170419 00:51:20.262" status="FAIL" endtime="20170419 00:51:20.263"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:20.263">${status} = False</msg>
<status starttime="20170419 00:51:20.262" status="PASS" endtime="20170419 00:51:20.263"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:20.263">${status} = False</msg>
<status starttime="20170419 00:51:19.995" status="PASS" endtime="20170419 00:51:20.263"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170419 00:51:20.264" status="PASS" endtime="20170419 00:51:20.264"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170419 00:51:20.264" status="PASS" endtime="20170419 00:51:20.264"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 00:51:20.265">Created directory '&lt;a href="file:///tmp/root/28352/obmc-robot/logs"&gt;/tmp/root/28352/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170419 00:51:20.265" status="PASS" endtime="20170419 00:51:20.265"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:51:20.266">File '/tmp/root/28352/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170419 00:51:20.266" status="FAIL" endtime="20170419 00:51:20.267"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:20.267">${exist} = False</msg>
<status starttime="20170419 00:51:20.266" status="PASS" endtime="20170419 00:51:20.267"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 00:51:20.268">Created file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/test_history.txt"&gt;/tmp/root/28352/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 00:51:20.267" status="PASS" endtime="20170419 00:51:20.268"></status>
</kw>
<status starttime="20170419 00:51:20.267" status="PASS" endtime="20170419 00:51:20.268"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.269">${cur_time} = 2017-04-19 00:51:20:268602</msg>
<status starttime="20170419 00:51:20.268" status="PASS" endtime="20170419 00:51:20.269"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.269">${cur_time} = 20170419005120268602</msg>
<status starttime="20170419 00:51:20.269" status="PASS" endtime="20170419 00:51:20.269"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:20.270">${cur_time} = 20170419005120268602</msg>
<status starttime="20170419 00:51:20.268" status="PASS" endtime="20170419 00:51:20.270"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 00:51:20.270">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/test_history.txt"&gt;/tmp/root/28352/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 00:51:20.270" status="PASS" endtime="20170419 00:51:20.270"></status>
</kw>
<status starttime="20170419 00:51:20.265" status="PASS" endtime="20170419 00:51:20.271"></status>
</kw>
<status starttime="20170419 00:51:19.994" status="PASS" endtime="20170419 00:51:20.271"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170419 00:51:19.789" status="PASS" endtime="20170419 00:51:20.271" critical="yes"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" type="teardown" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170419 00:51:20.272">Delete All Sessions</msg>
<status starttime="20170419 00:51:20.272" status="PASS" endtime="20170419 00:51:20.272"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170419 00:51:19.721" status="PASS" endtime="20170419 00:51:20.272"></status>
</suite>
<status starttime="20170419 00:51:19.719" status="PASS" endtime="20170419 00:51:20.274"></status>
</suite>
<suite source="/tmp/root/28352/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.305">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 00:51:20.305" status="PASS" endtime="20170419 00:51:20.305"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.306">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 00:51:20.305" status="PASS" endtime="20170419 00:51:20.306"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:20.306">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 00:51:20.304" status="PASS" endtime="20170419 00:51:20.306"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.308">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 00:51:20.307" status="PASS" endtime="20170419 00:51:20.308"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.308">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 00:51:20.308" status="PASS" endtime="20170419 00:51:20.308"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:20.309">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 00:51:20.307" status="PASS" endtime="20170419 00:51:20.309"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.309">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170419 00:51:20.309" status="PASS" endtime="20170419 00:51:20.309"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 00:51:20.310" status="PASS" endtime="20170419 00:51:20.317"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.322">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 00:51:20.326">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 00:51:20.326">${output} = /tmp/root/28352/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170419 00:51:20.317" status="PASS" endtime="20170419 00:51:20.326"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170419 00:51:20.327" status="PASS" endtime="20170419 00:51:20.335"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170419 00:51:20.335" status="PASS" endtime="20170419 00:51:20.336"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.336">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170419 00:51:20.336" status="PASS" endtime="20170419 00:51:20.336"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:20.337">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170419 00:51:20.309" status="PASS" endtime="20170419 00:51:20.337"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.337">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170419 00:51:20.337" status="PASS" endtime="20170419 00:51:20.337"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 00:51:20.337" status="PASS" endtime="20170419 00:51:20.344"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.358">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 00:51:20.379">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 00:51:20.379">${os_con_pid} = </msg>
<status starttime="20170419 00:51:20.345" status="PASS" endtime="20170419 00:51:20.380"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170419 00:51:20.381" status="PASS" endtime="20170419 00:51:20.389"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.389">${cmd_buf} = kill -9 </msg>
<status starttime="20170419 00:51:20.389" status="PASS" endtime="20170419 00:51:20.389"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 00:51:20.390" status="PASS" endtime="20170419 00:51:20.390"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.391">${rc} = None</msg>
<msg level="INFO" timestamp="20170419 00:51:20.391">${output} = None</msg>
<status starttime="20170419 00:51:20.390" status="PASS" endtime="20170419 00:51:20.391"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170419 00:51:20.391" status="PASS" endtime="20170419 00:51:20.391"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.392">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status starttime="20170419 00:51:20.392" status="PASS" endtime="20170419 00:51:20.392"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 00:51:20.392" status="PASS" endtime="20170419 00:51:20.399"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.402">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 00:51:20.406">${rc} = 1</msg>
<msg level="INFO" timestamp="20170419 00:51:20.406">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status starttime="20170419 00:51:20.399" status="PASS" endtime="20170419 00:51:20.407"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170419 00:51:20.408" status="PASS" endtime="20170419 00:51:20.416"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170419 00:51:20.416" status="PASS" endtime="20170419 00:51:20.417"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:20.417">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status starttime="20170419 00:51:20.306" status="PASS" endtime="20170419 00:51:20.417"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 00:51:20.418">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status starttime="20170419 00:51:20.417" status="PASS" endtime="20170419 00:51:20.418"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.419">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170419 00:51:20.419" status="PASS" endtime="20170419 00:51:20.419"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 00:51:20.419" status="PASS" endtime="20170419 00:51:20.426"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.429">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 00:51:20.431">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 00:51:20.431">${output} = /tmp/root/28352/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170419 00:51:20.426" status="PASS" endtime="20170419 00:51:20.432"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170419 00:51:20.433" status="PASS" endtime="20170419 00:51:20.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170419 00:51:20.442" status="PASS" endtime="20170419 00:51:20.442"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.443">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170419 00:51:20.443" status="PASS" endtime="20170419 00:51:20.443"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:20.443">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170419 00:51:20.418" status="PASS" endtime="20170419 00:51:20.443"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.444">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170419 00:51:20.444" status="PASS" endtime="20170419 00:51:20.444"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 00:51:20.444" status="PASS" endtime="20170419 00:51:20.451"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.454">Running command 'ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170419 00:51:20.457">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 00:51:20.457">${output} = </msg>
<status starttime="20170419 00:51:20.452" status="PASS" endtime="20170419 00:51:20.457"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170419 00:51:20.459" status="PASS" endtime="20170419 00:51:20.460"></status>
</kw>
<status starttime="20170419 00:51:20.304" status="PASS" endtime="20170419 00:51:20.460"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:20.461">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.463">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170419 00:51:20.462" status="PASS" endtime="20170419 00:51:20.463"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.464">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170419 00:51:20.464" status="PASS" endtime="20170419 00:51:20.464"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:20.466">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:51:20.466" status="PASS" endtime="20170419 00:51:20.467"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.468">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:51:20.467" status="PASS" endtime="20170419 00:51:20.468"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.469">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:51:20.468" status="PASS" endtime="20170419 00:51:20.469"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.470">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:51:20.470" status="PASS" endtime="20170419 00:51:20.470"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:20.938">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:51:20.471" status="PASS" endtime="20170419 00:51:20.939"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:20.939">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:51:20.939">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:20.471" status="PASS" endtime="20170419 00:51:20.939"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:20.939">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:20.939" status="PASS" endtime="20170419 00:51:20.939"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:20.940">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:20.940" status="PASS" endtime="20170419 00:51:20.940"></status>
</kw>
<status starttime="20170419 00:51:20.465" status="PASS" endtime="20170419 00:51:20.940"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.941">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170419 00:51:20.941" status="PASS" endtime="20170419 00:51:20.941"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.942">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:51:20.941" status="PASS" endtime="20170419 00:51:20.942"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170419 00:51:20.942" status="PASS" endtime="20170419 00:51:20.942"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:20.944">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170419 00:51:20.943" status="PASS" endtime="20170419 00:51:20.944"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:20.945">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170419 00:51:20.944" status="PASS" endtime="20170419 00:51:20.945"></status>
</kw>
<status starttime="20170419 00:51:20.944" status="PASS" endtime="20170419 00:51:20.945"></status>
</kw>
<status starttime="20170419 00:51:20.942" status="PASS" endtime="20170419 00:51:20.945"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.190">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170419 00:51:21.190">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:20.945" status="PASS" endtime="20170419 00:51:21.190"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.191">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:21.191" status="PASS" endtime="20170419 00:51:21.191"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.192">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:21.192" status="PASS" endtime="20170419 00:51:21.193"></status>
</kw>
<status starttime="20170419 00:51:21.192" status="PASS" endtime="20170419 00:51:21.193"></status>
</kw>
<status starttime="20170419 00:51:21.190" status="PASS" endtime="20170419 00:51:21.193"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:21.193">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:20.464" status="PASS" endtime="20170419 00:51:21.193"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.194">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:21.193" status="PASS" endtime="20170419 00:51:21.194"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.194">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:51:21.194">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:51:21.194">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:51:21.194" status="PASS" endtime="20170419 00:51:21.194"></status>
</kw>
<status starttime="20170419 00:51:20.463" status="PASS" endtime="20170419 00:51:21.194"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170419 00:51:21.195" status="PASS" endtime="20170419 00:51:21.195"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.199">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:51:21.198" status="PASS" endtime="20170419 00:51:21.199"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.200">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:51:21.199" status="PASS" endtime="20170419 00:51:21.200"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.200">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:51:21.200" status="PASS" endtime="20170419 00:51:21.200"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.201">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:51:21.200" status="PASS" endtime="20170419 00:51:21.201"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.476">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:51:21.202" status="PASS" endtime="20170419 00:51:21.477"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:21.477">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:51:21.477">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:21.201" status="PASS" endtime="20170419 00:51:21.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.477">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:21.477" status="PASS" endtime="20170419 00:51:21.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.478">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:21.478" status="PASS" endtime="20170419 00:51:21.478"></status>
</kw>
<status starttime="20170419 00:51:21.197" status="PASS" endtime="20170419 00:51:21.478"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.479">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:51:21.478" status="PASS" endtime="20170419 00:51:21.479"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.481">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:51:21.480" status="PASS" endtime="20170419 00:51:21.481"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.482">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:51:21.482" status="PASS" endtime="20170419 00:51:21.482"></status>
</kw>
<status starttime="20170419 00:51:21.481" status="PASS" endtime="20170419 00:51:21.482"></status>
</kw>
<status starttime="20170419 00:51:21.480" status="PASS" endtime="20170419 00:51:21.482"></status>
</kw>
<status starttime="20170419 00:51:21.479" status="PASS" endtime="20170419 00:51:21.482"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.682">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:51:21.683">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:21.483" status="PASS" endtime="20170419 00:51:21.683"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.685">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:21.684" status="PASS" endtime="20170419 00:51:21.685"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.686">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:21.685" status="PASS" endtime="20170419 00:51:21.686"></status>
</kw>
<status starttime="20170419 00:51:21.685" status="PASS" endtime="20170419 00:51:21.686"></status>
</kw>
<status starttime="20170419 00:51:21.683" status="PASS" endtime="20170419 00:51:21.686"></status>
</kw>
<status starttime="20170419 00:51:21.683" status="PASS" endtime="20170419 00:51:21.686"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:21.686">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:21.197" status="PASS" endtime="20170419 00:51:21.686"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:21.686" status="PASS" endtime="20170419 00:51:21.687"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.687">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:51:21.687">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:51:21.688">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:51:21.687" status="PASS" endtime="20170419 00:51:21.688"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:21.688">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:51:21.196" status="PASS" endtime="20170419 00:51:21.688"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:21.688">${host_state} = Off</msg>
<status starttime="20170419 00:51:21.196" status="PASS" endtime="20170419 00:51:21.688"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170419 00:51:21.688" status="PASS" endtime="20170419 00:51:21.689"></status>
</kw>
<status starttime="20170419 00:51:21.196" status="PASS" endtime="20170419 00:51:21.689"></status>
</kw>
<status starttime="20170419 00:51:21.195" status="PASS" endtime="20170419 00:51:21.689"></status>
</kw>
<status starttime="20170419 00:51:20.462" status="PASS" endtime="20170419 00:51:21.689"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw library="utils" name="Is OS Off">
<doc>Check if boot progress is "Off".</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.692">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:51:21.692" status="PASS" endtime="20170419 00:51:21.693"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.693">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:51:21.693" status="PASS" endtime="20170419 00:51:21.693"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.694">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:51:21.694" status="PASS" endtime="20170419 00:51:21.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.695">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:51:21.694" status="PASS" endtime="20170419 00:51:21.695"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.903">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:51:21.695" status="PASS" endtime="20170419 00:51:21.903"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:21.904">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:51:21.904">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:21.695" status="PASS" endtime="20170419 00:51:21.904"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.904">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:21.904" status="PASS" endtime="20170419 00:51:21.904"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.905">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:21.905" status="PASS" endtime="20170419 00:51:21.905"></status>
</kw>
<status starttime="20170419 00:51:21.691" status="PASS" endtime="20170419 00:51:21.905"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.906">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170419 00:51:21.905" status="PASS" endtime="20170419 00:51:21.906"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.908">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170419 00:51:21.907" status="PASS" endtime="20170419 00:51:21.908"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.909">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170419 00:51:21.909" status="PASS" endtime="20170419 00:51:21.909"></status>
</kw>
<status starttime="20170419 00:51:21.908" status="PASS" endtime="20170419 00:51:21.909"></status>
</kw>
<status starttime="20170419 00:51:21.906" status="PASS" endtime="20170419 00:51:21.909"></status>
</kw>
<status starttime="20170419 00:51:21.906" status="PASS" endtime="20170419 00:51:21.909"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.975">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:51:21.975">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:21.910" status="PASS" endtime="20170419 00:51:21.975"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.977">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:21.976" status="PASS" endtime="20170419 00:51:21.977"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.978">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:21.978" status="PASS" endtime="20170419 00:51:21.978"></status>
</kw>
<status starttime="20170419 00:51:21.977" status="PASS" endtime="20170419 00:51:21.978"></status>
</kw>
<status starttime="20170419 00:51:21.976" status="PASS" endtime="20170419 00:51:21.978"></status>
</kw>
<status starttime="20170419 00:51:21.976" status="PASS" endtime="20170419 00:51:21.978"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:21.978">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:21.691" status="PASS" endtime="20170419 00:51:21.978"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.979">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:21.979" status="PASS" endtime="20170419 00:51:21.979"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.980">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:51:21.980">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:51:21.980">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:51:21.979" status="PASS" endtime="20170419 00:51:21.980"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:21.980">${state} = Off</msg>
<status starttime="20170419 00:51:21.690" status="PASS" endtime="20170419 00:51:21.980"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:21.980">${boot_progress} = Off</msg>
<status starttime="20170419 00:51:21.690" status="PASS" endtime="20170419 00:51:21.980"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20170419 00:51:21.981" status="PASS" endtime="20170419 00:51:21.981"></status>
</kw>
<status starttime="20170419 00:51:21.690" status="PASS" endtime="20170419 00:51:21.981"></status>
</kw>
<status starttime="20170419 00:51:21.689" status="PASS" endtime="20170419 00:51:21.981"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.982">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170419 00:51:21.982" status="PASS" endtime="20170419 00:51:21.982"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.983">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170419 00:51:21.983" status="PASS" endtime="20170419 00:51:21.983"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:21.985">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:51:21.985" status="PASS" endtime="20170419 00:51:21.985"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.986">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:51:21.986" status="PASS" endtime="20170419 00:51:21.986"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.986">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:51:21.986" status="PASS" endtime="20170419 00:51:21.987"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:21.987">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:51:21.987" status="PASS" endtime="20170419 00:51:21.987"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:22.162">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:51:21.988" status="PASS" endtime="20170419 00:51:22.162"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:22.162">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:51:22.162">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:21.987" status="PASS" endtime="20170419 00:51:22.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:22.163">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:22.163" status="PASS" endtime="20170419 00:51:22.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:22.164">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:22.163" status="PASS" endtime="20170419 00:51:22.164"></status>
</kw>
<status starttime="20170419 00:51:21.984" status="PASS" endtime="20170419 00:51:22.164"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:22.164">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170419 00:51:22.164" status="PASS" endtime="20170419 00:51:22.165"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:22.165">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:51:22.165" status="PASS" endtime="20170419 00:51:22.165"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170419 00:51:22.165" status="PASS" endtime="20170419 00:51:22.166"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:22.167">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status starttime="20170419 00:51:22.166" status="PASS" endtime="20170419 00:51:22.167"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:22.168">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170419 00:51:22.168" status="PASS" endtime="20170419 00:51:22.168"></status>
</kw>
<status starttime="20170419 00:51:22.167" status="PASS" endtime="20170419 00:51:22.168"></status>
</kw>
<status starttime="20170419 00:51:22.166" status="PASS" endtime="20170419 00:51:22.168"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:22.321">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170419 00:51:22.321">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:22.169" status="PASS" endtime="20170419 00:51:22.321"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:22.322">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:22.322" status="PASS" endtime="20170419 00:51:22.322"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:22.323">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:22.323" status="PASS" endtime="20170419 00:51:22.323"></status>
</kw>
<status starttime="20170419 00:51:22.322" status="PASS" endtime="20170419 00:51:22.323"></status>
</kw>
<status starttime="20170419 00:51:22.321" status="PASS" endtime="20170419 00:51:22.324"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:22.324">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:21.983" status="PASS" endtime="20170419 00:51:22.324"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:22.324">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:22.324" status="PASS" endtime="20170419 00:51:22.324"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:22.325">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:51:22.325">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:51:22.325">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:51:22.325" status="PASS" endtime="20170419 00:51:22.325"></status>
</kw>
<status starttime="20170419 00:51:21.982" status="PASS" endtime="20170419 00:51:22.326"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170419 00:51:22.326" status="PASS" endtime="20170419 00:51:22.326"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:22.330">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:51:22.330" status="PASS" endtime="20170419 00:51:22.331"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:22.331">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:51:22.331" status="PASS" endtime="20170419 00:51:22.331"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:22.332">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:51:22.332" status="PASS" endtime="20170419 00:51:22.332"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:22.333">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:51:22.332" status="PASS" endtime="20170419 00:51:22.333"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:22.519">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:51:22.333" status="PASS" endtime="20170419 00:51:22.519"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:22.519">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:51:22.519">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:22.333" status="PASS" endtime="20170419 00:51:22.519"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:22.520">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:22.519" status="PASS" endtime="20170419 00:51:22.520"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:22.520">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:22.520" status="PASS" endtime="20170419 00:51:22.521"></status>
</kw>
<status starttime="20170419 00:51:22.329" status="PASS" endtime="20170419 00:51:22.521"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:22.521">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:51:22.521" status="PASS" endtime="20170419 00:51:22.521"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:22.523">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:51:22.523" status="PASS" endtime="20170419 00:51:22.523"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:22.524">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:51:22.524" status="PASS" endtime="20170419 00:51:22.524"></status>
</kw>
<status starttime="20170419 00:51:22.523" status="PASS" endtime="20170419 00:51:22.524"></status>
</kw>
<status starttime="20170419 00:51:22.522" status="PASS" endtime="20170419 00:51:22.525"></status>
</kw>
<status starttime="20170419 00:51:22.522" status="PASS" endtime="20170419 00:51:22.525"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:22.587">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:51:22.587">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:22.525" status="PASS" endtime="20170419 00:51:22.587"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:22.589">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:22.588" status="PASS" endtime="20170419 00:51:22.589"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:22.590">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:22.590" status="PASS" endtime="20170419 00:51:22.590"></status>
</kw>
<status starttime="20170419 00:51:22.589" status="PASS" endtime="20170419 00:51:22.590"></status>
</kw>
<status starttime="20170419 00:51:22.588" status="PASS" endtime="20170419 00:51:22.590"></status>
</kw>
<status starttime="20170419 00:51:22.587" status="PASS" endtime="20170419 00:51:22.590"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:22.591">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:22.329" status="PASS" endtime="20170419 00:51:22.591"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:22.591">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:22.591" status="PASS" endtime="20170419 00:51:22.591"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:22.592">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:51:22.592">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:51:22.592">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:51:22.592" status="PASS" endtime="20170419 00:51:22.592"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:22.592">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:51:22.328" status="PASS" endtime="20170419 00:51:22.592"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:22.593">${host_state} = Off</msg>
<status starttime="20170419 00:51:22.328" status="PASS" endtime="20170419 00:51:22.593"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:51:22.593">Running != Off</msg>
<status starttime="20170419 00:51:22.593" status="FAIL" endtime="20170419 00:51:22.593"></status>
</kw>
<status starttime="20170419 00:51:22.327" status="FAIL" endtime="20170419 00:51:22.594"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:32.597">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:51:32.597" status="PASS" endtime="20170419 00:51:32.597"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:32.598">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:51:32.597" status="PASS" endtime="20170419 00:51:32.598"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:32.599">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:51:32.598" status="PASS" endtime="20170419 00:51:32.599"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:32.599">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:51:32.599" status="PASS" endtime="20170419 00:51:32.599"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:32.781">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:51:32.600" status="PASS" endtime="20170419 00:51:32.781"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:32.781">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:51:32.781">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:32.599" status="PASS" endtime="20170419 00:51:32.781"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:32.782">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:32.781" status="PASS" endtime="20170419 00:51:32.782"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:32.782">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:32.782" status="PASS" endtime="20170419 00:51:32.783"></status>
</kw>
<status starttime="20170419 00:51:32.596" status="PASS" endtime="20170419 00:51:32.783"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:32.783">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:51:32.783" status="PASS" endtime="20170419 00:51:32.783"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:32.786">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:51:32.785" status="PASS" endtime="20170419 00:51:32.786"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:32.786">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:51:32.786" status="PASS" endtime="20170419 00:51:32.787"></status>
</kw>
<status starttime="20170419 00:51:32.786" status="PASS" endtime="20170419 00:51:32.787"></status>
</kw>
<status starttime="20170419 00:51:32.784" status="PASS" endtime="20170419 00:51:32.787"></status>
</kw>
<status starttime="20170419 00:51:32.783" status="PASS" endtime="20170419 00:51:32.787"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:32.850">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:51:32.850">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:32.787" status="PASS" endtime="20170419 00:51:32.850"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:32.852">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:32.851" status="PASS" endtime="20170419 00:51:32.852"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:32.853">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:32.852" status="PASS" endtime="20170419 00:51:32.853"></status>
</kw>
<status starttime="20170419 00:51:32.852" status="PASS" endtime="20170419 00:51:32.853"></status>
</kw>
<status starttime="20170419 00:51:32.851" status="PASS" endtime="20170419 00:51:32.853"></status>
</kw>
<status starttime="20170419 00:51:32.850" status="PASS" endtime="20170419 00:51:32.853"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:32.853">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:32.595" status="PASS" endtime="20170419 00:51:32.853"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:32.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:32.853" status="PASS" endtime="20170419 00:51:32.854"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:32.854">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:51:32.854">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:51:32.855">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:51:32.854" status="PASS" endtime="20170419 00:51:32.855"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:32.855">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:51:32.595" status="PASS" endtime="20170419 00:51:32.855"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:32.855">${host_state} = Off</msg>
<status starttime="20170419 00:51:32.594" status="PASS" endtime="20170419 00:51:32.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:51:32.856">Running != Off</msg>
<status starttime="20170419 00:51:32.855" status="FAIL" endtime="20170419 00:51:32.856"></status>
</kw>
<status starttime="20170419 00:51:32.594" status="FAIL" endtime="20170419 00:51:32.856"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:42.859">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:51:42.859" status="PASS" endtime="20170419 00:51:42.860"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:42.860">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:51:42.860" status="PASS" endtime="20170419 00:51:42.860"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:42.861">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:51:42.861" status="PASS" endtime="20170419 00:51:42.861"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:42.862">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:51:42.861" status="PASS" endtime="20170419 00:51:42.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:43.039">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:51:42.863" status="PASS" endtime="20170419 00:51:43.039"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:43.039">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:51:43.039">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:42.862" status="PASS" endtime="20170419 00:51:43.039"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:43.040">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:43.040" status="PASS" endtime="20170419 00:51:43.040"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:43.041">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:43.040" status="PASS" endtime="20170419 00:51:43.041"></status>
</kw>
<status starttime="20170419 00:51:42.858" status="PASS" endtime="20170419 00:51:43.041"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:43.041">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:51:43.041" status="PASS" endtime="20170419 00:51:43.041"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:43.043">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:51:43.043" status="PASS" endtime="20170419 00:51:43.043"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:43.044">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:51:43.044" status="PASS" endtime="20170419 00:51:43.044"></status>
</kw>
<status starttime="20170419 00:51:43.044" status="PASS" endtime="20170419 00:51:43.045"></status>
</kw>
<status starttime="20170419 00:51:43.042" status="PASS" endtime="20170419 00:51:43.045"></status>
</kw>
<status starttime="20170419 00:51:43.042" status="PASS" endtime="20170419 00:51:43.045"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:43.108">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:51:43.108">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:43.045" status="PASS" endtime="20170419 00:51:43.108"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:43.110">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:43.109" status="PASS" endtime="20170419 00:51:43.110"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:43.111">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:43.111" status="PASS" endtime="20170419 00:51:43.111"></status>
</kw>
<status starttime="20170419 00:51:43.110" status="PASS" endtime="20170419 00:51:43.111"></status>
</kw>
<status starttime="20170419 00:51:43.109" status="PASS" endtime="20170419 00:51:43.111"></status>
</kw>
<status starttime="20170419 00:51:43.109" status="PASS" endtime="20170419 00:51:43.111"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:43.112">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:42.858" status="PASS" endtime="20170419 00:51:43.112"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:43.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:43.112" status="PASS" endtime="20170419 00:51:43.112"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:43.113">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:51:43.113">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:51:43.113">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:51:43.113" status="PASS" endtime="20170419 00:51:43.113"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:43.113">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:51:42.857" status="PASS" endtime="20170419 00:51:43.113"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:43.114">${host_state} = Off</msg>
<status starttime="20170419 00:51:42.857" status="PASS" endtime="20170419 00:51:43.114"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:51:43.114">Running != Off</msg>
<status starttime="20170419 00:51:43.114" status="FAIL" endtime="20170419 00:51:43.114"></status>
</kw>
<status starttime="20170419 00:51:42.856" status="FAIL" endtime="20170419 00:51:43.115"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:53.118">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:51:53.118" status="PASS" endtime="20170419 00:51:53.119"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:53.120">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:51:53.119" status="PASS" endtime="20170419 00:51:53.120"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:53.120">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:51:53.120" status="PASS" endtime="20170419 00:51:53.120"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:53.121">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:51:53.120" status="PASS" endtime="20170419 00:51:53.121"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:53.297">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:51:53.121" status="PASS" endtime="20170419 00:51:53.297"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:53.297">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:51:53.298">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:53.121" status="PASS" endtime="20170419 00:51:53.298"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:53.298">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:53.298" status="PASS" endtime="20170419 00:51:53.298"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:53.299">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:53.298" status="PASS" endtime="20170419 00:51:53.299"></status>
</kw>
<status starttime="20170419 00:51:53.117" status="PASS" endtime="20170419 00:51:53.299"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:53.300">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:51:53.299" status="PASS" endtime="20170419 00:51:53.300"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:53.302">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:51:53.301" status="PASS" endtime="20170419 00:51:53.302"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:53.303">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:51:53.302" status="PASS" endtime="20170419 00:51:53.303"></status>
</kw>
<status starttime="20170419 00:51:53.302" status="PASS" endtime="20170419 00:51:53.303"></status>
</kw>
<status starttime="20170419 00:51:53.300" status="PASS" endtime="20170419 00:51:53.303"></status>
</kw>
<status starttime="20170419 00:51:53.300" status="PASS" endtime="20170419 00:51:53.303"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:53.367">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:51:53.367">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:53.303" status="PASS" endtime="20170419 00:51:53.367"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:53.369">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:53.368" status="PASS" endtime="20170419 00:51:53.369"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:53.370">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:51:53.370" status="PASS" endtime="20170419 00:51:53.370"></status>
</kw>
<status starttime="20170419 00:51:53.369" status="PASS" endtime="20170419 00:51:53.370"></status>
</kw>
<status starttime="20170419 00:51:53.368" status="PASS" endtime="20170419 00:51:53.371"></status>
</kw>
<status starttime="20170419 00:51:53.368" status="PASS" endtime="20170419 00:51:53.371"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:53.371">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:51:53.116" status="PASS" endtime="20170419 00:51:53.371"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:51:53.371">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:51:53.371" status="PASS" endtime="20170419 00:51:53.371"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:51:53.372">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:51:53.372">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:51:53.372">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:51:53.372" status="PASS" endtime="20170419 00:51:53.372"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:53.372">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:51:53.116" status="PASS" endtime="20170419 00:51:53.373"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:51:53.373">${host_state} = Off</msg>
<status starttime="20170419 00:51:53.115" status="PASS" endtime="20170419 00:51:53.373"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:51:53.374">Running != Off</msg>
<status starttime="20170419 00:51:53.373" status="FAIL" endtime="20170419 00:51:53.374"></status>
</kw>
<status starttime="20170419 00:51:53.115" status="FAIL" endtime="20170419 00:51:53.374"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:03.377">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:52:03.377" status="PASS" endtime="20170419 00:52:03.378"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:03.378">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:52:03.378" status="PASS" endtime="20170419 00:52:03.378"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:03.379">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:52:03.379" status="PASS" endtime="20170419 00:52:03.379"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:03.380">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:52:03.379" status="PASS" endtime="20170419 00:52:03.380"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:03.556">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:52:03.380" status="PASS" endtime="20170419 00:52:03.556"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:03.556">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:52:03.557">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:03.380" status="PASS" endtime="20170419 00:52:03.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:03.557">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:03.557" status="PASS" endtime="20170419 00:52:03.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:03.558">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:03.558" status="PASS" endtime="20170419 00:52:03.558"></status>
</kw>
<status starttime="20170419 00:52:03.376" status="PASS" endtime="20170419 00:52:03.558"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:03.559">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:52:03.558" status="PASS" endtime="20170419 00:52:03.559"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:03.561">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:52:03.560" status="PASS" endtime="20170419 00:52:03.561"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:03.562">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:52:03.562" status="PASS" endtime="20170419 00:52:03.562"></status>
</kw>
<status starttime="20170419 00:52:03.561" status="PASS" endtime="20170419 00:52:03.562"></status>
</kw>
<status starttime="20170419 00:52:03.559" status="PASS" endtime="20170419 00:52:03.562"></status>
</kw>
<status starttime="20170419 00:52:03.559" status="PASS" endtime="20170419 00:52:03.562"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:03.626">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:52:03.626">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:03.563" status="PASS" endtime="20170419 00:52:03.626"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:03.628">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:52:03.627" status="PASS" endtime="20170419 00:52:03.628"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:03.629">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:52:03.629" status="PASS" endtime="20170419 00:52:03.629"></status>
</kw>
<status starttime="20170419 00:52:03.628" status="PASS" endtime="20170419 00:52:03.629"></status>
</kw>
<status starttime="20170419 00:52:03.627" status="PASS" endtime="20170419 00:52:03.629"></status>
</kw>
<status starttime="20170419 00:52:03.626" status="PASS" endtime="20170419 00:52:03.629"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:03.630">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:03.376" status="PASS" endtime="20170419 00:52:03.630"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:03.630">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:03.630" status="PASS" endtime="20170419 00:52:03.630"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:03.631">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:52:03.631">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:52:03.631">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:52:03.631" status="PASS" endtime="20170419 00:52:03.631"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:03.631">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:52:03.375" status="PASS" endtime="20170419 00:52:03.631"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:03.632">${host_state} = Off</msg>
<status starttime="20170419 00:52:03.375" status="PASS" endtime="20170419 00:52:03.632"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:52:03.632">Running != Off</msg>
<status starttime="20170419 00:52:03.632" status="FAIL" endtime="20170419 00:52:03.632"></status>
</kw>
<status starttime="20170419 00:52:03.374" status="FAIL" endtime="20170419 00:52:03.632"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:13.636">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:52:13.636" status="PASS" endtime="20170419 00:52:13.636"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:13.637">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:52:13.637" status="PASS" endtime="20170419 00:52:13.637"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:13.637">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:52:13.637" status="PASS" endtime="20170419 00:52:13.637"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:13.638">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:52:13.638" status="PASS" endtime="20170419 00:52:13.638"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:13.815">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:52:13.639" status="PASS" endtime="20170419 00:52:13.815"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:13.815">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:52:13.815">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:13.638" status="PASS" endtime="20170419 00:52:13.815"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:13.816">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:13.815" status="PASS" endtime="20170419 00:52:13.816"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:13.816">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:13.816" status="PASS" endtime="20170419 00:52:13.816"></status>
</kw>
<status starttime="20170419 00:52:13.635" status="PASS" endtime="20170419 00:52:13.816"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:13.817">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:52:13.817" status="PASS" endtime="20170419 00:52:13.817"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:13.819">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:52:13.818" status="PASS" endtime="20170419 00:52:13.819"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:13.820">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:52:13.820" status="PASS" endtime="20170419 00:52:13.820"></status>
</kw>
<status starttime="20170419 00:52:13.819" status="PASS" endtime="20170419 00:52:13.820"></status>
</kw>
<status starttime="20170419 00:52:13.818" status="PASS" endtime="20170419 00:52:13.820"></status>
</kw>
<status starttime="20170419 00:52:13.817" status="PASS" endtime="20170419 00:52:13.821"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:13.883">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:52:13.883">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:13.821" status="PASS" endtime="20170419 00:52:13.883"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:13.885">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:52:13.884" status="PASS" endtime="20170419 00:52:13.885"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:13.886">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:52:13.886" status="PASS" endtime="20170419 00:52:13.886"></status>
</kw>
<status starttime="20170419 00:52:13.885" status="PASS" endtime="20170419 00:52:13.886"></status>
</kw>
<status starttime="20170419 00:52:13.884" status="PASS" endtime="20170419 00:52:13.886"></status>
</kw>
<status starttime="20170419 00:52:13.883" status="PASS" endtime="20170419 00:52:13.886"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:13.887">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:13.634" status="PASS" endtime="20170419 00:52:13.887"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:13.887">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:13.887" status="PASS" endtime="20170419 00:52:13.887"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:13.888">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:52:13.888">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:52:13.888">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:52:13.887" status="PASS" endtime="20170419 00:52:13.888"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:13.888">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:52:13.634" status="PASS" endtime="20170419 00:52:13.888"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:13.888">${host_state} = Off</msg>
<status starttime="20170419 00:52:13.633" status="PASS" endtime="20170419 00:52:13.889"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:52:13.889">Running != Off</msg>
<status starttime="20170419 00:52:13.889" status="FAIL" endtime="20170419 00:52:13.889"></status>
</kw>
<status starttime="20170419 00:52:13.633" status="FAIL" endtime="20170419 00:52:13.889"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:23.894">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:52:23.893" status="PASS" endtime="20170419 00:52:23.894"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:23.895">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:52:23.894" status="PASS" endtime="20170419 00:52:23.895"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:23.895">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:52:23.895" status="PASS" endtime="20170419 00:52:23.895"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:23.896">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:52:23.895" status="PASS" endtime="20170419 00:52:23.896"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:24.075">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:52:23.896" status="PASS" endtime="20170419 00:52:24.075"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:24.075">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:52:24.075">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:23.896" status="PASS" endtime="20170419 00:52:24.075"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:24.076">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:24.075" status="PASS" endtime="20170419 00:52:24.076"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:24.076">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:24.076" status="PASS" endtime="20170419 00:52:24.077"></status>
</kw>
<status starttime="20170419 00:52:23.892" status="PASS" endtime="20170419 00:52:24.077"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:24.077">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:52:24.077" status="PASS" endtime="20170419 00:52:24.077"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:24.079">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:52:24.079" status="PASS" endtime="20170419 00:52:24.079"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:24.080">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:52:24.080" status="PASS" endtime="20170419 00:52:24.080"></status>
</kw>
<status starttime="20170419 00:52:24.079" status="PASS" endtime="20170419 00:52:24.080"></status>
</kw>
<status starttime="20170419 00:52:24.078" status="PASS" endtime="20170419 00:52:24.081"></status>
</kw>
<status starttime="20170419 00:52:24.078" status="PASS" endtime="20170419 00:52:24.081"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:24.151">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:52:24.151">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:24.081" status="PASS" endtime="20170419 00:52:24.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:24.153">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:52:24.152" status="PASS" endtime="20170419 00:52:24.153"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:24.154">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:52:24.154" status="PASS" endtime="20170419 00:52:24.154"></status>
</kw>
<status starttime="20170419 00:52:24.153" status="PASS" endtime="20170419 00:52:24.155"></status>
</kw>
<status starttime="20170419 00:52:24.152" status="PASS" endtime="20170419 00:52:24.155"></status>
</kw>
<status starttime="20170419 00:52:24.151" status="PASS" endtime="20170419 00:52:24.155"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:24.155">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:23.891" status="PASS" endtime="20170419 00:52:24.155"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:24.156">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:24.155" status="PASS" endtime="20170419 00:52:24.156"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:24.156">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:52:24.156">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:52:24.157">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:52:24.156" status="PASS" endtime="20170419 00:52:24.157"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:24.157">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:52:23.891" status="PASS" endtime="20170419 00:52:24.157"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:24.157">${host_state} = Off</msg>
<status starttime="20170419 00:52:23.890" status="PASS" endtime="20170419 00:52:24.157"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:52:24.158">Running != Off</msg>
<status starttime="20170419 00:52:24.158" status="FAIL" endtime="20170419 00:52:24.158"></status>
</kw>
<status starttime="20170419 00:52:23.890" status="FAIL" endtime="20170419 00:52:24.159"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:34.163">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:52:34.162" status="PASS" endtime="20170419 00:52:34.163"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:34.164">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:52:34.163" status="PASS" endtime="20170419 00:52:34.164"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:34.164">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:52:34.164" status="PASS" endtime="20170419 00:52:34.164"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:34.165">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:52:34.165" status="PASS" endtime="20170419 00:52:34.165"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:34.343">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:52:34.166" status="PASS" endtime="20170419 00:52:34.343"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:34.343">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:52:34.343">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:34.165" status="PASS" endtime="20170419 00:52:34.343"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:34.344">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:34.343" status="PASS" endtime="20170419 00:52:34.344"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:34.344">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:34.344" status="PASS" endtime="20170419 00:52:34.344"></status>
</kw>
<status starttime="20170419 00:52:34.162" status="PASS" endtime="20170419 00:52:34.345"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:34.345">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:52:34.345" status="PASS" endtime="20170419 00:52:34.345"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:34.347">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:52:34.346" status="PASS" endtime="20170419 00:52:34.347"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:34.348">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:52:34.348" status="PASS" endtime="20170419 00:52:34.348"></status>
</kw>
<status starttime="20170419 00:52:34.348" status="PASS" endtime="20170419 00:52:34.349"></status>
</kw>
<status starttime="20170419 00:52:34.346" status="PASS" endtime="20170419 00:52:34.349"></status>
</kw>
<status starttime="20170419 00:52:34.345" status="PASS" endtime="20170419 00:52:34.349"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:34.412">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:52:34.412">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:34.349" status="PASS" endtime="20170419 00:52:34.412"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:34.414">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:52:34.413" status="PASS" endtime="20170419 00:52:34.414"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:34.415">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:52:34.415" status="PASS" endtime="20170419 00:52:34.415"></status>
</kw>
<status starttime="20170419 00:52:34.414" status="PASS" endtime="20170419 00:52:34.415"></status>
</kw>
<status starttime="20170419 00:52:34.413" status="PASS" endtime="20170419 00:52:34.415"></status>
</kw>
<status starttime="20170419 00:52:34.412" status="PASS" endtime="20170419 00:52:34.415"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:34.415">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:34.161" status="PASS" endtime="20170419 00:52:34.415"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:34.416">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:34.416" status="PASS" endtime="20170419 00:52:34.416"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:34.417">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:52:34.417">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:52:34.417">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:52:34.416" status="PASS" endtime="20170419 00:52:34.417"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:34.417">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:52:34.160" status="PASS" endtime="20170419 00:52:34.417"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:34.417">${host_state} = Off</msg>
<status starttime="20170419 00:52:34.160" status="PASS" endtime="20170419 00:52:34.417"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:52:34.418">Running != Off</msg>
<status starttime="20170419 00:52:34.418" status="FAIL" endtime="20170419 00:52:34.418"></status>
</kw>
<status starttime="20170419 00:52:34.159" status="FAIL" endtime="20170419 00:52:34.418"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:44.422">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:52:44.422" status="PASS" endtime="20170419 00:52:44.422"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:44.423">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:52:44.423" status="PASS" endtime="20170419 00:52:44.423"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:44.424">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:52:44.423" status="PASS" endtime="20170419 00:52:44.424"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:44.424">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:52:44.424" status="PASS" endtime="20170419 00:52:44.424"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:44.599">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:52:44.425" status="PASS" endtime="20170419 00:52:44.600"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:44.600">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:52:44.600">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:44.425" status="PASS" endtime="20170419 00:52:44.600"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:44.600">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:44.600" status="PASS" endtime="20170419 00:52:44.600"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:44.601">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:44.601" status="PASS" endtime="20170419 00:52:44.601"></status>
</kw>
<status starttime="20170419 00:52:44.421" status="PASS" endtime="20170419 00:52:44.601"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:44.602">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:52:44.601" status="PASS" endtime="20170419 00:52:44.602"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:44.604">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:52:44.603" status="PASS" endtime="20170419 00:52:44.604"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:44.605">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:52:44.605" status="PASS" endtime="20170419 00:52:44.605"></status>
</kw>
<status starttime="20170419 00:52:44.604" status="PASS" endtime="20170419 00:52:44.605"></status>
</kw>
<status starttime="20170419 00:52:44.603" status="PASS" endtime="20170419 00:52:44.605"></status>
</kw>
<status starttime="20170419 00:52:44.602" status="PASS" endtime="20170419 00:52:44.605"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:44.667">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:52:44.667">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:44.605" status="PASS" endtime="20170419 00:52:44.667"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:44.669">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:52:44.669" status="PASS" endtime="20170419 00:52:44.669"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:44.670">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:52:44.670" status="PASS" endtime="20170419 00:52:44.670"></status>
</kw>
<status starttime="20170419 00:52:44.669" status="PASS" endtime="20170419 00:52:44.670"></status>
</kw>
<status starttime="20170419 00:52:44.668" status="PASS" endtime="20170419 00:52:44.670"></status>
</kw>
<status starttime="20170419 00:52:44.668" status="PASS" endtime="20170419 00:52:44.670"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:44.671">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:44.420" status="PASS" endtime="20170419 00:52:44.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:44.671">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:44.671" status="PASS" endtime="20170419 00:52:44.671"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:44.672">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:52:44.672">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:52:44.672">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:52:44.671" status="PASS" endtime="20170419 00:52:44.672"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:44.672">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:52:44.420" status="PASS" endtime="20170419 00:52:44.672"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:44.672">${host_state} = Off</msg>
<status starttime="20170419 00:52:44.419" status="PASS" endtime="20170419 00:52:44.673"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:52:44.673">Running != Off</msg>
<status starttime="20170419 00:52:44.673" status="FAIL" endtime="20170419 00:52:44.673"></status>
</kw>
<status starttime="20170419 00:52:44.419" status="FAIL" endtime="20170419 00:52:44.673"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:54.677">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:52:54.677" status="PASS" endtime="20170419 00:52:54.678"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:54.678">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:52:54.678" status="PASS" endtime="20170419 00:52:54.678"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:54.679">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:52:54.679" status="PASS" endtime="20170419 00:52:54.679"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:54.680">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:52:54.679" status="PASS" endtime="20170419 00:52:54.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:54.855">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:52:54.680" status="PASS" endtime="20170419 00:52:54.855"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:54.855">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:52:54.855">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:54.680" status="PASS" endtime="20170419 00:52:54.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:54.856">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:54.856" status="PASS" endtime="20170419 00:52:54.856"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:54.857">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:54.856" status="PASS" endtime="20170419 00:52:54.857"></status>
</kw>
<status starttime="20170419 00:52:54.676" status="PASS" endtime="20170419 00:52:54.857"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:54.857">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:52:54.857" status="PASS" endtime="20170419 00:52:54.857"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:54.859">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:52:54.859" status="PASS" endtime="20170419 00:52:54.859"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:54.860">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:52:54.860" status="PASS" endtime="20170419 00:52:54.860"></status>
</kw>
<status starttime="20170419 00:52:54.860" status="PASS" endtime="20170419 00:52:54.861"></status>
</kw>
<status starttime="20170419 00:52:54.858" status="PASS" endtime="20170419 00:52:54.861"></status>
</kw>
<status starttime="20170419 00:52:54.858" status="PASS" endtime="20170419 00:52:54.861"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:54.923">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:52:54.924">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:54.861" status="PASS" endtime="20170419 00:52:54.924"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:54.925">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:52:54.925" status="PASS" endtime="20170419 00:52:54.925"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:54.926">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:52:54.926" status="PASS" endtime="20170419 00:52:54.926"></status>
</kw>
<status starttime="20170419 00:52:54.926" status="PASS" endtime="20170419 00:52:54.927"></status>
</kw>
<status starttime="20170419 00:52:54.924" status="PASS" endtime="20170419 00:52:54.927"></status>
</kw>
<status starttime="20170419 00:52:54.924" status="PASS" endtime="20170419 00:52:54.927"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:54.927">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:52:54.675" status="PASS" endtime="20170419 00:52:54.927"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:52:54.928">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:52:54.927" status="PASS" endtime="20170419 00:52:54.928"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:52:54.928">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:52:54.928">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:52:54.928">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:52:54.928" status="PASS" endtime="20170419 00:52:54.928"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:54.929">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:52:54.675" status="PASS" endtime="20170419 00:52:54.929"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:52:54.929">${host_state} = Off</msg>
<status starttime="20170419 00:52:54.674" status="PASS" endtime="20170419 00:52:54.929"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:52:54.930">Running != Off</msg>
<status starttime="20170419 00:52:54.929" status="FAIL" endtime="20170419 00:52:54.930"></status>
</kw>
<status starttime="20170419 00:52:54.674" status="FAIL" endtime="20170419 00:52:54.930"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:04.934">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:53:04.933" status="PASS" endtime="20170419 00:53:04.934"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:04.935">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:53:04.934" status="PASS" endtime="20170419 00:53:04.935"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:04.935">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:53:04.935" status="PASS" endtime="20170419 00:53:04.935"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:04.936">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:53:04.936" status="PASS" endtime="20170419 00:53:04.936"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:05.135">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:53:04.937" status="PASS" endtime="20170419 00:53:05.135"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:05.135">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:53:05.136">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:04.936" status="PASS" endtime="20170419 00:53:05.136"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:05.136">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:05.136" status="PASS" endtime="20170419 00:53:05.136"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:05.137">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:05.136" status="PASS" endtime="20170419 00:53:05.137"></status>
</kw>
<status starttime="20170419 00:53:04.933" status="PASS" endtime="20170419 00:53:05.137"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:05.138">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:53:05.137" status="PASS" endtime="20170419 00:53:05.138"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:05.140">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:53:05.139" status="PASS" endtime="20170419 00:53:05.140"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:05.141">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:53:05.141" status="PASS" endtime="20170419 00:53:05.141"></status>
</kw>
<status starttime="20170419 00:53:05.140" status="PASS" endtime="20170419 00:53:05.141"></status>
</kw>
<status starttime="20170419 00:53:05.138" status="PASS" endtime="20170419 00:53:05.141"></status>
</kw>
<status starttime="20170419 00:53:05.138" status="PASS" endtime="20170419 00:53:05.141"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:05.204">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:53:05.204">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:05.142" status="PASS" endtime="20170419 00:53:05.204"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:05.206">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:53:05.205" status="PASS" endtime="20170419 00:53:05.206"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:05.207">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:53:05.206" status="PASS" endtime="20170419 00:53:05.207"></status>
</kw>
<status starttime="20170419 00:53:05.206" status="PASS" endtime="20170419 00:53:05.207"></status>
</kw>
<status starttime="20170419 00:53:05.205" status="PASS" endtime="20170419 00:53:05.207"></status>
</kw>
<status starttime="20170419 00:53:05.204" status="PASS" endtime="20170419 00:53:05.207"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:05.207">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:04.932" status="PASS" endtime="20170419 00:53:05.207"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:05.208">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:05.208" status="PASS" endtime="20170419 00:53:05.208"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:05.208">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:53:05.208">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:53:05.209">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:53:05.208" status="PASS" endtime="20170419 00:53:05.209"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:05.209">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:53:04.932" status="PASS" endtime="20170419 00:53:05.209"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:05.209">${host_state} = Off</msg>
<status starttime="20170419 00:53:04.931" status="PASS" endtime="20170419 00:53:05.209"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:53:05.210">Running != Off</msg>
<status starttime="20170419 00:53:05.209" status="FAIL" endtime="20170419 00:53:05.210"></status>
</kw>
<status starttime="20170419 00:53:04.930" status="FAIL" endtime="20170419 00:53:05.210"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:15.214">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:53:15.213" status="PASS" endtime="20170419 00:53:15.214"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:15.215">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:53:15.214" status="PASS" endtime="20170419 00:53:15.215"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:15.215">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:53:15.215" status="PASS" endtime="20170419 00:53:15.215"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:15.216">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:53:15.216" status="PASS" endtime="20170419 00:53:15.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:15.415">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:53:15.217" status="PASS" endtime="20170419 00:53:15.415"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:15.415">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:53:15.415">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:15.216" status="PASS" endtime="20170419 00:53:15.415"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:15.415">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:15.415" status="PASS" endtime="20170419 00:53:15.416"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:15.416">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:15.416" status="PASS" endtime="20170419 00:53:15.416"></status>
</kw>
<status starttime="20170419 00:53:15.213" status="PASS" endtime="20170419 00:53:15.416"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:15.417">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:53:15.417" status="PASS" endtime="20170419 00:53:15.417"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:15.419">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:53:15.418" status="PASS" endtime="20170419 00:53:15.419"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:15.420">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:53:15.420" status="PASS" endtime="20170419 00:53:15.420"></status>
</kw>
<status starttime="20170419 00:53:15.419" status="PASS" endtime="20170419 00:53:15.420"></status>
</kw>
<status starttime="20170419 00:53:15.418" status="PASS" endtime="20170419 00:53:15.420"></status>
</kw>
<status starttime="20170419 00:53:15.417" status="PASS" endtime="20170419 00:53:15.420"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:15.483">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:53:15.483">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:15.421" status="PASS" endtime="20170419 00:53:15.483"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:15.485">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:53:15.484" status="PASS" endtime="20170419 00:53:15.485"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:15.486">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:53:15.485" status="PASS" endtime="20170419 00:53:15.486"></status>
</kw>
<status starttime="20170419 00:53:15.485" status="PASS" endtime="20170419 00:53:15.486"></status>
</kw>
<status starttime="20170419 00:53:15.484" status="PASS" endtime="20170419 00:53:15.486"></status>
</kw>
<status starttime="20170419 00:53:15.483" status="PASS" endtime="20170419 00:53:15.486"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:15.486">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:15.212" status="PASS" endtime="20170419 00:53:15.486"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:15.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:15.487" status="PASS" endtime="20170419 00:53:15.487"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:15.488">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:53:15.488">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:53:15.488">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:53:15.487" status="PASS" endtime="20170419 00:53:15.488"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:15.488">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:53:15.211" status="PASS" endtime="20170419 00:53:15.488"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:15.488">${host_state} = Off</msg>
<status starttime="20170419 00:53:15.211" status="PASS" endtime="20170419 00:53:15.488"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:53:15.489">Running != Off</msg>
<status starttime="20170419 00:53:15.489" status="FAIL" endtime="20170419 00:53:15.489"></status>
</kw>
<status starttime="20170419 00:53:15.210" status="FAIL" endtime="20170419 00:53:15.489"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:25.493">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:53:25.492" status="PASS" endtime="20170419 00:53:25.494"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:25.494">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:53:25.494" status="PASS" endtime="20170419 00:53:25.494"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:25.495">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:53:25.494" status="PASS" endtime="20170419 00:53:25.495"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:25.495">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:53:25.495" status="PASS" endtime="20170419 00:53:25.495"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:25.700">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:53:25.496" status="PASS" endtime="20170419 00:53:25.700"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:25.700">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:53:25.700">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:25.496" status="PASS" endtime="20170419 00:53:25.700"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:25.701">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:25.701" status="PASS" endtime="20170419 00:53:25.701"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:25.702">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:25.701" status="PASS" endtime="20170419 00:53:25.702"></status>
</kw>
<status starttime="20170419 00:53:25.492" status="PASS" endtime="20170419 00:53:25.702"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:25.702">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:53:25.702" status="PASS" endtime="20170419 00:53:25.702"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:25.704">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:53:25.704" status="PASS" endtime="20170419 00:53:25.704"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:25.705">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:53:25.705" status="PASS" endtime="20170419 00:53:25.706"></status>
</kw>
<status starttime="20170419 00:53:25.705" status="PASS" endtime="20170419 00:53:25.706"></status>
</kw>
<status starttime="20170419 00:53:25.703" status="PASS" endtime="20170419 00:53:25.706"></status>
</kw>
<status starttime="20170419 00:53:25.703" status="PASS" endtime="20170419 00:53:25.706"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:25.768">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:53:25.769">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:25.706" status="PASS" endtime="20170419 00:53:25.769"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:25.770">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:53:25.770" status="PASS" endtime="20170419 00:53:25.770"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:25.771">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:53:25.771" status="PASS" endtime="20170419 00:53:25.772"></status>
</kw>
<status starttime="20170419 00:53:25.771" status="PASS" endtime="20170419 00:53:25.772"></status>
</kw>
<status starttime="20170419 00:53:25.769" status="PASS" endtime="20170419 00:53:25.772"></status>
</kw>
<status starttime="20170419 00:53:25.769" status="PASS" endtime="20170419 00:53:25.772"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:25.772">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:25.491" status="PASS" endtime="20170419 00:53:25.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:25.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:25.772" status="PASS" endtime="20170419 00:53:25.773"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:25.773">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:53:25.773">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:53:25.773">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:53:25.773" status="PASS" endtime="20170419 00:53:25.773"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:25.774">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:53:25.491" status="PASS" endtime="20170419 00:53:25.774"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:25.774">${host_state} = Off</msg>
<status starttime="20170419 00:53:25.490" status="PASS" endtime="20170419 00:53:25.774"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:53:25.775">Running != Off</msg>
<status starttime="20170419 00:53:25.774" status="FAIL" endtime="20170419 00:53:25.775"></status>
</kw>
<status starttime="20170419 00:53:25.490" status="FAIL" endtime="20170419 00:53:25.775"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:35.779">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:53:35.779" status="PASS" endtime="20170419 00:53:35.780"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:35.780">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:53:35.780" status="PASS" endtime="20170419 00:53:35.780"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:35.781">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:53:35.780" status="PASS" endtime="20170419 00:53:35.781"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:35.781">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:53:35.781" status="PASS" endtime="20170419 00:53:35.781"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:35.988">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:53:35.782" status="PASS" endtime="20170419 00:53:35.988"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:35.988">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:53:35.988">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:35.782" status="PASS" endtime="20170419 00:53:35.988"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:35.989">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:35.988" status="PASS" endtime="20170419 00:53:35.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:35.989">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:35.989" status="PASS" endtime="20170419 00:53:35.989"></status>
</kw>
<status starttime="20170419 00:53:35.778" status="PASS" endtime="20170419 00:53:35.990"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:35.990">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:53:35.990" status="PASS" endtime="20170419 00:53:35.990"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:35.993">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:53:35.992" status="PASS" endtime="20170419 00:53:35.993"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:35.994">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:53:35.994" status="PASS" endtime="20170419 00:53:35.995"></status>
</kw>
<status starttime="20170419 00:53:35.993" status="PASS" endtime="20170419 00:53:35.995"></status>
</kw>
<status starttime="20170419 00:53:35.991" status="PASS" endtime="20170419 00:53:35.995"></status>
</kw>
<status starttime="20170419 00:53:35.990" status="PASS" endtime="20170419 00:53:35.995"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:36.058">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:53:36.058">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:35.995" status="PASS" endtime="20170419 00:53:36.058"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:36.060">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:53:36.059" status="PASS" endtime="20170419 00:53:36.060"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:36.061">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:53:36.060" status="PASS" endtime="20170419 00:53:36.061"></status>
</kw>
<status starttime="20170419 00:53:36.060" status="PASS" endtime="20170419 00:53:36.061"></status>
</kw>
<status starttime="20170419 00:53:36.059" status="PASS" endtime="20170419 00:53:36.061"></status>
</kw>
<status starttime="20170419 00:53:36.058" status="PASS" endtime="20170419 00:53:36.061"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:36.061">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:35.778" status="PASS" endtime="20170419 00:53:36.061"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:36.062">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:36.062" status="PASS" endtime="20170419 00:53:36.062"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:36.062">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:53:36.063">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:53:36.063">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:53:36.062" status="PASS" endtime="20170419 00:53:36.063"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:36.063">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:53:35.777" status="PASS" endtime="20170419 00:53:36.063"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:36.063">${host_state} = Off</msg>
<status starttime="20170419 00:53:35.776" status="PASS" endtime="20170419 00:53:36.063"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:53:36.064">Running != Off</msg>
<status starttime="20170419 00:53:36.064" status="FAIL" endtime="20170419 00:53:36.064"></status>
</kw>
<status starttime="20170419 00:53:35.775" status="FAIL" endtime="20170419 00:53:36.064"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:46.068">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:53:46.067" status="PASS" endtime="20170419 00:53:46.068"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:46.069">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:53:46.068" status="PASS" endtime="20170419 00:53:46.069"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:46.069">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:53:46.069" status="PASS" endtime="20170419 00:53:46.069"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:46.070">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:53:46.070" status="PASS" endtime="20170419 00:53:46.070"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:46.270">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:53:46.071" status="PASS" endtime="20170419 00:53:46.270"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:46.270">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:53:46.270">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:46.070" status="PASS" endtime="20170419 00:53:46.270"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:46.271">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:46.270" status="PASS" endtime="20170419 00:53:46.271"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:46.271">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:46.271" status="PASS" endtime="20170419 00:53:46.271"></status>
</kw>
<status starttime="20170419 00:53:46.067" status="PASS" endtime="20170419 00:53:46.272"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:46.272">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:53:46.272" status="PASS" endtime="20170419 00:53:46.272"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:46.274">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:53:46.273" status="PASS" endtime="20170419 00:53:46.274"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:46.275">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:53:46.275" status="PASS" endtime="20170419 00:53:46.275"></status>
</kw>
<status starttime="20170419 00:53:46.274" status="PASS" endtime="20170419 00:53:46.275"></status>
</kw>
<status starttime="20170419 00:53:46.273" status="PASS" endtime="20170419 00:53:46.275"></status>
</kw>
<status starttime="20170419 00:53:46.272" status="PASS" endtime="20170419 00:53:46.275"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:46.338">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:53:46.339">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:46.276" status="PASS" endtime="20170419 00:53:46.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:46.340">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:53:46.340" status="PASS" endtime="20170419 00:53:46.340"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:46.341">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:53:46.341" status="PASS" endtime="20170419 00:53:46.341"></status>
</kw>
<status starttime="20170419 00:53:46.340" status="PASS" endtime="20170419 00:53:46.341"></status>
</kw>
<status starttime="20170419 00:53:46.339" status="PASS" endtime="20170419 00:53:46.341"></status>
</kw>
<status starttime="20170419 00:53:46.339" status="PASS" endtime="20170419 00:53:46.342"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:46.342">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:46.066" status="PASS" endtime="20170419 00:53:46.342"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:46.342">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:46.342" status="PASS" endtime="20170419 00:53:46.342"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:46.343">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:53:46.343">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:53:46.343">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:53:46.343" status="PASS" endtime="20170419 00:53:46.343"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:46.343">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:53:46.066" status="PASS" endtime="20170419 00:53:46.343"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:46.344">${host_state} = Off</msg>
<status starttime="20170419 00:53:46.065" status="PASS" endtime="20170419 00:53:46.344"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:53:46.344">Running != Off</msg>
<status starttime="20170419 00:53:46.344" status="FAIL" endtime="20170419 00:53:46.344"></status>
</kw>
<status starttime="20170419 00:53:46.065" status="FAIL" endtime="20170419 00:53:46.345"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:56.348">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:53:56.348" status="PASS" endtime="20170419 00:53:56.350"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:56.350">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:53:56.350" status="PASS" endtime="20170419 00:53:56.350"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:56.351">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:53:56.350" status="PASS" endtime="20170419 00:53:56.351"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:56.351">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:53:56.351" status="PASS" endtime="20170419 00:53:56.351"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:56.538">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:53:56.353" status="PASS" endtime="20170419 00:53:56.538"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:56.538">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:53:56.538">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:56.353" status="PASS" endtime="20170419 00:53:56.538"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:56.539">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:56.539" status="PASS" endtime="20170419 00:53:56.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:56.539">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:56.539" status="PASS" endtime="20170419 00:53:56.540"></status>
</kw>
<status starttime="20170419 00:53:56.347" status="PASS" endtime="20170419 00:53:56.540"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:56.540">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:53:56.540" status="PASS" endtime="20170419 00:53:56.540"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:56.542">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:53:56.542" status="PASS" endtime="20170419 00:53:56.542"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:56.543">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:53:56.543" status="PASS" endtime="20170419 00:53:56.543"></status>
</kw>
<status starttime="20170419 00:53:56.542" status="PASS" endtime="20170419 00:53:56.543"></status>
</kw>
<status starttime="20170419 00:53:56.541" status="PASS" endtime="20170419 00:53:56.544"></status>
</kw>
<status starttime="20170419 00:53:56.541" status="PASS" endtime="20170419 00:53:56.544"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:56.613">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:53:56.613">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:56.544" status="PASS" endtime="20170419 00:53:56.613"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:56.615">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:53:56.614" status="PASS" endtime="20170419 00:53:56.615"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:56.616">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:53:56.615" status="PASS" endtime="20170419 00:53:56.616"></status>
</kw>
<status starttime="20170419 00:53:56.615" status="PASS" endtime="20170419 00:53:56.616"></status>
</kw>
<status starttime="20170419 00:53:56.614" status="PASS" endtime="20170419 00:53:56.616"></status>
</kw>
<status starttime="20170419 00:53:56.613" status="PASS" endtime="20170419 00:53:56.616"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:56.616">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:53:56.347" status="PASS" endtime="20170419 00:53:56.616"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:53:56.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:53:56.617" status="PASS" endtime="20170419 00:53:56.617"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:53:56.617">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:53:56.618">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:53:56.618">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:53:56.617" status="PASS" endtime="20170419 00:53:56.618"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:56.618">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:53:56.346" status="PASS" endtime="20170419 00:53:56.618"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:53:56.618">${host_state} = Off</msg>
<status starttime="20170419 00:53:56.346" status="PASS" endtime="20170419 00:53:56.618"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:53:56.619">Running != Off</msg>
<status starttime="20170419 00:53:56.619" status="FAIL" endtime="20170419 00:53:56.619"></status>
</kw>
<status starttime="20170419 00:53:56.345" status="FAIL" endtime="20170419 00:53:56.619"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:06.623">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:54:06.623" status="PASS" endtime="20170419 00:54:06.624"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:06.624">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:54:06.624" status="PASS" endtime="20170419 00:54:06.624"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:06.625">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:54:06.625" status="PASS" endtime="20170419 00:54:06.625"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:06.626">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:54:06.625" status="PASS" endtime="20170419 00:54:06.626"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:06.802">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:54:06.626" status="PASS" endtime="20170419 00:54:06.802"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:06.802">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:54:06.802">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:06.626" status="PASS" endtime="20170419 00:54:06.802"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:06.803">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:06.802" status="PASS" endtime="20170419 00:54:06.803"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:06.803">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:06.803" status="PASS" endtime="20170419 00:54:06.804"></status>
</kw>
<status starttime="20170419 00:54:06.622" status="PASS" endtime="20170419 00:54:06.804"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:06.804">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:54:06.804" status="PASS" endtime="20170419 00:54:06.804"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:06.806">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:54:06.806" status="PASS" endtime="20170419 00:54:06.806"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:06.808">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:54:06.807" status="PASS" endtime="20170419 00:54:06.808"></status>
</kw>
<status starttime="20170419 00:54:06.807" status="PASS" endtime="20170419 00:54:06.808"></status>
</kw>
<status starttime="20170419 00:54:06.805" status="PASS" endtime="20170419 00:54:06.808"></status>
</kw>
<status starttime="20170419 00:54:06.805" status="PASS" endtime="20170419 00:54:06.808"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:06.902">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:54:06.902">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:06.808" status="PASS" endtime="20170419 00:54:06.902"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:06.904">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:54:06.903" status="PASS" endtime="20170419 00:54:06.904"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:06.905">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:54:06.905" status="PASS" endtime="20170419 00:54:06.905"></status>
</kw>
<status starttime="20170419 00:54:06.904" status="PASS" endtime="20170419 00:54:06.905"></status>
</kw>
<status starttime="20170419 00:54:06.903" status="PASS" endtime="20170419 00:54:06.905"></status>
</kw>
<status starttime="20170419 00:54:06.902" status="PASS" endtime="20170419 00:54:06.905"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:06.905">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:06.622" status="PASS" endtime="20170419 00:54:06.905"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:06.906">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:06.906" status="PASS" endtime="20170419 00:54:06.906"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:06.907">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:54:06.907">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:54:06.907">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:54:06.906" status="PASS" endtime="20170419 00:54:06.907"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:06.907">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:54:06.621" status="PASS" endtime="20170419 00:54:06.907"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:06.907">${host_state} = Off</msg>
<status starttime="20170419 00:54:06.620" status="PASS" endtime="20170419 00:54:06.907"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:54:06.908">Running != Off</msg>
<status starttime="20170419 00:54:06.908" status="FAIL" endtime="20170419 00:54:06.908"></status>
</kw>
<status starttime="20170419 00:54:06.620" status="FAIL" endtime="20170419 00:54:06.908"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:16.912">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:54:16.912" status="PASS" endtime="20170419 00:54:16.912"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:16.913">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:54:16.913" status="PASS" endtime="20170419 00:54:16.913"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:16.914">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:54:16.913" status="PASS" endtime="20170419 00:54:16.914"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:16.914">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:54:16.914" status="PASS" endtime="20170419 00:54:16.914"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:17.097">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:54:16.915" status="PASS" endtime="20170419 00:54:17.097"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:17.097">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:54:17.097">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:16.915" status="PASS" endtime="20170419 00:54:17.097"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:17.098">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:17.097" status="PASS" endtime="20170419 00:54:17.098"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:17.098">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:17.098" status="PASS" endtime="20170419 00:54:17.098"></status>
</kw>
<status starttime="20170419 00:54:16.911" status="PASS" endtime="20170419 00:54:17.099"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:17.099">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:54:17.099" status="PASS" endtime="20170419 00:54:17.099"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:17.101">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:54:17.101" status="PASS" endtime="20170419 00:54:17.101"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:17.102">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:54:17.102" status="PASS" endtime="20170419 00:54:17.102"></status>
</kw>
<status starttime="20170419 00:54:17.101" status="PASS" endtime="20170419 00:54:17.102"></status>
</kw>
<status starttime="20170419 00:54:17.100" status="PASS" endtime="20170419 00:54:17.102"></status>
</kw>
<status starttime="20170419 00:54:17.099" status="PASS" endtime="20170419 00:54:17.102"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:17.193">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:54:17.193">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:17.103" status="PASS" endtime="20170419 00:54:17.193"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:17.195">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:54:17.194" status="PASS" endtime="20170419 00:54:17.195"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:17.196">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:54:17.195" status="PASS" endtime="20170419 00:54:17.196"></status>
</kw>
<status starttime="20170419 00:54:17.195" status="PASS" endtime="20170419 00:54:17.196"></status>
</kw>
<status starttime="20170419 00:54:17.194" status="PASS" endtime="20170419 00:54:17.196"></status>
</kw>
<status starttime="20170419 00:54:17.193" status="PASS" endtime="20170419 00:54:17.196"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:17.196">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:16.910" status="PASS" endtime="20170419 00:54:17.196"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:17.197">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:17.197" status="PASS" endtime="20170419 00:54:17.197"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:17.197">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:54:17.198">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:54:17.198">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:54:17.197" status="PASS" endtime="20170419 00:54:17.198"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:17.198">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:54:16.910" status="PASS" endtime="20170419 00:54:17.198"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:17.198">${host_state} = Off</msg>
<status starttime="20170419 00:54:16.909" status="PASS" endtime="20170419 00:54:17.198"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:54:17.199">Running != Off</msg>
<status starttime="20170419 00:54:17.199" status="FAIL" endtime="20170419 00:54:17.199"></status>
</kw>
<status starttime="20170419 00:54:16.909" status="FAIL" endtime="20170419 00:54:17.199"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:27.203">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:54:27.202" status="PASS" endtime="20170419 00:54:27.204"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:27.204">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:54:27.204" status="PASS" endtime="20170419 00:54:27.204"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:27.205">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:54:27.205" status="PASS" endtime="20170419 00:54:27.205"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:27.206">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:54:27.205" status="PASS" endtime="20170419 00:54:27.206"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:27.387">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:54:27.206" status="PASS" endtime="20170419 00:54:27.387"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:27.388">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:54:27.388">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:27.206" status="PASS" endtime="20170419 00:54:27.388"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:27.388">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:27.388" status="PASS" endtime="20170419 00:54:27.388"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:27.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:27.389" status="PASS" endtime="20170419 00:54:27.389"></status>
</kw>
<status starttime="20170419 00:54:27.202" status="PASS" endtime="20170419 00:54:27.389"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:27.390">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:54:27.390" status="PASS" endtime="20170419 00:54:27.390"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:27.392">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:54:27.391" status="PASS" endtime="20170419 00:54:27.392"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:27.393">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:54:27.393" status="PASS" endtime="20170419 00:54:27.393"></status>
</kw>
<status starttime="20170419 00:54:27.392" status="PASS" endtime="20170419 00:54:27.393"></status>
</kw>
<status starttime="20170419 00:54:27.391" status="PASS" endtime="20170419 00:54:27.393"></status>
</kw>
<status starttime="20170419 00:54:27.390" status="PASS" endtime="20170419 00:54:27.393"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:27.481">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:54:27.481">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:27.394" status="PASS" endtime="20170419 00:54:27.481"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:27.483">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:54:27.482" status="PASS" endtime="20170419 00:54:27.483"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:27.484">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:54:27.483" status="PASS" endtime="20170419 00:54:27.484"></status>
</kw>
<status starttime="20170419 00:54:27.483" status="PASS" endtime="20170419 00:54:27.484"></status>
</kw>
<status starttime="20170419 00:54:27.482" status="PASS" endtime="20170419 00:54:27.484"></status>
</kw>
<status starttime="20170419 00:54:27.481" status="PASS" endtime="20170419 00:54:27.484"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:27.484">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:27.201" status="PASS" endtime="20170419 00:54:27.484"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:27.485">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:27.485" status="PASS" endtime="20170419 00:54:27.485"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:27.486">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:54:27.486">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:54:27.486">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:54:27.485" status="PASS" endtime="20170419 00:54:27.486"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:27.486">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:54:27.201" status="PASS" endtime="20170419 00:54:27.486"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:27.486">${host_state} = Off</msg>
<status starttime="20170419 00:54:27.200" status="PASS" endtime="20170419 00:54:27.486"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:54:27.487">Running != Off</msg>
<status starttime="20170419 00:54:27.487" status="FAIL" endtime="20170419 00:54:27.487"></status>
</kw>
<status starttime="20170419 00:54:27.200" status="FAIL" endtime="20170419 00:54:27.487"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:37.491">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:54:37.491" status="PASS" endtime="20170419 00:54:37.492"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:37.492">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:54:37.492" status="PASS" endtime="20170419 00:54:37.492"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:37.493">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:54:37.492" status="PASS" endtime="20170419 00:54:37.493"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:37.493">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:54:37.493" status="PASS" endtime="20170419 00:54:37.493"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:37.670">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:54:37.494" status="PASS" endtime="20170419 00:54:37.670"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:37.670">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:54:37.670">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:37.494" status="PASS" endtime="20170419 00:54:37.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:37.671">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:37.670" status="PASS" endtime="20170419 00:54:37.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:37.671">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:37.671" status="PASS" endtime="20170419 00:54:37.672"></status>
</kw>
<status starttime="20170419 00:54:37.490" status="PASS" endtime="20170419 00:54:37.672"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:37.672">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:54:37.672" status="PASS" endtime="20170419 00:54:37.672"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:37.675">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:54:37.674" status="PASS" endtime="20170419 00:54:37.675"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:37.676">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:54:37.676" status="PASS" endtime="20170419 00:54:37.676"></status>
</kw>
<status starttime="20170419 00:54:37.675" status="PASS" endtime="20170419 00:54:37.676"></status>
</kw>
<status starttime="20170419 00:54:37.673" status="PASS" endtime="20170419 00:54:37.677"></status>
</kw>
<status starttime="20170419 00:54:37.673" status="PASS" endtime="20170419 00:54:37.677"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:37.741">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:54:37.741">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:37.677" status="PASS" endtime="20170419 00:54:37.741"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:37.743">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:54:37.742" status="PASS" endtime="20170419 00:54:37.743"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:37.744">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:54:37.743" status="PASS" endtime="20170419 00:54:37.744"></status>
</kw>
<status starttime="20170419 00:54:37.743" status="PASS" endtime="20170419 00:54:37.744"></status>
</kw>
<status starttime="20170419 00:54:37.742" status="PASS" endtime="20170419 00:54:37.744"></status>
</kw>
<status starttime="20170419 00:54:37.741" status="PASS" endtime="20170419 00:54:37.744"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:37.744">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:37.490" status="PASS" endtime="20170419 00:54:37.744"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:37.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:37.744" status="PASS" endtime="20170419 00:54:37.745"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:37.745">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:54:37.745">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:54:37.746">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:54:37.745" status="PASS" endtime="20170419 00:54:37.746"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:37.746">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:54:37.489" status="PASS" endtime="20170419 00:54:37.746"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:37.746">${host_state} = Off</msg>
<status starttime="20170419 00:54:37.488" status="PASS" endtime="20170419 00:54:37.746"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:54:37.747">Running != Off</msg>
<status starttime="20170419 00:54:37.746" status="FAIL" endtime="20170419 00:54:37.747"></status>
</kw>
<status starttime="20170419 00:54:37.488" status="FAIL" endtime="20170419 00:54:37.747"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:47.751">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:54:47.750" status="PASS" endtime="20170419 00:54:47.751"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:47.752">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:54:47.751" status="PASS" endtime="20170419 00:54:47.752"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:47.752">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:54:47.752" status="PASS" endtime="20170419 00:54:47.752"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:47.753">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:54:47.752" status="PASS" endtime="20170419 00:54:47.753"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:47.929">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:54:47.753" status="PASS" endtime="20170419 00:54:47.930"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:47.930">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:54:47.930">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:47.753" status="PASS" endtime="20170419 00:54:47.930"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:47.930">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:47.930" status="PASS" endtime="20170419 00:54:47.931"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:47.931">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:47.931" status="PASS" endtime="20170419 00:54:47.931"></status>
</kw>
<status starttime="20170419 00:54:47.750" status="PASS" endtime="20170419 00:54:47.931"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:47.932">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:54:47.932" status="PASS" endtime="20170419 00:54:47.932"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:47.934">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:54:47.933" status="PASS" endtime="20170419 00:54:47.934"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:47.935">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:54:47.935" status="PASS" endtime="20170419 00:54:47.935"></status>
</kw>
<status starttime="20170419 00:54:47.934" status="PASS" endtime="20170419 00:54:47.935"></status>
</kw>
<status starttime="20170419 00:54:47.933" status="PASS" endtime="20170419 00:54:47.935"></status>
</kw>
<status starttime="20170419 00:54:47.932" status="PASS" endtime="20170419 00:54:47.935"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:48.018">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:54:48.019">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:47.935" status="PASS" endtime="20170419 00:54:48.019"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:48.020">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:54:48.020" status="PASS" endtime="20170419 00:54:48.020"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:48.021">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:54:48.021" status="PASS" endtime="20170419 00:54:48.021"></status>
</kw>
<status starttime="20170419 00:54:48.020" status="PASS" endtime="20170419 00:54:48.021"></status>
</kw>
<status starttime="20170419 00:54:48.019" status="PASS" endtime="20170419 00:54:48.021"></status>
</kw>
<status starttime="20170419 00:54:48.019" status="PASS" endtime="20170419 00:54:48.022"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:48.022">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:47.749" status="PASS" endtime="20170419 00:54:48.022"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:48.022">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:48.022" status="PASS" endtime="20170419 00:54:48.023"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:48.023">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:54:48.023">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:54:48.023">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:54:48.023" status="PASS" endtime="20170419 00:54:48.023"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:48.024">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:54:47.748" status="PASS" endtime="20170419 00:54:48.024"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:48.024">${host_state} = Off</msg>
<status starttime="20170419 00:54:47.748" status="PASS" endtime="20170419 00:54:48.024"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:54:48.024">Running != Off</msg>
<status starttime="20170419 00:54:48.024" status="FAIL" endtime="20170419 00:54:48.025"></status>
</kw>
<status starttime="20170419 00:54:47.747" status="FAIL" endtime="20170419 00:54:48.025"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:58.028">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:54:58.028" status="PASS" endtime="20170419 00:54:58.029"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:58.030">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:54:58.029" status="PASS" endtime="20170419 00:54:58.030"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:58.030">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:54:58.030" status="PASS" endtime="20170419 00:54:58.030"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:58.031">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:54:58.030" status="PASS" endtime="20170419 00:54:58.031"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:58.206">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:54:58.031" status="PASS" endtime="20170419 00:54:58.206"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:58.206">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:54:58.206">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:58.031" status="PASS" endtime="20170419 00:54:58.206"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:58.207">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:58.206" status="PASS" endtime="20170419 00:54:58.207"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:58.207">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:58.207" status="PASS" endtime="20170419 00:54:58.207"></status>
</kw>
<status starttime="20170419 00:54:58.027" status="PASS" endtime="20170419 00:54:58.208"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:58.208">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:54:58.208" status="PASS" endtime="20170419 00:54:58.208"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:58.210">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:54:58.209" status="PASS" endtime="20170419 00:54:58.210"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:58.211">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:54:58.211" status="PASS" endtime="20170419 00:54:58.211"></status>
</kw>
<status starttime="20170419 00:54:58.210" status="PASS" endtime="20170419 00:54:58.211"></status>
</kw>
<status starttime="20170419 00:54:58.209" status="PASS" endtime="20170419 00:54:58.211"></status>
</kw>
<status starttime="20170419 00:54:58.208" status="PASS" endtime="20170419 00:54:58.212"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:58.297">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:54:58.297">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:58.212" status="PASS" endtime="20170419 00:54:58.297"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:58.299">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:54:58.299" status="PASS" endtime="20170419 00:54:58.299"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:58.300">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:54:58.300" status="PASS" endtime="20170419 00:54:58.300"></status>
</kw>
<status starttime="20170419 00:54:58.299" status="PASS" endtime="20170419 00:54:58.300"></status>
</kw>
<status starttime="20170419 00:54:58.298" status="PASS" endtime="20170419 00:54:58.300"></status>
</kw>
<status starttime="20170419 00:54:58.298" status="PASS" endtime="20170419 00:54:58.300"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:58.301">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:54:58.027" status="PASS" endtime="20170419 00:54:58.301"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:54:58.301">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:54:58.301" status="PASS" endtime="20170419 00:54:58.301"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:54:58.302">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:54:58.302">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:54:58.302">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:54:58.301" status="PASS" endtime="20170419 00:54:58.302"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:58.302">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:54:58.026" status="PASS" endtime="20170419 00:54:58.302"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:54:58.303">${host_state} = Off</msg>
<status starttime="20170419 00:54:58.026" status="PASS" endtime="20170419 00:54:58.303"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:54:58.303">Running != Off</msg>
<status starttime="20170419 00:54:58.303" status="FAIL" endtime="20170419 00:54:58.304"></status>
</kw>
<status starttime="20170419 00:54:58.025" status="FAIL" endtime="20170419 00:54:58.304"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:08.308">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:55:08.308" status="PASS" endtime="20170419 00:55:08.308"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:08.309">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:55:08.309" status="PASS" endtime="20170419 00:55:08.309"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:08.310">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:55:08.309" status="PASS" endtime="20170419 00:55:08.310"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:08.310">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:55:08.310" status="PASS" endtime="20170419 00:55:08.310"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:08.486">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:55:08.311" status="PASS" endtime="20170419 00:55:08.486"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:08.486">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:55:08.486">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:08.311" status="PASS" endtime="20170419 00:55:08.486"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:08.487">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:08.486" status="PASS" endtime="20170419 00:55:08.487"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:08.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:08.487" status="PASS" endtime="20170419 00:55:08.487"></status>
</kw>
<status starttime="20170419 00:55:08.307" status="PASS" endtime="20170419 00:55:08.487"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:08.488">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:55:08.488" status="PASS" endtime="20170419 00:55:08.488"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:08.490">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:55:08.489" status="PASS" endtime="20170419 00:55:08.490"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:08.491">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:55:08.491" status="PASS" endtime="20170419 00:55:08.491"></status>
</kw>
<status starttime="20170419 00:55:08.490" status="PASS" endtime="20170419 00:55:08.491"></status>
</kw>
<status starttime="20170419 00:55:08.489" status="PASS" endtime="20170419 00:55:08.492"></status>
</kw>
<status starttime="20170419 00:55:08.488" status="PASS" endtime="20170419 00:55:08.492"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:08.554">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:55:08.554">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:08.492" status="PASS" endtime="20170419 00:55:08.554"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:08.556">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:55:08.556" status="PASS" endtime="20170419 00:55:08.556"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:08.557">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:55:08.557" status="PASS" endtime="20170419 00:55:08.557"></status>
</kw>
<status starttime="20170419 00:55:08.556" status="PASS" endtime="20170419 00:55:08.557"></status>
</kw>
<status starttime="20170419 00:55:08.555" status="PASS" endtime="20170419 00:55:08.557"></status>
</kw>
<status starttime="20170419 00:55:08.555" status="PASS" endtime="20170419 00:55:08.557"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:08.558">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:08.306" status="PASS" endtime="20170419 00:55:08.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:08.558">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:08.558" status="PASS" endtime="20170419 00:55:08.558"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:08.559">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:55:08.559">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:55:08.559">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:55:08.559" status="PASS" endtime="20170419 00:55:08.559"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:08.559">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:55:08.306" status="PASS" endtime="20170419 00:55:08.559"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:08.560">${host_state} = Off</msg>
<status starttime="20170419 00:55:08.305" status="PASS" endtime="20170419 00:55:08.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:55:08.560">Running != Off</msg>
<status starttime="20170419 00:55:08.560" status="FAIL" endtime="20170419 00:55:08.560"></status>
</kw>
<status starttime="20170419 00:55:08.304" status="FAIL" endtime="20170419 00:55:08.561"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:18.564">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:55:18.564" status="PASS" endtime="20170419 00:55:18.564"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:18.565">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:55:18.565" status="PASS" endtime="20170419 00:55:18.565"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:18.565">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:55:18.565" status="PASS" endtime="20170419 00:55:18.566"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:18.566">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:55:18.566" status="PASS" endtime="20170419 00:55:18.566"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:18.810">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:55:18.567" status="PASS" endtime="20170419 00:55:18.810"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:18.810">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:55:18.810">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:18.566" status="PASS" endtime="20170419 00:55:18.810"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:18.811">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:18.810" status="PASS" endtime="20170419 00:55:18.811"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:18.811">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:18.811" status="PASS" endtime="20170419 00:55:18.811"></status>
</kw>
<status starttime="20170419 00:55:18.563" status="PASS" endtime="20170419 00:55:18.811"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:18.812">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:55:18.812" status="PASS" endtime="20170419 00:55:18.812"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:18.814">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:55:18.813" status="PASS" endtime="20170419 00:55:18.814"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:18.815">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:55:18.815" status="PASS" endtime="20170419 00:55:18.815"></status>
</kw>
<status starttime="20170419 00:55:18.814" status="PASS" endtime="20170419 00:55:18.815"></status>
</kw>
<status starttime="20170419 00:55:18.813" status="PASS" endtime="20170419 00:55:18.815"></status>
</kw>
<status starttime="20170419 00:55:18.812" status="PASS" endtime="20170419 00:55:18.815"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:18.878">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:55:18.878">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:18.816" status="PASS" endtime="20170419 00:55:18.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:18.880">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:55:18.880" status="PASS" endtime="20170419 00:55:18.880"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:18.881">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:55:18.881" status="PASS" endtime="20170419 00:55:18.881"></status>
</kw>
<status starttime="20170419 00:55:18.880" status="PASS" endtime="20170419 00:55:18.881"></status>
</kw>
<status starttime="20170419 00:55:18.879" status="PASS" endtime="20170419 00:55:18.881"></status>
</kw>
<status starttime="20170419 00:55:18.879" status="PASS" endtime="20170419 00:55:18.881"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:18.882">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:18.562" status="PASS" endtime="20170419 00:55:18.882"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:18.882">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:18.882" status="PASS" endtime="20170419 00:55:18.882"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:18.883">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:55:18.883">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:55:18.883">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:55:18.883" status="PASS" endtime="20170419 00:55:18.883"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:18.883">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:55:18.562" status="PASS" endtime="20170419 00:55:18.883"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:18.884">${host_state} = Off</msg>
<status starttime="20170419 00:55:18.561" status="PASS" endtime="20170419 00:55:18.884"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:55:18.884">Running != Off</msg>
<status starttime="20170419 00:55:18.884" status="FAIL" endtime="20170419 00:55:18.885"></status>
</kw>
<status starttime="20170419 00:55:18.561" status="FAIL" endtime="20170419 00:55:18.885"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:28.889">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:55:28.889" status="PASS" endtime="20170419 00:55:28.921"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:28.921">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:55:28.921" status="PASS" endtime="20170419 00:55:28.922"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:28.922">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:55:28.922" status="PASS" endtime="20170419 00:55:28.922"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:28.923">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:55:28.923" status="PASS" endtime="20170419 00:55:28.923"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:29.110">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:55:28.924" status="PASS" endtime="20170419 00:55:29.110"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:29.110">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:55:29.110">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:28.924" status="PASS" endtime="20170419 00:55:29.110"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:29.111">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:29.111" status="PASS" endtime="20170419 00:55:29.111"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:29.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:29.111" status="PASS" endtime="20170419 00:55:29.112"></status>
</kw>
<status starttime="20170419 00:55:28.888" status="PASS" endtime="20170419 00:55:29.112"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:29.113">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:55:29.112" status="PASS" endtime="20170419 00:55:29.113"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:29.115">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:55:29.114" status="PASS" endtime="20170419 00:55:29.115"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:29.115">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:55:29.115" status="PASS" endtime="20170419 00:55:29.116"></status>
</kw>
<status starttime="20170419 00:55:29.115" status="PASS" endtime="20170419 00:55:29.116"></status>
</kw>
<status starttime="20170419 00:55:29.113" status="PASS" endtime="20170419 00:55:29.116"></status>
</kw>
<status starttime="20170419 00:55:29.113" status="PASS" endtime="20170419 00:55:29.116"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:29.178">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:55:29.178">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:29.116" status="PASS" endtime="20170419 00:55:29.178"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:29.180">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:55:29.180" status="PASS" endtime="20170419 00:55:29.181"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:29.181">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:55:29.181" status="PASS" endtime="20170419 00:55:29.181"></status>
</kw>
<status starttime="20170419 00:55:29.181" status="PASS" endtime="20170419 00:55:29.182"></status>
</kw>
<status starttime="20170419 00:55:29.179" status="PASS" endtime="20170419 00:55:29.182"></status>
</kw>
<status starttime="20170419 00:55:29.179" status="PASS" endtime="20170419 00:55:29.182"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:29.182">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:28.887" status="PASS" endtime="20170419 00:55:29.182"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:29.183">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:29.182" status="PASS" endtime="20170419 00:55:29.183"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:29.183">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:55:29.183">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:55:29.183">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:55:29.183" status="PASS" endtime="20170419 00:55:29.183"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:29.184">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:55:28.887" status="PASS" endtime="20170419 00:55:29.184"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:29.184">${host_state} = Off</msg>
<status starttime="20170419 00:55:28.886" status="PASS" endtime="20170419 00:55:29.184"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:55:29.185">Running != Off</msg>
<status starttime="20170419 00:55:29.184" status="FAIL" endtime="20170419 00:55:29.185"></status>
</kw>
<status starttime="20170419 00:55:28.885" status="FAIL" endtime="20170419 00:55:29.185"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:39.190">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:55:39.189" status="PASS" endtime="20170419 00:55:39.190"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:39.191">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:55:39.190" status="PASS" endtime="20170419 00:55:39.191"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:39.191">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:55:39.191" status="PASS" endtime="20170419 00:55:39.191"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:39.192">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:55:39.191" status="PASS" endtime="20170419 00:55:39.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:39.371">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:55:39.192" status="PASS" endtime="20170419 00:55:39.372"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:39.372">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:55:39.372">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:39.192" status="PASS" endtime="20170419 00:55:39.372"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:39.372">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:39.372" status="PASS" endtime="20170419 00:55:39.372"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:39.373">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:39.373" status="PASS" endtime="20170419 00:55:39.373"></status>
</kw>
<status starttime="20170419 00:55:39.189" status="PASS" endtime="20170419 00:55:39.373"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:39.374">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:55:39.373" status="PASS" endtime="20170419 00:55:39.374"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:39.376">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:55:39.375" status="PASS" endtime="20170419 00:55:39.376"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:39.377">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:55:39.377" status="PASS" endtime="20170419 00:55:39.377"></status>
</kw>
<status starttime="20170419 00:55:39.376" status="PASS" endtime="20170419 00:55:39.377"></status>
</kw>
<status starttime="20170419 00:55:39.375" status="PASS" endtime="20170419 00:55:39.377"></status>
</kw>
<status starttime="20170419 00:55:39.374" status="PASS" endtime="20170419 00:55:39.378"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:39.441">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:55:39.441">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:39.378" status="PASS" endtime="20170419 00:55:39.441"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:39.444">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:55:39.443" status="PASS" endtime="20170419 00:55:39.444"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:39.445">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:55:39.445" status="PASS" endtime="20170419 00:55:39.445"></status>
</kw>
<status starttime="20170419 00:55:39.444" status="PASS" endtime="20170419 00:55:39.446"></status>
</kw>
<status starttime="20170419 00:55:39.443" status="PASS" endtime="20170419 00:55:39.446"></status>
</kw>
<status starttime="20170419 00:55:39.442" status="PASS" endtime="20170419 00:55:39.446"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:39.446">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:39.188" status="PASS" endtime="20170419 00:55:39.446"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:39.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:39.446" status="PASS" endtime="20170419 00:55:39.447"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:39.447">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:55:39.447">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:55:39.447">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:55:39.447" status="PASS" endtime="20170419 00:55:39.447"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:39.448">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:55:39.188" status="PASS" endtime="20170419 00:55:39.448"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:39.448">${host_state} = Off</msg>
<status starttime="20170419 00:55:39.186" status="PASS" endtime="20170419 00:55:39.448"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:55:39.449">Running != Off</msg>
<status starttime="20170419 00:55:39.448" status="FAIL" endtime="20170419 00:55:39.449"></status>
</kw>
<status starttime="20170419 00:55:39.185" status="FAIL" endtime="20170419 00:55:39.449"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:49.453">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:55:49.452" status="PASS" endtime="20170419 00:55:49.453"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:49.454">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:55:49.453" status="PASS" endtime="20170419 00:55:49.454"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:49.454">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:55:49.454" status="PASS" endtime="20170419 00:55:49.454"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:49.455">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:55:49.455" status="PASS" endtime="20170419 00:55:49.456"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:49.638">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:55:49.456" status="PASS" endtime="20170419 00:55:49.638"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:49.638">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:55:49.638">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:49.456" status="PASS" endtime="20170419 00:55:49.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:49.639">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:49.638" status="PASS" endtime="20170419 00:55:49.639"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:49.639">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:49.639" status="PASS" endtime="20170419 00:55:49.639"></status>
</kw>
<status starttime="20170419 00:55:49.452" status="PASS" endtime="20170419 00:55:49.640"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:49.640">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:55:49.640" status="PASS" endtime="20170419 00:55:49.640"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:49.642">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:55:49.642" status="PASS" endtime="20170419 00:55:49.642"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:49.643">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:55:49.643" status="PASS" endtime="20170419 00:55:49.643"></status>
</kw>
<status starttime="20170419 00:55:49.643" status="PASS" endtime="20170419 00:55:49.644"></status>
</kw>
<status starttime="20170419 00:55:49.641" status="PASS" endtime="20170419 00:55:49.644"></status>
</kw>
<status starttime="20170419 00:55:49.641" status="PASS" endtime="20170419 00:55:49.644"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:49.707">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:55:49.707">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:49.644" status="PASS" endtime="20170419 00:55:49.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:49.709">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:55:49.708" status="PASS" endtime="20170419 00:55:49.709"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:49.710">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:55:49.709" status="PASS" endtime="20170419 00:55:49.710"></status>
</kw>
<status starttime="20170419 00:55:49.709" status="PASS" endtime="20170419 00:55:49.710"></status>
</kw>
<status starttime="20170419 00:55:49.708" status="PASS" endtime="20170419 00:55:49.710"></status>
</kw>
<status starttime="20170419 00:55:49.707" status="PASS" endtime="20170419 00:55:49.710"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:49.710">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:49.451" status="PASS" endtime="20170419 00:55:49.710"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:49.711">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:49.710" status="PASS" endtime="20170419 00:55:49.711"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:49.711">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:55:49.711">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:55:49.711">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:55:49.711" status="PASS" endtime="20170419 00:55:49.712"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:49.712">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:55:49.451" status="PASS" endtime="20170419 00:55:49.712"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:49.712">${host_state} = Off</msg>
<status starttime="20170419 00:55:49.450" status="PASS" endtime="20170419 00:55:49.712"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:55:49.713">Running != Off</msg>
<status starttime="20170419 00:55:49.712" status="FAIL" endtime="20170419 00:55:49.713"></status>
</kw>
<status starttime="20170419 00:55:49.449" status="FAIL" endtime="20170419 00:55:49.713"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:59.717">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:55:59.717" status="PASS" endtime="20170419 00:55:59.717"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:59.718">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:55:59.718" status="PASS" endtime="20170419 00:55:59.718"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:59.719">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:55:59.718" status="PASS" endtime="20170419 00:55:59.719"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:59.719">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:55:59.719" status="PASS" endtime="20170419 00:55:59.719"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:59.898">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:55:59.720" status="PASS" endtime="20170419 00:55:59.898"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:59.899">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:55:59.899">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:59.719" status="PASS" endtime="20170419 00:55:59.899"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:59.899">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:59.899" status="PASS" endtime="20170419 00:55:59.899"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:59.900">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:59.900" status="PASS" endtime="20170419 00:55:59.900"></status>
</kw>
<status starttime="20170419 00:55:59.716" status="PASS" endtime="20170419 00:55:59.900"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:59.901">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:55:59.900" status="PASS" endtime="20170419 00:55:59.901"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:59.903">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:55:59.902" status="PASS" endtime="20170419 00:55:59.903"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:59.904">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:55:59.903" status="PASS" endtime="20170419 00:55:59.904"></status>
</kw>
<status starttime="20170419 00:55:59.903" status="PASS" endtime="20170419 00:55:59.904"></status>
</kw>
<status starttime="20170419 00:55:59.901" status="PASS" endtime="20170419 00:55:59.904"></status>
</kw>
<status starttime="20170419 00:55:59.901" status="PASS" endtime="20170419 00:55:59.904"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:59.968">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:55:59.968">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:59.904" status="PASS" endtime="20170419 00:55:59.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:59.970">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:55:59.969" status="PASS" endtime="20170419 00:55:59.970"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:59.971">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:55:59.970" status="PASS" endtime="20170419 00:55:59.971"></status>
</kw>
<status starttime="20170419 00:55:59.970" status="PASS" endtime="20170419 00:55:59.971"></status>
</kw>
<status starttime="20170419 00:55:59.969" status="PASS" endtime="20170419 00:55:59.971"></status>
</kw>
<status starttime="20170419 00:55:59.968" status="PASS" endtime="20170419 00:55:59.971"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:59.971">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:55:59.715" status="PASS" endtime="20170419 00:55:59.971"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:55:59.972">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:55:59.971" status="PASS" endtime="20170419 00:55:59.972"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:55:59.973">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:55:59.973">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:55:59.973">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:55:59.972" status="PASS" endtime="20170419 00:55:59.973"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:59.973">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:55:59.714" status="PASS" endtime="20170419 00:55:59.973"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:55:59.974">${host_state} = Off</msg>
<status starttime="20170419 00:55:59.714" status="PASS" endtime="20170419 00:55:59.974"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:55:59.974">Running != Off</msg>
<status starttime="20170419 00:55:59.974" status="FAIL" endtime="20170419 00:55:59.975"></status>
</kw>
<status starttime="20170419 00:55:59.713" status="FAIL" endtime="20170419 00:55:59.975"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:09.979">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:56:09.978" status="PASS" endtime="20170419 00:56:09.979"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:09.980">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:56:09.979" status="PASS" endtime="20170419 00:56:09.980"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:09.980">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:56:09.980" status="PASS" endtime="20170419 00:56:09.980"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:09.981">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:56:09.980" status="PASS" endtime="20170419 00:56:09.981"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:10.159">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:56:09.981" status="PASS" endtime="20170419 00:56:10.159"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:10.159">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:56:10.159">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:56:09.981" status="PASS" endtime="20170419 00:56:10.160"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:10.160">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:56:10.160" status="PASS" endtime="20170419 00:56:10.160"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:10.161">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:56:10.160" status="PASS" endtime="20170419 00:56:10.161"></status>
</kw>
<status starttime="20170419 00:56:09.978" status="PASS" endtime="20170419 00:56:10.161"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:10.162">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:56:10.161" status="PASS" endtime="20170419 00:56:10.162"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:10.164">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:56:10.163" status="PASS" endtime="20170419 00:56:10.164"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:10.164">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:56:10.164" status="PASS" endtime="20170419 00:56:10.165"></status>
</kw>
<status starttime="20170419 00:56:10.164" status="PASS" endtime="20170419 00:56:10.165"></status>
</kw>
<status starttime="20170419 00:56:10.162" status="PASS" endtime="20170419 00:56:10.165"></status>
</kw>
<status starttime="20170419 00:56:10.162" status="PASS" endtime="20170419 00:56:10.165"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:10.236">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:56:10.236">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:56:10.165" status="PASS" endtime="20170419 00:56:10.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:10.237">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:56:10.237" status="PASS" endtime="20170419 00:56:10.238"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:10.238">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:56:10.238" status="PASS" endtime="20170419 00:56:10.238"></status>
</kw>
<status starttime="20170419 00:56:10.238" status="PASS" endtime="20170419 00:56:10.239"></status>
</kw>
<status starttime="20170419 00:56:10.236" status="PASS" endtime="20170419 00:56:10.239"></status>
</kw>
<status starttime="20170419 00:56:10.236" status="PASS" endtime="20170419 00:56:10.239"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:10.239">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:56:09.977" status="PASS" endtime="20170419 00:56:10.239"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:10.240">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:56:10.239" status="PASS" endtime="20170419 00:56:10.240"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:10.240">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:56:10.240">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:56:10.240">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:56:10.240" status="PASS" endtime="20170419 00:56:10.240"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:10.241">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:56:09.976" status="PASS" endtime="20170419 00:56:10.241"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:10.241">${host_state} = Off</msg>
<status starttime="20170419 00:56:09.976" status="PASS" endtime="20170419 00:56:10.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:56:10.242">Running != Off</msg>
<status starttime="20170419 00:56:10.241" status="FAIL" endtime="20170419 00:56:10.242"></status>
</kw>
<status starttime="20170419 00:56:09.975" status="FAIL" endtime="20170419 00:56:10.242"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:20.246">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:56:20.245" status="PASS" endtime="20170419 00:56:20.246"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:20.247">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:56:20.247" status="PASS" endtime="20170419 00:56:20.247"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:20.248">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:56:20.247" status="PASS" endtime="20170419 00:56:20.248"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:20.248">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:56:20.248" status="PASS" endtime="20170419 00:56:20.248"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:20.429">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:56:20.249" status="PASS" endtime="20170419 00:56:20.429"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:20.429">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:56:20.429">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:56:20.249" status="PASS" endtime="20170419 00:56:20.429"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:20.430">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:56:20.429" status="PASS" endtime="20170419 00:56:20.430"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:20.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:56:20.430" status="PASS" endtime="20170419 00:56:20.430"></status>
</kw>
<status starttime="20170419 00:56:20.245" status="PASS" endtime="20170419 00:56:20.431"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:20.431">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:56:20.431" status="PASS" endtime="20170419 00:56:20.431"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:20.433">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:56:20.432" status="PASS" endtime="20170419 00:56:20.433"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:20.434">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:56:20.434" status="PASS" endtime="20170419 00:56:20.434"></status>
</kw>
<status starttime="20170419 00:56:20.433" status="PASS" endtime="20170419 00:56:20.434"></status>
</kw>
<status starttime="20170419 00:56:20.432" status="PASS" endtime="20170419 00:56:20.434"></status>
</kw>
<status starttime="20170419 00:56:20.431" status="PASS" endtime="20170419 00:56:20.434"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:20.664">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:56:20.664">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:56:20.435" status="PASS" endtime="20170419 00:56:20.664"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:20.666">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:56:20.665" status="PASS" endtime="20170419 00:56:20.666"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:20.667">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:56:20.667" status="PASS" endtime="20170419 00:56:20.667"></status>
</kw>
<status starttime="20170419 00:56:20.666" status="PASS" endtime="20170419 00:56:20.667"></status>
</kw>
<status starttime="20170419 00:56:20.665" status="PASS" endtime="20170419 00:56:20.667"></status>
</kw>
<status starttime="20170419 00:56:20.664" status="PASS" endtime="20170419 00:56:20.667"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:20.668">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:56:20.244" status="PASS" endtime="20170419 00:56:20.668"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:20.668">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:56:20.668" status="PASS" endtime="20170419 00:56:20.668"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:20.669">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:56:20.669">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:56:20.669">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:56:20.668" status="PASS" endtime="20170419 00:56:20.669"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:20.669">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:56:20.243" status="PASS" endtime="20170419 00:56:20.669"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:20.669">${host_state} = Off</msg>
<status starttime="20170419 00:56:20.243" status="PASS" endtime="20170419 00:56:20.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:56:20.670">Running != Off</msg>
<status starttime="20170419 00:56:20.670" status="FAIL" endtime="20170419 00:56:20.670"></status>
</kw>
<status starttime="20170419 00:56:20.242" status="FAIL" endtime="20170419 00:56:20.670"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:30.674">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:56:30.674" status="PASS" endtime="20170419 00:56:30.674"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:30.675">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:56:30.675" status="PASS" endtime="20170419 00:56:30.675"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:30.676">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:56:30.675" status="PASS" endtime="20170419 00:56:30.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:30.676">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:56:30.676" status="PASS" endtime="20170419 00:56:30.676"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:30.852">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:56:30.677" status="PASS" endtime="20170419 00:56:30.852"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:30.852">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:56:30.852">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:56:30.677" status="PASS" endtime="20170419 00:56:30.852"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:30.853">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:56:30.853" status="PASS" endtime="20170419 00:56:30.853"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:30.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:56:30.853" status="PASS" endtime="20170419 00:56:30.854"></status>
</kw>
<status starttime="20170419 00:56:30.673" status="PASS" endtime="20170419 00:56:30.854"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:30.854">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:56:30.854" status="PASS" endtime="20170419 00:56:30.855"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:30.857">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:56:30.856" status="PASS" endtime="20170419 00:56:30.857"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:30.858">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:56:30.858" status="PASS" endtime="20170419 00:56:30.858"></status>
</kw>
<status starttime="20170419 00:56:30.857" status="PASS" endtime="20170419 00:56:30.858"></status>
</kw>
<status starttime="20170419 00:56:30.855" status="PASS" endtime="20170419 00:56:30.858"></status>
</kw>
<status starttime="20170419 00:56:30.855" status="PASS" endtime="20170419 00:56:30.858"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:30.921">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:56:30.921">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:56:30.859" status="PASS" endtime="20170419 00:56:30.921"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:30.923">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:56:30.922" status="PASS" endtime="20170419 00:56:30.923"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:30.924">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:56:30.924" status="PASS" endtime="20170419 00:56:30.924"></status>
</kw>
<status starttime="20170419 00:56:30.923" status="PASS" endtime="20170419 00:56:30.924"></status>
</kw>
<status starttime="20170419 00:56:30.922" status="PASS" endtime="20170419 00:56:30.924"></status>
</kw>
<status starttime="20170419 00:56:30.922" status="PASS" endtime="20170419 00:56:30.924"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:30.925">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:56:30.672" status="PASS" endtime="20170419 00:56:30.925"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:30.925">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:56:30.925" status="PASS" endtime="20170419 00:56:30.925"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:30.926">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:56:30.926">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:56:30.926">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:56:30.925" status="PASS" endtime="20170419 00:56:30.926"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:30.926">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:56:30.672" status="PASS" endtime="20170419 00:56:30.926"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:30.927">${host_state} = Off</msg>
<status starttime="20170419 00:56:30.671" status="PASS" endtime="20170419 00:56:30.927"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:56:30.928">Running != Off</msg>
<status starttime="20170419 00:56:30.927" status="FAIL" endtime="20170419 00:56:30.928"></status>
</kw>
<status starttime="20170419 00:56:30.671" status="FAIL" endtime="20170419 00:56:30.928"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:40.933">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:56:40.932" status="PASS" endtime="20170419 00:56:40.933"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:40.934">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:56:40.934" status="PASS" endtime="20170419 00:56:40.934"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:40.935">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:56:40.934" status="PASS" endtime="20170419 00:56:40.935"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:40.935">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:56:40.935" status="PASS" endtime="20170419 00:56:40.935"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:41.114">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:56:40.936" status="PASS" endtime="20170419 00:56:41.114"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:41.114">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:56:41.114">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:56:40.936" status="PASS" endtime="20170419 00:56:41.114"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:41.115">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:56:41.114" status="PASS" endtime="20170419 00:56:41.115"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:41.115">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:56:41.115" status="PASS" endtime="20170419 00:56:41.115"></status>
</kw>
<status starttime="20170419 00:56:40.931" status="PASS" endtime="20170419 00:56:41.116"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:41.116">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:56:41.116" status="PASS" endtime="20170419 00:56:41.116"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:41.118">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:56:41.118" status="PASS" endtime="20170419 00:56:41.118"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:41.119">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:56:41.119" status="PASS" endtime="20170419 00:56:41.119"></status>
</kw>
<status starttime="20170419 00:56:41.118" status="PASS" endtime="20170419 00:56:41.119"></status>
</kw>
<status starttime="20170419 00:56:41.117" status="PASS" endtime="20170419 00:56:41.120"></status>
</kw>
<status starttime="20170419 00:56:41.116" status="PASS" endtime="20170419 00:56:41.120"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:41.183">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:56:41.183">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:56:41.120" status="PASS" endtime="20170419 00:56:41.183"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:41.185">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:56:41.184" status="PASS" endtime="20170419 00:56:41.185"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:41.185">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:56:41.185" status="PASS" endtime="20170419 00:56:41.186"></status>
</kw>
<status starttime="20170419 00:56:41.185" status="PASS" endtime="20170419 00:56:41.186"></status>
</kw>
<status starttime="20170419 00:56:41.184" status="PASS" endtime="20170419 00:56:41.186"></status>
</kw>
<status starttime="20170419 00:56:41.183" status="PASS" endtime="20170419 00:56:41.186"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:41.186">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:56:40.930" status="PASS" endtime="20170419 00:56:41.186"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:41.187">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:56:41.187" status="PASS" endtime="20170419 00:56:41.187"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:41.188">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:56:41.188">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:56:41.188">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:56:41.187" status="PASS" endtime="20170419 00:56:41.188"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:41.188">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:56:40.930" status="PASS" endtime="20170419 00:56:41.188"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:41.189">${host_state} = Off</msg>
<status starttime="20170419 00:56:40.929" status="PASS" endtime="20170419 00:56:41.189"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:56:41.189">Running != Off</msg>
<status starttime="20170419 00:56:41.189" status="FAIL" endtime="20170419 00:56:41.189"></status>
</kw>
<status starttime="20170419 00:56:40.929" status="FAIL" endtime="20170419 00:56:41.189"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:51.194">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:56:51.193" status="PASS" endtime="20170419 00:56:51.194"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:51.195">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:56:51.194" status="PASS" endtime="20170419 00:56:51.195"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:51.195">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:56:51.195" status="PASS" endtime="20170419 00:56:51.195"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:51.196">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:56:51.196" status="PASS" endtime="20170419 00:56:51.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:51.371">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:56:51.197" status="PASS" endtime="20170419 00:56:51.371"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:51.372">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:56:51.372">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:56:51.196" status="PASS" endtime="20170419 00:56:51.372"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:51.372">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:56:51.372" status="PASS" endtime="20170419 00:56:51.372"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:51.373">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:56:51.373" status="PASS" endtime="20170419 00:56:51.373"></status>
</kw>
<status starttime="20170419 00:56:51.193" status="PASS" endtime="20170419 00:56:51.373"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:51.374">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:56:51.373" status="PASS" endtime="20170419 00:56:51.374"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:51.376">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:56:51.375" status="PASS" endtime="20170419 00:56:51.376"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:51.377">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:56:51.376" status="PASS" endtime="20170419 00:56:51.377"></status>
</kw>
<status starttime="20170419 00:56:51.376" status="PASS" endtime="20170419 00:56:51.377"></status>
</kw>
<status starttime="20170419 00:56:51.374" status="PASS" endtime="20170419 00:56:51.377"></status>
</kw>
<status starttime="20170419 00:56:51.374" status="PASS" endtime="20170419 00:56:51.377"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:51.440">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:56:51.440">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:56:51.377" status="PASS" endtime="20170419 00:56:51.440"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:51.443">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:56:51.443" status="PASS" endtime="20170419 00:56:51.443"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:51.444">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:56:51.444" status="PASS" endtime="20170419 00:56:51.444"></status>
</kw>
<status starttime="20170419 00:56:51.443" status="PASS" endtime="20170419 00:56:51.444"></status>
</kw>
<status starttime="20170419 00:56:51.440" status="PASS" endtime="20170419 00:56:51.444"></status>
</kw>
<status starttime="20170419 00:56:51.440" status="PASS" endtime="20170419 00:56:51.444"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:51.445">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:56:51.192" status="PASS" endtime="20170419 00:56:51.445"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:56:51.445">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:56:51.445" status="PASS" endtime="20170419 00:56:51.445"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:56:51.446">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:56:51.446">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:56:51.446">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:56:51.446" status="PASS" endtime="20170419 00:56:51.446"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:51.446">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:56:51.191" status="PASS" endtime="20170419 00:56:51.446"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:56:51.447">${host_state} = Off</msg>
<status starttime="20170419 00:56:51.191" status="PASS" endtime="20170419 00:56:51.447"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:56:51.448">Running != Off</msg>
<status starttime="20170419 00:56:51.447" status="FAIL" endtime="20170419 00:56:51.448"></status>
</kw>
<status starttime="20170419 00:56:51.190" status="FAIL" endtime="20170419 00:56:51.448"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:01.451">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:57:01.451" status="PASS" endtime="20170419 00:57:01.452"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:01.452">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:57:01.452" status="PASS" endtime="20170419 00:57:01.452"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:01.453">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:57:01.452" status="PASS" endtime="20170419 00:57:01.453"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:01.454">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:57:01.453" status="PASS" endtime="20170419 00:57:01.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:01.635">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:57:01.454" status="PASS" endtime="20170419 00:57:01.635"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:01.635">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:57:01.635">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:01.454" status="PASS" endtime="20170419 00:57:01.635"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:01.636">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:01.636" status="PASS" endtime="20170419 00:57:01.636"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:01.637">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:01.636" status="PASS" endtime="20170419 00:57:01.637"></status>
</kw>
<status starttime="20170419 00:57:01.450" status="PASS" endtime="20170419 00:57:01.637"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:01.637">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:57:01.637" status="PASS" endtime="20170419 00:57:01.637"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:01.640">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:57:01.639" status="PASS" endtime="20170419 00:57:01.640"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:01.641">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:57:01.640" status="PASS" endtime="20170419 00:57:01.641"></status>
</kw>
<status starttime="20170419 00:57:01.640" status="PASS" endtime="20170419 00:57:01.641"></status>
</kw>
<status starttime="20170419 00:57:01.638" status="PASS" endtime="20170419 00:57:01.641"></status>
</kw>
<status starttime="20170419 00:57:01.638" status="PASS" endtime="20170419 00:57:01.641"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:01.704">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:57:01.704">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:01.641" status="PASS" endtime="20170419 00:57:01.704"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:01.706">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:57:01.705" status="PASS" endtime="20170419 00:57:01.706"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:01.707">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:57:01.706" status="PASS" endtime="20170419 00:57:01.707"></status>
</kw>
<status starttime="20170419 00:57:01.706" status="PASS" endtime="20170419 00:57:01.707"></status>
</kw>
<status starttime="20170419 00:57:01.705" status="PASS" endtime="20170419 00:57:01.707"></status>
</kw>
<status starttime="20170419 00:57:01.704" status="PASS" endtime="20170419 00:57:01.707"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:01.707">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:01.450" status="PASS" endtime="20170419 00:57:01.707"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:01.708">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:01.707" status="PASS" endtime="20170419 00:57:01.708"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:01.708">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:57:01.709">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:57:01.709">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:57:01.708" status="PASS" endtime="20170419 00:57:01.709"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:01.709">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:57:01.449" status="PASS" endtime="20170419 00:57:01.709"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:01.709">${host_state} = Off</msg>
<status starttime="20170419 00:57:01.449" status="PASS" endtime="20170419 00:57:01.709"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:57:01.710">Running != Off</msg>
<status starttime="20170419 00:57:01.710" status="FAIL" endtime="20170419 00:57:01.710"></status>
</kw>
<status starttime="20170419 00:57:01.448" status="FAIL" endtime="20170419 00:57:01.710"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:11.714">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:57:11.713" status="PASS" endtime="20170419 00:57:11.714"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:11.715">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:57:11.714" status="PASS" endtime="20170419 00:57:11.715"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:11.715">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:57:11.715" status="PASS" endtime="20170419 00:57:11.715"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:11.716">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:57:11.716" status="PASS" endtime="20170419 00:57:11.716"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:11.899">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:57:11.717" status="PASS" endtime="20170419 00:57:11.899"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:11.900">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:57:11.900">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:11.716" status="PASS" endtime="20170419 00:57:11.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:11.900">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:11.900" status="PASS" endtime="20170419 00:57:11.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:11.901">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:11.901" status="PASS" endtime="20170419 00:57:11.901"></status>
</kw>
<status starttime="20170419 00:57:11.713" status="PASS" endtime="20170419 00:57:11.901"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:11.902">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:57:11.901" status="PASS" endtime="20170419 00:57:11.902"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:11.904">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:57:11.903" status="PASS" endtime="20170419 00:57:11.904"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:11.905">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:57:11.904" status="PASS" endtime="20170419 00:57:11.905"></status>
</kw>
<status starttime="20170419 00:57:11.904" status="PASS" endtime="20170419 00:57:11.905"></status>
</kw>
<status starttime="20170419 00:57:11.902" status="PASS" endtime="20170419 00:57:11.905"></status>
</kw>
<status starttime="20170419 00:57:11.902" status="PASS" endtime="20170419 00:57:11.905"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:11.968">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:57:11.968">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:11.905" status="PASS" endtime="20170419 00:57:11.969"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:11.970">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:57:11.970" status="PASS" endtime="20170419 00:57:11.970"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:11.971">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:57:11.971" status="PASS" endtime="20170419 00:57:11.971"></status>
</kw>
<status starttime="20170419 00:57:11.970" status="PASS" endtime="20170419 00:57:11.971"></status>
</kw>
<status starttime="20170419 00:57:11.969" status="PASS" endtime="20170419 00:57:11.972"></status>
</kw>
<status starttime="20170419 00:57:11.969" status="PASS" endtime="20170419 00:57:11.972"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:11.972">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:11.712" status="PASS" endtime="20170419 00:57:11.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:11.972">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:11.972" status="PASS" endtime="20170419 00:57:11.972"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:11.973">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:57:11.973">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:57:11.973">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:57:11.973" status="PASS" endtime="20170419 00:57:11.973"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:11.974">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:57:11.712" status="PASS" endtime="20170419 00:57:11.974"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:11.974">${host_state} = Off</msg>
<status starttime="20170419 00:57:11.711" status="PASS" endtime="20170419 00:57:11.974"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:57:11.975">Running != Off</msg>
<status starttime="20170419 00:57:11.974" status="FAIL" endtime="20170419 00:57:11.975"></status>
</kw>
<status starttime="20170419 00:57:11.711" status="FAIL" endtime="20170419 00:57:11.975"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:21.979">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:57:21.978" status="PASS" endtime="20170419 00:57:21.979"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:21.980">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:57:21.980" status="PASS" endtime="20170419 00:57:21.980"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:21.981">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:57:21.980" status="PASS" endtime="20170419 00:57:21.981"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:21.981">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:57:21.981" status="PASS" endtime="20170419 00:57:21.981"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:22.157">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:57:21.982" status="PASS" endtime="20170419 00:57:22.157"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:22.157">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:57:22.157">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:21.982" status="PASS" endtime="20170419 00:57:22.157"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:22.158">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:22.157" status="PASS" endtime="20170419 00:57:22.158"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:22.158">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:22.158" status="PASS" endtime="20170419 00:57:22.159"></status>
</kw>
<status starttime="20170419 00:57:21.977" status="PASS" endtime="20170419 00:57:22.159"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:22.159">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:57:22.159" status="PASS" endtime="20170419 00:57:22.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:22.161">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:57:22.161" status="PASS" endtime="20170419 00:57:22.161"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:22.162">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:57:22.162" status="PASS" endtime="20170419 00:57:22.162"></status>
</kw>
<status starttime="20170419 00:57:22.161" status="PASS" endtime="20170419 00:57:22.162"></status>
</kw>
<status starttime="20170419 00:57:22.160" status="PASS" endtime="20170419 00:57:22.162"></status>
</kw>
<status starttime="20170419 00:57:22.159" status="PASS" endtime="20170419 00:57:22.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:22.226">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:57:22.226">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:22.163" status="PASS" endtime="20170419 00:57:22.226"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:22.228">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:57:22.227" status="PASS" endtime="20170419 00:57:22.228"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:22.229">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:57:22.228" status="PASS" endtime="20170419 00:57:22.229"></status>
</kw>
<status starttime="20170419 00:57:22.228" status="PASS" endtime="20170419 00:57:22.229"></status>
</kw>
<status starttime="20170419 00:57:22.227" status="PASS" endtime="20170419 00:57:22.229"></status>
</kw>
<status starttime="20170419 00:57:22.226" status="PASS" endtime="20170419 00:57:22.229"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:22.229">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:21.977" status="PASS" endtime="20170419 00:57:22.230"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:22.230">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:22.230" status="PASS" endtime="20170419 00:57:22.230"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:22.231">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:57:22.231">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:57:22.231">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:57:22.230" status="PASS" endtime="20170419 00:57:22.231"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:22.231">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:57:21.976" status="PASS" endtime="20170419 00:57:22.231"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:22.232">${host_state} = Off</msg>
<status starttime="20170419 00:57:21.976" status="PASS" endtime="20170419 00:57:22.232"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:57:22.232">Running != Off</msg>
<status starttime="20170419 00:57:22.232" status="FAIL" endtime="20170419 00:57:22.232"></status>
</kw>
<status starttime="20170419 00:57:21.975" status="FAIL" endtime="20170419 00:57:22.232"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:32.236">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:57:32.235" status="PASS" endtime="20170419 00:57:32.236"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:32.237">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:57:32.236" status="PASS" endtime="20170419 00:57:32.237"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:32.237">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:57:32.237" status="PASS" endtime="20170419 00:57:32.237"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:32.238">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:57:32.237" status="PASS" endtime="20170419 00:57:32.238"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:32.415">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:57:32.239" status="PASS" endtime="20170419 00:57:32.415"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:32.415">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:57:32.415">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:32.238" status="PASS" endtime="20170419 00:57:32.415"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:32.416">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:32.416" status="PASS" endtime="20170419 00:57:32.416"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:32.417">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:32.416" status="PASS" endtime="20170419 00:57:32.417"></status>
</kw>
<status starttime="20170419 00:57:32.235" status="PASS" endtime="20170419 00:57:32.417"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:32.417">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:57:32.417" status="PASS" endtime="20170419 00:57:32.418"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:32.420">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:57:32.419" status="PASS" endtime="20170419 00:57:32.420"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:32.421">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:57:32.421" status="PASS" endtime="20170419 00:57:32.421"></status>
</kw>
<status starttime="20170419 00:57:32.420" status="PASS" endtime="20170419 00:57:32.421"></status>
</kw>
<status starttime="20170419 00:57:32.418" status="PASS" endtime="20170419 00:57:32.421"></status>
</kw>
<status starttime="20170419 00:57:32.418" status="PASS" endtime="20170419 00:57:32.421"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:32.485">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:57:32.485">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:32.421" status="PASS" endtime="20170419 00:57:32.485"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:32.486">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:57:32.486" status="PASS" endtime="20170419 00:57:32.486"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:32.487">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:57:32.487" status="PASS" endtime="20170419 00:57:32.487"></status>
</kw>
<status starttime="20170419 00:57:32.487" status="PASS" endtime="20170419 00:57:32.488"></status>
</kw>
<status starttime="20170419 00:57:32.485" status="PASS" endtime="20170419 00:57:32.488"></status>
</kw>
<status starttime="20170419 00:57:32.485" status="PASS" endtime="20170419 00:57:32.488"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:32.488">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:32.234" status="PASS" endtime="20170419 00:57:32.488"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:32.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:32.488" status="PASS" endtime="20170419 00:57:32.489"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:32.489">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:57:32.489">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:57:32.489">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:57:32.489" status="PASS" endtime="20170419 00:57:32.489"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:32.490">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:57:32.234" status="PASS" endtime="20170419 00:57:32.490"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:32.490">${host_state} = Off</msg>
<status starttime="20170419 00:57:32.233" status="PASS" endtime="20170419 00:57:32.490"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:57:32.491">Running != Off</msg>
<status starttime="20170419 00:57:32.490" status="FAIL" endtime="20170419 00:57:32.491"></status>
</kw>
<status starttime="20170419 00:57:32.233" status="FAIL" endtime="20170419 00:57:32.491"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:42.494">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:57:42.494" status="PASS" endtime="20170419 00:57:42.495"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:42.495">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:57:42.495" status="PASS" endtime="20170419 00:57:42.495"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:42.496">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:57:42.495" status="PASS" endtime="20170419 00:57:42.496"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:42.496">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:57:42.496" status="PASS" endtime="20170419 00:57:42.496"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:42.671">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:57:42.497" status="PASS" endtime="20170419 00:57:42.672"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:42.672">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:57:42.672">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:42.497" status="PASS" endtime="20170419 00:57:42.672"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:42.672">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:42.672" status="PASS" endtime="20170419 00:57:42.673"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:42.673">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:42.673" status="PASS" endtime="20170419 00:57:42.673"></status>
</kw>
<status starttime="20170419 00:57:42.493" status="PASS" endtime="20170419 00:57:42.673"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:42.674">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:57:42.674" status="PASS" endtime="20170419 00:57:42.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:42.676">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:57:42.675" status="PASS" endtime="20170419 00:57:42.676"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:42.677">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:57:42.677" status="PASS" endtime="20170419 00:57:42.677"></status>
</kw>
<status starttime="20170419 00:57:42.676" status="PASS" endtime="20170419 00:57:42.677"></status>
</kw>
<status starttime="20170419 00:57:42.675" status="PASS" endtime="20170419 00:57:42.677"></status>
</kw>
<status starttime="20170419 00:57:42.674" status="PASS" endtime="20170419 00:57:42.677"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:42.740">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:57:42.740">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:42.677" status="PASS" endtime="20170419 00:57:42.740"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:42.742">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:57:42.741" status="PASS" endtime="20170419 00:57:42.742"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:42.743">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:57:42.742" status="PASS" endtime="20170419 00:57:42.743"></status>
</kw>
<status starttime="20170419 00:57:42.742" status="PASS" endtime="20170419 00:57:42.743"></status>
</kw>
<status starttime="20170419 00:57:42.741" status="PASS" endtime="20170419 00:57:42.743"></status>
</kw>
<status starttime="20170419 00:57:42.740" status="PASS" endtime="20170419 00:57:42.743"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:42.743">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:42.493" status="PASS" endtime="20170419 00:57:42.743"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:42.744">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:42.744" status="PASS" endtime="20170419 00:57:42.744"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:42.744">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:57:42.745">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:57:42.745">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:57:42.744" status="PASS" endtime="20170419 00:57:42.745"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:42.745">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:57:42.492" status="PASS" endtime="20170419 00:57:42.745"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:42.745">${host_state} = Off</msg>
<status starttime="20170419 00:57:42.492" status="PASS" endtime="20170419 00:57:42.745"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:57:42.746">Running != Off</msg>
<status starttime="20170419 00:57:42.746" status="FAIL" endtime="20170419 00:57:42.746"></status>
</kw>
<status starttime="20170419 00:57:42.491" status="FAIL" endtime="20170419 00:57:42.746"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:52.750">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:57:52.750" status="PASS" endtime="20170419 00:57:52.751"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:52.751">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:57:52.751" status="PASS" endtime="20170419 00:57:52.751"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:52.752">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:57:52.751" status="PASS" endtime="20170419 00:57:52.752"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:52.752">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:57:52.752" status="PASS" endtime="20170419 00:57:52.752"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:52.928">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:57:52.753" status="PASS" endtime="20170419 00:57:52.929"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:52.929">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:57:52.929">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:52.753" status="PASS" endtime="20170419 00:57:52.929"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:52.929">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:52.929" status="PASS" endtime="20170419 00:57:52.930"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:52.930">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:52.930" status="PASS" endtime="20170419 00:57:52.930"></status>
</kw>
<status starttime="20170419 00:57:52.749" status="PASS" endtime="20170419 00:57:52.930"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:52.931">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:57:52.931" status="PASS" endtime="20170419 00:57:52.931"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:52.934">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:57:52.933" status="PASS" endtime="20170419 00:57:52.934"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:52.935">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:57:52.935" status="PASS" endtime="20170419 00:57:52.935"></status>
</kw>
<status starttime="20170419 00:57:52.934" status="PASS" endtime="20170419 00:57:52.935"></status>
</kw>
<status starttime="20170419 00:57:52.932" status="PASS" endtime="20170419 00:57:52.935"></status>
</kw>
<status starttime="20170419 00:57:52.931" status="PASS" endtime="20170419 00:57:52.935"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:52.998">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:57:52.998">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:52.936" status="PASS" endtime="20170419 00:57:52.998"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:53.001">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:57:53.000" status="PASS" endtime="20170419 00:57:53.001"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:53.002">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:57:53.001" status="PASS" endtime="20170419 00:57:53.002"></status>
</kw>
<status starttime="20170419 00:57:53.001" status="PASS" endtime="20170419 00:57:53.002"></status>
</kw>
<status starttime="20170419 00:57:52.999" status="PASS" endtime="20170419 00:57:53.002"></status>
</kw>
<status starttime="20170419 00:57:52.999" status="PASS" endtime="20170419 00:57:53.002"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:53.002">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:57:52.748" status="PASS" endtime="20170419 00:57:53.002"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:57:53.003">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:57:53.002" status="PASS" endtime="20170419 00:57:53.003"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:57:53.003">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:57:53.003">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:57:53.003">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:57:53.003" status="PASS" endtime="20170419 00:57:53.004"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:53.004">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:57:52.748" status="PASS" endtime="20170419 00:57:53.004"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:57:53.004">${host_state} = Off</msg>
<status starttime="20170419 00:57:52.747" status="PASS" endtime="20170419 00:57:53.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:57:53.005">Running != Off</msg>
<status starttime="20170419 00:57:53.004" status="FAIL" endtime="20170419 00:57:53.005"></status>
</kw>
<status starttime="20170419 00:57:52.747" status="FAIL" endtime="20170419 00:57:53.005"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:03.009">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:58:03.008" status="PASS" endtime="20170419 00:58:03.009"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:03.010">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:58:03.009" status="PASS" endtime="20170419 00:58:03.010"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:03.010">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:58:03.010" status="PASS" endtime="20170419 00:58:03.010"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:03.011">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:58:03.010" status="PASS" endtime="20170419 00:58:03.011"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:03.193">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:58:03.011" status="PASS" endtime="20170419 00:58:03.193"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:03.194">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:58:03.194">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:03.011" status="PASS" endtime="20170419 00:58:03.194"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:03.194">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:03.194" status="PASS" endtime="20170419 00:58:03.194"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:03.195">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:03.195" status="PASS" endtime="20170419 00:58:03.195"></status>
</kw>
<status starttime="20170419 00:58:03.008" status="PASS" endtime="20170419 00:58:03.195"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:03.196">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:58:03.195" status="PASS" endtime="20170419 00:58:03.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:03.198">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:58:03.197" status="PASS" endtime="20170419 00:58:03.198"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:03.199">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:58:03.199" status="PASS" endtime="20170419 00:58:03.199"></status>
</kw>
<status starttime="20170419 00:58:03.198" status="PASS" endtime="20170419 00:58:03.199"></status>
</kw>
<status starttime="20170419 00:58:03.196" status="PASS" endtime="20170419 00:58:03.199"></status>
</kw>
<status starttime="20170419 00:58:03.196" status="PASS" endtime="20170419 00:58:03.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:03.262">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:58:03.262">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:03.200" status="PASS" endtime="20170419 00:58:03.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:03.264">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:58:03.263" status="PASS" endtime="20170419 00:58:03.264"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:03.265">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:58:03.265" status="PASS" endtime="20170419 00:58:03.265"></status>
</kw>
<status starttime="20170419 00:58:03.264" status="PASS" endtime="20170419 00:58:03.265"></status>
</kw>
<status starttime="20170419 00:58:03.263" status="PASS" endtime="20170419 00:58:03.265"></status>
</kw>
<status starttime="20170419 00:58:03.263" status="PASS" endtime="20170419 00:58:03.265"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:03.265">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:03.007" status="PASS" endtime="20170419 00:58:03.266"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:03.266">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:03.266" status="PASS" endtime="20170419 00:58:03.266"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:03.267">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:58:03.267">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:58:03.267">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:58:03.266" status="PASS" endtime="20170419 00:58:03.267"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:03.267">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:58:03.006" status="PASS" endtime="20170419 00:58:03.267"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:03.267">${host_state} = Off</msg>
<status starttime="20170419 00:58:03.006" status="PASS" endtime="20170419 00:58:03.268"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:58:03.268">Running != Off</msg>
<status starttime="20170419 00:58:03.268" status="FAIL" endtime="20170419 00:58:03.268"></status>
</kw>
<status starttime="20170419 00:58:03.005" status="FAIL" endtime="20170419 00:58:03.268"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:13.272">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:58:13.272" status="PASS" endtime="20170419 00:58:13.272"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:13.273">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:58:13.273" status="PASS" endtime="20170419 00:58:13.273"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:13.274">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:58:13.273" status="PASS" endtime="20170419 00:58:13.274"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:13.274">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:58:13.274" status="PASS" endtime="20170419 00:58:13.274"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:13.451">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:58:13.275" status="PASS" endtime="20170419 00:58:13.451"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:13.451">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:58:13.451">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:13.275" status="PASS" endtime="20170419 00:58:13.451"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:13.452">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:13.452" status="PASS" endtime="20170419 00:58:13.452"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:13.453">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:13.452" status="PASS" endtime="20170419 00:58:13.453"></status>
</kw>
<status starttime="20170419 00:58:13.271" status="PASS" endtime="20170419 00:58:13.453"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:13.454">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:58:13.453" status="PASS" endtime="20170419 00:58:13.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:13.456">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:58:13.455" status="PASS" endtime="20170419 00:58:13.456"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:13.457">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:58:13.456" status="PASS" endtime="20170419 00:58:13.457"></status>
</kw>
<status starttime="20170419 00:58:13.456" status="PASS" endtime="20170419 00:58:13.457"></status>
</kw>
<status starttime="20170419 00:58:13.454" status="PASS" endtime="20170419 00:58:13.457"></status>
</kw>
<status starttime="20170419 00:58:13.454" status="PASS" endtime="20170419 00:58:13.457"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:13.521">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:58:13.521">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:13.457" status="PASS" endtime="20170419 00:58:13.521"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:13.522">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:58:13.522" status="PASS" endtime="20170419 00:58:13.522"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:13.523">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:58:13.523" status="PASS" endtime="20170419 00:58:13.524"></status>
</kw>
<status starttime="20170419 00:58:13.523" status="PASS" endtime="20170419 00:58:13.524"></status>
</kw>
<status starttime="20170419 00:58:13.521" status="PASS" endtime="20170419 00:58:13.524"></status>
</kw>
<status starttime="20170419 00:58:13.521" status="PASS" endtime="20170419 00:58:13.524"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:13.524">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:13.270" status="PASS" endtime="20170419 00:58:13.524"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:13.525">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:13.524" status="PASS" endtime="20170419 00:58:13.525"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:13.525">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:58:13.525">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:58:13.525">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:58:13.525" status="PASS" endtime="20170419 00:58:13.525"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:13.526">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:58:13.270" status="PASS" endtime="20170419 00:58:13.526"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:13.526">${host_state} = Off</msg>
<status starttime="20170419 00:58:13.269" status="PASS" endtime="20170419 00:58:13.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:58:13.527">Running != Off</msg>
<status starttime="20170419 00:58:13.526" status="FAIL" endtime="20170419 00:58:13.527"></status>
</kw>
<status starttime="20170419 00:58:13.269" status="FAIL" endtime="20170419 00:58:13.527"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:23.531">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:58:23.530" status="PASS" endtime="20170419 00:58:23.531"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:23.532">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:58:23.531" status="PASS" endtime="20170419 00:58:23.532"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:23.532">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:58:23.532" status="PASS" endtime="20170419 00:58:23.532"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:23.533">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:58:23.533" status="PASS" endtime="20170419 00:58:23.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:23.710">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:58:23.534" status="PASS" endtime="20170419 00:58:23.710"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:23.710">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:58:23.710">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:23.533" status="PASS" endtime="20170419 00:58:23.711"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:23.711">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:23.711" status="PASS" endtime="20170419 00:58:23.711"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:23.712">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:23.711" status="PASS" endtime="20170419 00:58:23.712"></status>
</kw>
<status starttime="20170419 00:58:23.529" status="PASS" endtime="20170419 00:58:23.712"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:23.713">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:58:23.712" status="PASS" endtime="20170419 00:58:23.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:23.715">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:58:23.714" status="PASS" endtime="20170419 00:58:23.715"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:23.716">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:58:23.715" status="PASS" endtime="20170419 00:58:23.716"></status>
</kw>
<status starttime="20170419 00:58:23.715" status="PASS" endtime="20170419 00:58:23.716"></status>
</kw>
<status starttime="20170419 00:58:23.713" status="PASS" endtime="20170419 00:58:23.716"></status>
</kw>
<status starttime="20170419 00:58:23.713" status="PASS" endtime="20170419 00:58:23.716"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:23.779">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:58:23.779">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:23.716" status="PASS" endtime="20170419 00:58:23.779"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:23.783">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:58:23.782" status="PASS" endtime="20170419 00:58:23.783"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:23.784">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:58:23.783" status="PASS" endtime="20170419 00:58:23.784"></status>
</kw>
<status starttime="20170419 00:58:23.783" status="PASS" endtime="20170419 00:58:23.784"></status>
</kw>
<status starttime="20170419 00:58:23.780" status="PASS" endtime="20170419 00:58:23.784"></status>
</kw>
<status starttime="20170419 00:58:23.779" status="PASS" endtime="20170419 00:58:23.784"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:23.784">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:23.529" status="PASS" endtime="20170419 00:58:23.784"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:23.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:23.785" status="PASS" endtime="20170419 00:58:23.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:23.786">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:58:23.786">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:58:23.786">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:58:23.785" status="PASS" endtime="20170419 00:58:23.786"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:23.786">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:58:23.528" status="PASS" endtime="20170419 00:58:23.786"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:23.786">${host_state} = Off</msg>
<status starttime="20170419 00:58:23.528" status="PASS" endtime="20170419 00:58:23.786"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:58:23.787">Running != Off</msg>
<status starttime="20170419 00:58:23.787" status="FAIL" endtime="20170419 00:58:23.787"></status>
</kw>
<status starttime="20170419 00:58:23.527" status="FAIL" endtime="20170419 00:58:23.787"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:33.792">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:58:33.791" status="PASS" endtime="20170419 00:58:33.792"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:33.793">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:58:33.793" status="PASS" endtime="20170419 00:58:33.793"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:33.794">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:58:33.793" status="PASS" endtime="20170419 00:58:33.794"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:33.794">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:58:33.794" status="PASS" endtime="20170419 00:58:33.794"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:33.996">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:58:33.795" status="PASS" endtime="20170419 00:58:33.997"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:33.997">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:58:33.997">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:33.795" status="PASS" endtime="20170419 00:58:33.997"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:33.997">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:33.997" status="PASS" endtime="20170419 00:58:33.997"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:33.998">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:33.998" status="PASS" endtime="20170419 00:58:33.998"></status>
</kw>
<status starttime="20170419 00:58:33.790" status="PASS" endtime="20170419 00:58:33.998"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:33.999">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:58:33.998" status="PASS" endtime="20170419 00:58:33.999"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:34.001">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:58:34.000" status="PASS" endtime="20170419 00:58:34.002"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:34.002">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:58:34.002" status="PASS" endtime="20170419 00:58:34.003"></status>
</kw>
<status starttime="20170419 00:58:34.002" status="PASS" endtime="20170419 00:58:34.003"></status>
</kw>
<status starttime="20170419 00:58:34.000" status="PASS" endtime="20170419 00:58:34.003"></status>
</kw>
<status starttime="20170419 00:58:33.999" status="PASS" endtime="20170419 00:58:34.003"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:34.066">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:58:34.066">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:34.003" status="PASS" endtime="20170419 00:58:34.067"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:34.068">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:58:34.068" status="PASS" endtime="20170419 00:58:34.068"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:34.069">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:58:34.069" status="PASS" endtime="20170419 00:58:34.069"></status>
</kw>
<status starttime="20170419 00:58:34.068" status="PASS" endtime="20170419 00:58:34.069"></status>
</kw>
<status starttime="20170419 00:58:34.067" status="PASS" endtime="20170419 00:58:34.069"></status>
</kw>
<status starttime="20170419 00:58:34.067" status="PASS" endtime="20170419 00:58:34.070"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:34.070">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:33.789" status="PASS" endtime="20170419 00:58:34.070"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:34.070">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:34.070" status="PASS" endtime="20170419 00:58:34.071"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:34.071">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:58:34.071">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:58:34.071">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:58:34.071" status="PASS" endtime="20170419 00:58:34.071"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:34.071">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:58:33.789" status="PASS" endtime="20170419 00:58:34.072"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:34.072">${host_state} = Off</msg>
<status starttime="20170419 00:58:33.788" status="PASS" endtime="20170419 00:58:34.072"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:58:34.072">Running != Off</msg>
<status starttime="20170419 00:58:34.072" status="FAIL" endtime="20170419 00:58:34.072"></status>
</kw>
<status starttime="20170419 00:58:33.788" status="FAIL" endtime="20170419 00:58:34.073"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:44.077">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:58:44.076" status="PASS" endtime="20170419 00:58:44.077"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:44.077">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:58:44.077" status="PASS" endtime="20170419 00:58:44.078"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:44.078">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:58:44.078" status="PASS" endtime="20170419 00:58:44.078"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:44.079">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:58:44.078" status="PASS" endtime="20170419 00:58:44.079"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:44.274">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:58:44.079" status="PASS" endtime="20170419 00:58:44.274"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:44.274">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:58:44.274">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:44.079" status="PASS" endtime="20170419 00:58:44.274"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:44.275">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:44.274" status="PASS" endtime="20170419 00:58:44.275"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:44.275">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:44.275" status="PASS" endtime="20170419 00:58:44.275"></status>
</kw>
<status starttime="20170419 00:58:44.076" status="PASS" endtime="20170419 00:58:44.275"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:44.276">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:58:44.276" status="PASS" endtime="20170419 00:58:44.276"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:44.278">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:58:44.277" status="PASS" endtime="20170419 00:58:44.278"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:44.279">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:58:44.279" status="PASS" endtime="20170419 00:58:44.279"></status>
</kw>
<status starttime="20170419 00:58:44.278" status="PASS" endtime="20170419 00:58:44.279"></status>
</kw>
<status starttime="20170419 00:58:44.277" status="PASS" endtime="20170419 00:58:44.279"></status>
</kw>
<status starttime="20170419 00:58:44.276" status="PASS" endtime="20170419 00:58:44.280"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:44.342">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:58:44.342">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:44.280" status="PASS" endtime="20170419 00:58:44.342"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:44.344">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:58:44.343" status="PASS" endtime="20170419 00:58:44.344"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:44.345">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:58:44.345" status="PASS" endtime="20170419 00:58:44.345"></status>
</kw>
<status starttime="20170419 00:58:44.344" status="PASS" endtime="20170419 00:58:44.345"></status>
</kw>
<status starttime="20170419 00:58:44.343" status="PASS" endtime="20170419 00:58:44.345"></status>
</kw>
<status starttime="20170419 00:58:44.343" status="PASS" endtime="20170419 00:58:44.345"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:44.345">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:44.075" status="PASS" endtime="20170419 00:58:44.345"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:44.346">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:44.346" status="PASS" endtime="20170419 00:58:44.346"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:44.347">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:58:44.347">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:58:44.347">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:58:44.346" status="PASS" endtime="20170419 00:58:44.347"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:44.347">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:58:44.074" status="PASS" endtime="20170419 00:58:44.347"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:44.347">${host_state} = Off</msg>
<status starttime="20170419 00:58:44.074" status="PASS" endtime="20170419 00:58:44.347"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:58:44.348">Running != Off</msg>
<status starttime="20170419 00:58:44.348" status="FAIL" endtime="20170419 00:58:44.348"></status>
</kw>
<status starttime="20170419 00:58:44.073" status="FAIL" endtime="20170419 00:58:44.348"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:54.352">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:58:54.351" status="PASS" endtime="20170419 00:58:54.352"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:54.353">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:58:54.353" status="PASS" endtime="20170419 00:58:54.353"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:54.354">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:58:54.353" status="PASS" endtime="20170419 00:58:54.354"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:54.354">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:58:54.354" status="PASS" endtime="20170419 00:58:54.354"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:54.528">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:58:54.355" status="PASS" endtime="20170419 00:58:54.528"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:54.528">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:58:54.528">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:54.355" status="PASS" endtime="20170419 00:58:54.528"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:54.529">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:54.529" status="PASS" endtime="20170419 00:58:54.529"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:54.530">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:54.529" status="PASS" endtime="20170419 00:58:54.530"></status>
</kw>
<status starttime="20170419 00:58:54.351" status="PASS" endtime="20170419 00:58:54.530"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:54.530">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:58:54.530" status="PASS" endtime="20170419 00:58:54.531"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:54.533">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:58:54.532" status="PASS" endtime="20170419 00:58:54.533"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:54.533">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:58:54.533" status="PASS" endtime="20170419 00:58:54.534"></status>
</kw>
<status starttime="20170419 00:58:54.533" status="PASS" endtime="20170419 00:58:54.534"></status>
</kw>
<status starttime="20170419 00:58:54.531" status="PASS" endtime="20170419 00:58:54.534"></status>
</kw>
<status starttime="20170419 00:58:54.531" status="PASS" endtime="20170419 00:58:54.534"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:54.634">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:58:54.634">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:54.534" status="PASS" endtime="20170419 00:58:54.634"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:54.636">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:58:54.636" status="PASS" endtime="20170419 00:58:54.636"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:54.637">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:58:54.637" status="PASS" endtime="20170419 00:58:54.637"></status>
</kw>
<status starttime="20170419 00:58:54.636" status="PASS" endtime="20170419 00:58:54.637"></status>
</kw>
<status starttime="20170419 00:58:54.635" status="PASS" endtime="20170419 00:58:54.637"></status>
</kw>
<status starttime="20170419 00:58:54.635" status="PASS" endtime="20170419 00:58:54.637"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:54.638">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:58:54.350" status="PASS" endtime="20170419 00:58:54.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:58:54.638">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:58:54.638" status="PASS" endtime="20170419 00:58:54.638"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:58:54.639">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:58:54.639">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:58:54.639">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:58:54.639" status="PASS" endtime="20170419 00:58:54.639"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:54.639">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:58:54.349" status="PASS" endtime="20170419 00:58:54.639"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:58:54.640">${host_state} = Off</msg>
<status starttime="20170419 00:58:54.349" status="PASS" endtime="20170419 00:58:54.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:58:54.640">Running != Off</msg>
<status starttime="20170419 00:58:54.640" status="FAIL" endtime="20170419 00:58:54.640"></status>
</kw>
<status starttime="20170419 00:58:54.349" status="FAIL" endtime="20170419 00:58:54.641"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:04.644">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:59:04.644" status="PASS" endtime="20170419 00:59:04.645"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:04.645">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:59:04.645" status="PASS" endtime="20170419 00:59:04.645"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:04.646">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:59:04.645" status="PASS" endtime="20170419 00:59:04.646"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:04.646">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:59:04.646" status="PASS" endtime="20170419 00:59:04.646"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:04.822">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:59:04.647" status="PASS" endtime="20170419 00:59:04.822"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:04.822">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:59:04.822">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:04.647" status="PASS" endtime="20170419 00:59:04.822"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:04.823">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:04.823" status="PASS" endtime="20170419 00:59:04.823"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:04.824">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:04.823" status="PASS" endtime="20170419 00:59:04.824"></status>
</kw>
<status starttime="20170419 00:59:04.643" status="PASS" endtime="20170419 00:59:04.824"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:04.825">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:59:04.824" status="PASS" endtime="20170419 00:59:04.825"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:04.828">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:59:04.827" status="PASS" endtime="20170419 00:59:04.828"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:04.829">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:59:04.829" status="PASS" endtime="20170419 00:59:04.830"></status>
</kw>
<status starttime="20170419 00:59:04.828" status="PASS" endtime="20170419 00:59:04.830"></status>
</kw>
<status starttime="20170419 00:59:04.826" status="PASS" endtime="20170419 00:59:04.830"></status>
</kw>
<status starttime="20170419 00:59:04.825" status="PASS" endtime="20170419 00:59:04.830"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:04.893">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:59:04.893">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:04.830" status="PASS" endtime="20170419 00:59:04.893"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:04.895">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:59:04.894" status="PASS" endtime="20170419 00:59:04.895"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:04.895">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:59:04.895" status="PASS" endtime="20170419 00:59:04.896"></status>
</kw>
<status starttime="20170419 00:59:04.895" status="PASS" endtime="20170419 00:59:04.896"></status>
</kw>
<status starttime="20170419 00:59:04.894" status="PASS" endtime="20170419 00:59:04.896"></status>
</kw>
<status starttime="20170419 00:59:04.893" status="PASS" endtime="20170419 00:59:04.896"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:04.896">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:04.643" status="PASS" endtime="20170419 00:59:04.896"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:04.897">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:04.896" status="PASS" endtime="20170419 00:59:04.897"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:04.897">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:59:04.897">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:59:04.897">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:59:04.897" status="PASS" endtime="20170419 00:59:04.897"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:04.898">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:59:04.642" status="PASS" endtime="20170419 00:59:04.898"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:04.898">${host_state} = Off</msg>
<status starttime="20170419 00:59:04.641" status="PASS" endtime="20170419 00:59:04.898"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:59:04.899">Running != Off</msg>
<status starttime="20170419 00:59:04.898" status="FAIL" endtime="20170419 00:59:04.899"></status>
</kw>
<status starttime="20170419 00:59:04.641" status="FAIL" endtime="20170419 00:59:04.899"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:14.902">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:59:14.902" status="PASS" endtime="20170419 00:59:14.903"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:14.903">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:59:14.903" status="PASS" endtime="20170419 00:59:14.903"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:14.904">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:59:14.904" status="PASS" endtime="20170419 00:59:14.904"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:14.905">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:59:14.904" status="PASS" endtime="20170419 00:59:14.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:15.080">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:59:14.905" status="PASS" endtime="20170419 00:59:15.080"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:15.080">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:59:15.080">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:14.905" status="PASS" endtime="20170419 00:59:15.080"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:15.081">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:15.080" status="PASS" endtime="20170419 00:59:15.081"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:15.082">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:15.081" status="PASS" endtime="20170419 00:59:15.082"></status>
</kw>
<status starttime="20170419 00:59:14.901" status="PASS" endtime="20170419 00:59:15.082"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:15.083">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:59:15.082" status="PASS" endtime="20170419 00:59:15.083"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:15.085">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:59:15.084" status="PASS" endtime="20170419 00:59:15.085"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:15.085">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:59:15.085" status="PASS" endtime="20170419 00:59:15.086"></status>
</kw>
<status starttime="20170419 00:59:15.085" status="PASS" endtime="20170419 00:59:15.086"></status>
</kw>
<status starttime="20170419 00:59:15.083" status="PASS" endtime="20170419 00:59:15.086"></status>
</kw>
<status starttime="20170419 00:59:15.083" status="PASS" endtime="20170419 00:59:15.086"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:15.149">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:59:15.149">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:15.086" status="PASS" endtime="20170419 00:59:15.149"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:15.151">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:59:15.150" status="PASS" endtime="20170419 00:59:15.151"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:15.152">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:59:15.151" status="PASS" endtime="20170419 00:59:15.152"></status>
</kw>
<status starttime="20170419 00:59:15.151" status="PASS" endtime="20170419 00:59:15.152"></status>
</kw>
<status starttime="20170419 00:59:15.150" status="PASS" endtime="20170419 00:59:15.152"></status>
</kw>
<status starttime="20170419 00:59:15.149" status="PASS" endtime="20170419 00:59:15.152"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:15.152">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:14.901" status="PASS" endtime="20170419 00:59:15.152"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:15.153">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:15.153" status="PASS" endtime="20170419 00:59:15.153"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:15.153">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:59:15.153">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:59:15.154">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:59:15.153" status="PASS" endtime="20170419 00:59:15.154"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:15.154">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:59:14.900" status="PASS" endtime="20170419 00:59:15.154"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:15.154">${host_state} = Off</msg>
<status starttime="20170419 00:59:14.900" status="PASS" endtime="20170419 00:59:15.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:59:15.155">Running != Off</msg>
<status starttime="20170419 00:59:15.155" status="FAIL" endtime="20170419 00:59:15.155"></status>
</kw>
<status starttime="20170419 00:59:14.899" status="FAIL" endtime="20170419 00:59:15.155"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:25.159">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:59:25.159" status="PASS" endtime="20170419 00:59:25.160"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:25.161">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:59:25.161" status="PASS" endtime="20170419 00:59:25.161"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:25.162">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:59:25.161" status="PASS" endtime="20170419 00:59:25.162"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:25.163">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:59:25.162" status="PASS" endtime="20170419 00:59:25.163"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:25.339">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:59:25.164" status="PASS" endtime="20170419 00:59:25.339"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:25.340">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:59:25.340">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:25.163" status="PASS" endtime="20170419 00:59:25.340"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:25.340">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:25.340" status="PASS" endtime="20170419 00:59:25.340"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:25.341">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:25.341" status="PASS" endtime="20170419 00:59:25.341"></status>
</kw>
<status starttime="20170419 00:59:25.158" status="PASS" endtime="20170419 00:59:25.341"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:25.342">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:59:25.341" status="PASS" endtime="20170419 00:59:25.342"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:25.344">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:59:25.343" status="PASS" endtime="20170419 00:59:25.344"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:25.345">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:59:25.345" status="PASS" endtime="20170419 00:59:25.345"></status>
</kw>
<status starttime="20170419 00:59:25.344" status="PASS" endtime="20170419 00:59:25.345"></status>
</kw>
<status starttime="20170419 00:59:25.343" status="PASS" endtime="20170419 00:59:25.345"></status>
</kw>
<status starttime="20170419 00:59:25.342" status="PASS" endtime="20170419 00:59:25.345"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:25.409">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:59:25.409">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:25.345" status="PASS" endtime="20170419 00:59:25.409"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:25.411">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:59:25.411" status="PASS" endtime="20170419 00:59:25.411"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:25.412">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:59:25.412" status="PASS" endtime="20170419 00:59:25.412"></status>
</kw>
<status starttime="20170419 00:59:25.411" status="PASS" endtime="20170419 00:59:25.412"></status>
</kw>
<status starttime="20170419 00:59:25.410" status="PASS" endtime="20170419 00:59:25.413"></status>
</kw>
<status starttime="20170419 00:59:25.410" status="PASS" endtime="20170419 00:59:25.413"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:25.413">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:25.157" status="PASS" endtime="20170419 00:59:25.413"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:25.413">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:25.413" status="PASS" endtime="20170419 00:59:25.413"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:25.414">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:59:25.414">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:59:25.414">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:59:25.414" status="PASS" endtime="20170419 00:59:25.414"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:25.414">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:59:25.157" status="PASS" endtime="20170419 00:59:25.414"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:25.415">${host_state} = Off</msg>
<status starttime="20170419 00:59:25.156" status="PASS" endtime="20170419 00:59:25.415"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:59:25.415">Running != Off</msg>
<status starttime="20170419 00:59:25.415" status="FAIL" endtime="20170419 00:59:25.415"></status>
</kw>
<status starttime="20170419 00:59:25.156" status="FAIL" endtime="20170419 00:59:25.416"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:35.419">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:59:35.419" status="PASS" endtime="20170419 00:59:35.419"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:35.420">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:59:35.420" status="PASS" endtime="20170419 00:59:35.420"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:35.421">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:59:35.420" status="PASS" endtime="20170419 00:59:35.421"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:35.421">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:59:35.421" status="PASS" endtime="20170419 00:59:35.421"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:35.597">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:59:35.422" status="PASS" endtime="20170419 00:59:35.597"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:35.597">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:59:35.597">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:35.421" status="PASS" endtime="20170419 00:59:35.597"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:35.598">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:35.598" status="PASS" endtime="20170419 00:59:35.598"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:35.599">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:35.598" status="PASS" endtime="20170419 00:59:35.599"></status>
</kw>
<status starttime="20170419 00:59:35.418" status="PASS" endtime="20170419 00:59:35.599"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:35.599">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:59:35.599" status="PASS" endtime="20170419 00:59:35.599"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:35.602">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:59:35.601" status="PASS" endtime="20170419 00:59:35.602"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:35.603">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:59:35.602" status="PASS" endtime="20170419 00:59:35.603"></status>
</kw>
<status starttime="20170419 00:59:35.602" status="PASS" endtime="20170419 00:59:35.603"></status>
</kw>
<status starttime="20170419 00:59:35.600" status="PASS" endtime="20170419 00:59:35.603"></status>
</kw>
<status starttime="20170419 00:59:35.600" status="PASS" endtime="20170419 00:59:35.603"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:35.665">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:59:35.665">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:35.603" status="PASS" endtime="20170419 00:59:35.665"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:35.667">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:59:35.667" status="PASS" endtime="20170419 00:59:35.667"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:35.668">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:59:35.668" status="PASS" endtime="20170419 00:59:35.668"></status>
</kw>
<status starttime="20170419 00:59:35.667" status="PASS" endtime="20170419 00:59:35.668"></status>
</kw>
<status starttime="20170419 00:59:35.666" status="PASS" endtime="20170419 00:59:35.669"></status>
</kw>
<status starttime="20170419 00:59:35.666" status="PASS" endtime="20170419 00:59:35.669"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:35.669">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:35.417" status="PASS" endtime="20170419 00:59:35.669"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:35.670">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:35.669" status="PASS" endtime="20170419 00:59:35.670"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:35.671">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:59:35.671">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:59:35.671">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:59:35.670" status="PASS" endtime="20170419 00:59:35.671"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:35.671">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:59:35.417" status="PASS" endtime="20170419 00:59:35.671"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:35.672">${host_state} = Off</msg>
<status starttime="20170419 00:59:35.416" status="PASS" endtime="20170419 00:59:35.672"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:59:35.673">Running != Off</msg>
<status starttime="20170419 00:59:35.672" status="FAIL" endtime="20170419 00:59:35.673"></status>
</kw>
<status starttime="20170419 00:59:35.416" status="FAIL" endtime="20170419 00:59:35.673"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:45.677">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:59:45.676" status="PASS" endtime="20170419 00:59:45.677"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:45.678">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:59:45.678" status="PASS" endtime="20170419 00:59:45.678"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:45.679">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:59:45.678" status="PASS" endtime="20170419 00:59:45.679"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:45.679">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:59:45.679" status="PASS" endtime="20170419 00:59:45.679"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:45.854">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:59:45.680" status="PASS" endtime="20170419 00:59:45.854"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:45.855">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:59:45.855">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:45.679" status="PASS" endtime="20170419 00:59:45.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:45.855">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:45.855" status="PASS" endtime="20170419 00:59:45.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:45.856">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:45.856" status="PASS" endtime="20170419 00:59:45.856"></status>
</kw>
<status starttime="20170419 00:59:45.676" status="PASS" endtime="20170419 00:59:45.856"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:45.857">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:59:45.856" status="PASS" endtime="20170419 00:59:45.857"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:45.859">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:59:45.858" status="PASS" endtime="20170419 00:59:45.859"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:45.860">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:59:45.859" status="PASS" endtime="20170419 00:59:45.860"></status>
</kw>
<status starttime="20170419 00:59:45.859" status="PASS" endtime="20170419 00:59:45.860"></status>
</kw>
<status starttime="20170419 00:59:45.857" status="PASS" endtime="20170419 00:59:45.860"></status>
</kw>
<status starttime="20170419 00:59:45.857" status="PASS" endtime="20170419 00:59:45.860"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:45.928">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:59:45.929">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:45.860" status="PASS" endtime="20170419 00:59:45.929"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:45.930">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:59:45.930" status="PASS" endtime="20170419 00:59:45.930"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:45.931">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:59:45.931" status="PASS" endtime="20170419 00:59:45.931"></status>
</kw>
<status starttime="20170419 00:59:45.931" status="PASS" endtime="20170419 00:59:45.932"></status>
</kw>
<status starttime="20170419 00:59:45.929" status="PASS" endtime="20170419 00:59:45.932"></status>
</kw>
<status starttime="20170419 00:59:45.929" status="PASS" endtime="20170419 00:59:45.932"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:45.932">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:45.675" status="PASS" endtime="20170419 00:59:45.932"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:45.933">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:45.932" status="PASS" endtime="20170419 00:59:45.933"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:45.933">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:59:45.933">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:59:45.933">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:59:45.933" status="PASS" endtime="20170419 00:59:45.933"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:45.934">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:59:45.674" status="PASS" endtime="20170419 00:59:45.934"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:45.934">${host_state} = Off</msg>
<status starttime="20170419 00:59:45.674" status="PASS" endtime="20170419 00:59:45.934"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:59:45.935">Running != Off</msg>
<status starttime="20170419 00:59:45.934" status="FAIL" endtime="20170419 00:59:45.935"></status>
</kw>
<status starttime="20170419 00:59:45.673" status="FAIL" endtime="20170419 00:59:45.935"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:55.939">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 00:59:55.939" status="PASS" endtime="20170419 00:59:55.939"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:55.940">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 00:59:55.940" status="PASS" endtime="20170419 00:59:55.940"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:55.941">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 00:59:55.940" status="PASS" endtime="20170419 00:59:55.941"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:55.941">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 00:59:55.941" status="PASS" endtime="20170419 00:59:55.941"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:56.123">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 00:59:55.942" status="PASS" endtime="20170419 00:59:56.123"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:56.123">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 00:59:56.123">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:55.942" status="PASS" endtime="20170419 00:59:56.123"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:56.124">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:56.124" status="PASS" endtime="20170419 00:59:56.124"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:56.125">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:56.124" status="PASS" endtime="20170419 00:59:56.125"></status>
</kw>
<status starttime="20170419 00:59:55.938" status="PASS" endtime="20170419 00:59:56.125"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:56.126">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 00:59:56.125" status="PASS" endtime="20170419 00:59:56.126"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:56.128">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:59:56.127" status="PASS" endtime="20170419 00:59:56.128"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:56.129">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 00:59:56.129" status="PASS" endtime="20170419 00:59:56.129"></status>
</kw>
<status starttime="20170419 00:59:56.128" status="PASS" endtime="20170419 00:59:56.129"></status>
</kw>
<status starttime="20170419 00:59:56.127" status="PASS" endtime="20170419 00:59:56.129"></status>
</kw>
<status starttime="20170419 00:59:56.126" status="PASS" endtime="20170419 00:59:56.129"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:56.194">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 00:59:56.194">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:56.129" status="PASS" endtime="20170419 00:59:56.194"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:56.198">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:59:56.195" status="PASS" endtime="20170419 00:59:56.198"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:56.199">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 00:59:56.199" status="PASS" endtime="20170419 00:59:56.199"></status>
</kw>
<status starttime="20170419 00:59:56.198" status="PASS" endtime="20170419 00:59:56.199"></status>
</kw>
<status starttime="20170419 00:59:56.195" status="PASS" endtime="20170419 00:59:56.199"></status>
</kw>
<status starttime="20170419 00:59:56.194" status="PASS" endtime="20170419 00:59:56.200"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:56.200">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 00:59:55.937" status="PASS" endtime="20170419 00:59:56.200"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 00:59:56.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 00:59:56.200" status="PASS" endtime="20170419 00:59:56.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 00:59:56.201">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 00:59:56.201">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 00:59:56.201">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 00:59:56.201" status="PASS" endtime="20170419 00:59:56.201"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:56.201">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 00:59:55.936" status="PASS" endtime="20170419 00:59:56.201"></status>
</kw>
<msg level="INFO" timestamp="20170419 00:59:56.202">${host_state} = Off</msg>
<status starttime="20170419 00:59:55.936" status="PASS" endtime="20170419 00:59:56.202"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 00:59:56.202">Running != Off</msg>
<status starttime="20170419 00:59:56.202" status="FAIL" endtime="20170419 00:59:56.202"></status>
</kw>
<status starttime="20170419 00:59:55.935" status="FAIL" endtime="20170419 00:59:56.203"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:06.206">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:00:06.206" status="PASS" endtime="20170419 01:00:06.207"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:06.207">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:00:06.207" status="PASS" endtime="20170419 01:00:06.207"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:06.208">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:00:06.208" status="PASS" endtime="20170419 01:00:06.208"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:06.208">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:00:06.208" status="PASS" endtime="20170419 01:00:06.209"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:06.385">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:00:06.209" status="PASS" endtime="20170419 01:00:06.386"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:06.386">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:00:06.386">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:06.209" status="PASS" endtime="20170419 01:00:06.386"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:06.387">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:06.386" status="PASS" endtime="20170419 01:00:06.387"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:06.387">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:06.387" status="PASS" endtime="20170419 01:00:06.387"></status>
</kw>
<status starttime="20170419 01:00:06.205" status="PASS" endtime="20170419 01:00:06.387"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:06.388">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 01:00:06.388" status="PASS" endtime="20170419 01:00:06.388"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:06.390">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:00:06.389" status="PASS" endtime="20170419 01:00:06.390"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:06.391">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:00:06.391" status="PASS" endtime="20170419 01:00:06.392"></status>
</kw>
<status starttime="20170419 01:00:06.391" status="PASS" endtime="20170419 01:00:06.392"></status>
</kw>
<status starttime="20170419 01:00:06.389" status="PASS" endtime="20170419 01:00:06.392"></status>
</kw>
<status starttime="20170419 01:00:06.388" status="PASS" endtime="20170419 01:00:06.392"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:06.454">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:00:06.454">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:06.392" status="PASS" endtime="20170419 01:00:06.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:06.456">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:00:06.456" status="PASS" endtime="20170419 01:00:06.456"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:06.457">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:00:06.457" status="PASS" endtime="20170419 01:00:06.457"></status>
</kw>
<status starttime="20170419 01:00:06.456" status="PASS" endtime="20170419 01:00:06.457"></status>
</kw>
<status starttime="20170419 01:00:06.455" status="PASS" endtime="20170419 01:00:06.457"></status>
</kw>
<status starttime="20170419 01:00:06.455" status="PASS" endtime="20170419 01:00:06.458"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:06.458">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:06.205" status="PASS" endtime="20170419 01:00:06.458"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:06.458">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:06.458" status="PASS" endtime="20170419 01:00:06.458"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:06.459">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 01:00:06.459">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 01:00:06.459">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 01:00:06.459" status="PASS" endtime="20170419 01:00:06.459"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:06.459">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 01:00:06.204" status="PASS" endtime="20170419 01:00:06.459"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:06.460">${host_state} = Off</msg>
<status starttime="20170419 01:00:06.204" status="PASS" endtime="20170419 01:00:06.460"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:00:06.460">Running != Off</msg>
<status starttime="20170419 01:00:06.460" status="FAIL" endtime="20170419 01:00:06.460"></status>
</kw>
<status starttime="20170419 01:00:06.203" status="FAIL" endtime="20170419 01:00:06.461"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:16.464">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:00:16.464" status="PASS" endtime="20170419 01:00:16.465"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:16.465">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:00:16.465" status="PASS" endtime="20170419 01:00:16.465"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:16.466">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:00:16.466" status="PASS" endtime="20170419 01:00:16.466"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:16.467">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:00:16.466" status="PASS" endtime="20170419 01:00:16.467"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:16.643">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:00:16.467" status="PASS" endtime="20170419 01:00:16.643"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:16.643">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:00:16.643">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:16.467" status="PASS" endtime="20170419 01:00:16.643"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:16.644">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:16.643" status="PASS" endtime="20170419 01:00:16.644"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:16.644">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:16.644" status="PASS" endtime="20170419 01:00:16.644"></status>
</kw>
<status starttime="20170419 01:00:16.463" status="PASS" endtime="20170419 01:00:16.645"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:16.645">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 01:00:16.645" status="PASS" endtime="20170419 01:00:16.645"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:16.647">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:00:16.647" status="PASS" endtime="20170419 01:00:16.647"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:16.648">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:00:16.648" status="PASS" endtime="20170419 01:00:16.648"></status>
</kw>
<status starttime="20170419 01:00:16.647" status="PASS" endtime="20170419 01:00:16.648"></status>
</kw>
<status starttime="20170419 01:00:16.646" status="PASS" endtime="20170419 01:00:16.649"></status>
</kw>
<status starttime="20170419 01:00:16.646" status="PASS" endtime="20170419 01:00:16.649"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:16.712">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:00:16.712">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:16.649" status="PASS" endtime="20170419 01:00:16.712"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:16.714">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:00:16.713" status="PASS" endtime="20170419 01:00:16.714"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:16.715">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:00:16.714" status="PASS" endtime="20170419 01:00:16.715"></status>
</kw>
<status starttime="20170419 01:00:16.714" status="PASS" endtime="20170419 01:00:16.715"></status>
</kw>
<status starttime="20170419 01:00:16.713" status="PASS" endtime="20170419 01:00:16.715"></status>
</kw>
<status starttime="20170419 01:00:16.712" status="PASS" endtime="20170419 01:00:16.715"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:16.715">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:16.463" status="PASS" endtime="20170419 01:00:16.715"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:16.716">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:16.716" status="PASS" endtime="20170419 01:00:16.716"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:16.717">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 01:00:16.717">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 01:00:16.717">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 01:00:16.716" status="PASS" endtime="20170419 01:00:16.717"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:16.717">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 01:00:16.462" status="PASS" endtime="20170419 01:00:16.717"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:16.717">${host_state} = Off</msg>
<status starttime="20170419 01:00:16.462" status="PASS" endtime="20170419 01:00:16.717"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:00:16.718">Running != Off</msg>
<status starttime="20170419 01:00:16.718" status="FAIL" endtime="20170419 01:00:16.718"></status>
</kw>
<status starttime="20170419 01:00:16.461" status="FAIL" endtime="20170419 01:00:16.718"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:26.722">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:00:26.722" status="PASS" endtime="20170419 01:00:26.723"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:26.723">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:00:26.723" status="PASS" endtime="20170419 01:00:26.723"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:26.724">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:00:26.724" status="PASS" endtime="20170419 01:00:26.724"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:26.725">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:00:26.724" status="PASS" endtime="20170419 01:00:26.725"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:26.899">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:00:26.725" status="PASS" endtime="20170419 01:00:26.899"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:26.900">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:00:26.900">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:26.725" status="PASS" endtime="20170419 01:00:26.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:26.900">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:26.900" status="PASS" endtime="20170419 01:00:26.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:26.901">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:26.901" status="PASS" endtime="20170419 01:00:26.901"></status>
</kw>
<status starttime="20170419 01:00:26.721" status="PASS" endtime="20170419 01:00:26.901"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:26.902">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 01:00:26.901" status="PASS" endtime="20170419 01:00:26.902"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:26.904">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:00:26.903" status="PASS" endtime="20170419 01:00:26.904"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:26.905">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:00:26.904" status="PASS" endtime="20170419 01:00:26.905"></status>
</kw>
<status starttime="20170419 01:00:26.904" status="PASS" endtime="20170419 01:00:26.905"></status>
</kw>
<status starttime="20170419 01:00:26.903" status="PASS" endtime="20170419 01:00:26.905"></status>
</kw>
<status starttime="20170419 01:00:26.902" status="PASS" endtime="20170419 01:00:26.905"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:26.967">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:00:26.967">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:26.905" status="PASS" endtime="20170419 01:00:26.967"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:26.969">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:00:26.969" status="PASS" endtime="20170419 01:00:26.969"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:26.970">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:00:26.970" status="PASS" endtime="20170419 01:00:26.970"></status>
</kw>
<status starttime="20170419 01:00:26.969" status="PASS" endtime="20170419 01:00:26.970"></status>
</kw>
<status starttime="20170419 01:00:26.968" status="PASS" endtime="20170419 01:00:26.970"></status>
</kw>
<status starttime="20170419 01:00:26.968" status="PASS" endtime="20170419 01:00:26.970"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:26.971">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:26.720" status="PASS" endtime="20170419 01:00:26.971"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:26.971">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:26.971" status="PASS" endtime="20170419 01:00:26.971"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:26.972">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 01:00:26.972">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 01:00:26.972">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 01:00:26.972" status="PASS" endtime="20170419 01:00:26.972"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:26.972">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 01:00:26.720" status="PASS" endtime="20170419 01:00:26.973"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:26.973">${host_state} = Off</msg>
<status starttime="20170419 01:00:26.719" status="PASS" endtime="20170419 01:00:26.973"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:00:26.973">Running != Off</msg>
<status starttime="20170419 01:00:26.973" status="FAIL" endtime="20170419 01:00:26.973"></status>
</kw>
<status starttime="20170419 01:00:26.719" status="FAIL" endtime="20170419 01:00:26.974"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:36.978">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:00:36.977" status="PASS" endtime="20170419 01:00:36.978"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:36.979">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:00:36.978" status="PASS" endtime="20170419 01:00:36.979"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:36.979">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:00:36.979" status="PASS" endtime="20170419 01:00:36.980"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:36.980">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:00:36.980" status="PASS" endtime="20170419 01:00:36.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:37.156">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:00:36.981" status="PASS" endtime="20170419 01:00:37.156"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:37.157">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:00:37.157">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:36.980" status="PASS" endtime="20170419 01:00:37.157"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:37.158">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:37.157" status="PASS" endtime="20170419 01:00:37.158"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:37.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:37.158" status="PASS" endtime="20170419 01:00:37.159"></status>
</kw>
<status starttime="20170419 01:00:36.977" status="PASS" endtime="20170419 01:00:37.159"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:37.160">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 01:00:37.159" status="PASS" endtime="20170419 01:00:37.160"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:37.162">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:00:37.161" status="PASS" endtime="20170419 01:00:37.162"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:37.164">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:00:37.163" status="PASS" endtime="20170419 01:00:37.164"></status>
</kw>
<status starttime="20170419 01:00:37.163" status="PASS" endtime="20170419 01:00:37.164"></status>
</kw>
<status starttime="20170419 01:00:37.161" status="PASS" endtime="20170419 01:00:37.164"></status>
</kw>
<status starttime="20170419 01:00:37.160" status="PASS" endtime="20170419 01:00:37.164"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:37.227">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:00:37.227">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:37.164" status="PASS" endtime="20170419 01:00:37.227"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:37.229">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:00:37.228" status="PASS" endtime="20170419 01:00:37.229"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:37.229">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:00:37.229" status="PASS" endtime="20170419 01:00:37.230"></status>
</kw>
<status starttime="20170419 01:00:37.229" status="PASS" endtime="20170419 01:00:37.230"></status>
</kw>
<status starttime="20170419 01:00:37.228" status="PASS" endtime="20170419 01:00:37.230"></status>
</kw>
<status starttime="20170419 01:00:37.227" status="PASS" endtime="20170419 01:00:37.230"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:37.230">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:36.976" status="PASS" endtime="20170419 01:00:37.230"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:37.231">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:37.230" status="PASS" endtime="20170419 01:00:37.231"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:37.231">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 01:00:37.231">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 01:00:37.231">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 01:00:37.231" status="PASS" endtime="20170419 01:00:37.231"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:37.232">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 01:00:36.976" status="PASS" endtime="20170419 01:00:37.232"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:37.232">${host_state} = Off</msg>
<status starttime="20170419 01:00:36.975" status="PASS" endtime="20170419 01:00:37.232"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:00:37.233">Running != Off</msg>
<status starttime="20170419 01:00:37.232" status="FAIL" endtime="20170419 01:00:37.233"></status>
</kw>
<status starttime="20170419 01:00:36.974" status="FAIL" endtime="20170419 01:00:37.233"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:47.237">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:00:47.237" status="PASS" endtime="20170419 01:00:47.237"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:47.238">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:00:47.238" status="PASS" endtime="20170419 01:00:47.238"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:47.238">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:00:47.238" status="PASS" endtime="20170419 01:00:47.239"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:47.239">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:00:47.239" status="PASS" endtime="20170419 01:00:47.239"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:47.434">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:00:47.240" status="PASS" endtime="20170419 01:00:47.434"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:47.434">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:00:47.434">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:47.240" status="PASS" endtime="20170419 01:00:47.434"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:47.435">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:47.434" status="PASS" endtime="20170419 01:00:47.435"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:47.435">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:47.435" status="PASS" endtime="20170419 01:00:47.435"></status>
</kw>
<status starttime="20170419 01:00:47.236" status="PASS" endtime="20170419 01:00:47.436"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:47.436">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 01:00:47.436" status="PASS" endtime="20170419 01:00:47.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:47.438">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:00:47.437" status="PASS" endtime="20170419 01:00:47.438"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:47.439">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:00:47.439" status="PASS" endtime="20170419 01:00:47.439"></status>
</kw>
<status starttime="20170419 01:00:47.438" status="PASS" endtime="20170419 01:00:47.439"></status>
</kw>
<status starttime="20170419 01:00:47.437" status="PASS" endtime="20170419 01:00:47.439"></status>
</kw>
<status starttime="20170419 01:00:47.436" status="PASS" endtime="20170419 01:00:47.439"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:47.501">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:00:47.501">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:47.440" status="PASS" endtime="20170419 01:00:47.501"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:47.503">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:00:47.502" status="PASS" endtime="20170419 01:00:47.503"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:47.503">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:00:47.503" status="PASS" endtime="20170419 01:00:47.504"></status>
</kw>
<status starttime="20170419 01:00:47.503" status="PASS" endtime="20170419 01:00:47.504"></status>
</kw>
<status starttime="20170419 01:00:47.502" status="PASS" endtime="20170419 01:00:47.504"></status>
</kw>
<status starttime="20170419 01:00:47.501" status="PASS" endtime="20170419 01:00:47.504"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:47.504">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:47.235" status="PASS" endtime="20170419 01:00:47.504"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:47.505">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:47.504" status="PASS" endtime="20170419 01:00:47.505"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:47.505">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 01:00:47.505">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 01:00:47.505">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 01:00:47.505" status="PASS" endtime="20170419 01:00:47.506"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:47.506">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 01:00:47.235" status="PASS" endtime="20170419 01:00:47.506"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:47.506">${host_state} = Off</msg>
<status starttime="20170419 01:00:47.234" status="PASS" endtime="20170419 01:00:47.506"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:00:47.507">Running != Off</msg>
<status starttime="20170419 01:00:47.506" status="FAIL" endtime="20170419 01:00:47.507"></status>
</kw>
<status starttime="20170419 01:00:47.234" status="FAIL" endtime="20170419 01:00:47.507"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:57.511">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:00:57.510" status="PASS" endtime="20170419 01:00:57.511"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:57.512">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:00:57.512" status="PASS" endtime="20170419 01:00:57.512"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:57.513">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:00:57.512" status="PASS" endtime="20170419 01:00:57.513"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:57.513">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:00:57.513" status="PASS" endtime="20170419 01:00:57.513"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:57.691">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:00:57.514" status="PASS" endtime="20170419 01:00:57.691"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:57.691">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:00:57.691">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:57.514" status="PASS" endtime="20170419 01:00:57.691"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:57.692">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:57.691" status="PASS" endtime="20170419 01:00:57.692"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:57.692">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:57.692" status="PASS" endtime="20170419 01:00:57.693"></status>
</kw>
<status starttime="20170419 01:00:57.510" status="PASS" endtime="20170419 01:00:57.693"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:57.693">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 01:00:57.693" status="PASS" endtime="20170419 01:00:57.693"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:57.695">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:00:57.695" status="PASS" endtime="20170419 01:00:57.695"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:57.696">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:00:57.696" status="PASS" endtime="20170419 01:00:57.696"></status>
</kw>
<status starttime="20170419 01:00:57.695" status="PASS" endtime="20170419 01:00:57.697"></status>
</kw>
<status starttime="20170419 01:00:57.694" status="PASS" endtime="20170419 01:00:57.697"></status>
</kw>
<status starttime="20170419 01:00:57.694" status="PASS" endtime="20170419 01:00:57.697"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:57.761">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:00:57.762">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:57.697" status="PASS" endtime="20170419 01:00:57.762"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:57.763">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:00:57.763" status="PASS" endtime="20170419 01:00:57.763"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:57.765">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:00:57.764" status="PASS" endtime="20170419 01:00:57.765"></status>
</kw>
<status starttime="20170419 01:00:57.764" status="PASS" endtime="20170419 01:00:57.765"></status>
</kw>
<status starttime="20170419 01:00:57.762" status="PASS" endtime="20170419 01:00:57.765"></status>
</kw>
<status starttime="20170419 01:00:57.762" status="PASS" endtime="20170419 01:00:57.765"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:57.765">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:00:57.509" status="PASS" endtime="20170419 01:00:57.765"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:00:57.766">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:00:57.765" status="PASS" endtime="20170419 01:00:57.766"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:00:57.766">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 01:00:57.766">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 01:00:57.766">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 01:00:57.766" status="PASS" endtime="20170419 01:00:57.767"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:57.767">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 01:00:57.508" status="PASS" endtime="20170419 01:00:57.767"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:00:57.767">${host_state} = Off</msg>
<status starttime="20170419 01:00:57.508" status="PASS" endtime="20170419 01:00:57.767"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:00:57.768">Running != Off</msg>
<status starttime="20170419 01:00:57.767" status="FAIL" endtime="20170419 01:00:57.768"></status>
</kw>
<status starttime="20170419 01:00:57.508" status="FAIL" endtime="20170419 01:00:57.768"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:07.772">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:01:07.772" status="PASS" endtime="20170419 01:01:07.772"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:07.773">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:01:07.773" status="PASS" endtime="20170419 01:01:07.773"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:07.774">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:01:07.773" status="PASS" endtime="20170419 01:01:07.774"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:07.774">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:01:07.774" status="PASS" endtime="20170419 01:01:07.774"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:07.974">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:01:07.775" status="PASS" endtime="20170419 01:01:07.974"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:07.974">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:01:07.974">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:07.775" status="PASS" endtime="20170419 01:01:07.974"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:07.975">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:07.975" status="PASS" endtime="20170419 01:01:07.975"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:07.976">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:07.975" status="PASS" endtime="20170419 01:01:07.976"></status>
</kw>
<status starttime="20170419 01:01:07.771" status="PASS" endtime="20170419 01:01:07.976"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:07.976">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 01:01:07.976" status="PASS" endtime="20170419 01:01:07.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:07.979">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:01:07.978" status="PASS" endtime="20170419 01:01:07.979"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:07.980">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:01:07.980" status="PASS" endtime="20170419 01:01:07.980"></status>
</kw>
<status starttime="20170419 01:01:07.979" status="PASS" endtime="20170419 01:01:07.980"></status>
</kw>
<status starttime="20170419 01:01:07.977" status="PASS" endtime="20170419 01:01:07.980"></status>
</kw>
<status starttime="20170419 01:01:07.977" status="PASS" endtime="20170419 01:01:07.980"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:08.056">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:01:08.057">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:07.980" status="PASS" endtime="20170419 01:01:08.057"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:08.058">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:01:08.058" status="PASS" endtime="20170419 01:01:08.058"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:08.059">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:01:08.059" status="PASS" endtime="20170419 01:01:08.059"></status>
</kw>
<status starttime="20170419 01:01:08.058" status="PASS" endtime="20170419 01:01:08.059"></status>
</kw>
<status starttime="20170419 01:01:08.057" status="PASS" endtime="20170419 01:01:08.060"></status>
</kw>
<status starttime="20170419 01:01:08.057" status="PASS" endtime="20170419 01:01:08.060"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:08.060">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:07.770" status="PASS" endtime="20170419 01:01:08.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:08.060">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:08.060" status="PASS" endtime="20170419 01:01:08.060"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:08.061">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 01:01:08.061">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 01:01:08.061">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 01:01:08.061" status="PASS" endtime="20170419 01:01:08.061"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:08.061">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 01:01:07.769" status="PASS" endtime="20170419 01:01:08.062"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:08.062">${host_state} = Off</msg>
<status starttime="20170419 01:01:07.769" status="PASS" endtime="20170419 01:01:08.062"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:01:08.063">Running != Off</msg>
<status starttime="20170419 01:01:08.062" status="FAIL" endtime="20170419 01:01:08.063"></status>
</kw>
<status starttime="20170419 01:01:07.768" status="FAIL" endtime="20170419 01:01:08.063"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:18.067">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:01:18.066" status="PASS" endtime="20170419 01:01:18.067"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:18.068">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:01:18.067" status="PASS" endtime="20170419 01:01:18.068"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:18.068">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:01:18.068" status="PASS" endtime="20170419 01:01:18.068"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:18.069">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:01:18.069" status="PASS" endtime="20170419 01:01:18.069"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:18.248">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:01:18.070" status="PASS" endtime="20170419 01:01:18.248"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:18.248">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:01:18.248">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:18.069" status="PASS" endtime="20170419 01:01:18.248"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:18.249">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:18.248" status="PASS" endtime="20170419 01:01:18.249"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:18.249">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:18.249" status="PASS" endtime="20170419 01:01:18.249"></status>
</kw>
<status starttime="20170419 01:01:18.066" status="PASS" endtime="20170419 01:01:18.250"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:18.250">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 01:01:18.250" status="PASS" endtime="20170419 01:01:18.250"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:18.252">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:01:18.251" status="PASS" endtime="20170419 01:01:18.252"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:18.253">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:01:18.253" status="PASS" endtime="20170419 01:01:18.253"></status>
</kw>
<status starttime="20170419 01:01:18.252" status="PASS" endtime="20170419 01:01:18.253"></status>
</kw>
<status starttime="20170419 01:01:18.251" status="PASS" endtime="20170419 01:01:18.253"></status>
</kw>
<status starttime="20170419 01:01:18.250" status="PASS" endtime="20170419 01:01:18.254"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:18.316">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:01:18.316">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:18.254" status="PASS" endtime="20170419 01:01:18.316"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:18.319">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:01:18.318" status="PASS" endtime="20170419 01:01:18.319"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:18.320">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:01:18.320" status="PASS" endtime="20170419 01:01:18.320"></status>
</kw>
<status starttime="20170419 01:01:18.319" status="PASS" endtime="20170419 01:01:18.320"></status>
</kw>
<status starttime="20170419 01:01:18.317" status="PASS" endtime="20170419 01:01:18.320"></status>
</kw>
<status starttime="20170419 01:01:18.317" status="PASS" endtime="20170419 01:01:18.321"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:18.321">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:18.065" status="PASS" endtime="20170419 01:01:18.321"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:18.321">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:18.321" status="PASS" endtime="20170419 01:01:18.322"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:18.322">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 01:01:18.322">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 01:01:18.322">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 01:01:18.322" status="PASS" endtime="20170419 01:01:18.322"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:18.323">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 01:01:18.065" status="PASS" endtime="20170419 01:01:18.323"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:18.323">${host_state} = Off</msg>
<status starttime="20170419 01:01:18.064" status="PASS" endtime="20170419 01:01:18.323"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:01:18.324">Running != Off</msg>
<status starttime="20170419 01:01:18.323" status="FAIL" endtime="20170419 01:01:18.324"></status>
</kw>
<status starttime="20170419 01:01:18.064" status="FAIL" endtime="20170419 01:01:18.324"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:28.328">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:01:28.327" status="PASS" endtime="20170419 01:01:28.328"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.329">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:01:28.328" status="PASS" endtime="20170419 01:01:28.329"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.329">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:01:28.329" status="PASS" endtime="20170419 01:01:28.329"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.330">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:01:28.329" status="PASS" endtime="20170419 01:01:28.330"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:28.506">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:01:28.331" status="PASS" endtime="20170419 01:01:28.506"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:28.506">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:01:28.506">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:28.330" status="PASS" endtime="20170419 01:01:28.506"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:28.507">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:28.506" status="PASS" endtime="20170419 01:01:28.507"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:28.508">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:28.507" status="PASS" endtime="20170419 01:01:28.508"></status>
</kw>
<status starttime="20170419 01:01:28.326" status="PASS" endtime="20170419 01:01:28.508"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.508">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 01:01:28.508" status="PASS" endtime="20170419 01:01:28.508"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.510">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:01:28.510" status="PASS" endtime="20170419 01:01:28.510"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:28.511">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:01:28.511" status="PASS" endtime="20170419 01:01:28.511"></status>
</kw>
<status starttime="20170419 01:01:28.511" status="PASS" endtime="20170419 01:01:28.511"></status>
</kw>
<status starttime="20170419 01:01:28.509" status="PASS" endtime="20170419 01:01:28.512"></status>
</kw>
<status starttime="20170419 01:01:28.509" status="PASS" endtime="20170419 01:01:28.512"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.575">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:01:28.575">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:28.512" status="PASS" endtime="20170419 01:01:28.575"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.579">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:01:28.576" status="PASS" endtime="20170419 01:01:28.579"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:28.579">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:01:28.579" status="PASS" endtime="20170419 01:01:28.580"></status>
</kw>
<status starttime="20170419 01:01:28.579" status="PASS" endtime="20170419 01:01:28.580"></status>
</kw>
<status starttime="20170419 01:01:28.576" status="PASS" endtime="20170419 01:01:28.580"></status>
</kw>
<status starttime="20170419 01:01:28.575" status="PASS" endtime="20170419 01:01:28.580"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:28.580">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:28.326" status="PASS" endtime="20170419 01:01:28.580"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:28.581">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:28.580" status="PASS" endtime="20170419 01:01:28.581"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.581">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 01:01:28.581">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 01:01:28.581">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 01:01:28.581" status="PASS" endtime="20170419 01:01:28.581"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:28.582">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 01:01:28.325" status="PASS" endtime="20170419 01:01:28.582"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:28.582">${host_state} = Off</msg>
<status starttime="20170419 01:01:28.325" status="PASS" endtime="20170419 01:01:28.582"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:01:28.583">Running != Off</msg>
<status starttime="20170419 01:01:28.582" status="FAIL" endtime="20170419 01:01:28.583"></status>
</kw>
<status starttime="20170419 01:01:28.324" status="FAIL" endtime="20170419 01:01:28.583"></status>
</kw>
<msg level="FAIL" timestamp="20170419 01:01:28.583">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Off</msg>
<status starttime="20170419 00:51:22.327" status="FAIL" endtime="20170419 01:01:28.583"></status>
</kw>
<status starttime="20170419 00:51:21.981" status="FAIL" endtime="20170419 01:01:28.584"></status>
</kw>
<status starttime="20170419 00:51:20.461" status="FAIL" endtime="20170419 01:01:28.584"></status>
</kw>
<status starttime="20170419 00:51:20.460" status="FAIL" endtime="20170419 01:01:28.584"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:28.588">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:01:28.587" status="PASS" endtime="20170419 01:01:28.588"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.588">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:01:28.588" status="PASS" endtime="20170419 01:01:28.588"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.589">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:01:28.589" status="PASS" endtime="20170419 01:01:28.589"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.590">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:01:28.589" status="PASS" endtime="20170419 01:01:28.590"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:28.800">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:01:28.590" status="PASS" endtime="20170419 01:01:28.800"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:28.800">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:01:28.800">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:28.590" status="PASS" endtime="20170419 01:01:28.800"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:28.801">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:28.801" status="PASS" endtime="20170419 01:01:28.801"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:28.802">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:28.801" status="PASS" endtime="20170419 01:01:28.802"></status>
</kw>
<status starttime="20170419 01:01:28.587" status="PASS" endtime="20170419 01:01:28.802"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.802">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 01:01:28.802" status="PASS" endtime="20170419 01:01:28.802"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.805">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:01:28.804" status="PASS" endtime="20170419 01:01:28.805"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:28.806">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 01:01:28.806" status="PASS" endtime="20170419 01:01:28.806"></status>
</kw>
<status starttime="20170419 01:01:28.805" status="PASS" endtime="20170419 01:01:28.806"></status>
</kw>
<status starttime="20170419 01:01:28.804" status="PASS" endtime="20170419 01:01:28.806"></status>
</kw>
<status starttime="20170419 01:01:28.803" status="PASS" endtime="20170419 01:01:28.806"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.869">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:01:28.869">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:28.806" status="PASS" endtime="20170419 01:01:28.869"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.871">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:01:28.870" status="PASS" endtime="20170419 01:01:28.871"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:28.872">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 01:01:28.871" status="PASS" endtime="20170419 01:01:28.872"></status>
</kw>
<status starttime="20170419 01:01:28.871" status="PASS" endtime="20170419 01:01:28.872"></status>
</kw>
<status starttime="20170419 01:01:28.870" status="PASS" endtime="20170419 01:01:28.872"></status>
</kw>
<status starttime="20170419 01:01:28.869" status="PASS" endtime="20170419 01:01:28.872"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:28.872">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:28.586" status="PASS" endtime="20170419 01:01:28.872"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:28.873">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:28.873" status="PASS" endtime="20170419 01:01:28.873"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.874">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 01:01:28.874">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 01:01:28.874">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170419 01:01:28.873" status="PASS" endtime="20170419 01:01:28.874"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:28.874">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 01:01:28.585" status="PASS" endtime="20170419 01:01:28.874"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:28.874">${host_state} = Off</msg>
<status starttime="20170419 01:01:28.585" status="PASS" endtime="20170419 01:01:28.874"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:01:28.875">Off != Quiesced</msg>
<status starttime="20170419 01:01:28.875" status="FAIL" endtime="20170419 01:01:28.876"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:28.876">${status} = False</msg>
<status starttime="20170419 01:01:28.875" status="PASS" endtime="20170419 01:01:28.876"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:28.876">${status} = False</msg>
<status starttime="20170419 01:01:28.585" status="PASS" endtime="20170419 01:01:28.876"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:28.878">Length is 12</msg>
<status starttime="20170419 01:01:28.877" status="PASS" endtime="20170419 01:01:28.878"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:28.885">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 01:01:31.888">${RC} = 0</msg>
<msg level="INFO" timestamp="20170419 01:01:31.888">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.54 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.666 ms
64 bytes from 9.41.166.169...</msg>
<status starttime="20170419 01:01:28.878" status="PASS" endtime="20170419 01:01:31.889"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:31.891">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.54 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.666 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.594 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.597 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.594/0.849/1.541/0.401 ms</msg>
<status starttime="20170419 01:01:31.891" status="PASS" endtime="20170419 01:01:31.891"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170419 01:01:31.892" status="PASS" endtime="20170419 01:01:31.892"></status>
</kw>
<status starttime="20170419 01:01:28.877" status="PASS" endtime="20170419 01:01:31.893"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:01:32.048">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 01:01:32.047" status="FAIL" endtime="20170419 01:01:32.048"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:32.048">${has_host} = False</msg>
<status starttime="20170419 01:01:32.047" status="PASS" endtime="20170419 01:01:32.048"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 01:01:32.049" status="PASS" endtime="20170419 01:01:32.049"></status>
</kw>
<status starttime="20170419 01:01:32.048" status="PASS" endtime="20170419 01:01:32.049"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:32.051">${port_num} = 22</msg>
<status starttime="20170419 01:01:32.051" status="PASS" endtime="20170419 01:01:32.051"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:32.051">${SSH_PORT} = 22</msg>
<status starttime="20170419 01:01:32.051" status="PASS" endtime="20170419 01:01:32.051"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:32.052">${https_num} = 443</msg>
<status starttime="20170419 01:01:32.052" status="PASS" endtime="20170419 01:01:32.052"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:32.053">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170419 01:01:32.052" status="PASS" endtime="20170419 01:01:32.053"></status>
</kw>
<status starttime="20170419 01:01:32.050" status="PASS" endtime="20170419 01:01:32.053"></status>
</kw>
<status starttime="20170419 01:01:32.049" status="PASS" endtime="20170419 01:01:32.053"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:01:32.054">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 01:01:32.054" status="FAIL" endtime="20170419 01:01:32.054"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:32.054">${has_port} = False</msg>
<status starttime="20170419 01:01:32.053" status="PASS" endtime="20170419 01:01:32.054"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 01:01:32.055" status="PASS" endtime="20170419 01:01:32.056"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 01:01:32.056" status="PASS" endtime="20170419 01:01:32.057"></status>
</kw>
<status starttime="20170419 01:01:32.055" status="PASS" endtime="20170419 01:01:32.057"></status>
</kw>
<status starttime="20170419 01:01:32.054" status="PASS" endtime="20170419 01:01:32.057"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:32.057">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 01:01:33.703">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 01:01:32.057" status="PASS" endtime="20170419 01:01:33.703"></status>
</kw>
<status starttime="20170419 01:01:32.046" status="PASS" endtime="20170419 01:01:33.703"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:33.719">${cur_time} = 2017-04-19 01:01:33:719098</msg>
<status starttime="20170419 01:01:33.719" status="PASS" endtime="20170419 01:01:33.719"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:33.720">${cur_time} = 20170419010133719098</msg>
<status starttime="20170419 01:01:33.720" status="PASS" endtime="20170419 01:01:33.720"></status>
</kw>
<status starttime="20170419 01:01:33.718" status="PASS" endtime="20170419 01:01:33.720"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:33.724">${FFDC_TIME} = 20170419010133719098</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:33.732">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170419 01:01:33.732" status="PASS" endtime="20170419 01:01:33.732"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:33.733">${suite_name} = 20170419010133719098_TestsTestBasicPoweron</msg>
<status starttime="20170419 01:01:33.732" status="PASS" endtime="20170419 01:01:33.733"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:33.734">${test_name} = PowerOnTest</msg>
<status starttime="20170419 01:01:33.733" status="PASS" endtime="20170419 01:01:33.734"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:33.734">${test_name} = 20170419010133719098_PowerOnTest</msg>
<status starttime="20170419 01:01:33.734" status="PASS" endtime="20170419 01:01:33.734"></status>
</kw>
<status starttime="20170419 01:01:33.731" status="PASS" endtime="20170419 01:01:33.734"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:33.754">${LOG_PREFIX} = /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.755">Created directory '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.755" status="PASS" endtime="20170419 01:01:33.755"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:33.759">${FFDC_FILE_PATH} = /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.761">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.760" status="PASS" endtime="20170419 01:01:33.761"></status>
</kw>
<status starttime="20170419 01:01:33.760" status="PASS" endtime="20170419 01:01:33.761"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.762">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.762" status="PASS" endtime="20170419 01:01:33.762"></status>
</kw>
<status starttime="20170419 01:01:33.761" status="PASS" endtime="20170419 01:01:33.762"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.763">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.763" status="PASS" endtime="20170419 01:01:33.763"></status>
</kw>
<status starttime="20170419 01:01:33.762" status="PASS" endtime="20170419 01:01:33.763"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.765">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.764" status="PASS" endtime="20170419 01:01:33.765"></status>
</kw>
<status starttime="20170419 01:01:33.764" status="PASS" endtime="20170419 01:01:33.765"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.766">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.766" status="PASS" endtime="20170419 01:01:33.766"></status>
</kw>
<status starttime="20170419 01:01:33.765" status="PASS" endtime="20170419 01:01:33.766"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.767">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.767" status="PASS" endtime="20170419 01:01:33.768"></status>
</kw>
<status starttime="20170419 01:01:33.766" status="PASS" endtime="20170419 01:01:33.768"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.769">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.768" status="PASS" endtime="20170419 01:01:33.769"></status>
</kw>
<status starttime="20170419 01:01:33.768" status="PASS" endtime="20170419 01:01:33.769"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.770">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.770" status="PASS" endtime="20170419 01:01:33.770"></status>
</kw>
<status starttime="20170419 01:01:33.769" status="PASS" endtime="20170419 01:01:33.770"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.771">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.771" status="PASS" endtime="20170419 01:01:33.772"></status>
</kw>
<status starttime="20170419 01:01:33.771" status="PASS" endtime="20170419 01:01:33.772"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.773">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.773" status="PASS" endtime="20170419 01:01:33.773"></status>
</kw>
<status starttime="20170419 01:01:33.772" status="PASS" endtime="20170419 01:01:33.773"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.774">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.774" status="PASS" endtime="20170419 01:01:33.774"></status>
</kw>
<status starttime="20170419 01:01:33.773" status="PASS" endtime="20170419 01:01:33.775"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.776">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.775" status="PASS" endtime="20170419 01:01:33.776"></status>
</kw>
<status starttime="20170419 01:01:33.775" status="PASS" endtime="20170419 01:01:33.776"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.777">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.777" status="PASS" endtime="20170419 01:01:33.777"></status>
</kw>
<status starttime="20170419 01:01:33.776" status="PASS" endtime="20170419 01:01:33.777"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:33.778">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170419 01:01:33.855">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 01:01:33.855">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170419 01:01:33.855">${stderr} = </msg>
<status starttime="20170419 01:01:33.778" status="PASS" endtime="20170419 01:01:33.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:33.855">Length is 0</msg>
<status starttime="20170419 01:01:33.855" status="PASS" endtime="20170419 01:01:33.856"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:33.856">Length is 11</msg>
<status starttime="20170419 01:01:33.856" status="PASS" endtime="20170419 01:01:33.856"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:33.856">${model_name} = Witherspoon</msg>
<status starttime="20170419 01:01:33.777" status="PASS" endtime="20170419 01:01:33.856"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.857">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.857" status="PASS" endtime="20170419 01:01:33.857"></status>
</kw>
<status starttime="20170419 01:01:33.856" status="PASS" endtime="20170419 01:01:33.858"></status>
</kw>
<status starttime="20170419 01:01:33.772" status="PASS" endtime="20170419 01:01:33.858"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.859">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.859" status="PASS" endtime="20170419 01:01:33.859"></status>
</kw>
<status starttime="20170419 01:01:33.858" status="PASS" endtime="20170419 01:01:33.859"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:33.860">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170419 01:01:33.860" status="PASS" endtime="20170419 01:01:33.860"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.861">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.861" status="PASS" endtime="20170419 01:01:33.861"></status>
</kw>
<status starttime="20170419 01:01:33.860" status="PASS" endtime="20170419 01:01:33.861"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.863">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.862" status="PASS" endtime="20170419 01:01:33.863"></status>
</kw>
<status starttime="20170419 01:01:33.862" status="PASS" endtime="20170419 01:01:33.863"></status>
</kw>
<status starttime="20170419 01:01:33.860" status="PASS" endtime="20170419 01:01:33.863"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.864">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.864" status="PASS" endtime="20170419 01:01:33.864"></status>
</kw>
<status starttime="20170419 01:01:33.863" status="PASS" endtime="20170419 01:01:33.864"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.865">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.865" status="PASS" endtime="20170419 01:01:33.865"></status>
</kw>
<status starttime="20170419 01:01:33.864" status="PASS" endtime="20170419 01:01:33.865"></status>
</kw>
<status starttime="20170419 01:01:33.863" status="PASS" endtime="20170419 01:01:33.866"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.867">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.866" status="PASS" endtime="20170419 01:01:33.867"></status>
</kw>
<status starttime="20170419 01:01:33.866" status="PASS" endtime="20170419 01:01:33.867"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.868">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.868" status="PASS" endtime="20170419 01:01:33.868"></status>
</kw>
<status starttime="20170419 01:01:33.867" status="PASS" endtime="20170419 01:01:33.868"></status>
</kw>
<status starttime="20170419 01:01:33.866" status="PASS" endtime="20170419 01:01:33.868"></status>
</kw>
<status starttime="20170419 01:01:33.860" status="PASS" endtime="20170419 01:01:33.868"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:33.869">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:33.869" status="PASS" endtime="20170419 01:01:33.869"></status>
</kw>
<status starttime="20170419 01:01:33.868" status="PASS" endtime="20170419 01:01:33.869"></status>
</kw>
<status starttime="20170419 01:01:33.759" status="PASS" endtime="20170419 01:01:33.870"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:33.871">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170419 01:01:33.870" status="PASS" endtime="20170419 01:01:33.871"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:33.872">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('SEL Log', 'Collect eSEL Log') | ('F...</msg>
<status starttime="20170419 01:01:33.872" status="PASS" endtime="20170419 01:01:33.872"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:33.875">Returning from the enclosing user keyword.</msg>
<status starttime="20170419 01:01:33.874" status="PASS" endtime="20170419 01:01:33.875"></status>
</kw>
<status starttime="20170419 01:01:33.874" status="PASS" endtime="20170419 01:01:33.875"></status>
</kw>
<status starttime="20170419 01:01:33.873" status="PASS" endtime="20170419 01:01:33.875"></status>
</kw>
<status starttime="20170419 01:01:33.872" status="PASS" endtime="20170419 01:01:33.875"></status>
</kw>
<status starttime="20170419 01:01:33.872" status="PASS" endtime="20170419 01:01:33.875"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:01:33.878">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 01:01:33.877" status="FAIL" endtime="20170419 01:01:33.878"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:33.878">${has_host} = False</msg>
<status starttime="20170419 01:01:33.877" status="PASS" endtime="20170419 01:01:33.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 01:01:33.879" status="PASS" endtime="20170419 01:01:33.879"></status>
</kw>
<status starttime="20170419 01:01:33.878" status="PASS" endtime="20170419 01:01:33.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:33.881">${port_num} = 22</msg>
<status starttime="20170419 01:01:33.880" status="PASS" endtime="20170419 01:01:33.881"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:33.881">${SSH_PORT} = 22</msg>
<status starttime="20170419 01:01:33.881" status="PASS" endtime="20170419 01:01:33.881"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:33.882">${https_num} = 443</msg>
<status starttime="20170419 01:01:33.882" status="PASS" endtime="20170419 01:01:33.882"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:33.883">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170419 01:01:33.882" status="PASS" endtime="20170419 01:01:33.883"></status>
</kw>
<status starttime="20170419 01:01:33.880" status="PASS" endtime="20170419 01:01:33.883"></status>
</kw>
<status starttime="20170419 01:01:33.879" status="PASS" endtime="20170419 01:01:33.883"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:01:33.884">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 01:01:33.884" status="FAIL" endtime="20170419 01:01:33.884"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:33.884">${has_port} = False</msg>
<status starttime="20170419 01:01:33.883" status="PASS" endtime="20170419 01:01:33.884"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 01:01:33.886" status="PASS" endtime="20170419 01:01:33.886"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 01:01:33.886" status="PASS" endtime="20170419 01:01:33.887"></status>
</kw>
<status starttime="20170419 01:01:33.885" status="PASS" endtime="20170419 01:01:33.887"></status>
</kw>
<status starttime="20170419 01:01:33.884" status="PASS" endtime="20170419 01:01:33.887"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:33.887">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 01:01:35.566">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 01:01:33.887" status="PASS" endtime="20170419 01:01:35.566"></status>
</kw>
<status starttime="20170419 01:01:33.876" status="PASS" endtime="20170419 01:01:35.567"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:35.567">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170419 01:01:35.614">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170419 01:01:35.614">${core_files} = </msg>
<status starttime="20170419 01:01:35.567" status="PASS" endtime="20170419 01:01:35.614"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:35.615">@{core_list} = [ ]</msg>
<status starttime="20170419 01:01:35.614" status="PASS" endtime="20170419 01:01:35.615"></status>
</kw>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170419 01:01:35.615" status="PASS" endtime="20170419 01:01:35.621"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170419 01:01:35.623" status="PASS" endtime="20170419 01:01:36.257"></status>
</kw>
<status starttime="20170419 01:01:35.622" status="PASS" endtime="20170419 01:01:36.258"></status>
</kw>
<status starttime="20170419 01:01:35.621" status="PASS" endtime="20170419 01:01:36.258"></status>
</kw>
<status starttime="20170419 01:01:35.615" status="PASS" endtime="20170419 01:01:36.258"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status starttime="20170419 01:01:36.258" status="PASS" endtime="20170419 01:01:36.258"></status>
</kw>
<status starttime="20170419 01:01:33.876" status="PASS" endtime="20170419 01:01:36.258"></status>
</kw>
<status starttime="20170419 01:01:33.876" status="PASS" endtime="20170419 01:01:36.258"></status>
</kw>
<status starttime="20170419 01:01:33.875" status="PASS" endtime="20170419 01:01:36.258"></status>
</kw>
<status starttime="20170419 01:01:33.875" status="PASS" endtime="20170419 01:01:36.258"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:01:36.262">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 01:01:36.262" status="FAIL" endtime="20170419 01:01:36.262"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:36.263">${has_host} = False</msg>
<status starttime="20170419 01:01:36.261" status="PASS" endtime="20170419 01:01:36.263"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 01:01:36.264" status="PASS" endtime="20170419 01:01:36.264"></status>
</kw>
<status starttime="20170419 01:01:36.263" status="PASS" endtime="20170419 01:01:36.264"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:36.267">${port_num} = 22</msg>
<status starttime="20170419 01:01:36.266" status="PASS" endtime="20170419 01:01:36.267"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:36.267">${SSH_PORT} = 22</msg>
<status starttime="20170419 01:01:36.267" status="PASS" endtime="20170419 01:01:36.267"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:36.268">${https_num} = 443</msg>
<status starttime="20170419 01:01:36.268" status="PASS" endtime="20170419 01:01:36.268"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:36.269">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170419 01:01:36.268" status="PASS" endtime="20170419 01:01:36.269"></status>
</kw>
<status starttime="20170419 01:01:36.265" status="PASS" endtime="20170419 01:01:36.269"></status>
</kw>
<status starttime="20170419 01:01:36.265" status="PASS" endtime="20170419 01:01:36.270"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:01:36.271">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 01:01:36.270" status="FAIL" endtime="20170419 01:01:36.271"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:36.271">${has_port} = False</msg>
<status starttime="20170419 01:01:36.270" status="PASS" endtime="20170419 01:01:36.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 01:01:36.273" status="PASS" endtime="20170419 01:01:36.274"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 01:01:36.274" status="PASS" endtime="20170419 01:01:36.274"></status>
</kw>
<status starttime="20170419 01:01:36.273" status="PASS" endtime="20170419 01:01:36.275"></status>
</kw>
<status starttime="20170419 01:01:36.272" status="PASS" endtime="20170419 01:01:36.275"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:36.275">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 01:01:37.923">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 01:01:36.275" status="PASS" endtime="20170419 01:01:37.923"></status>
</kw>
<status starttime="20170419 01:01:36.260" status="PASS" endtime="20170419 01:01:37.923"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:37.924">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170419 01:01:37.924" status="PASS" endtime="20170419 01:01:37.924"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>echo ${OPENBMC_HOST} | sed 's/\(\.\)/\\\1/g'</arg>
</arguments>
<assign>
<var>${OPENBMC_HOST_REGEX}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:37.930">Running command 'echo 9.41.166.169 | sed 's/(.)/\1/g' 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 01:01:37.934">${OPENBMC_HOST_REGEX} = sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS</msg>
<status starttime="20170419 01:01:37.925" status="PASS" endtime="20170419 01:01:37.934"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:37.937">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') ]</msg>
<status starttime="20170419 01:01:37.936" status="PASS" endtime="20170419 01:01:37.937"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:37.939">${logpath} = /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_dmesg.txt</msg>
<status starttime="20170419 01:01:37.938" status="PASS" endtime="20170419 01:01:37.939"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170419 01:01:37.940" status="PASS" endtime="20170419 01:01:37.941"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:37.941">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170419 01:01:37.999">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 01:01:37.999">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-6786cab8778ba96d84d89c7aec34374b5f4f1968 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Wed Apr 19 00:02:04 UTC 2017
CPU: ARMv6-compati...</msg>
<msg level="INFO" timestamp="20170419 01:01:37.999">${stderr} = </msg>
<status starttime="20170419 01:01:37.941" status="PASS" endtime="20170419 01:01:38.000"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:38.006">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_dmesg.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:38.005" status="PASS" endtime="20170419 01:01:38.006"></status>
</kw>
<status starttime="20170419 01:01:38.005" status="PASS" endtime="20170419 01:01:38.006"></status>
</kw>
<status starttime="20170419 01:01:38.000" status="PASS" endtime="20170419 01:01:38.006"></status>
</kw>
<status starttime="20170419 01:01:37.939" status="PASS" endtime="20170419 01:01:38.006"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:38.010">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_dmesg.txt 2&gt;&amp;1'.</msg>
<status starttime="20170419 01:01:38.006" status="PASS" endtime="20170419 01:01:38.013"></status>
</kw>
<status starttime="20170419 01:01:37.938" status="PASS" endtime="20170419 01:01:38.013"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:38.017">${logpath} = /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_journalctl.txt</msg>
<status starttime="20170419 01:01:38.016" status="PASS" endtime="20170419 01:01:38.017"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170419 01:01:38.019" status="PASS" endtime="20170419 01:01:38.020"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:38.020">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170419 01:01:38.980">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 01:01:38.980">${stdout} = -- Logs begin at Wed 2017-04-19 00:41:20 UTC, end at Wed 2017-04-19 01:01:37 UTC. --
Apr 19 00:41:20 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 19 00:41:20 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170419 01:01:38.981">${stderr} = </msg>
<status starttime="20170419 01:01:38.020" status="PASS" endtime="20170419 01:01:38.981"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:38.989">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_journalctl.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:38.988" status="PASS" endtime="20170419 01:01:38.989"></status>
</kw>
<status starttime="20170419 01:01:38.986" status="PASS" endtime="20170419 01:01:38.989"></status>
</kw>
<status starttime="20170419 01:01:38.981" status="PASS" endtime="20170419 01:01:38.989"></status>
</kw>
<status starttime="20170419 01:01:38.017" status="PASS" endtime="20170419 01:01:38.989"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:38.998">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_journalctl.txt 2&gt;&amp;1'.</msg>
<status starttime="20170419 01:01:38.989" status="PASS" endtime="20170419 01:01:39.002"></status>
</kw>
<status starttime="20170419 01:01:38.014" status="PASS" endtime="20170419 01:01:39.002"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:39.006">${logpath} = /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_proc_list.txt</msg>
<status starttime="20170419 01:01:39.005" status="PASS" endtime="20170419 01:01:39.006"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170419 01:01:39.008" status="PASS" endtime="20170419 01:01:39.008"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:39.009">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170419 01:01:39.269">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 01:01:39.269">${stdout} = Mem: 144432K used, 288500K free, 14348K shrd, 10300K buff, 48132K cached
CPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.16 0.20 0.32 1/125 919
  PID  PPID USER   ...</msg>
<msg level="INFO" timestamp="20170419 01:01:39.269">${stderr} = </msg>
<status starttime="20170419 01:01:39.009" status="PASS" endtime="20170419 01:01:39.269"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:39.275">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_proc_list.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:39.275" status="PASS" endtime="20170419 01:01:39.275"></status>
</kw>
<status starttime="20170419 01:01:39.274" status="PASS" endtime="20170419 01:01:39.275"></status>
</kw>
<status starttime="20170419 01:01:39.269" status="PASS" endtime="20170419 01:01:39.275"></status>
</kw>
<status starttime="20170419 01:01:39.006" status="PASS" endtime="20170419 01:01:39.276"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:39.282">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_proc_list.txt 2&gt;&amp;1'.</msg>
<status starttime="20170419 01:01:39.276" status="PASS" endtime="20170419 01:01:39.286"></status>
</kw>
<status starttime="20170419 01:01:39.003" status="PASS" endtime="20170419 01:01:39.286"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:39.290">${logpath} = /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_procinfo.txt</msg>
<status starttime="20170419 01:01:39.289" status="PASS" endtime="20170419 01:01:39.290"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170419 01:01:39.292" status="PASS" endtime="20170419 01:01:39.292"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:39.293">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170419 01:01:39.353">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 01:01:39.353">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170419 01:01:39.353">${stderr} = </msg>
<status starttime="20170419 01:01:39.293" status="PASS" endtime="20170419 01:01:39.353"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:39.361">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_procinfo.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:39.360" status="PASS" endtime="20170419 01:01:39.361"></status>
</kw>
<status starttime="20170419 01:01:39.359" status="PASS" endtime="20170419 01:01:39.361"></status>
</kw>
<status starttime="20170419 01:01:39.354" status="PASS" endtime="20170419 01:01:39.361"></status>
</kw>
<status starttime="20170419 01:01:39.290" status="PASS" endtime="20170419 01:01:39.361"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:39.366">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_procinfo.txt 2&gt;&amp;1'.</msg>
<status starttime="20170419 01:01:39.361" status="PASS" endtime="20170419 01:01:39.368"></status>
</kw>
<status starttime="20170419 01:01:39.287" status="PASS" endtime="20170419 01:01:39.369"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:39.373">${logpath} = /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_meminfo.txt</msg>
<status starttime="20170419 01:01:39.371" status="PASS" endtime="20170419 01:01:39.373"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170419 01:01:39.375" status="PASS" endtime="20170419 01:01:39.376"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:39.376">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170419 01:01:39.436">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 01:01:39.437">${stdout} = MemTotal:         432932 kB
MemFree:          288500 kB
MemAvailable:     328180 kB
Buffers:           10300 kB
Cached:            48132 kB
SwapCached:            0 kB
Active:            93508 kB
Inac...</msg>
<msg level="INFO" timestamp="20170419 01:01:39.437">${stderr} = </msg>
<status starttime="20170419 01:01:39.376" status="PASS" endtime="20170419 01:01:39.437"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:39.443">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_meminfo.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:39.442" status="PASS" endtime="20170419 01:01:39.446"></status>
</kw>
<status starttime="20170419 01:01:39.442" status="PASS" endtime="20170419 01:01:39.446"></status>
</kw>
<status starttime="20170419 01:01:39.437" status="PASS" endtime="20170419 01:01:39.446"></status>
</kw>
<status starttime="20170419 01:01:39.374" status="PASS" endtime="20170419 01:01:39.446"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:39.452">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_meminfo.txt 2&gt;&amp;1'.</msg>
<status starttime="20170419 01:01:39.446" status="PASS" endtime="20170419 01:01:39.455"></status>
</kw>
<status starttime="20170419 01:01:39.370" status="PASS" endtime="20170419 01:01:39.455"></status>
</kw>
<status starttime="20170419 01:01:37.937" status="PASS" endtime="20170419 01:01:39.455"></status>
</kw>
<status starttime="20170419 01:01:37.924" status="PASS" endtime="20170419 01:01:39.456"></status>
</kw>
<status starttime="20170419 01:01:37.924" status="PASS" endtime="20170419 01:01:39.456"></status>
</kw>
<status starttime="20170419 01:01:37.924" status="PASS" endtime="20170419 01:01:39.456"></status>
</kw>
<status starttime="20170419 01:01:36.260" status="PASS" endtime="20170419 01:01:39.457"></status>
</kw>
<status starttime="20170419 01:01:36.260" status="PASS" endtime="20170419 01:01:39.457"></status>
</kw>
<status starttime="20170419 01:01:36.259" status="PASS" endtime="20170419 01:01:39.457"></status>
</kw>
<status starttime="20170419 01:01:36.258" status="PASS" endtime="20170419 01:01:39.457"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:01:39.464">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 01:01:39.463" status="FAIL" endtime="20170419 01:01:39.464"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:39.464">${has_host} = False</msg>
<status starttime="20170419 01:01:39.462" status="PASS" endtime="20170419 01:01:39.464"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 01:01:39.465" status="PASS" endtime="20170419 01:01:39.466"></status>
</kw>
<status starttime="20170419 01:01:39.465" status="PASS" endtime="20170419 01:01:39.466"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:39.468">${port_num} = 22</msg>
<status starttime="20170419 01:01:39.468" status="PASS" endtime="20170419 01:01:39.468"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:39.469">${SSH_PORT} = 22</msg>
<status starttime="20170419 01:01:39.469" status="PASS" endtime="20170419 01:01:39.469"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:39.470">${https_num} = 443</msg>
<status starttime="20170419 01:01:39.469" status="PASS" endtime="20170419 01:01:39.470"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:39.471">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170419 01:01:39.470" status="PASS" endtime="20170419 01:01:39.471"></status>
</kw>
<status starttime="20170419 01:01:39.467" status="PASS" endtime="20170419 01:01:39.471"></status>
</kw>
<status starttime="20170419 01:01:39.466" status="PASS" endtime="20170419 01:01:39.471"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:01:39.473">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 01:01:39.472" status="FAIL" endtime="20170419 01:01:39.473"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:39.473">${has_port} = False</msg>
<status starttime="20170419 01:01:39.472" status="PASS" endtime="20170419 01:01:39.473"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 01:01:39.475" status="PASS" endtime="20170419 01:01:39.475"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 01:01:39.476" status="PASS" endtime="20170419 01:01:39.477"></status>
</kw>
<status starttime="20170419 01:01:39.474" status="PASS" endtime="20170419 01:01:39.477"></status>
</kw>
<status starttime="20170419 01:01:39.473" status="PASS" endtime="20170419 01:01:39.477"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:39.477">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 01:01:41.124">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 01:01:39.477" status="PASS" endtime="20170419 01:01:41.124"></status>
</kw>
<status starttime="20170419 01:01:39.461" status="PASS" endtime="20170419 01:01:41.124"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.125">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170419 01:01:41.125" status="PASS" endtime="20170419 01:01:41.125"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.127">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', ...</msg>
<status starttime="20170419 01:01:41.126" status="PASS" endtime="20170419 01:01:41.127"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.128">${logpath} = /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_record_log.txt</msg>
<status starttime="20170419 01:01:41.127" status="PASS" endtime="20170419 01:01:41.128"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.130">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:01:41.130" status="PASS" endtime="20170419 01:01:41.131"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.132">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:01:41.131" status="PASS" endtime="20170419 01:01:41.132"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.133">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:01:41.132" status="PASS" endtime="20170419 01:01:41.133"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.134">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:01:41.133" status="PASS" endtime="20170419 01:01:41.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.310">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:01:41.135" status="PASS" endtime="20170419 01:01:41.310"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:41.310">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:01:41.310">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:41.134" status="PASS" endtime="20170419 01:01:41.310"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.311">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:41.310" status="PASS" endtime="20170419 01:01:41.311"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.311">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:41.311" status="PASS" endtime="20170419 01:01:41.311"></status>
</kw>
<status starttime="20170419 01:01:41.129" status="PASS" endtime="20170419 01:01:41.312"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.312">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170419 01:01:41.312" status="PASS" endtime="20170419 01:01:41.312"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 01:01:41.312" status="PASS" endtime="20170419 01:01:41.313"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.356">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:01:41.356">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 01:01:41.313" status="PASS" endtime="20170419 01:01:41.356"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 01:01:41.357" status="PASS" endtime="20170419 01:01:41.357"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:41.357">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 01:01:41.128" status="PASS" endtime="20170419 01:01:41.357"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.358">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170419 01:01:41.359">404 != 200</msg>
<status starttime="20170419 01:01:41.358" status="FAIL" endtime="20170419 01:01:41.359"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:41.359">${status} = False</msg>
<status starttime="20170419 01:01:41.358" status="PASS" endtime="20170419 01:01:41.359"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170419 01:01:41.360">Continuing for loop from the next iteration.</msg>
<status starttime="20170419 01:01:41.360" status="PASS" endtime="20170419 01:01:41.360"></status>
</kw>
<status starttime="20170419 01:01:41.359" status="PASS" endtime="20170419 01:01:41.360"></status>
</kw>
<status starttime="20170419 01:01:41.127" status="PASS" endtime="20170419 01:01:41.360"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.361">${logpath} = /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_elog.txt</msg>
<status starttime="20170419 01:01:41.360" status="PASS" endtime="20170419 01:01:41.361"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.362">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:01:41.362" status="PASS" endtime="20170419 01:01:41.363"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.363">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:01:41.363" status="PASS" endtime="20170419 01:01:41.363"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.364">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:01:41.364" status="PASS" endtime="20170419 01:01:41.364"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.365">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:01:41.364" status="PASS" endtime="20170419 01:01:41.365"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.539">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:01:41.365" status="PASS" endtime="20170419 01:01:41.539"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:41.539">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:01:41.539">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:41.365" status="PASS" endtime="20170419 01:01:41.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.540">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:41.540" status="PASS" endtime="20170419 01:01:41.540"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.541">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:41.540" status="PASS" endtime="20170419 01:01:41.541"></status>
</kw>
<status starttime="20170419 01:01:41.361" status="PASS" endtime="20170419 01:01:41.541"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.541">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170419 01:01:41.541" status="PASS" endtime="20170419 01:01:41.541"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 01:01:41.542" status="PASS" endtime="20170419 01:01:41.542"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.585">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:01:41.585">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 01:01:41.542" status="PASS" endtime="20170419 01:01:41.586"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 01:01:41.586" status="PASS" endtime="20170419 01:01:41.586"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:41.586">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 01:01:41.361" status="PASS" endtime="20170419 01:01:41.587"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.587">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170419 01:01:41.588">404 != 200</msg>
<status starttime="20170419 01:01:41.587" status="FAIL" endtime="20170419 01:01:41.588"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:41.588">${status} = False</msg>
<status starttime="20170419 01:01:41.587" status="PASS" endtime="20170419 01:01:41.588"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170419 01:01:41.589">Continuing for loop from the next iteration.</msg>
<status starttime="20170419 01:01:41.589" status="PASS" endtime="20170419 01:01:41.589"></status>
</kw>
<status starttime="20170419 01:01:41.588" status="PASS" endtime="20170419 01:01:41.589"></status>
</kw>
<status starttime="20170419 01:01:41.360" status="PASS" endtime="20170419 01:01:41.590"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.591">${logpath} = /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_inventory.txt</msg>
<status starttime="20170419 01:01:41.590" status="PASS" endtime="20170419 01:01:41.591"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.593">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:01:41.593" status="PASS" endtime="20170419 01:01:41.594"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.594">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:01:41.594" status="PASS" endtime="20170419 01:01:41.595"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.595">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:01:41.595" status="PASS" endtime="20170419 01:01:41.595"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.596">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:01:41.596" status="PASS" endtime="20170419 01:01:41.596"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.771">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:01:41.597" status="PASS" endtime="20170419 01:01:41.771"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:41.771">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:01:41.771">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:41.597" status="PASS" endtime="20170419 01:01:41.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.772">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:41.772" status="PASS" endtime="20170419 01:01:41.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:41.772" status="PASS" endtime="20170419 01:01:41.773"></status>
</kw>
<status starttime="20170419 01:01:41.592" status="PASS" endtime="20170419 01:01:41.773"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.774">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170419 01:01:41.773" status="PASS" endtime="20170419 01:01:41.774"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 01:01:41.774" status="PASS" endtime="20170419 01:01:41.774"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.935">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:01:41.936">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:41.775" status="PASS" endtime="20170419 01:01:41.936"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 01:01:41.936" status="PASS" endtime="20170419 01:01:41.936"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:41.937">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:41.591" status="PASS" endtime="20170419 01:01:41.937"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.938">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:41.937" status="PASS" endtime="20170419 01:01:41.938"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:41.939">${status} = True</msg>
<status starttime="20170419 01:01:41.937" status="PASS" endtime="20170419 01:01:41.939"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170419 01:01:41.939" status="PASS" endtime="20170419 01:01:41.939"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.940">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 01:01:41.940">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170419 01:01:41.941">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc":...</msg>
<status starttime="20170419 01:01:41.940" status="PASS" endtime="20170419 01:01:41.941"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:41.942">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_inventory.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:41.942" status="PASS" endtime="20170419 01:01:41.942"></status>
</kw>
<status starttime="20170419 01:01:41.941" status="PASS" endtime="20170419 01:01:41.943"></status>
</kw>
<status starttime="20170419 01:01:41.590" status="PASS" endtime="20170419 01:01:41.943"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.943">${logpath} = /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_led.txt</msg>
<status starttime="20170419 01:01:41.943" status="PASS" endtime="20170419 01:01:41.944"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:41.945">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:01:41.945" status="PASS" endtime="20170419 01:01:41.946"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.946">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:01:41.946" status="PASS" endtime="20170419 01:01:41.946"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.947">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:01:41.946" status="PASS" endtime="20170419 01:01:41.947"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:41.947">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:01:41.947" status="PASS" endtime="20170419 01:01:41.948"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.156">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:01:41.948" status="PASS" endtime="20170419 01:01:42.156"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:42.156">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:01:42.156">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:41.948" status="PASS" endtime="20170419 01:01:42.156"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.157">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:42.157" status="PASS" endtime="20170419 01:01:42.157"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.158">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:42.157" status="PASS" endtime="20170419 01:01:42.158"></status>
</kw>
<status starttime="20170419 01:01:41.944" status="PASS" endtime="20170419 01:01:42.158"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.158">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170419 01:01:42.158" status="PASS" endtime="20170419 01:01:42.158"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 01:01:42.159" status="PASS" endtime="20170419 01:01:42.159"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.241">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:01:42.241">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:42.159" status="PASS" endtime="20170419 01:01:42.241"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 01:01:42.242" status="PASS" endtime="20170419 01:01:42.242"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:42.242">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:41.944" status="PASS" endtime="20170419 01:01:42.242"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.243">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:42.243" status="PASS" endtime="20170419 01:01:42.244"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:42.244">${status} = True</msg>
<status starttime="20170419 01:01:42.242" status="PASS" endtime="20170419 01:01:42.244"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170419 01:01:42.244" status="PASS" endtime="20170419 01:01:42.245"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.245">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 01:01:42.245">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170419 01:01:42.246">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status starttime="20170419 01:01:42.245" status="PASS" endtime="20170419 01:01:42.246"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:42.247">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_led.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:42.247" status="PASS" endtime="20170419 01:01:42.247"></status>
</kw>
<status starttime="20170419 01:01:42.246" status="PASS" endtime="20170419 01:01:42.248"></status>
</kw>
<status starttime="20170419 01:01:41.943" status="PASS" endtime="20170419 01:01:42.248"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.248">${logpath} = /tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_sensor_list.txt</msg>
<status starttime="20170419 01:01:42.248" status="PASS" endtime="20170419 01:01:42.248"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.250">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:01:42.250" status="PASS" endtime="20170419 01:01:42.250"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.251">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:01:42.251" status="PASS" endtime="20170419 01:01:42.251"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.252">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:01:42.251" status="PASS" endtime="20170419 01:01:42.252"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.252">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:01:42.252" status="PASS" endtime="20170419 01:01:42.252"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.433">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:01:42.253" status="PASS" endtime="20170419 01:01:42.433"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:42.433">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:01:42.433">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:42.253" status="PASS" endtime="20170419 01:01:42.433"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.434">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:42.434" status="PASS" endtime="20170419 01:01:42.434"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.435">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:42.434" status="PASS" endtime="20170419 01:01:42.435"></status>
</kw>
<status starttime="20170419 01:01:42.249" status="PASS" endtime="20170419 01:01:42.435"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.435">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170419 01:01:42.435" status="PASS" endtime="20170419 01:01:42.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 01:01:42.436" status="PASS" endtime="20170419 01:01:42.436"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.644">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:01:42.644">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:42.436" status="PASS" endtime="20170419 01:01:42.644"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 01:01:42.644" status="PASS" endtime="20170419 01:01:42.645"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:42.645">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:42.249" status="PASS" endtime="20170419 01:01:42.645"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.646">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:42.646" status="PASS" endtime="20170419 01:01:42.646"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:42.646">${status} = True</msg>
<status starttime="20170419 01:01:42.645" status="PASS" endtime="20170419 01:01:42.646"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170419 01:01:42.646" status="PASS" endtime="20170419 01:01:42.647"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.648">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 01:01:42.648">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170419 01:01:42.648">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170419 01:01:42.647" status="PASS" endtime="20170419 01:01:42.648"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:42.649">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_sensor_list.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:42.649" status="PASS" endtime="20170419 01:01:42.649"></status>
</kw>
<status starttime="20170419 01:01:42.648" status="PASS" endtime="20170419 01:01:42.649"></status>
</kw>
<status starttime="20170419 01:01:42.248" status="PASS" endtime="20170419 01:01:42.650"></status>
</kw>
<status starttime="20170419 01:01:41.127" status="PASS" endtime="20170419 01:01:42.650"></status>
</kw>
<status starttime="20170419 01:01:41.125" status="PASS" endtime="20170419 01:01:42.650"></status>
</kw>
<status starttime="20170419 01:01:41.125" status="PASS" endtime="20170419 01:01:42.650"></status>
</kw>
<status starttime="20170419 01:01:41.125" status="PASS" endtime="20170419 01:01:42.650"></status>
</kw>
<status starttime="20170419 01:01:39.461" status="PASS" endtime="20170419 01:01:42.650"></status>
</kw>
<status starttime="20170419 01:01:39.460" status="PASS" endtime="20170419 01:01:42.650"></status>
</kw>
<status starttime="20170419 01:01:39.458" status="PASS" endtime="20170419 01:01:42.650"></status>
</kw>
<status starttime="20170419 01:01:39.458" status="PASS" endtime="20170419 01:01:42.650"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.653">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 01:01:42.653" status="PASS" endtime="20170419 01:01:42.654"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.654">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 01:01:42.654" status="PASS" endtime="20170419 01:01:42.654"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.655">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 01:01:42.654" status="PASS" endtime="20170419 01:01:42.655"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.655">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 01:01:42.655" status="PASS" endtime="20170419 01:01:42.655"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.831">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 01:01:42.656" status="PASS" endtime="20170419 01:01:42.831"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:42.831">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 01:01:42.831">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 01:01:42.656" status="PASS" endtime="20170419 01:01:42.831"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.832">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:42.831" status="PASS" endtime="20170419 01:01:42.832"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.832">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 01:01:42.832" status="PASS" endtime="20170419 01:01:42.832"></status>
</kw>
<status starttime="20170419 01:01:42.652" status="PASS" endtime="20170419 01:01:42.833"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.833">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170419 01:01:42.833" status="PASS" endtime="20170419 01:01:42.833"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 01:01:42.833" status="PASS" endtime="20170419 01:01:42.834"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.880">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 01:01:42.880">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 01:01:42.834" status="PASS" endtime="20170419 01:01:42.880"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 01:01:42.880" status="PASS" endtime="20170419 01:01:42.881"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:42.881">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 01:01:42.652" status="PASS" endtime="20170419 01:01:42.881"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.882">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170419 01:01:42.882">404 != 200</msg>
<status starttime="20170419 01:01:42.881" status="FAIL" endtime="20170419 01:01:42.882"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:42.882">${status} = False</msg>
<status starttime="20170419 01:01:42.881" status="PASS" endtime="20170419 01:01:42.882"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.883">Returning from the enclosing user keyword.</msg>
<status starttime="20170419 01:01:42.883" status="PASS" endtime="20170419 01:01:42.883"></status>
</kw>
<status starttime="20170419 01:01:42.651" status="PASS" endtime="20170419 01:01:42.884"></status>
</kw>
<status starttime="20170419 01:01:42.651" status="PASS" endtime="20170419 01:01:42.884"></status>
</kw>
<status starttime="20170419 01:01:42.650" status="PASS" endtime="20170419 01:01:42.884"></status>
</kw>
<status starttime="20170419 01:01:42.650" status="PASS" endtime="20170419 01:01:42.884"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:01:42.887">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 01:01:42.887" status="FAIL" endtime="20170419 01:01:42.887"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:42.887">${has_host} = False</msg>
<status starttime="20170419 01:01:42.887" status="PASS" endtime="20170419 01:01:42.887"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 01:01:42.888" status="PASS" endtime="20170419 01:01:42.889"></status>
</kw>
<status starttime="20170419 01:01:42.888" status="PASS" endtime="20170419 01:01:42.889"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.890">${port_num} = 22</msg>
<status starttime="20170419 01:01:42.890" status="PASS" endtime="20170419 01:01:42.890"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.891">${SSH_PORT} = 22</msg>
<status starttime="20170419 01:01:42.890" status="PASS" endtime="20170419 01:01:42.891"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:42.891">${https_num} = 443</msg>
<status starttime="20170419 01:01:42.891" status="PASS" endtime="20170419 01:01:42.891"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.892">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170419 01:01:42.891" status="PASS" endtime="20170419 01:01:42.892"></status>
</kw>
<status starttime="20170419 01:01:42.889" status="PASS" endtime="20170419 01:01:42.892"></status>
</kw>
<status starttime="20170419 01:01:42.889" status="PASS" endtime="20170419 01:01:42.892"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 01:01:42.893">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 01:01:42.893" status="FAIL" endtime="20170419 01:01:42.893"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:42.893">${has_port} = False</msg>
<status starttime="20170419 01:01:42.893" status="PASS" endtime="20170419 01:01:42.894"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 01:01:42.895" status="PASS" endtime="20170419 01:01:42.895"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 01:01:42.895" status="PASS" endtime="20170419 01:01:42.896"></status>
</kw>
<status starttime="20170419 01:01:42.895" status="PASS" endtime="20170419 01:01:42.896"></status>
</kw>
<status starttime="20170419 01:01:42.894" status="PASS" endtime="20170419 01:01:42.896"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:42.896">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 01:01:44.542">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 01:01:42.896" status="PASS" endtime="20170419 01:01:44.542"></status>
</kw>
<status starttime="20170419 01:01:42.886" status="PASS" endtime="20170419 01:01:44.542"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:44.543">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170419 01:01:44.543" status="PASS" endtime="20170419 01:01:44.543"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:44.544">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20170419 01:01:44.544" status="PASS" endtime="20170419 01:01:44.544"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:44.549">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170419 01:01:44.545" status="PASS" endtime="20170419 01:01:44.549"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:44.553">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:44.552" status="PASS" endtime="20170419 01:01:44.553"></status>
</kw>
<status starttime="20170419 01:01:44.551" status="PASS" endtime="20170419 01:01:44.553"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:44.554">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:44.554" status="PASS" endtime="20170419 01:01:44.554"></status>
</kw>
<status starttime="20170419 01:01:44.553" status="PASS" endtime="20170419 01:01:44.554"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:44.555">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:44.555" status="PASS" endtime="20170419 01:01:44.556"></status>
</kw>
<status starttime="20170419 01:01:44.555" status="PASS" endtime="20170419 01:01:44.556"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:44.557">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:44.556" status="PASS" endtime="20170419 01:01:44.557"></status>
</kw>
<status starttime="20170419 01:01:44.556" status="PASS" endtime="20170419 01:01:44.557"></status>
</kw>
<status starttime="20170419 01:01:44.551" status="PASS" endtime="20170419 01:01:44.557"></status>
</kw>
<status starttime="20170419 01:01:44.550" status="PASS" endtime="20170419 01:01:44.557"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:44.558">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170419 01:01:45.803">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 01:01:45.803">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg level="INFO" timestamp="20170419 01:01:45.803">${stderr} = </msg>
<status starttime="20170419 01:01:44.557" status="PASS" endtime="20170419 01:01:45.803"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:45.811">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:45.811" status="PASS" endtime="20170419 01:01:45.811"></status>
</kw>
<status starttime="20170419 01:01:45.810" status="PASS" endtime="20170419 01:01:45.812"></status>
</kw>
<status starttime="20170419 01:01:45.803" status="PASS" endtime="20170419 01:01:45.812"></status>
</kw>
<status starttime="20170419 01:01:44.549" status="PASS" endtime="20170419 01:01:45.812"></status>
</kw>
<status starttime="20170419 01:01:44.549" status="PASS" endtime="20170419 01:01:45.812"></status>
</kw>
<status starttime="20170419 01:01:44.549" status="PASS" endtime="20170419 01:01:45.812"></status>
</kw>
<status starttime="20170419 01:01:44.543" status="PASS" endtime="20170419 01:01:45.812"></status>
</kw>
<status starttime="20170419 01:01:44.543" status="PASS" endtime="20170419 01:01:45.812"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:45.813">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20170419 01:01:45.813" status="PASS" endtime="20170419 01:01:45.813"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:45.814">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170419 01:01:45.813" status="PASS" endtime="20170419 01:01:45.814"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:45.817">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:45.816" status="PASS" endtime="20170419 01:01:45.817"></status>
</kw>
<status starttime="20170419 01:01:45.816" status="PASS" endtime="20170419 01:01:45.817"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:45.818">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:45.818" status="PASS" endtime="20170419 01:01:45.818"></status>
</kw>
<status starttime="20170419 01:01:45.817" status="PASS" endtime="20170419 01:01:45.818"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:45.819">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:45.819" status="PASS" endtime="20170419 01:01:45.820"></status>
</kw>
<status starttime="20170419 01:01:45.819" status="PASS" endtime="20170419 01:01:45.820"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:45.821">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:45.820" status="PASS" endtime="20170419 01:01:45.821"></status>
</kw>
<status starttime="20170419 01:01:45.820" status="PASS" endtime="20170419 01:01:45.821"></status>
</kw>
<status starttime="20170419 01:01:45.815" status="PASS" endtime="20170419 01:01:45.821"></status>
</kw>
<status starttime="20170419 01:01:45.815" status="PASS" endtime="20170419 01:01:45.821"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:45.822">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170419 01:01:45.880">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170419 01:01:45.880">${stdout} = </msg>
<msg level="INFO" timestamp="20170419 01:01:45.880">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status starttime="20170419 01:01:45.821" status="PASS" endtime="20170419 01:01:45.880"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:45.886">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:45.886" status="PASS" endtime="20170419 01:01:45.886"></status>
</kw>
<status starttime="20170419 01:01:45.885" status="PASS" endtime="20170419 01:01:45.886"></status>
</kw>
<status starttime="20170419 01:01:45.881" status="PASS" endtime="20170419 01:01:45.886"></status>
</kw>
<status starttime="20170419 01:01:45.814" status="PASS" endtime="20170419 01:01:45.886"></status>
</kw>
<status starttime="20170419 01:01:45.814" status="PASS" endtime="20170419 01:01:45.886"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:45.890">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:45.889" status="PASS" endtime="20170419 01:01:45.890"></status>
</kw>
<status starttime="20170419 01:01:45.889" status="PASS" endtime="20170419 01:01:45.890"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:45.891">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:45.891" status="PASS" endtime="20170419 01:01:45.891"></status>
</kw>
<status starttime="20170419 01:01:45.890" status="PASS" endtime="20170419 01:01:45.891"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:45.892">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:45.892" status="PASS" endtime="20170419 01:01:45.892"></status>
</kw>
<status starttime="20170419 01:01:45.891" status="PASS" endtime="20170419 01:01:45.892"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:45.894">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:45.893" status="PASS" endtime="20170419 01:01:45.894"></status>
</kw>
<status starttime="20170419 01:01:45.893" status="PASS" endtime="20170419 01:01:45.894"></status>
</kw>
<status starttime="20170419 01:01:45.888" status="PASS" endtime="20170419 01:01:45.894"></status>
</kw>
<status starttime="20170419 01:01:45.887" status="PASS" endtime="20170419 01:01:45.894"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:45.895">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170419 01:01:45.969">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 01:01:45.969">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.4-37"
VERSION_ID="v1.99.4-37-g609aaa1"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170419 01:01:45.970">${stderr} = </msg>
<status starttime="20170419 01:01:45.894" status="PASS" endtime="20170419 01:01:45.970"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:45.975">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:45.975" status="PASS" endtime="20170419 01:01:45.975"></status>
</kw>
<status starttime="20170419 01:01:45.974" status="PASS" endtime="20170419 01:01:45.975"></status>
</kw>
<status starttime="20170419 01:01:45.970" status="PASS" endtime="20170419 01:01:45.976"></status>
</kw>
<status starttime="20170419 01:01:45.887" status="PASS" endtime="20170419 01:01:45.976"></status>
</kw>
<status starttime="20170419 01:01:45.887" status="PASS" endtime="20170419 01:01:45.976"></status>
</kw>
<status starttime="20170419 01:01:45.814" status="PASS" endtime="20170419 01:01:45.976"></status>
</kw>
<status starttime="20170419 01:01:45.812" status="PASS" endtime="20170419 01:01:45.976"></status>
</kw>
<status starttime="20170419 01:01:45.812" status="PASS" endtime="20170419 01:01:45.976"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:45.977">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170419 01:01:45.977" status="PASS" endtime="20170419 01:01:45.977"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:45.978">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170419 01:01:45.977" status="PASS" endtime="20170419 01:01:45.978"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:45.981">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:45.980" status="PASS" endtime="20170419 01:01:45.981"></status>
</kw>
<status starttime="20170419 01:01:45.980" status="PASS" endtime="20170419 01:01:45.981"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:45.982">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:45.982" status="PASS" endtime="20170419 01:01:45.982"></status>
</kw>
<status starttime="20170419 01:01:45.981" status="PASS" endtime="20170419 01:01:45.982"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:45.983">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:45.983" status="PASS" endtime="20170419 01:01:45.984"></status>
</kw>
<status starttime="20170419 01:01:45.982" status="PASS" endtime="20170419 01:01:45.984"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:45.985">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:45.985" status="PASS" endtime="20170419 01:01:45.985"></status>
</kw>
<status starttime="20170419 01:01:45.984" status="PASS" endtime="20170419 01:01:45.985"></status>
</kw>
<status starttime="20170419 01:01:45.979" status="PASS" endtime="20170419 01:01:45.985"></status>
</kw>
<status starttime="20170419 01:01:45.979" status="PASS" endtime="20170419 01:01:45.985"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:45.986">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170419 01:01:46.071">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 01:01:46.071">${stdout} =  01:01:46 up 20 min,  load average: 0.30, 0.23, 0.33</msg>
<msg level="INFO" timestamp="20170419 01:01:46.071">${stderr} = </msg>
<status starttime="20170419 01:01:45.986" status="PASS" endtime="20170419 01:01:46.071"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:46.076">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:46.076" status="PASS" endtime="20170419 01:01:46.077"></status>
</kw>
<status starttime="20170419 01:01:46.075" status="PASS" endtime="20170419 01:01:46.077"></status>
</kw>
<status starttime="20170419 01:01:46.071" status="PASS" endtime="20170419 01:01:46.077"></status>
</kw>
<status starttime="20170419 01:01:45.978" status="PASS" endtime="20170419 01:01:46.077"></status>
</kw>
<status starttime="20170419 01:01:45.978" status="PASS" endtime="20170419 01:01:46.077"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:46.080">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:46.079" status="PASS" endtime="20170419 01:01:46.080"></status>
</kw>
<status starttime="20170419 01:01:46.079" status="PASS" endtime="20170419 01:01:46.080"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:46.081">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:46.081" status="PASS" endtime="20170419 01:01:46.081"></status>
</kw>
<status starttime="20170419 01:01:46.080" status="PASS" endtime="20170419 01:01:46.081"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:46.082">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:46.082" status="PASS" endtime="20170419 01:01:46.082"></status>
</kw>
<status starttime="20170419 01:01:46.081" status="PASS" endtime="20170419 01:01:46.083"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:46.084">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:46.083" status="PASS" endtime="20170419 01:01:46.084"></status>
</kw>
<status starttime="20170419 01:01:46.083" status="PASS" endtime="20170419 01:01:46.084"></status>
</kw>
<status starttime="20170419 01:01:46.078" status="PASS" endtime="20170419 01:01:46.084"></status>
</kw>
<status starttime="20170419 01:01:46.078" status="PASS" endtime="20170419 01:01:46.084"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:46.084">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170419 01:01:46.153">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 01:01:46.153">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg level="INFO" timestamp="20170419 01:01:46.153">${stderr} = </msg>
<status starttime="20170419 01:01:46.084" status="PASS" endtime="20170419 01:01:46.153"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:46.161">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:46.160" status="PASS" endtime="20170419 01:01:46.161"></status>
</kw>
<status starttime="20170419 01:01:46.159" status="PASS" endtime="20170419 01:01:46.161"></status>
</kw>
<status starttime="20170419 01:01:46.154" status="PASS" endtime="20170419 01:01:46.161"></status>
</kw>
<status starttime="20170419 01:01:46.077" status="PASS" endtime="20170419 01:01:46.161"></status>
</kw>
<status starttime="20170419 01:01:46.077" status="PASS" endtime="20170419 01:01:46.161"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:46.167">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:46.166" status="PASS" endtime="20170419 01:01:46.167"></status>
</kw>
<status starttime="20170419 01:01:46.164" status="PASS" endtime="20170419 01:01:46.167"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:46.168">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:46.168" status="PASS" endtime="20170419 01:01:46.168"></status>
</kw>
<status starttime="20170419 01:01:46.167" status="PASS" endtime="20170419 01:01:46.168"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:46.169">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:46.169" status="PASS" endtime="20170419 01:01:46.169"></status>
</kw>
<status starttime="20170419 01:01:46.168" status="PASS" endtime="20170419 01:01:46.170"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:46.171">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:46.170" status="PASS" endtime="20170419 01:01:46.171"></status>
</kw>
<status starttime="20170419 01:01:46.170" status="PASS" endtime="20170419 01:01:46.171"></status>
</kw>
<status starttime="20170419 01:01:46.163" status="PASS" endtime="20170419 01:01:46.171"></status>
</kw>
<status starttime="20170419 01:01:46.163" status="PASS" endtime="20170419 01:01:46.171"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:46.171">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170419 01:01:46.230">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 01:01:46.230">${stdout} = Linux witherspoon 4.7.10-6786cab8778ba96d84d89c7aec34374b5f4f1968 #1 Wed Apr 19 00:02:04 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170419 01:01:46.230">${stderr} = </msg>
<status starttime="20170419 01:01:46.171" status="PASS" endtime="20170419 01:01:46.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:46.236">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt"&gt;/tmp/root/28352/obmc-robot/logs/20170419010133719098_TestsTestBasicPoweron/20170419010133719098_PowerOnTest/20170419010133719098_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:46.235" status="PASS" endtime="20170419 01:01:46.236"></status>
</kw>
<status starttime="20170419 01:01:46.235" status="PASS" endtime="20170419 01:01:46.236"></status>
</kw>
<status starttime="20170419 01:01:46.230" status="PASS" endtime="20170419 01:01:46.236"></status>
</kw>
<status starttime="20170419 01:01:46.162" status="PASS" endtime="20170419 01:01:46.236"></status>
</kw>
<status starttime="20170419 01:01:46.161" status="PASS" endtime="20170419 01:01:46.236"></status>
</kw>
<status starttime="20170419 01:01:45.978" status="PASS" endtime="20170419 01:01:46.236"></status>
</kw>
<status starttime="20170419 01:01:45.976" status="PASS" endtime="20170419 01:01:46.237"></status>
</kw>
<status starttime="20170419 01:01:45.976" status="PASS" endtime="20170419 01:01:46.237"></status>
</kw>
<status starttime="20170419 01:01:44.543" status="PASS" endtime="20170419 01:01:46.237"></status>
</kw>
<status starttime="20170419 01:01:42.886" status="PASS" endtime="20170419 01:01:46.237"></status>
</kw>
<status starttime="20170419 01:01:42.885" status="PASS" endtime="20170419 01:01:46.237"></status>
</kw>
<status starttime="20170419 01:01:42.884" status="PASS" endtime="20170419 01:01:46.237"></status>
</kw>
<status starttime="20170419 01:01:42.884" status="PASS" endtime="20170419 01:01:46.237"></status>
</kw>
<status starttime="20170419 01:01:33.872" status="PASS" endtime="20170419 01:01:46.237"></status>
</kw>
<status starttime="20170419 01:01:33.871" status="PASS" endtime="20170419 01:01:46.237"></status>
</kw>
<status starttime="20170419 01:01:33.871" status="PASS" endtime="20170419 01:01:46.237"></status>
</kw>
<status starttime="20170419 01:01:33.871" status="PASS" endtime="20170419 01:01:46.237"></status>
</kw>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20170419 01:01:46.237" status="PASS" endtime="20170419 01:01:46.331"></status>
</kw>
<status starttime="20170419 01:01:33.870" status="PASS" endtime="20170419 01:01:46.331"></status>
</kw>
<status starttime="20170419 01:01:28.877" status="PASS" endtime="20170419 01:01:46.332"></status>
</kw>
<status starttime="20170419 01:01:28.876" status="PASS" endtime="20170419 01:01:46.332"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170419 01:01:46.332" status="PASS" endtime="20170419 01:01:46.332"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:46.333">Directory '&lt;a href="file:///tmp/root/28352/obmc-robot/logs"&gt;/tmp/root/28352/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170419 01:01:46.333" status="PASS" endtime="20170419 01:01:46.333"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:46.334">File '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/test_history.txt"&gt;/tmp/root/28352/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170419 01:01:46.334" status="PASS" endtime="20170419 01:01:46.334"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:46.334">${exist} = True</msg>
<status starttime="20170419 01:01:46.334" status="PASS" endtime="20170419 01:01:46.334"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170419 01:01:46.335" status="PASS" endtime="20170419 01:01:46.335"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:46.336">${cur_time} = 2017-04-19 01:01:46:335823</msg>
<status starttime="20170419 01:01:46.336" status="PASS" endtime="20170419 01:01:46.336"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:46.337">${cur_time} = 20170419010146335823</msg>
<status starttime="20170419 01:01:46.336" status="PASS" endtime="20170419 01:01:46.337"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:46.337">${cur_time} = 20170419010146335823</msg>
<status starttime="20170419 01:01:46.335" status="PASS" endtime="20170419 01:01:46.337"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 01:01:46.338">Appended to file '&lt;a href="file:///tmp/root/28352/obmc-robot/logs/test_history.txt"&gt;/tmp/root/28352/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 01:01:46.337" status="PASS" endtime="20170419 01:01:46.338"></status>
</kw>
<status starttime="20170419 01:01:46.332" status="PASS" endtime="20170419 01:01:46.338"></status>
</kw>
<status starttime="20170419 01:01:28.584" status="PASS" endtime="20170419 01:01:46.338"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:46.339">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 01:01:46.339" status="PASS" endtime="20170419 01:01:46.339"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:46.340">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 01:01:46.340" status="PASS" endtime="20170419 01:01:46.340"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:46.340">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 01:01:46.339" status="PASS" endtime="20170419 01:01:46.340"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:46.341">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170419 01:01:46.341" status="PASS" endtime="20170419 01:01:46.341"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 01:01:46.342" status="PASS" endtime="20170419 01:01:46.348"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:46.353">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 01:01:46.358">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 01:01:46.358">${output} = /tmp/root/28352/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170419 01:01:46.349" status="PASS" endtime="20170419 01:01:46.358"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170419 01:01:46.360" status="PASS" endtime="20170419 01:01:46.369"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170419 01:01:46.370" status="PASS" endtime="20170419 01:01:46.371"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:46.371">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170419 01:01:46.371" status="PASS" endtime="20170419 01:01:46.371"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:46.373">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170419 01:01:46.341" status="PASS" endtime="20170419 01:01:46.373"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:46.374">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170419 01:01:46.373" status="PASS" endtime="20170419 01:01:46.374"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 01:01:46.374" status="PASS" endtime="20170419 01:01:46.385"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:46.391">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 01:01:46.408">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 01:01:46.408">${os_con_pid} = 166</msg>
<status starttime="20170419 01:01:46.385" status="PASS" endtime="20170419 01:01:46.408"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170419 01:01:46.418" status="PASS" endtime="20170419 01:01:46.442"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:46.443">${cmd_buf} = kill -9 166</msg>
<status starttime="20170419 01:01:46.442" status="PASS" endtime="20170419 01:01:46.443"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 01:01:46.444" status="PASS" endtime="20170419 01:01:46.451"></status>
</kw>
<status starttime="20170419 01:01:46.443" status="PASS" endtime="20170419 01:01:46.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:46.456">Running command 'kill -9 166 2&gt;&amp;1'.</msg>
<status starttime="20170419 01:01:46.452" status="PASS" endtime="20170419 01:01:46.459"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:46.460">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 01:01:46.460">${output} = </msg>
<status starttime="20170419 01:01:46.451" status="PASS" endtime="20170419 01:01:46.460"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170419 01:01:46.463" status="PASS" endtime="20170419 01:01:46.472"></status>
</kw>
<status starttime="20170419 01:01:46.462" status="PASS" endtime="20170419 01:01:46.472"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:46.472">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status starttime="20170419 01:01:46.472" status="PASS" endtime="20170419 01:01:46.472"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 01:01:46.473" status="PASS" endtime="20170419 01:01:46.480"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 01:01:46.484">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 01:01:46.488">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 01:01:46.488">${output} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status starttime="20170419 01:01:46.480" status="PASS" endtime="20170419 01:01:46.489"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170419 01:01:46.491" status="PASS" endtime="20170419 01:01:46.501"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170419 01:01:46.502" status="PASS" endtime="20170419 01:01:46.502"></status>
</kw>
<msg level="INFO" timestamp="20170419 01:01:46.503">${sol_log} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status starttime="20170419 01:01:46.338" status="PASS" endtime="20170419 01:01:46.503"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 01:01:46.504">spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: </msg>
<status starttime="20170419 01:01:46.503" status="PASS" endtime="20170419 01:01:46.504"></status>
</kw>
<status starttime="20170419 01:01:28.584" status="PASS" endtime="20170419 01:01:46.504"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170419 00:51:20.303" status="FAIL" endtime="20170419 01:01:46.504" critical="yes">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170419 00:51:20.275" status="FAIL" endtime="20170419 01:01:46.505"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170419 00:51:15.409" status="FAIL" endtime="20170419 01:01:46.509"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" pass="1" name="Tests">Tests</stat>
<stat fail="0" id="s1-s1" pass="1" name="Security">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" pass="1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" pass="0" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
