<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170929 04:42:21.301" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:42:22.283" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:42:22.284" starttime="20170929 04:42:22.283"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:42:22.285" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:42:22.285" starttime="20170929 04:42:22.284"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:42:22.286" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:42:22.286" starttime="20170929 04:42:22.285"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:42:22.287" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:42:22.287" starttime="20170929 04:42:22.286"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:42:22.492" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:42:22.493" starttime="20170929 04:42:22.287"></status>
</kw>
<msg timestamp="20170929 04:42:22.493" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:22.493" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:22.493" starttime="20170929 04:42:22.287"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:42:22.494" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:22.494" starttime="20170929 04:42:22.493"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:22.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:22.494" starttime="20170929 04:42:22.494"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:22.495" starttime="20170929 04:42:22.282"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:22.495" starttime="20170929 04:42:22.282"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:22.495" starttime="20170929 04:42:22.281"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:42:22.495" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170929 04:42:22.495" starttime="20170929 04:42:22.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:22.496" starttime="20170929 04:42:22.496"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:42:22.539" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170929 04:42:22.540" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:22.540" starttime="20170929 04:42:22.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:22.540" starttime="20170929 04:42:22.540"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:42:22.541" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:42:22.541" starttime="20170929 04:42:22.541"></status>
</kw>
<msg timestamp="20170929 04:42:22.541" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:22.541" starttime="20170929 04:42:22.280"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170929 04:42:22.542" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 04:42:22.542" starttime="20170929 04:42:22.541"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:22.542" starttime="20170929 04:42:22.279"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:22.542" starttime="20170929 04:42:22.278"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20170929 04:42:22.544" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170929 04:42:22.544" starttime="20170929 04:42:22.544"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20170929 04:42:22.569" level="INFO">${image_version} = v1.99.10-68-g5e480fd</msg>
<status status="PASS" endtime="20170929 04:42:22.569" starttime="20170929 04:42:22.544"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170929 04:42:22.570" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170929 04:42:33.303" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20170929 04:42:33.304" starttime="20170929 04:42:22.569"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:42:33.307" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:42:33.307" starttime="20170929 04:42:33.307"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:42:33.308" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:42:33.308" starttime="20170929 04:42:33.308"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:42:33.309" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:42:33.309" starttime="20170929 04:42:33.308"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:42:33.310" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:42:33.310" starttime="20170929 04:42:33.309"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:42:33.512" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:42:33.512" starttime="20170929 04:42:33.310"></status>
</kw>
<msg timestamp="20170929 04:42:33.512" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:33.512" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:33.512" starttime="20170929 04:42:33.310"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:42:33.513" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:33.513" starttime="20170929 04:42:33.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:33.513" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:33.513" starttime="20170929 04:42:33.513"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:33.514" starttime="20170929 04:42:33.306"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:33.514" starttime="20170929 04:42:33.306"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:33.514" starttime="20170929 04:42:33.305"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:42:33.514" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170929 04:42:33.514" starttime="20170929 04:42:33.514"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:42:33.515" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170929 04:42:33.515" starttime="20170929 04:42:33.515"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:33.516" starttime="20170929 04:42:33.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:33.516" starttime="20170929 04:42:33.516"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:42:43.545" level="FAIL">SSLError: ('The write operation timed out',)</msg>
<status status="FAIL" endtime="20170929 04:42:43.545" starttime="20170929 04:42:33.517"></status>
</kw>
<status status="FAIL" endtime="20170929 04:42:43.546" starttime="20170929 04:42:33.304"></status>
</kw>
<status status="FAIL" endtime="20170929 04:42:43.546" starttime="20170929 04:42:22.543"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170929 04:42:43.560" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170929 04:42:43.560" starttime="20170929 04:42:43.559"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170929 04:42:43.565" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170929 04:42:46.567" level="INFO">${RC} = 0</msg>
<msg timestamp="20170929 04:42:46.567" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.688 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.638 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170929 04:42:46.567" starttime="20170929 04:42:43.560"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170929 04:42:46.571" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.688 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.638 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.604 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.569 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.569/0.624/0.688/0.053 ms</msg>
<status status="PASS" endtime="20170929 04:42:46.571" starttime="20170929 04:42:46.570"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:46.571" starttime="20170929 04:42:46.571"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.572" starttime="20170929 04:42:43.559"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 04:42:46.585" level="INFO">${cur_time} = 2017-09-29 04:42:46:584874</msg>
<status status="PASS" endtime="20170929 04:42:46.585" starttime="20170929 04:42:46.585"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 04:42:46.586" level="INFO">${cur_time} = 20170929044246584874</msg>
<status status="PASS" endtime="20170929 04:42:46.586" starttime="20170929 04:42:46.586"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.586" starttime="20170929 04:42:46.584"></status>
</kw>
<msg timestamp="20170929 04:42:46.592" level="INFO">${FFDC_TIME} = 20170929044246584874</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170929 04:42:46.594" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20170929 04:42:46.594" starttime="20170929 04:42:46.593"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170929 04:42:46.594" level="INFO">${suite_name} = 20170929044246584874_BmcCodeUpdate</msg>
<status status="PASS" endtime="20170929 04:42:46.594" starttime="20170929 04:42:46.594"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170929 04:42:46.595" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170929 04:42:46.595" starttime="20170929 04:42:46.595"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170929 04:42:46.596" level="INFO">${test_name} = 20170929044246584874_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170929 04:42:46.596" starttime="20170929 04:42:46.595"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.596" starttime="20170929 04:42:46.593"></status>
</kw>
<msg timestamp="20170929 04:42:46.601" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/</msg>
<msg timestamp="20170929 04:42:46.607" level="INFO">${FFDC_PREFIX} = 20170929044246584874_</msg>
<msg timestamp="20170929 04:42:46.626" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20170929 04:42:46.627" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:46.627" starttime="20170929 04:42:46.626"></status>
</kw>
<msg timestamp="20170929 04:42:46.633" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:46.643" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:46.643" starttime="20170929 04:42:46.642"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.643" starttime="20170929 04:42:46.642"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:46.644" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:46.644" starttime="20170929 04:42:46.644"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.644" starttime="20170929 04:42:46.643"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:46.646" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:46.646" starttime="20170929 04:42:46.645"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.646" starttime="20170929 04:42:46.645"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:46.647" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:46.647" starttime="20170929 04:42:46.647"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.647" starttime="20170929 04:42:46.646"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:46.648" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:46.649" starttime="20170929 04:42:46.648"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.649" starttime="20170929 04:42:46.647"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:46.650" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:46.650" starttime="20170929 04:42:46.649"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.650" starttime="20170929 04:42:46.649"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:46.651" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:46.651" starttime="20170929 04:42:46.651"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.651" starttime="20170929 04:42:46.650"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:46.653" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:46.653" starttime="20170929 04:42:46.653"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.653" starttime="20170929 04:42:46.652"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:46.654" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:46.654" starttime="20170929 04:42:46.654"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.655" starttime="20170929 04:42:46.653"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:46.656" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:46.656" starttime="20170929 04:42:46.656"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.656" starttime="20170929 04:42:46.655"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:46.657" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:46.657" starttime="20170929 04:42:46.657"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.658" starttime="20170929 04:42:46.656"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:46.659" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:46.659" starttime="20170929 04:42:46.658"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.659" starttime="20170929 04:42:46.658"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:46.660" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:46.660" starttime="20170929 04:42:46.660"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:46.660" starttime="20170929 04:42:46.659"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170929 04:42:46.678" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:42:46.678" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170929 04:42:47.506" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170929 04:42:47.506" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170929 04:42:47.580" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170929 04:42:47.588" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170929 04:42:47.588" level="INFO">${stderr} = </msg>
<msg timestamp="20170929 04:42:47.588" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170929 04:42:47.588" starttime="20170929 04:42:46.661"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.589" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170929 04:42:47.589" starttime="20170929 04:42:47.589"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.590" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170929 04:42:47.590" starttime="20170929 04:42:47.589"></status>
</kw>
<msg timestamp="20170929 04:42:47.590" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170929 04:42:47.590" starttime="20170929 04:42:46.661"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.591" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:47.591" starttime="20170929 04:42:47.591"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.592" starttime="20170929 04:42:47.590"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.592" starttime="20170929 04:42:46.655"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.593" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:47.593" starttime="20170929 04:42:47.593"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.593" starttime="20170929 04:42:47.592"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 04:42:47.594" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170929 04:42:47.594" starttime="20170929 04:42:47.593"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.595" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:47.595" starttime="20170929 04:42:47.595"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.595" starttime="20170929 04:42:47.594"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.597" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:47.597" starttime="20170929 04:42:47.596"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.597" starttime="20170929 04:42:47.596"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.597" starttime="20170929 04:42:47.594"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.598" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:47.598" starttime="20170929 04:42:47.598"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.598" starttime="20170929 04:42:47.597"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.600" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:47.600" starttime="20170929 04:42:47.599"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.600" starttime="20170929 04:42:47.599"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.600" starttime="20170929 04:42:47.597"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.601" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:47.601" starttime="20170929 04:42:47.601"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.601" starttime="20170929 04:42:47.600"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.602" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:47.602" starttime="20170929 04:42:47.602"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.603" starttime="20170929 04:42:47.601"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.603" starttime="20170929 04:42:47.600"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.603" starttime="20170929 04:42:47.594"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.604" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:47.604" starttime="20170929 04:42:47.603"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.604" starttime="20170929 04:42:47.603"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.604" starttime="20170929 04:42:46.641"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 04:42:47.609" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170929 04:42:47.609" starttime="20170929 04:42:47.609"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170929 04:42:47.611" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170929 04:42:47.611" starttime="20170929 04:42:47.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:47.612" starttime="20170929 04:42:47.612"></status>
</kw>
<msg timestamp="20170929 04:42:47.612" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170929 04:42:47.612" starttime="20170929 04:42:47.611"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:47.614" starttime="20170929 04:42:47.614"></status>
</kw>
<msg timestamp="20170929 04:42:47.614" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:47.614" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:42:47.614" starttime="20170929 04:42:47.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:47.615" starttime="20170929 04:42:47.615"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 04:42:47.629" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170929 04:42:47.629" starttime="20170929 04:42:47.629"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 04:42:47.631" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170929 04:42:47.631" starttime="20170929 04:42:47.630"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.637" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170929 04:42:47.637" starttime="20170929 04:42:47.631"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.640" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:47.640" starttime="20170929 04:42:47.640"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.640" starttime="20170929 04:42:47.639"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.641" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:47.642" starttime="20170929 04:42:47.641"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.642" starttime="20170929 04:42:47.640"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.643" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:47.643" starttime="20170929 04:42:47.642"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.643" starttime="20170929 04:42:47.642"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:47.644" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:47.644" starttime="20170929 04:42:47.644"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.644" starttime="20170929 04:42:47.643"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.644" starttime="20170929 04:42:47.638"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:47.644" starttime="20170929 04:42:47.638"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:42:47.645" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:42:47.645" starttime="20170929 04:42:47.645"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:42:47.687" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:42:47.687" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170929 04:42:49.003" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:42:49.003" starttime="20170929 04:42:47.664"></status>
</kw>
<msg timestamp="20170929 04:42:49.004" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:49.004" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170929 04:42:49.004" starttime="20170929 04:42:47.646"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:42:49.004" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170929 04:42:49.004" starttime="20170929 04:42:49.004"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:42:49.005" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:42:49.005" starttime="20170929 04:42:49.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.012" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.013" starttime="20170929 04:42:49.012"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.013" starttime="20170929 04:42:49.011"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.013" starttime="20170929 04:42:49.005"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.013" starttime="20170929 04:42:47.637"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.013" starttime="20170929 04:42:47.637"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.013" starttime="20170929 04:42:47.637"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.013" starttime="20170929 04:42:47.630"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.013" starttime="20170929 04:42:47.629"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 04:42:49.014" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170929 04:42:49.014" starttime="20170929 04:42:49.014"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.015" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170929 04:42:49.015" starttime="20170929 04:42:49.015"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.018" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.018" starttime="20170929 04:42:49.018"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.018" starttime="20170929 04:42:49.017"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.020" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.020" starttime="20170929 04:42:49.019"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.020" starttime="20170929 04:42:49.019"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.021" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.021" starttime="20170929 04:42:49.021"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.021" starttime="20170929 04:42:49.020"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.022" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.023" starttime="20170929 04:42:49.022"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.023" starttime="20170929 04:42:49.021"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.023" starttime="20170929 04:42:49.017"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.023" starttime="20170929 04:42:49.016"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:42:49.024" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:42:49.024" starttime="20170929 04:42:49.023"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:42:49.064" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:42:49.064" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170929 04:42:49.111" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:42:49.111" starttime="20170929 04:42:49.041"></status>
</kw>
<msg timestamp="20170929 04:42:49.111" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:49.111" level="INFO">${ret_values} = (u'20170929022641', u'', 0)</msg>
<status status="PASS" endtime="20170929 04:42:49.111" starttime="20170929 04:42:49.024"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:42:49.112" level="INFO">${stdout} = 20170929022641</msg>
<status status="PASS" endtime="20170929 04:42:49.112" starttime="20170929 04:42:49.111"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:42:49.112" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:42:49.112" starttime="20170929 04:42:49.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.120" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.120" starttime="20170929 04:42:49.119"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.120" starttime="20170929 04:42:49.119"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.120" starttime="20170929 04:42:49.113"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.120" starttime="20170929 04:42:49.016"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.120" starttime="20170929 04:42:49.015"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.123" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.123" starttime="20170929 04:42:49.123"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.123" starttime="20170929 04:42:49.122"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.125" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.125" starttime="20170929 04:42:49.124"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.125" starttime="20170929 04:42:49.124"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.126" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.126" starttime="20170929 04:42:49.126"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.126" starttime="20170929 04:42:49.125"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.127" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.127" starttime="20170929 04:42:49.127"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.127" starttime="20170929 04:42:49.126"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.128" starttime="20170929 04:42:49.122"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.128" starttime="20170929 04:42:49.121"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:42:49.128" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:42:49.128" starttime="20170929 04:42:49.128"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:42:49.169" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:42:49.169" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170929 04:42:49.227" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:42:49.227" starttime="20170929 04:42:49.146"></status>
</kw>
<msg timestamp="20170929 04:42:49.228" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:49.228" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-68"\nVERSION_ID="v1.99.10-68-gbd83a3d"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170929 04:42:49.228" starttime="20170929 04:42:49.129"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:42:49.228" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-68"
VERSION_ID="v1.99.10-68-gbd83a3d"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170929 04:42:49.228" starttime="20170929 04:42:49.228"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:42:49.229" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:42:49.229" starttime="20170929 04:42:49.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.236" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.236" starttime="20170929 04:42:49.236"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.236" starttime="20170929 04:42:49.235"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.237" starttime="20170929 04:42:49.229"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.237" starttime="20170929 04:42:49.120"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.237" starttime="20170929 04:42:49.120"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.237" starttime="20170929 04:42:49.015"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.237" starttime="20170929 04:42:49.013"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.237" starttime="20170929 04:42:49.013"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 04:42:49.238" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170929 04:42:49.238" starttime="20170929 04:42:49.238"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.239" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170929 04:42:49.239" starttime="20170929 04:42:49.238"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.242" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.242" starttime="20170929 04:42:49.242"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.242" starttime="20170929 04:42:49.241"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.243" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.243" starttime="20170929 04:42:49.243"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.244" starttime="20170929 04:42:49.242"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.245" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.245" starttime="20170929 04:42:49.244"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.245" starttime="20170929 04:42:49.244"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.246" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.246" starttime="20170929 04:42:49.246"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.246" starttime="20170929 04:42:49.245"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.246" starttime="20170929 04:42:49.241"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.246" starttime="20170929 04:42:49.240"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:42:49.247" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:42:49.247" starttime="20170929 04:42:49.247"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:42:49.288" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:42:49.288" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170929 04:42:49.345" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:42:49.346" starttime="20170929 04:42:49.265"></status>
</kw>
<msg timestamp="20170929 04:42:49.346" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:49.346" level="INFO">${ret_values} = (u' 04:43:03 up  1:46,  load average: 0.24, 0.28, 0.27', u'', 0)</msg>
<status status="PASS" endtime="20170929 04:42:49.346" starttime="20170929 04:42:49.248"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:42:49.347" level="INFO">${stdout} =  04:43:03 up  1:46,  load average: 0.24, 0.28, 0.27</msg>
<status status="PASS" endtime="20170929 04:42:49.347" starttime="20170929 04:42:49.346"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:42:49.347" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:42:49.347" starttime="20170929 04:42:49.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.355" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.355" starttime="20170929 04:42:49.354"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.355" starttime="20170929 04:42:49.354"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.355" starttime="20170929 04:42:49.348"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.355" starttime="20170929 04:42:49.239"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.355" starttime="20170929 04:42:49.239"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.358" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.358" starttime="20170929 04:42:49.358"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.359" starttime="20170929 04:42:49.357"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.360" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.360" starttime="20170929 04:42:49.359"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.360" starttime="20170929 04:42:49.359"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.361" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.361" starttime="20170929 04:42:49.361"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.361" starttime="20170929 04:42:49.360"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.363" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.363" starttime="20170929 04:42:49.362"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.363" starttime="20170929 04:42:49.361"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.363" starttime="20170929 04:42:49.357"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.363" starttime="20170929 04:42:49.356"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:42:49.364" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:42:49.364" starttime="20170929 04:42:49.363"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:42:49.405" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:42:49.405" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170929 04:42:49.466" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:42:49.466" starttime="20170929 04:42:49.382"></status>
</kw>
<msg timestamp="20170929 04:42:49.466" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:49.466" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.3M     14.3M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20170929 04:42:49.466" starttime="20170929 04:42:49.364"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:42:49.467" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.3M     14.3M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20170929 04:42:49.467" starttime="20170929 04:42:49.467"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:42:49.467" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:42:49.468" starttime="20170929 04:42:49.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.475" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.475" starttime="20170929 04:42:49.474"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.475" starttime="20170929 04:42:49.474"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.475" starttime="20170929 04:42:49.468"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.475" starttime="20170929 04:42:49.356"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.475" starttime="20170929 04:42:49.355"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.478" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.478" starttime="20170929 04:42:49.478"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.479" starttime="20170929 04:42:49.477"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.480" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.480" starttime="20170929 04:42:49.480"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.480" starttime="20170929 04:42:49.479"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.481" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.481" starttime="20170929 04:42:49.481"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.481" starttime="20170929 04:42:49.480"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.483" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.483" starttime="20170929 04:42:49.482"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.483" starttime="20170929 04:42:49.482"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.483" starttime="20170929 04:42:49.477"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.483" starttime="20170929 04:42:49.477"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:42:49.484" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:42:49.484" starttime="20170929 04:42:49.483"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:42:49.524" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:42:49.525" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170929 04:42:49.571" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:42:49.571" starttime="20170929 04:42:49.501"></status>
</kw>
<msg timestamp="20170929 04:42:49.572" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:49.572" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170929 04:42:49.572" starttime="20170929 04:42:49.484"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:42:49.572" level="INFO">${stdout} = Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170929 04:42:49.573" starttime="20170929 04:42:49.572"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:42:49.573" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:42:49.573" starttime="20170929 04:42:49.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.581" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:49.581" starttime="20170929 04:42:49.581"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.581" starttime="20170929 04:42:49.580"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.581" starttime="20170929 04:42:49.573"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.581" starttime="20170929 04:42:49.476"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.581" starttime="20170929 04:42:49.475"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.582" starttime="20170929 04:42:49.239"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.582" starttime="20170929 04:42:49.237"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.582" starttime="20170929 04:42:49.237"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.582" starttime="20170929 04:42:47.629"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.582" starttime="20170929 04:42:47.628"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.582" starttime="20170929 04:42:47.615"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.582" starttime="20170929 04:42:47.613"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.582" starttime="20170929 04:42:47.612"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:49.584" starttime="20170929 04:42:49.584"></status>
</kw>
<msg timestamp="20170929 04:42:49.584" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:49.584" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:42:49.584" starttime="20170929 04:42:49.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:49.585" starttime="20170929 04:42:49.585"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 04:42:49.599" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170929 04:42:49.599" starttime="20170929 04:42:49.599"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 04:42:49.600" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20170929 04:42:49.600" starttime="20170929 04:42:49.600"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:42:49.601" level="INFO">${logpath} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170929 04:42:49.601" starttime="20170929 04:42:49.601"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:42:49.605" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:42:49.605" starttime="20170929 04:42:49.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:42:49.606" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:42:49.606" starttime="20170929 04:42:49.605"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:42:49.607" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:42:49.607" starttime="20170929 04:42:49.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:42:49.607" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:42:49.607" starttime="20170929 04:42:49.607"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.815" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:42:49.815" starttime="20170929 04:42:49.608"></status>
</kw>
<msg timestamp="20170929 04:42:49.815" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:49.815" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:49.815" starttime="20170929 04:42:49.608"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.816" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:49.816" starttime="20170929 04:42:49.815"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:49.817" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:49.817" starttime="20170929 04:42:49.816"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.817" starttime="20170929 04:42:49.604"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.817" starttime="20170929 04:42:49.603"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:49.817" starttime="20170929 04:42:49.602"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:42:49.818" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170929 04:42:49.818" starttime="20170929 04:42:49.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:49.818" starttime="20170929 04:42:49.818"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:42:50.408" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:42:50.408" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:50.408" starttime="20170929 04:42:49.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:50.409" starttime="20170929 04:42:50.408"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:42:50.409" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:42:50.409" starttime="20170929 04:42:50.409"></status>
</kw>
<msg timestamp="20170929 04:42:50.410" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:50.410" starttime="20170929 04:42:49.602"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:50.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:50.411" starttime="20170929 04:42:50.410"></status>
</kw>
<msg timestamp="20170929 04:42:50.411" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:42:50.411" starttime="20170929 04:42:50.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:50.412" starttime="20170929 04:42:50.411"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:42:50.413" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 27570
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 208000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 312
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:42:50.413" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:42:50.413" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170929 04:42:50.413" starttime="20170929 04:42:50.412"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:50.415" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:50.415" starttime="20170929 04:42:50.414"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:50.415" starttime="20170929 04:42:50.414"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:50.415" starttime="20170929 04:42:49.601"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:42:50.416" level="INFO">${logpath} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_OCC_state.txt</msg>
<status status="PASS" endtime="20170929 04:42:50.416" starttime="20170929 04:42:50.416"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:42:50.419" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:42:50.419" starttime="20170929 04:42:50.419"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:42:50.420" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:42:50.420" starttime="20170929 04:42:50.420"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:42:50.421" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:42:50.421" starttime="20170929 04:42:50.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:42:50.421" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:42:50.421" starttime="20170929 04:42:50.421"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:42:50.619" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:42:50.619" starttime="20170929 04:42:50.422"></status>
</kw>
<msg timestamp="20170929 04:42:50.619" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:50.619" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:50.619" starttime="20170929 04:42:50.422"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:42:50.620" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:50.620" starttime="20170929 04:42:50.620"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:50.621" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:50.621" starttime="20170929 04:42:50.620"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:50.621" starttime="20170929 04:42:50.418"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:50.621" starttime="20170929 04:42:50.418"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:50.621" starttime="20170929 04:42:50.417"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:42:50.622" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20170929 04:42:50.622" starttime="20170929 04:42:50.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:50.622" starttime="20170929 04:42:50.622"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:42:50.769" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:42:50.769" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:50.769" starttime="20170929 04:42:50.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:50.770" starttime="20170929 04:42:50.769"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:42:50.770" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:42:50.770" starttime="20170929 04:42:50.770"></status>
</kw>
<msg timestamp="20170929 04:42:50.770" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:50.770" starttime="20170929 04:42:50.416"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:50.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:50.772" starttime="20170929 04:42:50.771"></status>
</kw>
<msg timestamp="20170929 04:42:50.772" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:42:50.772" starttime="20170929 04:42:50.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:50.773" starttime="20170929 04:42:50.772"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:42:50.774" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:42:50.774" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:42:50.774" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20170929 04:42:50.774" starttime="20170929 04:42:50.773"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:50.776" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_OCC_state.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:50.776" starttime="20170929 04:42:50.775"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:50.776" starttime="20170929 04:42:50.774"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:50.776" starttime="20170929 04:42:50.415"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:42:50.777" level="INFO">${logpath} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170929 04:42:50.777" starttime="20170929 04:42:50.777"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:42:50.780" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:42:50.780" starttime="20170929 04:42:50.780"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:42:50.781" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:42:50.781" starttime="20170929 04:42:50.781"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:42:50.782" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:42:50.782" starttime="20170929 04:42:50.781"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:42:50.782" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:42:50.782" starttime="20170929 04:42:50.782"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:42:50.972" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:42:50.972" starttime="20170929 04:42:50.783"></status>
</kw>
<msg timestamp="20170929 04:42:50.972" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:50.972" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:50.972" starttime="20170929 04:42:50.783"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:42:50.973" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:50.973" starttime="20170929 04:42:50.972"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:50.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:50.974" starttime="20170929 04:42:50.973"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:50.974" starttime="20170929 04:42:50.779"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:50.974" starttime="20170929 04:42:50.779"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:50.974" starttime="20170929 04:42:50.778"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:42:50.974" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170929 04:42:50.975" starttime="20170929 04:42:50.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:50.975" starttime="20170929 04:42:50.975"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:42:51.315" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:42:51.316" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:51.316" starttime="20170929 04:42:50.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:51.316" starttime="20170929 04:42:51.316"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:42:51.317" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:42:51.317" starttime="20170929 04:42:51.317"></status>
</kw>
<msg timestamp="20170929 04:42:51.317" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:51.317" starttime="20170929 04:42:50.777"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:51.318" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:51.318" starttime="20170929 04:42:51.318"></status>
</kw>
<msg timestamp="20170929 04:42:51.319" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:42:51.319" starttime="20170929 04:42:51.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:51.319" starttime="20170929 04:42:51.319"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:42:51.320" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:42:51.320" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:42:51.320" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170929 04:42:51.320" starttime="20170929 04:42:51.319"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:51.322" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:51.322" starttime="20170929 04:42:51.321"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:51.322" starttime="20170929 04:42:51.320"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:51.322" starttime="20170929 04:42:50.776"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:42:51.323" level="INFO">${logpath} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_led.txt</msg>
<status status="PASS" endtime="20170929 04:42:51.323" starttime="20170929 04:42:51.322"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:42:51.326" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:42:51.326" starttime="20170929 04:42:51.325"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:42:51.327" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:42:51.327" starttime="20170929 04:42:51.326"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:42:51.327" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:42:51.327" starttime="20170929 04:42:51.327"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:42:51.328" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:42:51.328" starttime="20170929 04:42:51.328"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:42:51.536" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:42:51.536" starttime="20170929 04:42:51.329"></status>
</kw>
<msg timestamp="20170929 04:42:51.536" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:51.536" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:51.536" starttime="20170929 04:42:51.328"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:42:51.537" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:51.537" starttime="20170929 04:42:51.537"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:51.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:51.538" starttime="20170929 04:42:51.537"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:51.538" starttime="20170929 04:42:51.325"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:51.538" starttime="20170929 04:42:51.324"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:51.538" starttime="20170929 04:42:51.324"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:42:51.539" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20170929 04:42:51.539" starttime="20170929 04:42:51.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:51.539" starttime="20170929 04:42:51.539"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:42:53.189" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:42:53.189" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:53.189" starttime="20170929 04:42:51.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:53.190" starttime="20170929 04:42:53.190"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:42:53.190" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:42:53.191" starttime="20170929 04:42:53.190"></status>
</kw>
<msg timestamp="20170929 04:42:53.191" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:53.191" starttime="20170929 04:42:51.323"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:53.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:53.192" starttime="20170929 04:42:53.192"></status>
</kw>
<msg timestamp="20170929 04:42:53.192" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:42:53.192" starttime="20170929 04:42:53.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:53.193" starttime="20170929 04:42:53.193"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:42:53.195" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:42:53.195" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:42:53.195" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20170929 04:42:53.195" starttime="20170929 04:42:53.193"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:53.197" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_led.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:53.197" starttime="20170929 04:42:53.196"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:53.197" starttime="20170929 04:42:53.196"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:53.197" starttime="20170929 04:42:51.322"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:42:53.198" level="INFO">${logpath} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20170929 04:42:53.198" starttime="20170929 04:42:53.198"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:42:53.201" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:42:53.201" starttime="20170929 04:42:53.201"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:42:53.202" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:42:53.202" starttime="20170929 04:42:53.202"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:42:53.203" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:42:53.203" starttime="20170929 04:42:53.202"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:42:53.204" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:42:53.204" starttime="20170929 04:42:53.203"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:42:53.434" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:42:53.434" starttime="20170929 04:42:53.204"></status>
</kw>
<msg timestamp="20170929 04:42:53.434" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:53.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:53.434" starttime="20170929 04:42:53.204"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:42:53.435" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:53.435" starttime="20170929 04:42:53.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:53.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:53.436" starttime="20170929 04:42:53.436"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:53.436" starttime="20170929 04:42:53.200"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:53.436" starttime="20170929 04:42:53.199"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:53.436" starttime="20170929 04:42:53.199"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:42:53.437" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170929 04:42:53.437" starttime="20170929 04:42:53.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:53.438" starttime="20170929 04:42:53.437"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:42:53.818" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:42:53.818" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:53.818" starttime="20170929 04:42:53.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:53.819" starttime="20170929 04:42:53.819"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:42:53.819" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:42:53.819" starttime="20170929 04:42:53.819"></status>
</kw>
<msg timestamp="20170929 04:42:53.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:53.820" starttime="20170929 04:42:53.198"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:53.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:53.821" starttime="20170929 04:42:53.821"></status>
</kw>
<msg timestamp="20170929 04:42:53.821" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:42:53.821" starttime="20170929 04:42:53.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:53.822" starttime="20170929 04:42:53.821"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:42:53.823" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/1b14e18e": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-68-g57af142", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/1b14e18e/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/1b14e18e/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/3330203c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-68-gbd83a3d", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/3330203c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/3330203c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c", 
        "/xyz/openbmc_project/software/1b14e18e", 
        "/xyz/openbmc_project/software/3330203c"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/3330203c"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:42:53.823" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:42:53.823" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/1b14e18e": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" endtime="20170929 04:42:53.823" starttime="20170929 04:42:53.822"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:53.825" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:53.825" starttime="20170929 04:42:53.824"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:53.825" starttime="20170929 04:42:53.823"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:53.825" starttime="20170929 04:42:53.197"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:42:53.826" level="INFO">${logpath} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_elog.txt</msg>
<status status="PASS" endtime="20170929 04:42:53.826" starttime="20170929 04:42:53.825"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:42:53.829" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:42:53.829" starttime="20170929 04:42:53.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:42:53.830" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:42:53.830" starttime="20170929 04:42:53.830"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:42:53.831" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:42:53.831" starttime="20170929 04:42:53.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:42:53.831" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:42:53.831" starttime="20170929 04:42:53.831"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:42:54.029" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:42:54.030" starttime="20170929 04:42:53.832"></status>
</kw>
<msg timestamp="20170929 04:42:54.030" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:54.030" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:54.030" starttime="20170929 04:42:53.832"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:42:54.030" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:54.031" starttime="20170929 04:42:54.030"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:54.031" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:54.031" starttime="20170929 04:42:54.031"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:54.031" starttime="20170929 04:42:53.828"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:54.031" starttime="20170929 04:42:53.827"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:54.032" starttime="20170929 04:42:53.827"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:42:54.032" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170929 04:42:54.032" starttime="20170929 04:42:54.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:54.033" starttime="20170929 04:42:54.033"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:42:54.079" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:42:54.079" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:54.079" starttime="20170929 04:42:54.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:54.080" starttime="20170929 04:42:54.080"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:42:54.080" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:42:54.080" starttime="20170929 04:42:54.080"></status>
</kw>
<msg timestamp="20170929 04:42:54.081" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:54.081" starttime="20170929 04:42:53.826"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:54.082" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170929 04:42:54.083" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170929 04:42:54.083" starttime="20170929 04:42:54.082"></status>
</kw>
<msg timestamp="20170929 04:42:54.083" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170929 04:42:54.083" starttime="20170929 04:42:54.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170929 04:42:54.084" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170929 04:42:54.085" starttime="20170929 04:42:54.084"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:54.085" starttime="20170929 04:42:54.083"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:54.085" starttime="20170929 04:42:53.825"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:42:54.086" level="INFO">${logpath} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170929 04:42:54.086" starttime="20170929 04:42:54.085"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:42:54.090" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:42:54.093" starttime="20170929 04:42:54.090"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:42:54.094" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:42:54.094" starttime="20170929 04:42:54.093"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:42:54.095" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:42:54.095" starttime="20170929 04:42:54.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:42:54.096" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:42:54.096" starttime="20170929 04:42:54.096"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:42:54.295" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:42:54.295" starttime="20170929 04:42:54.098"></status>
</kw>
<msg timestamp="20170929 04:42:54.295" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:54.295" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:54.295" starttime="20170929 04:42:54.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:42:54.296" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:54.296" starttime="20170929 04:42:54.296"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:54.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:54.297" starttime="20170929 04:42:54.296"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:54.297" starttime="20170929 04:42:54.089"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:54.297" starttime="20170929 04:42:54.088"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:54.297" starttime="20170929 04:42:54.087"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:42:54.298" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170929 04:42:54.298" starttime="20170929 04:42:54.297"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:54.299" starttime="20170929 04:42:54.298"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:42:56.541" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:42:56.541" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:56.541" starttime="20170929 04:42:54.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:56.542" starttime="20170929 04:42:56.541"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:42:56.542" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:42:56.542" starttime="20170929 04:42:56.542"></status>
</kw>
<msg timestamp="20170929 04:42:56.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:42:56.543" starttime="20170929 04:42:54.086"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:42:56.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:42:56.544" starttime="20170929 04:42:56.543"></status>
</kw>
<msg timestamp="20170929 04:42:56.544" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:42:56.544" starttime="20170929 04:42:56.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:56.545" starttime="20170929 04:42:56.544"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:42:56.548" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/1b14e18e", 
        "/xyz/openbmc_project/software/3330203c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:42:56.548" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:42:56.548" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20170929 04:42:56.549" starttime="20170929 04:42:56.545"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:56.550" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:56.550" starttime="20170929 04:42:56.550"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:56.551" starttime="20170929 04:42:56.549"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:56.551" starttime="20170929 04:42:54.085"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:56.551" starttime="20170929 04:42:49.601"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:56.551" starttime="20170929 04:42:49.600"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:56.551" starttime="20170929 04:42:49.599"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:56.551" starttime="20170929 04:42:49.599"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:56.551" starttime="20170929 04:42:49.598"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:56.551" starttime="20170929 04:42:49.585"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:56.551" starttime="20170929 04:42:49.582"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:56.551" starttime="20170929 04:42:49.582"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:56.553" starttime="20170929 04:42:56.553"></status>
</kw>
<msg timestamp="20170929 04:42:56.553" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:56.553" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:42:56.553" starttime="20170929 04:42:56.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:56.554" starttime="20170929 04:42:56.554"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:56.571" starttime="20170929 04:42:56.568"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170929 04:42:56.573" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170929 04:42:56.573" starttime="20170929 04:42:56.571"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:56.573" starttime="20170929 04:42:56.567"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:56.573" starttime="20170929 04:42:56.554"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:56.573" starttime="20170929 04:42:56.552"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:56.573" starttime="20170929 04:42:56.551"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:56.575" starttime="20170929 04:42:56.575"></status>
</kw>
<msg timestamp="20170929 04:42:56.575" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:56.575" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:42:56.575" starttime="20170929 04:42:56.574"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:56.576" starttime="20170929 04:42:56.576"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170929 04:42:56.609" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:42:56.610" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170929 04:42:56.667" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170929 04:42:56.676" level="INFO">${core_files} = None</msg>
<msg timestamp="20170929 04:42:56.677" level="INFO">${stderr} = None</msg>
<msg timestamp="20170929 04:42:56.677" level="INFO">${rc} = None</msg>
<msg timestamp="20170929 04:42:56.677" level="FAIL">#(UTC) 2017/09/29 04:42:56.675904 -    0.066619 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170929 04:42:56.677" starttime="20170929 04:42:56.590"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170929 04:42:56.678" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170929 04:42:56.678" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170929 04:42:56.678" starttime="20170929 04:42:56.677"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:56.692" starttime="20170929 04:42:56.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:57.358" starttime="20170929 04:42:56.693"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:57.359" starttime="20170929 04:42:56.692"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:57.359" starttime="20170929 04:42:56.686"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:57.359" starttime="20170929 04:42:56.678"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170929 04:42:57.359" starttime="20170929 04:42:57.359"></status>
</kw>
<status status="FAIL" endtime="20170929 04:42:57.359" starttime="20170929 04:42:56.589"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:57.359" starttime="20170929 04:42:56.576"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:57.360" starttime="20170929 04:42:56.573"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:57.360" starttime="20170929 04:42:56.573"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:57.362" starttime="20170929 04:42:57.361"></status>
</kw>
<msg timestamp="20170929 04:42:57.362" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:57.362" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:42:57.362" starttime="20170929 04:42:57.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:57.362" starttime="20170929 04:42:57.362"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 04:42:57.377" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170929 04:42:57.378" starttime="20170929 04:42:57.377"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 04:42:57.379" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170929 04:42:57.379" starttime="20170929 04:42:57.379"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:42:57.380" level="INFO">${logpath} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170929 04:42:57.380" starttime="20170929 04:42:57.379"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:57.381" starttime="20170929 04:42:57.381"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:42:57.382" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:42:57.382" starttime="20170929 04:42:57.381"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:42:57.423" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:42:57.423" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170929 04:42:57.490" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:42:57.490" starttime="20170929 04:42:57.400"></status>
</kw>
<msg timestamp="20170929 04:42:57.490" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:57.490" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170929 04:42:57.490" starttime="20170929 04:42:57.382"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:42:57.491" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170929 04:42:57.491" starttime="20170929 04:42:57.491"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:42:57.492" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:42:57.492" starttime="20170929 04:42:57.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:57.499" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:57.499" starttime="20170929 04:42:57.499"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:57.499" starttime="20170929 04:42:57.498"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:57.499" starttime="20170929 04:42:57.492"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:57.500" starttime="20170929 04:42:57.380"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:57.500" starttime="20170929 04:42:57.379"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:42:57.500" level="INFO">${logpath} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170929 04:42:57.500" starttime="20170929 04:42:57.500"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:57.502" starttime="20170929 04:42:57.501"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:42:57.503" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:42:57.503" starttime="20170929 04:42:57.502"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:42:57.544" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:42:57.544" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170929 04:42:58.075" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:42:58.075" starttime="20170929 04:42:57.521"></status>
</kw>
<msg timestamp="20170929 04:42:58.075" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:42:58.076" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 29 04:16 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 29 04:16 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170929 04:42:58.076" starttime="20170929 04:42:57.503"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:42:58.077" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 29 04:16 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 29 04:16 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170929 04:42:58.077" starttime="20170929 04:42:58.077"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:42:58.078" level="INFO">${stderr} = ls: /proc/2627/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170929 04:42:58.078" starttime="20170929 04:42:58.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:42:58.086" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:42:58.086" starttime="20170929 04:42:58.086"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:58.086" starttime="20170929 04:42:58.084"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:58.086" starttime="20170929 04:42:58.078"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:58.087" starttime="20170929 04:42:57.501"></status>
</kw>
<status status="PASS" endtime="20170929 04:42:58.087" starttime="20170929 04:42:57.500"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:42:58.087" level="INFO">${logpath} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170929 04:42:58.087" starttime="20170929 04:42:58.087"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:42:58.089" starttime="20170929 04:42:58.088"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:42:58.090" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:42:58.090" starttime="20170929 04:42:58.089"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:42:58.130" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:42:58.131" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170929 04:43:01.096" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:43:01.097" starttime="20170929 04:42:58.107"></status>
</kw>
<msg timestamp="20170929 04:43:01.097" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:43:01.101" level="INFO">${ret_values} = (u'-- Logs begin at Fri 2017-09-29 02:57:15 UTC, end at Fri 2017-09-29 04:43:11 UTC. --\nSep 29 02:57:15 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 29 02:57:15 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170929 04:43:01.101" starttime="20170929 04:42:58.090"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:43:01.103" level="INFO">${stdout} = -- Logs begin at Fri 2017-09-29 02:57:15 UTC, end at Fri 2017-09-29 04:43:11 UTC. --
Sep 29 02:57:15 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 29 02:57:15 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170929 04:43:01.103" starttime="20170929 04:43:01.102"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:43:01.104" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:43:01.104" starttime="20170929 04:43:01.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:43:01.117" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:43:01.118" starttime="20170929 04:43:01.116"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:01.118" starttime="20170929 04:43:01.114"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:01.118" starttime="20170929 04:43:01.105"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:01.118" starttime="20170929 04:42:58.088"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:01.118" starttime="20170929 04:42:58.087"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:43:01.119" level="INFO">${logpath} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170929 04:43:01.119" starttime="20170929 04:43:01.118"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:01.120" starttime="20170929 04:43:01.120"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:43:01.121" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:43:01.121" starttime="20170929 04:43:01.121"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:43:01.163" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:43:01.164" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170929 04:43:10.083" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:43:10.087" starttime="20170929 04:43:01.139"></status>
</kw>
<msg timestamp="20170929 04:43:10.088" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:43:10.135" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=d2c64ceeab0e430c98e859a3354d4903;i=1;b=c02272132b2942b9afe6a319be6ac9b0;m=146264b;t=55a4b2eacd66e;x=a24c44e68fdb7bf3",\n\t"__REALTIME_TIMESTAMP" : "1506653835679342",\n\t"__MON...</msg>
<status status="PASS" endtime="20170929 04:43:10.135" starttime="20170929 04:43:01.121"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:43:10.146" level="INFO">${stdout} = {
	"__CURSOR" : "s=d2c64ceeab0e430c98e859a3354d4903;i=1;b=c02272132b2942b9afe6a319be6ac9b0;m=146264b;t=55a4b2eacd66e;x=a24c44e68fdb7bf3",
	"__REALTIME_TIMESTAMP" : "1506653835679342",
	"__MONOTONIC_TI...</msg>
<status status="PASS" endtime="20170929 04:43:10.146" starttime="20170929 04:43:10.136"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:43:10.147" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:43:10.147" starttime="20170929 04:43:10.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:43:10.176" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:43:10.176" starttime="20170929 04:43:10.167"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.176" starttime="20170929 04:43:10.155"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.176" starttime="20170929 04:43:10.147"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.176" starttime="20170929 04:43:01.119"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.176" starttime="20170929 04:43:01.118"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:43:10.177" level="INFO">${logpath} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170929 04:43:10.177" starttime="20170929 04:43:10.177"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:10.178" starttime="20170929 04:43:10.178"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:43:10.179" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:43:10.179" starttime="20170929 04:43:10.179"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:43:10.221" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:43:10.222" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170929 04:43:10.279" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:43:10.279" starttime="20170929 04:43:10.197"></status>
</kw>
<msg timestamp="20170929 04:43:10.280" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:43:10.280" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          220864 kB\nMemAvailable:     323024 kB\nBuffers:           31696 kB\nCached:            81064 kB\nSwapCached:            0 kB\nActive:           16103...</msg>
<status status="PASS" endtime="20170929 04:43:10.280" starttime="20170929 04:43:10.180"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:43:10.280" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          220864 kB
MemAvailable:     323024 kB
Buffers:           31696 kB
Cached:            81064 kB
SwapCached:            0 kB
Active:           161032 kB
Inac...</msg>
<status status="PASS" endtime="20170929 04:43:10.281" starttime="20170929 04:43:10.280"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:43:10.281" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:43:10.281" starttime="20170929 04:43:10.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:43:10.292" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:43:10.292" starttime="20170929 04:43:10.291"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.292" starttime="20170929 04:43:10.290"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.292" starttime="20170929 04:43:10.281"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.292" starttime="20170929 04:43:10.177"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.292" starttime="20170929 04:43:10.176"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:43:10.293" level="INFO">${logpath} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170929 04:43:10.293" starttime="20170929 04:43:10.292"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:10.294" starttime="20170929 04:43:10.294"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:43:10.295" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:43:10.295" starttime="20170929 04:43:10.294"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:43:10.335" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:43:10.336" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170929 04:43:10.735" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:43:10.735" starttime="20170929 04:43:10.313"></status>
</kw>
<msg timestamp="20170929 04:43:10.735" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:43:10.736" level="INFO">${ret_values} = (u'Mem: 211380K used, 220864K free, 8944K shrd, 31696K buff, 81064K cached\nCPU:   5% usr  10% sys   0% nic  84% idle   0% io   0% irq   0% sirq\nLoad average: 0.96 0.45 0.32 1/154 2631\n  PID  PPID U...</msg>
<status status="PASS" endtime="20170929 04:43:10.736" starttime="20170929 04:43:10.295"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:43:10.736" level="INFO">${stdout} = Mem: 211380K used, 220864K free, 8944K shrd, 31696K buff, 81064K cached
CPU:   5% usr  10% sys   0% nic  84% idle   0% io   0% irq   0% sirq
Load average: 0.96 0.45 0.32 1/154 2631
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20170929 04:43:10.736" starttime="20170929 04:43:10.736"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:43:10.737" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:43:10.737" starttime="20170929 04:43:10.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:43:10.744" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:43:10.744" starttime="20170929 04:43:10.744"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.745" starttime="20170929 04:43:10.743"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.745" starttime="20170929 04:43:10.737"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.745" starttime="20170929 04:43:10.293"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.745" starttime="20170929 04:43:10.292"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:43:10.746" level="INFO">${logpath} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170929 04:43:10.746" starttime="20170929 04:43:10.745"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:10.747" starttime="20170929 04:43:10.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:43:10.748" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:43:10.748" starttime="20170929 04:43:10.747"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:43:10.788" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:43:10.789" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170929 04:43:10.849" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:43:10.849" starttime="20170929 04:43:10.765"></status>
</kw>
<msg timestamp="20170929 04:43:10.850" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:43:10.850" level="INFO">${ret_values} = (u'[    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A\n[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16...</msg>
<status status="PASS" endtime="20170929 04:43:10.850" starttime="20170929 04:43:10.748"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:43:10.850" level="INFO">${stdout} = [    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A
[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16550A...</msg>
<status status="PASS" endtime="20170929 04:43:10.851" starttime="20170929 04:43:10.850"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:43:10.851" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:43:10.851" starttime="20170929 04:43:10.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:43:10.858" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/20170929044246584874_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:43:10.859" starttime="20170929 04:43:10.858"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.859" starttime="20170929 04:43:10.857"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.859" starttime="20170929 04:43:10.851"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.859" starttime="20170929 04:43:10.746"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.859" starttime="20170929 04:43:10.745"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.859" starttime="20170929 04:42:57.379"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.859" starttime="20170929 04:42:57.378"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.859" starttime="20170929 04:42:57.378"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.859" starttime="20170929 04:42:57.378"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.859" starttime="20170929 04:42:57.376"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.859" starttime="20170929 04:42:57.363"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.859" starttime="20170929 04:42:57.360"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:10.859" starttime="20170929 04:42:57.360"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:10.861" starttime="20170929 04:43:10.861"></status>
</kw>
<msg timestamp="20170929 04:43:10.861" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:43:10.862" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:43:10.862" starttime="20170929 04:43:10.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:10.862" starttime="20170929 04:43:10.862"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:43:10.879" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:43:10.879" starttime="20170929 04:43:10.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:43:10.880" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:43:10.880" starttime="20170929 04:43:10.880"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:43:10.881" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:43:10.881" starttime="20170929 04:43:10.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:43:10.881" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:43:10.881" starttime="20170929 04:43:10.881"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.069" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:43:11.069" starttime="20170929 04:43:10.882"></status>
</kw>
<msg timestamp="20170929 04:43:11.069" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:43:11.069" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:43:11.069" starttime="20170929 04:43:10.882"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.070" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:43:11.070" starttime="20170929 04:43:11.069"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.070" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:43:11.071" starttime="20170929 04:43:11.070"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.071" starttime="20170929 04:43:10.878"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.071" starttime="20170929 04:43:10.877"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.071" starttime="20170929 04:43:10.877"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:43:11.071" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170929 04:43:11.071" starttime="20170929 04:43:11.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:11.072" starttime="20170929 04:43:11.072"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:43:11.118" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:43:11.118" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:43:11.118" starttime="20170929 04:43:11.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:11.119" starttime="20170929 04:43:11.119"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:43:11.120" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:43:11.120" starttime="20170929 04:43:11.119"></status>
</kw>
<msg timestamp="20170929 04:43:11.120" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:43:11.120" starttime="20170929 04:43:10.876"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.121" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170929 04:43:11.121" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170929 04:43:11.121" starttime="20170929 04:43:11.121"></status>
</kw>
<msg timestamp="20170929 04:43:11.121" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170929 04:43:11.121" starttime="20170929 04:43:11.120"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170929 04:43:11.122" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 04:43:11.122" starttime="20170929 04:43:11.122"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.122" starttime="20170929 04:43:10.875"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.122" starttime="20170929 04:43:10.862"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.122" starttime="20170929 04:43:10.860"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.122" starttime="20170929 04:43:10.860"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:11.124" starttime="20170929 04:43:11.124"></status>
</kw>
<msg timestamp="20170929 04:43:11.124" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:43:11.125" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:43:11.125" starttime="20170929 04:43:11.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:11.125" starttime="20170929 04:43:11.125"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170929 04:43:11.140" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 04:43:11.140" starttime="20170929 04:43:11.139"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.140" starttime="20170929 04:43:11.138"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.140" starttime="20170929 04:43:11.126"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.140" starttime="20170929 04:43:11.123"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.140" starttime="20170929 04:43:11.123"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.140" starttime="20170929 04:42:47.612"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.141" starttime="20170929 04:42:47.610"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.141" starttime="20170929 04:42:47.610"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.141" starttime="20170929 04:42:47.610"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170929 04:43:11.147" starttime="20170929 04:43:11.147"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.148" starttime="20170929 04:43:11.141"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.148" starttime="20170929 04:42:47.609"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.148" starttime="20170929 04:42:43.548"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.148" starttime="20170929 04:42:43.547"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170929 04:43:11.149" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170929 04:43:11.149" starttime="20170929 04:43:11.149"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170929 04:43:11.150" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170929044246584874_BmcCodeUpdate/20170929044246584874_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20170929 04:43:11.150" starttime="20170929 04:43:11.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:11.151" starttime="20170929 04:43:11.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:11.152" starttime="20170929 04:43:11.151"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.152" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170929 04:43:11.152" starttime="20170929 04:43:11.152"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.154" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170929 04:43:11.154" starttime="20170929 04:43:11.153"></status>
</kw>
<msg timestamp="20170929 04:43:11.154" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170929 04:43:11.154" starttime="20170929 04:43:11.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.155" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:43:11.155" starttime="20170929 04:43:11.155"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.155" starttime="20170929 04:43:11.154"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:11.156" starttime="20170929 04:43:11.155"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 04:43:11.157" level="INFO">${cur_time} = 2017-09-29 04:43:11:157026</msg>
<status status="PASS" endtime="20170929 04:43:11.157" starttime="20170929 04:43:11.157"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 04:43:11.158" level="INFO">${cur_time} = 20170929044311157026</msg>
<status status="PASS" endtime="20170929 04:43:11.158" starttime="20170929 04:43:11.158"></status>
</kw>
<msg timestamp="20170929 04:43:11.158" level="INFO">${cur_time} = 20170929044311157026</msg>
<status status="PASS" endtime="20170929 04:43:11.158" starttime="20170929 04:43:11.156"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.159" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:43:11.159" starttime="20170929 04:43:11.158"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.159" starttime="20170929 04:43:11.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:43:11.163" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:43:11.164" starttime="20170929 04:43:11.163"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:43:11.165" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:43:11.165" starttime="20170929 04:43:11.165"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:43:11.166" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:43:11.166" starttime="20170929 04:43:11.165"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:43:11.166" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:43:11.166" starttime="20170929 04:43:11.166"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.348" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:43:11.348" starttime="20170929 04:43:11.167"></status>
</kw>
<msg timestamp="20170929 04:43:11.348" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:43:11.349" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:43:11.349" starttime="20170929 04:43:11.167"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.349" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:43:11.349" starttime="20170929 04:43:11.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.350" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:43:11.350" starttime="20170929 04:43:11.350"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.350" starttime="20170929 04:43:11.163"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.350" starttime="20170929 04:43:11.162"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.351" starttime="20170929 04:43:11.161"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:43:11.351" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170929 04:43:11.351" starttime="20170929 04:43:11.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:11.352" starttime="20170929 04:43:11.352"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:43:11.395" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170929 04:43:11.396" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:43:11.396" starttime="20170929 04:43:11.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:11.396" starttime="20170929 04:43:11.396"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:43:11.397" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:43:11.397" starttime="20170929 04:43:11.397"></status>
</kw>
<msg timestamp="20170929 04:43:11.397" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:43:11.397" starttime="20170929 04:43:11.161"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.398" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 04:43:11.398" starttime="20170929 04:43:11.397"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.398" starttime="20170929 04:43:11.160"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:43:11.401" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:43:11.402" starttime="20170929 04:43:11.401"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:43:11.402" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:43:11.402" starttime="20170929 04:43:11.402"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:43:11.403" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:43:11.403" starttime="20170929 04:43:11.403"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:43:11.404" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:43:11.404" starttime="20170929 04:43:11.403"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.640" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:43:11.640" starttime="20170929 04:43:11.405"></status>
</kw>
<msg timestamp="20170929 04:43:11.641" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:43:11.641" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:43:11.641" starttime="20170929 04:43:11.404"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.641" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:43:11.642" starttime="20170929 04:43:11.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.642" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:43:11.642" starttime="20170929 04:43:11.642"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.643" starttime="20170929 04:43:11.400"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.643" starttime="20170929 04:43:11.400"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.643" starttime="20170929 04:43:11.399"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:43:11.643" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170929 04:43:11.643" starttime="20170929 04:43:11.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:11.644" starttime="20170929 04:43:11.644"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:43:11.706" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170929 04:43:11.706" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:43:11.706" starttime="20170929 04:43:11.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:11.707" starttime="20170929 04:43:11.706"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:43:11.707" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:43:11.707" starttime="20170929 04:43:11.707"></status>
</kw>
<msg timestamp="20170929 04:43:11.707" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:43:11.707" starttime="20170929 04:43:11.399"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170929 04:43:11.708" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 04:43:11.708" starttime="20170929 04:43:11.708"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.708" starttime="20170929 04:43:11.398"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.709" starttime="20170929 04:43:11.160"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.709" starttime="20170929 04:43:11.159"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.709" starttime="20170929 04:42:43.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20170929 04:43:11.709" starttime="20170929 04:43:11.709"></status>
</kw>
<status status="PASS" endtime="20170929 04:43:11.709" starttime="20170929 04:42:43.546"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170929 04:43:11.710" critical="yes" starttime="20170929 04:42:22.277">SSLError: ('The write operation timed out',)</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20170929 04:43:11.711" starttime="20170929 04:42:21.303"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
